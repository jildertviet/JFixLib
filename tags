!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jildert/JFixLib/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
**ESP32** Display Controller (VGA, Color NTSC/PAL Composite, I2C and SPI displays), PS/2 Mouse and Keyboard Controller, Graphics Library, Sound Engine, Graphical User Interface (GUI), Game/Emulation Engine and ANSI/VT Terminal	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### **ESP32** Display Controller (VGA, Color NTSC\/PAL Composite, I2C and SPI displays), PS\/2 M/;"	S	chapter:FabGL
0	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^    ".devcontainer",$/;"	s	array:exclude
0	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^    {$/;"	o	array:authors
0	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "frameworks": ["espidf", "arduino"],$/;"	s	array:frameworks
0	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "+<*.c>",$/;"	s	array:build.srcFilter
0	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "docs",$/;"	s	array:export.exclude
0	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^        {$/;"	o	array:authors
1	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^    ".github",$/;"	s	array:exclude
1	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "frameworks": ["espidf", "arduino"],$/;"	s	array:frameworks
1	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "+<*.cpp>",$/;"	s	array:build.srcFilter
1	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "extras"$/;"	s	array:export.exclude
1	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^        {$/;"	o	array:authors
1. Correction	examples/test/.pio/libdeps/esp32dev/FastLED/code_of_conduct.md	/^### 1. Correction$/;"	S	section:Contributor Covenant Code of Conduct""Enforcement Guidelines
2	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^    "extras"$/;"	s	array:exclude
2	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "+<*.h>",$/;"	s	array:build.srcFilter
2	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^        {$/;"	o	array:authors
2. Warning	examples/test/.pio/libdeps/esp32dev/FastLED/code_of_conduct.md	/^### 2. Warning$/;"	S	section:Contributor Covenant Code of Conduct""Enforcement Guidelines
3	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "+<platforms\/esp\/32\/*.cpp>"$/;"	s	array:build.srcFilter
3	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^        {$/;"	o	array:authors
3. Temporary Ban	examples/test/.pio/libdeps/esp32dev/FastLED/code_of_conduct.md	/^### 3. Temporary Ban$/;"	S	section:Contributor Covenant Code of Conduct""Enforcement Guidelines
4	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^        {$/;"	o	array:authors
4. Permanent Ban	examples/test/.pio/libdeps/esp32dev/FastLED/code_of_conduct.md	/^### 4. Permanent Ban$/;"	S	section:Contributor Covenant Code of Conduct""Enforcement Guidelines
A	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t A : 2;  \/**< The Alpha channel (MSB) *\/$/;"	m	struct:fabgl::RGBA2222	typeref:typename:uint8_t:2
A	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t A;  \/**< The Alpha channel *\/$/;"	m	struct:fabgl::RGBA8888	typeref:typename:uint8_t
A	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define A /;"	d	file:
A	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define A /;"	d	file:
AAA_AAS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static int32_t AAA_AAS()$/;"	f	namespace:fabgl	typeref:typename:int32_t	file:
ABS8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define ABS8_C /;"	d
ACTIVE	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    ACTIVE$/;"	e	enum:JEnvState
ADC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define ADC(/;"	d	file:
ADC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define ADC(/;"	d	file:
ADC1_GPIO2Channel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^adc1_channel_t ADC1_GPIO2Channel(gpio_num_t gpio)$/;"	f	namespace:fabgl	typeref:typename:adc1_channel_t
ADCSBC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  typedef void (MOS6502::*ADCSBC)(uint8_t);$/;"	t	class:fabgl::MOS6502	typeref:typename:void (MOS6502::*)(uint8_t)
ADCVOLTS_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^static const char ADCVOLTS_BAS[] =    "1 PRINT \\"Sets GPIO-36 as analog input and prints its va/;"	v	typeref:typename:const char[]
ADCVOLTS_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char ADCVOLTS_BAS[] =    "1 PRINT \\"Sets GPIO-36 as analog input and prints its va/;"	v	typeref:typename:const char[]
ADC_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^static const char ADC_BAS[] =         "1 PRINT \\"Sets GPIO-36 as analog input and draws its val/;"	v	typeref:typename:const char[]
ADC_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char ADC_BAS[] =         "1 PRINT \\"Sets GPIO-36 as analog input and draws its val/;"	v	typeref:typename:const char[]
ADC_HL_RR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  ADC_HL_RR,$/;"	e	enum:fabgl::__anonfeda45510103	file:
ADC_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  ADC_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
ADC_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  ADC_N,$/;"	e	enum:fabgl::__anonfeda45510103	file:
ADC_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  ADC_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
ADD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define ADD(/;"	d	file:
ADD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define ADD(/;"	d	file:
ADD8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define ADD8_C /;"	d
ADDDE1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define ADDDE1(/;"	d
ADD_HL_RR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  ADD_HL_RR,$/;"	e	enum:fabgl::__anonfeda45510103	file:
ADD_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  ADD_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
ADD_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  ADD_N,$/;"	e	enum:fabgl::__anonfeda45510103	file:
ADD_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  ADD_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
ADJ	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^#define ADJ /;"	d
ADJDITHER2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define ADJDITHER2(/;"	d
ADJDITHER7	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define ADJDITHER7(/;"	d
ADM31	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  ADM31,          \/**< Emulated Lear Siegler ADM-31 terminal *\/$/;"	e	enum:fabgl::TermType
ADM3A	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  ADM3A,          \/**< Emulated Lear Siegler ADM-3A terminal *\/$/;"	e	enum:fabgl::TermType
ADR_ABS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_ABS /;"	d	file:
ADR_ABSX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_ABSX /;"	d	file:
ADR_ABSX_GETADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_ABSX_GETADDR /;"	d	file:
ADR_ABSY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_ABSY /;"	d	file:
ADR_ABSY_GETADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_ABSY_GETADDR /;"	d	file:
ADR_ABS_GETADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_ABS_GETADDR /;"	d	file:
ADR_IIND	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_IIND /;"	d	file:
ADR_IIND_GETADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_IIND_GETADDR /;"	d	file:
ADR_IMM	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_IMM /;"	d	file:
ADR_IND	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_IND /;"	d	file:
ADR_INDI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_INDI /;"	d	file:
ADR_INDI_GETADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_INDI_GETADDR /;"	d	file:
ADR_REL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_REL /;"	d	file:
ADR_ZABS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_ZABS /;"	d	file:
ADR_ZABSX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_ZABSX /;"	d	file:
ADR_ZABSX_GETADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_ZABSX_GETADDR /;"	d	file:
ADR_ZABSY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_ZABSY /;"	d	file:
ADR_ZABSY_GETADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_ZABSY_GETADDR /;"	d	file:
ADR_ZABS_GETADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define ADR_ZABS_GETADDR /;"	d	file:
AF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define AF /;"	d	file:
AF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define AF /;"	d	file:
AF_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define AF_ADDR /;"	d	file:
AH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint8_t i8086::AH()$/;"	f	class:fabgl::i8086	typeref:typename:uint8_t
AL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint8_t i8086::AL()$/;"	f	class:fabgl::i8086	typeref:typename:uint8_t
ALU_SEL_STAGE_DEC	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define ALU_SEL_STAGE_DEC /;"	d
ALU_SEL_STAGE_INC	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define ALU_SEL_STAGE_INC /;"	d
ALU_SEL_STAGE_RST	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define ALU_SEL_STAGE_RST /;"	d
ALV	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint16_t ALV;$/;"	m	struct:DiscParameterHeader	typeref:typename:uint16_t
ANA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define ANA(/;"	d	file:
AND	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define AND(/;"	d	file:
AND_CONDITION_TABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^static const int AND_CONDITION_TABLE[8] = {$/;"	v	namespace:fabgl	typeref:typename:const int[8]	file:
AND_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  AND_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
AND_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  AND_N,$/;"	e	enum:fabgl::__anonfeda45510103	file:
AND_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  AND_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
ANSICtrlCode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  const char * ANSICtrlCode;   \/\/ output ANSI control code$/;"	m	struct:fabgl::TermInfoKbdConv	typeref:typename:const char *
ANSIDecodeVirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::ANSIDecodeVirtualKey(VirtualKeyItem const & item)$/;"	f	class:fabgl::Terminal	typeref:typename:void
ANSILegacy	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  ANSILegacy      \/**< Legacy ANSI emulation *\/$/;"	e	enum:fabgl::TermType
ANSIMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         ANSIMode;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
ANSI_VT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  ANSI_VT,        \/**< Native ANSI\/VT terminal *\/$/;"	e	enum:fabgl::TermType
APA102	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	APA102,   \/\/\/< APA102 LED chipset$/;"	e	enum:ESPIChipsets
APA102Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	APA102Controller() {}$/;"	f	class:APA102Controller
APA102Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class APA102Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
APA104	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class APA104 : public WS2811Controller800Khz<DATA_P/;"	c
APA106	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class APA106 : public SK6822Controller<DATA_PIN, RG/;"	c
APLLCalcParams	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void APLLCalcParams(double freq, APLLParams * params, uint8_t * a, uint8_t * b, double * out_fre/;"	f	namespace:fabgl	typeref:typename:void
APLLParams	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct APLLParams {$/;"	s	namespace:fabgl
APOLLO3HardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	APOLLO3HardwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:APOLLO3HardwareSPIOutput
APOLLO3HardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	APOLLO3HardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:APOLLO3HardwareSPIOutput
APOLLO3HardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^class APOLLO3HardwareSPIOutput {$/;"	c
APPLY_DIMMING	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^#define APPLY_DIMMING(/;"	d	file:
APPLY_FASTLED_RAND16_2053	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^#define APPLY_FASTLED_RAND16_2053(/;"	d
ARCH_INDEPENDENT	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/CMakeLists.txt	/^	set(ARCH_INDEPENDENT "ARCH_INDEPENDENT")$/;"	v
ARDUINOJSON_ASSERT	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/assert.hpp	/^#  define ARDUINOJSON_ASSERT(/;"	d
ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/JsonInteger.hpp	/^#define ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(/;"	d
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Namespace.hpp	/^#define ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE /;"	d
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Namespace.hpp	/^#define ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE /;"	d
ARDUINOJSON_BIN2ALPHA	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA(/;"	d
ARDUINOJSON_BIN2ALPHA_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_(/;"	d
ARDUINOJSON_BIN2ALPHA_0000	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_0000(/;"	d
ARDUINOJSON_BIN2ALPHA_0001	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_0001(/;"	d
ARDUINOJSON_BIN2ALPHA_0010	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_0010(/;"	d
ARDUINOJSON_BIN2ALPHA_0011	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_0011(/;"	d
ARDUINOJSON_BIN2ALPHA_0100	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_0100(/;"	d
ARDUINOJSON_BIN2ALPHA_0101	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_0101(/;"	d
ARDUINOJSON_BIN2ALPHA_0110	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_0110(/;"	d
ARDUINOJSON_BIN2ALPHA_0111	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_0111(/;"	d
ARDUINOJSON_BIN2ALPHA_1000	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_1000(/;"	d
ARDUINOJSON_BIN2ALPHA_1001	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_1001(/;"	d
ARDUINOJSON_BIN2ALPHA_1010	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_1010(/;"	d
ARDUINOJSON_BIN2ALPHA_1011	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_1011(/;"	d
ARDUINOJSON_BIN2ALPHA_1100	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_1100(/;"	d
ARDUINOJSON_BIN2ALPHA_1101	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_1101(/;"	d
ARDUINOJSON_BIN2ALPHA_1110	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_1110(/;"	d
ARDUINOJSON_BIN2ALPHA_1111	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_BIN2ALPHA_1111(/;"	d
ARDUINOJSON_COMPILE_ERROR	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/compatibility.hpp	/^#define ARDUINOJSON_COMPILE_ERROR(/;"	d
ARDUINOJSON_CONCAT2	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_CONCAT2(/;"	d
ARDUINOJSON_CONCAT4	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_CONCAT4(/;"	d
ARDUINOJSON_CONCAT_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/preprocessor.hpp	/^#define ARDUINOJSON_CONCAT_(/;"	d
ARDUINOJSON_DEBUG	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#    define ARDUINOJSON_DEBUG /;"	d
ARDUINOJSON_DECODE_UNICODE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#  define ARDUINOJSON_DECODE_UNICODE /;"	d
ARDUINOJSON_DEFAULT_NESTING_LIMIT	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#  define ARDUINOJSON_DEFAULT_NESTING_LIMIT /;"	d
ARDUINOJSON_DEFINE_PROGMEM_ARRAY	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace_generic.hpp	/^#    define ARDUINOJSON_DEFINE_PROGMEM_ARRAY(/;"	d
ARDUINOJSON_DEPRECATION_ERROR	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/compatibility.hpp	/^#define ARDUINOJSON_DEPRECATION_ERROR(/;"	d
ARDUINOJSON_ENABLE_ALIGNMENT	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#    define ARDUINOJSON_ENABLE_ALIGNMENT /;"	d
ARDUINOJSON_ENABLE_ARDUINO_PRINT	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#    define ARDUINOJSON_ENABLE_ARDUINO_PRINT /;"	d
ARDUINOJSON_ENABLE_ARDUINO_STREAM	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#    define ARDUINOJSON_ENABLE_ARDUINO_STREAM /;"	d
ARDUINOJSON_ENABLE_ARDUINO_STRING	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#    define ARDUINOJSON_ENABLE_ARDUINO_STRING /;"	d
ARDUINOJSON_ENABLE_COMMENTS	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#  define ARDUINOJSON_ENABLE_COMMENTS /;"	d
ARDUINOJSON_ENABLE_INFINITY	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#  define ARDUINOJSON_ENABLE_INFINITY /;"	d
ARDUINOJSON_ENABLE_NAN	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#  define ARDUINOJSON_ENABLE_NAN /;"	d
ARDUINOJSON_ENABLE_PROGMEM	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#      define ARDUINOJSON_ENABLE_PROGMEM /;"	d
ARDUINOJSON_ENABLE_PROGMEM	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#    define ARDUINOJSON_ENABLE_PROGMEM /;"	d
ARDUINOJSON_ENABLE_STD_STREAM	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#      define ARDUINOJSON_ENABLE_STD_STREAM /;"	d
ARDUINOJSON_ENABLE_STD_STRING	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#      define ARDUINOJSON_ENABLE_STD_STRING /;"	d
ARDUINOJSON_ENABLE_STRING_DEDUPLICATION	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#  define ARDUINOJSON_ENABLE_STRING_DEDUPLICATION /;"	d
ARDUINOJSON_ENABLE_STRING_VIEW	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#      define ARDUINOJSON_ENABLE_STRING_VIEW /;"	d
ARDUINOJSON_ENABLE_STRING_VIEW	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#    define ARDUINOJSON_ENABLE_STRING_VIEW /;"	d
ARDUINOJSON_END_PRIVATE_NAMESPACE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Namespace.hpp	/^#define ARDUINOJSON_END_PRIVATE_NAMESPACE /;"	d
ARDUINOJSON_END_PUBLIC_NAMESPACE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Namespace.hpp	/^#define ARDUINOJSON_END_PUBLIC_NAMESPACE /;"	d
ARDUINOJSON_LITTLE_ENDIAN	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#    define ARDUINOJSON_LITTLE_ENDIAN /;"	d
ARDUINOJSON_NAMESPACE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/compatibility.hpp	/^#define ARDUINOJSON_NAMESPACE /;"	d
ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#  define ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD /;"	d
ARDUINOJSON_NO_SANITIZE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/attributes.hpp	/^#    define ARDUINOJSON_NO_SANITIZE(/;"	d
ARDUINOJSON_NO_SANITIZE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/attributes.hpp	/^#  define ARDUINOJSON_NO_SANITIZE(/;"	d
ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#  define ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD /;"	d
ARDUINOJSON_PRAGMA	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/compatibility.hpp	/^#define ARDUINOJSON_PRAGMA(/;"	d
ARDUINOJSON_SLOT_OFFSET_SIZE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#    define ARDUINOJSON_SLOT_OFFSET_SIZE /;"	d
ARDUINOJSON_STRINGIFY	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/compatibility.hpp	/^#define ARDUINOJSON_STRINGIFY(/;"	d
ARDUINOJSON_STRING_BUFFER_SIZE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#  define ARDUINOJSON_STRING_BUFFER_SIZE /;"	d
ARDUINOJSON_TAB	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#  define ARDUINOJSON_TAB /;"	d
ARDUINOJSON_USE_DOUBLE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#  define ARDUINOJSON_USE_DOUBLE /;"	d
ARDUINOJSON_USE_LONG_LONG	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#    define ARDUINOJSON_USE_LONG_LONG /;"	d
ARDUINOJSON_USE_LONG_LONG	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Configuration.hpp	/^#  define ARDUINOJSON_USE_LONG_LONG /;"	d
ARDUINOJSON_VERSION	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/version.hpp	/^#define ARDUINOJSON_VERSION /;"	d
ARDUINOJSON_VERSION_MACRO	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/version.hpp	/^#define ARDUINOJSON_VERSION_MACRO /;"	d
ARDUINOJSON_VERSION_MAJOR	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/version.hpp	/^#define ARDUINOJSON_VERSION_MAJOR /;"	d
ARDUINOJSON_VERSION_MINOR	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/version.hpp	/^#define ARDUINOJSON_VERSION_MINOR /;"	d
ARDUINOJSON_VERSION_NAMESPACE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Namespace.hpp	/^#  define ARDUINOJSON_VERSION_NAMESPACE /;"	d
ARDUINOJSON_VERSION_REVISION	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/version.hpp	/^#define ARDUINOJSON_VERSION_REVISION /;"	d
ARDUINO_RUNNING_CORE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^#define ARDUINO_RUNNING_CORE /;"	d
ARDUINO_RUNNING_CORE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^#define ARDUINO_RUNNING_CORE /;"	d
ARMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	ARMHardwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:ARMHardwareSPIOutput
ARMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	ARMHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ARMHardwareSPIOutput
ARMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^class ARMHardwareSPIOutput {$/;"	c
ARMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	ARMHardwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:ARMHardwareSPIOutput
ARMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	ARMHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ARMHardwareSPIOutput
ARMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^class ARMHardwareSPIOutput {$/;"	c
ARMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  ARMHardwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:ARMHardwareSPIOutput
ARMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  ARMHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ARMHardwareSPIOutput
ARMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^class ARMHardwareSPIOutput {$/;"	c
ARM_DEMCR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^#define ARM_DEMCR /;"	d
ARM_DEMCR_TRCENA	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^#define ARM_DEMCR_TRCENA /;"	d
ARM_DWT_CTRL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^#define ARM_DWT_CTRL /;"	d
ARM_DWT_CTRL_CYCCNTENA	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^#define ARM_DWT_CTRL_CYCCNTENA /;"	d
ARM_DWT_CYCCNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^#define ARM_DWT_CYCCNT /;"	d
ARM_HARDWARE_SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^#define ARM_HARDWARE_SPI$/;"	d
ASCII	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.h	/^  uint8_t    ASCII;$/;"	m	struct:fabgl::VirtualKeyToASCII	typeref:typename:uint8_t
ASCII	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t    ASCII;      \/**< ASCII value (when applicable) *\/$/;"	m	struct:fabgl::uiKeyEventInfo	typeref:typename:uint8_t
ASCII	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t    ASCII;           \/**< ASCII value (0 = if it isn't possible to translate from virt/;"	m	struct:fabgl::VirtualKeyItem	typeref:typename:uint8_t
ASCII2PET	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void ASCII2PET(char * str)$/;"	f	typeref:typename:void
ASCII_ACK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_ACK /;"	d
ASCII_BEL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define ASCII_BEL /;"	d
ASCII_BEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_BEL /;"	d
ASCII_BS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_BS /;"	d
ASCII_CAN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CAN /;"	d
ASCII_CR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define ASCII_CR /;"	d
ASCII_CR	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CR /;"	d
ASCII_CTRLA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLA /;"	d
ASCII_CTRLB	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLB /;"	d
ASCII_CTRLC	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define ASCII_CTRLC /;"	d
ASCII_CTRLC	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLC /;"	d
ASCII_CTRLD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLD /;"	d
ASCII_CTRLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLE /;"	d
ASCII_CTRLF	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLF /;"	d
ASCII_CTRLG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define ASCII_CTRLG /;"	d
ASCII_CTRLG	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLG /;"	d
ASCII_CTRLH	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLH /;"	d
ASCII_CTRLI	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define ASCII_CTRLI /;"	d
ASCII_CTRLI	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLI /;"	d
ASCII_CTRLJ	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLJ /;"	d
ASCII_CTRLK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLK /;"	d
ASCII_CTRLL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLL /;"	d
ASCII_CTRLM	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLM /;"	d
ASCII_CTRLN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLN /;"	d
ASCII_CTRLO	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLO /;"	d
ASCII_CTRLP	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define ASCII_CTRLP /;"	d
ASCII_CTRLP	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLP /;"	d
ASCII_CTRLQ	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define ASCII_CTRLQ /;"	d
ASCII_CTRLQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLQ /;"	d
ASCII_CTRLR	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLR /;"	d
ASCII_CTRLS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define ASCII_CTRLS /;"	d
ASCII_CTRLS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLS /;"	d
ASCII_CTRLT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLT /;"	d
ASCII_CTRLU	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLU /;"	d
ASCII_CTRLV	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLV /;"	d
ASCII_CTRLW	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLW /;"	d
ASCII_CTRLX	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLX /;"	d
ASCII_CTRLY	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLY /;"	d
ASCII_CTRLZ	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_CTRLZ /;"	d
ASCII_DC1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_DC1 /;"	d
ASCII_DC2	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_DC2 /;"	d
ASCII_DC3	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_DC3 /;"	d
ASCII_DC4	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_DC4 /;"	d
ASCII_DEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_DEL /;"	d
ASCII_DLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_DLE /;"	d
ASCII_EM	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_EM /;"	d
ASCII_ENQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_ENQ /;"	d
ASCII_EOT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_EOT /;"	d
ASCII_ESC	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_ESC /;"	d
ASCII_ETB	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_ETB /;"	d
ASCII_ETX	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_ETX /;"	d
ASCII_FF	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_FF /;"	d
ASCII_FS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_FS /;"	d
ASCII_GS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_GS /;"	d
ASCII_HT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_HT /;"	d
ASCII_LF	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define ASCII_LF /;"	d
ASCII_LF	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_LF /;"	d
ASCII_NAK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_NAK /;"	d
ASCII_NUL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_NUL /;"	d
ASCII_RS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_RS /;"	d
ASCII_SI	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_SI /;"	d
ASCII_SO	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_SO /;"	d
ASCII_SOH	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_SOH /;"	d
ASCII_SPC	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_SPC /;"	d
ASCII_STX	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_STX /;"	d
ASCII_SUB	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_SUB /;"	d
ASCII_SYN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_SYN /;"	d
ASCII_TAB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define ASCII_TAB /;"	d
ASCII_TAB	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_TAB /;"	d
ASCII_US	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_US /;"	d
ASCII_VT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_VT /;"	d
ASCII_XOFF	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_XOFF /;"	d
ASCII_XON	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define ASCII_XON /;"	d
ASM_MEMW	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  #define ASM_MEMW$/;"	d
ASM_NOP	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  #define ASM_NOP$/;"	d
ASM_VARS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define ASM_VARS /;"	d
ASM_VAR_PORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define ASM_VAR_PORT /;"	d
AVG15	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^#define AVG15(/;"	d	file:
AVG15_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define AVG15_C /;"	d
AVG16R_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define AVG16R_C /;"	d
AVG16_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define AVG16_C /;"	d
AVG7_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define AVG7_C /;"	d
AVG8R_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define AVG8R_C /;"	d
AVG8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define AVG8_C /;"	d
AVRHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	AVRHardwareSPIOutput() { m_pSelect = NULL; mWait = false;}$/;"	f	class:AVRHardwareSPIOutput
AVRHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	AVRHardwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:AVRHardwareSPIOutput
AVRHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	AVRHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRHardwareSPIOutput
AVRHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^class AVRHardwareSPIOutput {$/;"	c
AVRSoftwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	AVRSoftwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:AVRSoftwareSPIOutput
AVRSoftwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	AVRSoftwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRSoftwareSPIOutput
AVRSoftwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^class AVRSoftwareSPIOutput {$/;"	c
AVRUSART0SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	AVRUSART0SPIOutput() { m_pSelect = NULL; }$/;"	f	class:AVRUSART0SPIOutput
AVRUSART0SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	AVRUSART0SPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRUSART0SPIOutput
AVRUSART0SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^class AVRUSART0SPIOutput {$/;"	c
AVRUSART1SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	AVRUSART1SPIOutput() { m_pSelect = NULL; }$/;"	f	class:AVRUSART1SPIOutput
AVRUSART1SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	AVRUSART1SPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRUSART1SPIOutput
AVRUSART1SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^class AVRUSART1SPIOutput {$/;"	c
AX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::AX()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
AbortReason	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^enum class AbortReason {$/;"	g
About the game	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/README.md	/^## About the game$/;"	s	chapter:FabGL ClassicRacer
AdaptedString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  typedef FlashString AdaptedString;$/;"	t	struct:SizedStringAdapter	typeref:typename:FlashString
AdaptedString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  typedef FlashString AdaptedString;$/;"	t	struct:StringAdapter	typeref:typename:FlashString
AdaptedString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/JsonString.hpp	/^  typedef JsonStringAdapter AdaptedString;$/;"	t	struct:StringAdapter	typeref:typename:JsonStringAdapter
AdaptedString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  typedef SizedRamString AdaptedString;$/;"	t	struct:SizedStringAdapter	typeref:typename:SizedRamString
AdaptedString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  typedef StaticStringAdapter AdaptedString;$/;"	t	struct:StringAdapter	typeref:typename:StaticStringAdapter
AdaptedString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  typedef ZeroTerminatedRamString AdaptedString;$/;"	t	struct:StringAdapter	typeref:typename:ZeroTerminatedRamString
AdaptedString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/StringObject.hpp	/^  typedef SizedRamString AdaptedString;$/;"	t	struct:StringAdapter	typeref:typename:SizedRamString
Add pin definitions for Teensy++ 2.0	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^# Add pin definitions for Teensy++ 2.0$/;"	c
AddPadding	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/Alignment.hpp	/^struct AddPadding {$/;"	s
AliceBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        AliceBlue=0xF0F8FF,             \/\/\/< @htmlcolorblock{F0F8FF}$/;"	e	enum:CRGB::__anonbcc8608a0c03
AllocatorOwner	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  AllocatorOwner() {}$/;"	f	class:AllocatorOwner
AllocatorOwner	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  AllocatorOwner(TAllocator a) : allocator_(a) {}$/;"	f	class:AllocatorOwner
AllocatorOwner	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^class AllocatorOwner {$/;"	c
AllowAllFilter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^struct AllowAllFilter {$/;"	s	namespace:detail
AltVirtualKeyDef	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^struct AltVirtualKeyDef {$/;"	s	namespace:fabgl
Altair 8800 emulator - CP/M text games (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Altair 8800 emulator - CP\/M text games (click for video):$/;"	S	chapter:FabGL
Altair88DiskBootROM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^const uint8_t Altair88DiskBootROM[256] = {$/;"	v	typeref:typename:const uint8_t[256]
Altair88DiskBootROMAddr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^const int Altair88DiskBootROMAddr = 0xFF00;$/;"	v	typeref:typename:const int
Altair88DiskBootROMRun	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^const int Altair88DiskBootROMRun  = 0xFF00;$/;"	v	typeref:typename:const int
Amethyst	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Amethyst=0x9966CC,              \/\/\/< @htmlcolorblock{9966CC}$/;"	e	enum:CRGB::__anonbcc8608a0c03
AntiqueWhite	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        AntiqueWhite=0xFAEBD7,          \/\/\/< @htmlcolorblock{FAEBD7}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Application	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Application,  \/\/ DECKPAM$/;"	e	enum:fabgl::KeypadMode
Aqua	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Aqua=0x00FFFF,                  \/\/\/< @htmlcolorblock{00FFFF}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Aquamarine	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Aquamarine=0x7FFFD4,            \/\/\/< @htmlcolorblock{7FFFD4}$/;"	e	enum:CRGB::__anonbcc8608a0c03
ArbState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  enum class ArbState {$/;"	g	class:IECDrive
ArduinoJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CMakeLists.txt	/^project(ArduinoJson VERSION 6.21.3)$/;"	p
ArduinoJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/CMakeLists.txt	/^add_library(ArduinoJson INTERFACE)$/;"	t
ArduinoJson Support	examples/test/.pio/libdeps/esp32dev/ArduinoJson/SUPPORT.md	/^# ArduinoJson Support$/;"	c
ArduinoJson: change log	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^ArduinoJson: change log$/;"	c
ArdunioCoreSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	ArdunioCoreSPIOutput() {}$/;"	f	class:ArdunioCoreSPIOutput
ArdunioCoreSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^class ArdunioCoreSPIOutput {$/;"	c
ArrayComparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  explicit ArrayComparer(const CollectionData& rhs) : rhs_(&rhs) {}$/;"	f	struct:ArrayComparer
ArrayComparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^struct ArrayComparer : ComparerBase {$/;"	s
AttrBlank	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  AttrBlank,                \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
AttrBlink	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  AttrBlink,                \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
AttrBlinkOff	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  AttrBlinkOff,             \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
AttrNormal	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  AttrNormal,               \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
AttrReduce	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  AttrReduce,               \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
AttrReduceOff	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  AttrReduceOff,            \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
AttrReverse	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  AttrReverse,              \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
AttrReverseOff	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  AttrReverseOff,           \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
AttrUnderline	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  AttrUnderline,            \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
AttrUnderlineOff	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  AttrUnderlineOff,         \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
Attribution	examples/test/.pio/libdeps/esp32dev/FastLED/code_of_conduct.md	/^## Attribution$/;"	s	chapter:Contributor Covenant Code of Conduct
Auto	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  Auto,            \/**< Use DAC when video output is VGA, use SigmaDelta when video output is C/;"	e	enum:fabgl::SoundGenMethod
AutoSemaphore	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  AutoSemaphore(SemaphoreHandle_t mutex) : m_mutex(mutex) { xSemaphoreTake(m_mutex, portMAX_DELA/;"	f	struct:fabgl::AutoSemaphore
AutoSemaphore	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct AutoSemaphore {$/;"	s	namespace:fabgl
AuxTerm	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  AuxTerm,$/;"	e	enum:AbortReason
Azure	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Azure=0xF0FFFF,                 \/\/\/< @htmlcolorblock{F0FFFF}$/;"	e	enum:CRGB::__anonbcc8608a0c03
B	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t B : 2;  \/**< The Blue channel  *\/$/;"	m	struct:fabgl::RGB222	typeref:typename:uint8_t:2
B	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t B : 2;  \/**< The Blue channel  *\/$/;"	m	struct:fabgl::RGBA2222	typeref:typename:uint8_t:2
B	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t B;  \/**< The Blue channel  *\/$/;"	m	struct:fabgl::RGB888	typeref:typename:uint8_t
B	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t B;  \/**< The Blue channel  *\/$/;"	m	struct:fabgl::RGBA8888	typeref:typename:uint8_t
B	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define B /;"	d	file:
B	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define B /;"	d	file:
BACKGROUND_COLOR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^#define BACKGROUND_COLOR /;"	d
BACKWARD_HUES	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    BACKWARD_HUES,  \/\/\/< Hue always goes counter-clockwise around the color wheel$/;"	e	enum:__anon875718a30103
BASEPATH	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^char const *   FileBrowser::BASEPATH = "";$/;"	m	class:fabgl::FileBrowser	typeref:typename:char const *
BASEPATH	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static char const * BASEPATH;$/;"	m	class:fabgl::FileBrowser	typeref:typename:char const *
BASICLIB_REL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t BASICLIB_REL[] = {$/;"	v	typeref:typename:const uint8_t[]
BAUDRATES_COUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^constexpr int       BAUDRATES_COUNT  = sizeof(BAUDRATES_INT) \/ sizeof(int);$/;"	v	typeref:typename:int
BAUDRATES_INT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const int    BAUDRATES_INT[]  = { 110,$/;"	v	typeref:typename:const int[]
BAUDRATES_STR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * BAUDRATES_STR[]  = { "110",$/;"	v	typeref:typename:const char * []
BC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define BC /;"	d	file:
BC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define BC /;"	d	file:
BCD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^    bool    BCD;          \/\/ BCD mode$/;"	m	struct:fabgl::PIT8253::TimerInfo	typeref:typename:bool
BCDtoByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^inline uint8_t BCDtoByte(uint8_t v)$/;"	f	typeref:typename:uint8_t
BCDtoByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^static uint8_t BCDtoByte(uint8_t v)$/;"	f	typeref:typename:uint8_t	file:
BDOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^BDOS::BDOS(HAL * hal, BIOS * bios)$/;"	f	class:BDOS
BDOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^class BDOS {$/;"	c
BDOSAddrChanged	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::BDOSAddrChanged()$/;"	f	class:BDOS	typeref:typename:bool
BDOS_BUFADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define BDOS_BUFADDR /;"	d
BDOS_BUFLEN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define BDOS_BUFLEN /;"	d
BDOS_ENTRY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define BDOS_ENTRY /;"	d
BDOS_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define BDOS_SIZE /;"	d
BDOS_accessDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_accessDrive()$/;"	f	class:BDOS	typeref:typename:void
BDOS_auxInput	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_auxInput()$/;"	f	class:BDOS	typeref:typename:void
BDOS_auxInputStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_auxInputStatus()$/;"	f	class:BDOS	typeref:typename:void
BDOS_auxOutput	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_auxOutput()$/;"	f	class:BDOS	typeref:typename:void
BDOS_auxOutputStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_auxOutputStatus()$/;"	f	class:BDOS	typeref:typename:void
BDOS_call	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_call(uint16_t * BC, uint16_t * DE, uint16_t * HL, uint16_t * AF)$/;"	f	class:BDOS	typeref:typename:void
BDOS_callChangeCurrentDirectory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callChangeCurrentDirectory(uint16_t pathAddr)$/;"	f	class:BDOS	typeref:typename:int
BDOS_callCloseFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callCloseFile(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:int
BDOS_callConsoleIn	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callConsoleIn()$/;"	f	class:BDOS	typeref:typename:int
BDOS_callConsoleOut	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_callConsoleOut(char c)$/;"	f	class:BDOS	typeref:typename:void
BDOS_callConsoleStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callConsoleStatus()$/;"	f	class:BDOS	typeref:typename:int
BDOS_callCopyFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callCopyFile(uint16_t srcFullPathAddr, uint16_t dstPathAddr, bool overwrite, bool/;"	f	class:BDOS	typeref:typename:int
BDOS_callDeleteFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callDeleteFile(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:int
BDOS_callDirectConsoleIO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callDirectConsoleIO(int mode)$/;"	f	class:BDOS	typeref:typename:int
BDOS_callMakeFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callMakeFile(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:int
BDOS_callOpenFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callOpenFile(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:int
BDOS_callOutputString	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_callOutputString(char const * str, uint16_t workBufAddr, size_t workBufSize, siz/;"	f	class:BDOS	typeref:typename:void
BDOS_callOutputString	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_callOutputString(uint16_t str)$/;"	f	class:BDOS	typeref:typename:void
BDOS_callParseFilename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callParseFilename(uint16_t PFCBaddr)$/;"	f	class:BDOS	typeref:typename:int
BDOS_callReadConsoleBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_callReadConsoleBuffer(uint16_t addr)$/;"	f	class:BDOS	typeref:typename:void
BDOS_callReadSequential	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callReadSequential(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:int
BDOS_callRenameFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callRenameFile(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:int
BDOS_callResidentSystemExtension	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_callResidentSystemExtension()$/;"	f	class:BDOS	typeref:typename:void
BDOS_callSearchForFirst	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callSearchForFirst(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:int
BDOS_callSearchForNext	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::BDOS_callSearchForNext()$/;"	f	class:BDOS	typeref:typename:int
BDOS_callSetDMAAddress	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_callSetDMAAddress(uint16_t DMAaddr)$/;"	f	class:BDOS	typeref:typename:void
BDOS_callSystemReset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_callSystemReset()$/;"	f	class:BDOS	typeref:typename:void
BDOS_chainToProgram	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_chainToProgram()$/;"	f	class:BDOS	typeref:typename:void
BDOS_changeCurrentDirectory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_changeCurrentDirectory()$/;"	f	class:BDOS	typeref:typename:void
BDOS_closeFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_closeFile()$/;"	f	class:BDOS	typeref:typename:void
BDOS_computeFileSize	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_computeFileSize()$/;"	f	class:BDOS	typeref:typename:void
BDOS_consoleInput	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_consoleInput()$/;"	f	class:BDOS	typeref:typename:void
BDOS_consoleOutput	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_consoleOutput()$/;"	f	class:BDOS	typeref:typename:void
BDOS_copyFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_copyFile()$/;"	f	class:BDOS	typeref:typename:void
BDOS_deleteFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_deleteFile()$/;"	f	class:BDOS	typeref:typename:void
BDOS_directBIOSCall	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_directBIOSCall()$/;"	f	class:BDOS	typeref:typename:void
BDOS_directConsoleIO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_directConsoleIO()$/;"	f	class:BDOS	typeref:typename:void
BDOS_flushBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_flushBuffers()$/;"	f	class:BDOS	typeref:typename:void
BDOS_freeBlocks	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_freeBlocks()$/;"	f	class:BDOS	typeref:typename:void
BDOS_freeDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_freeDrive()$/;"	f	class:BDOS	typeref:typename:void
BDOS_getAddr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_getAddr()$/;"	f	class:BDOS	typeref:typename:void
BDOS_getConsoleStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_getConsoleStatus()$/;"	f	class:BDOS	typeref:typename:void
BDOS_getDPBAddress	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_getDPBAddress()$/;"	f	class:BDOS	typeref:typename:void
BDOS_getDateTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_getDateTime()$/;"	f	class:BDOS	typeref:typename:void
BDOS_getDiskFreeSpace	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_getDiskFreeSpace()$/;"	f	class:BDOS	typeref:typename:void
BDOS_getReadOnlyVector	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_getReadOnlyVector()$/;"	f	class:BDOS	typeref:typename:void
BDOS_getSetConsoleMode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_getSetConsoleMode()$/;"	f	class:BDOS	typeref:typename:void
BDOS_getSetOutputDelimiter	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_getSetOutputDelimiter()$/;"	f	class:BDOS	typeref:typename:void
BDOS_getSetProgramReturnCode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_getSetProgramReturnCode()$/;"	f	class:BDOS	typeref:typename:void
BDOS_getSetSystemControlBlock	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_getSetSystemControlBlock()$/;"	f	class:BDOS	typeref:typename:void
BDOS_getSetUserCode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_getSetUserCode()$/;"	f	class:BDOS	typeref:typename:void
BDOS_listBlock	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_listBlock()$/;"	f	class:BDOS	typeref:typename:void
BDOS_loadOverlay	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_loadOverlay()$/;"	f	class:BDOS	typeref:typename:void
BDOS_lockRecord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_lockRecord()$/;"	f	class:BDOS	typeref:typename:void
BDOS_lstOutput	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_lstOutput()$/;"	f	class:BDOS	typeref:typename:void
BDOS_makeFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_makeFile()$/;"	f	class:BDOS	typeref:typename:void
BDOS_openFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_openFile()$/;"	f	class:BDOS	typeref:typename:void
BDOS_outputString	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_outputString()$/;"	f	class:BDOS	typeref:typename:void
BDOS_parseFilename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_parseFilename()$/;"	f	class:BDOS	typeref:typename:void
BDOS_printBlock	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_printBlock()$/;"	f	class:BDOS	typeref:typename:void
BDOS_readConsoleBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_readConsoleBuffer()$/;"	f	class:BDOS	typeref:typename:void
BDOS_readFileDateStamps	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_readFileDateStamps()$/;"	f	class:BDOS	typeref:typename:void
BDOS_readRandom	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_readRandom()$/;"	f	class:BDOS	typeref:typename:void
BDOS_readSequential	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_readSequential()$/;"	f	class:BDOS	typeref:typename:void
BDOS_renameFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_renameFile()$/;"	f	class:BDOS	typeref:typename:void
BDOS_resetDiskSystem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_resetDiskSystem()$/;"	f	class:BDOS	typeref:typename:void
BDOS_resetDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_resetDrive()$/;"	f	class:BDOS	typeref:typename:void
BDOS_returnCurrentDisk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_returnCurrentDisk()$/;"	f	class:BDOS	typeref:typename:void
BDOS_returnDirLabelData	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_returnDirLabelData()$/;"	f	class:BDOS	typeref:typename:void
BDOS_returnLoginVector	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_returnLoginVector()$/;"	f	class:BDOS	typeref:typename:void
BDOS_returnVersionNumber	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_returnVersionNumber()$/;"	f	class:BDOS	typeref:typename:void
BDOS_searchForFirst	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_searchForFirst()$/;"	f	class:BDOS	typeref:typename:void
BDOS_searchForNext	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_searchForNext()$/;"	f	class:BDOS	typeref:typename:void
BDOS_selectDisk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_selectDisk()$/;"	f	class:BDOS	typeref:typename:void
BDOS_setDMAAddress	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_setDMAAddress()$/;"	f	class:BDOS	typeref:typename:void
BDOS_setDateTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_setDateTime()$/;"	f	class:BDOS	typeref:typename:void
BDOS_setDirectoryLabel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_setDirectoryLabel()$/;"	f	class:BDOS	typeref:typename:void
BDOS_setErrorMode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_setErrorMode()$/;"	f	class:BDOS	typeref:typename:void
BDOS_setFileAttributes	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_setFileAttributes()$/;"	f	class:BDOS	typeref:typename:void
BDOS_setMultiSectorCount	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_setMultiSectorCount()$/;"	f	class:BDOS	typeref:typename:void
BDOS_setRandomRecord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_setRandomRecord()$/;"	f	class:BDOS	typeref:typename:void
BDOS_systemReset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_systemReset()$/;"	f	class:BDOS	typeref:typename:void
BDOS_testAndWriteRecord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_testAndWriteRecord()$/;"	f	class:BDOS	typeref:typename:void
BDOS_truncateFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_truncateFile()$/;"	f	class:BDOS	typeref:typename:void
BDOS_unlockRecord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_unlockRecord()$/;"	f	class:BDOS	typeref:typename:void
BDOS_writeProtectDisk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_writeProtectDisk()$/;"	f	class:BDOS	typeref:typename:void
BDOS_writeRandom	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_writeRandom()$/;"	f	class:BDOS	typeref:typename:void
BDOS_writeRandomZeroFill	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_writeRandomZeroFill()$/;"	f	class:BDOS	typeref:typename:void
BDOS_writeSequential	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::BDOS_writeSequential()$/;"	f	class:BDOS	typeref:typename:void
BDSC_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/BDSC_dsk.h	/^const uint8_t BDSC_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
BDSC_dsk_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/BDSC_dsk.h	/^unsigned int BDSC_dsk_dsk_len = 337568;$/;"	v	typeref:typename:unsigned int
BETWEEN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^#define BETWEEN(/;"	d
BGR	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^	BGR=0210   \/\/\/< Blue,  Green, Red   (0210)$/;"	e	enum:EOrder
BH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint8_t i8086::BH()$/;"	f	class:fabgl::i8086	typeref:typename:uint8_t
BINARY_DITHER	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define BINARY_DITHER /;"	d
BIOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^BIOS::BIOS(HAL * hal)$/;"	f	class:BIOS
BIOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^class BIOS {$/;"	c
BIOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^BIOS::BIOS()$/;"	f	class:BIOS
BIOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^class BIOS {$/;"	c
BIOSAddrChanged	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::BIOSAddrChanged()$/;"	f	class:BDOS	typeref:typename:bool
BIOSREV	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^BIOSREV  equ 0x00$/;"	d
BIOS_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_ADDR /;"	d
BIOS_AUXIN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_AUXIN /;"	d
BIOS_AUXIST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_AUXIST /;"	d
BIOS_AUXOST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_AUXOST /;"	d
BIOS_AUXOUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_AUXOUT /;"	d
BIOS_BOOT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_BOOT /;"	d
BIOS_CLKROLLOVER	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_CLKROLLOVER /;"	d
BIOS_CONIN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_CONIN /;"	d
BIOS_CONOST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_CONOST /;"	d
BIOS_CONOUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_CONOUT /;"	d
BIOS_CONST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_CONST /;"	d
BIOS_CTRLBREAKFLAG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_CTRLBREAKFLAG /;"	d
BIOS_DATAAREA_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_DATAAREA_ADDR /;"	d
BIOS_DATAAREA_SEG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_DATAAREA_SEG /;"	d
BIOS_DEVINI	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_DEVINI /;"	d
BIOS_DEVTBL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_DEVTBL /;"	d
BIOS_DISKLASTSTATUS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_DISKLASTSTATUS /;"	d
BIOS_DRIVE0MEDIATYPE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_DRIVE0MEDIATYPE /;"	d
BIOS_DRIVE1MEDIATYPE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_DRIVE1MEDIATYPE /;"	d
BIOS_ENTRY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define BIOS_ENTRY /;"	d
BIOS_HDLASTSTATUS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_HDLASTSTATUS /;"	d
BIOS_KBDALTKEYPADENTRY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_KBDALTKEYPADENTRY /;"	d
BIOS_KBDBUF	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_KBDBUF /;"	d
BIOS_KBDBUFHEAD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_KBDBUFHEAD /;"	d
BIOS_KBDBUFTAIL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_KBDBUFTAIL /;"	d
BIOS_KBDLEDS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_KBDLEDS /;"	d
BIOS_KBDMODE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_KBDMODE /;"	d
BIOS_KBDSHIFTFLAGS1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_KBDSHIFTFLAGS1 /;"	d
BIOS_KBDSHIFTFLAGS2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_KBDSHIFTFLAGS2 /;"	d
BIOS_LIST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_LIST /;"	d
BIOS_LISTST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_LISTST /;"	d
BIOS_NUMHD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_NUMHD /;"	d
BIOS_OFF	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_OFF /;"	d
BIOS_PRINTSCREENFLAG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_PRINTSCREENFLAG /;"	d
BIOS_RETS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define BIOS_RETS /;"	d
BIOS_RETS_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define BIOS_RETS_SIZE /;"	d
BIOS_SEG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_SEG /;"	d
BIOS_SELDSK	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_SELDSK /;"	d
BIOS_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define BIOS_SIZE /;"	d
BIOS_SYSTICKS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define BIOS_SYSTICKS /;"	d
BIOS_WBOOT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^#define BIOS_WBOOT /;"	d
BIOS_call	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::BIOS_call(int func, uint16_t * BC, uint16_t * DE, uint16_t * HL, uint16_t * AF)$/;"	f	class:BIOS	typeref:typename:void
BIOS_call_CONIN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^uint8_t BIOS::BIOS_call_CONIN()$/;"	f	class:BIOS	typeref:typename:uint8_t
BIOS_call_CONOUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::BIOS_call_CONOUT(uint8_t c)$/;"	f	class:BIOS	typeref:typename:void
BIOS_call_CONST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^uint8_t BIOS::BIOS_call_CONST()$/;"	f	class:BIOS	typeref:typename:uint8_t
BIOS_call_LIST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::BIOS_call_LIST(uint8_t c)$/;"	f	class:BIOS	typeref:typename:void
BIOS_call_WBOOT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::BIOS_call_WBOOT()$/;"	f	class:BIOS	typeref:typename:void
BIT_B_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  BIT_B_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
BIT_B_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  BIT_B_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
BL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint8_t i8086::BL()$/;"	f	class:fabgl::i8086	typeref:typename:uint8_t
BLEND8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define BLEND8_C /;"	d
BLEND_MAX	examples/test/lib/JFixLib/src/Event/JOsc.h	/^enum BlendMode { BLEND_NONE, BLEND_MAX, BLEND_TEST };$/;"	e	enum:BlendMode
BLEND_NONE	examples/test/lib/JFixLib/src/Event/JOsc.h	/^enum BlendMode { BLEND_NONE, BLEND_MAX, BLEND_TEST };$/;"	e	enum:BlendMode
BLEND_TEST	examples/test/lib/JFixLib/src/Event/JOsc.h	/^enum BlendMode { BLEND_NONE, BLEND_MAX, BLEND_TEST };$/;"	e	enum:BlendMode
BLINK_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^static const char BLINK_BAS[] =       "1 PRINT \\"Sets GPIO-12 as output pin and turns it On and/;"	v	typeref:typename:const char[]
BLINK_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char BLINK_BAS[] =       "1 PRINT \\"Sets GPIO-12 as output pin and turns it On and/;"	v	typeref:typename:const char[]
BLUE	examples/test/lib/JFixLib/src/JFixture.h	/^  BLUE,$/;"	e	enum:Channel
BOOTINFO_DISABLED	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^constexpr int       BOOTINFO_DISABLED     = 0;$/;"	v	typeref:typename:int
BOOTINFO_ENABLED	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^constexpr int       BOOTINFO_ENABLED      = 1;$/;"	v	typeref:typename:int
BOOTINFO_TEMPDISABLED	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^constexpr int       BOOTINFO_TEMPDISABLED = 2;$/;"	v	typeref:typename:int
BP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::BP()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
BRG	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^	BRG=0201,  \/\/\/< Blue,  Red,   Green (0201)$/;"	e	enum:EOrder
BRLOOP1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define BRLOOP1 /;"	d
BROWSER_HEIGHT	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  static constexpr int BROWSER_HEIGHT      = 150;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:int
BROWSER_HEIGHT	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  static constexpr int BROWSER_HEIGHT      = 242;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:int
BROWSER_WIDTH	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  static constexpr int BROWSER_WIDTH       = 150;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:int
BROWSER_WIDTH	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  static constexpr int BROWSER_WIDTH       = 180;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:int
BUSREAD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define BUSREAD(/;"	d	file:
BUSWRITE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define BUSWRITE(/;"	d	file:
BUTTONS	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  static constexpr int BUTTONS  = 6;$/;"	m	struct:fabgl::InputForm	typeref:typename:int
BWScaleBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^class BWScaleBitmap : public Bitmap$/;"	c
BX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::BX()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
B_CANCEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^#define B_CANCEL /;"	d	file:
B_OK	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^#define B_OK /;"	d	file:
BackPorch	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  BackPorch,    \/**< Horizontal line sequence is: BACKPORCH -> VISIBLEAREA -> FRONTPORCH -> SYN/;"	e	enum:fabgl::VGAScanStart
Ball	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^  struct Ball {$/;"	s	class:BallsTest
Ball	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^  struct Ball {$/;"	s	class:BallsTest
Ball	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^  struct Ball {$/;"	s	class:BallsTest
BallsTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^class BallsTest : public Test {$/;"	c
BallsTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^class BallsTest : public Test {$/;"	c
BallsTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^class BallsTest : public Test {$/;"	c
BaseDisplayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^class BaseDisplayController {$/;"	c	namespace:fabgl
BasicJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  BasicJsonDocument(BasicJsonDocument&& src) : AllocatorOwner<TAllocator>(src) {$/;"	f	class:BasicJsonDocument
BasicJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  BasicJsonDocument(JsonVariant src)$/;"	f	class:BasicJsonDocument
BasicJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  BasicJsonDocument(const BasicJsonDocument& src)$/;"	f	class:BasicJsonDocument
BasicJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  BasicJsonDocument(const JsonDocument& src) {$/;"	f	class:BasicJsonDocument
BasicJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  BasicJsonDocument(const T& src,$/;"	f	class:BasicJsonDocument
BasicJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  explicit BasicJsonDocument(size_t capa, TAllocator alloc = TAllocator())$/;"	f	class:BasicJsonDocument
BasicJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {$/;"	c
Before asking for help	examples/test/.pio/libdeps/esp32dev/ArduinoJson/SUPPORT.md	/^## Before asking for help$/;"	s	chapter:ArduinoJson Support
Before hitting the Submit button	examples/test/.pio/libdeps/esp32dev/ArduinoJson/SUPPORT.md	/^## Before hitting the Submit button$/;"	s	chapter:ArduinoJson Support
Beige	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Beige=0xF5F5DC,                 \/\/\/< @htmlcolorblock{F5F5DC}$/;"	e	enum:CRGB::__anonbcc8608a0c03
BelgianLayout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.cpp	/^const KeyboardLayout BelgianLayout {$/;"	v	namespace:fabgl	typeref:typename:const KeyboardLayout
Bisque	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Bisque=0xFFE4C4,                \/\/\/< @htmlcolorblock{FFE4C4}$/;"	e	enum:CRGB::__anonbcc8608a0c03
BitWork	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^template<int VAL, int BIT> class BitWork {$/;"	c
BitWork	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^template<int VAL> class BitWork<VAL, 0> {$/;"	c
BitWork	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^template<int VAL, int BIT> class BitWork {$/;"	c
BitWork	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^template<int VAL> class BitWork<VAL, 0> {$/;"	c
Bitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^Bitmap::Bitmap(int width_, int height_, void const * data_, PixelFormat format_, RGB888 foregrou/;"	f	class:fabgl::Bitmap
Bitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^Bitmap::Bitmap(int width_, int height_, void const * data_, PixelFormat format_, bool copy)$/;"	f	class:fabgl::Bitmap
Bitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Bitmap() : width(0), height(0), format(PixelFormat::Undefined), foregroundColor(RGB888(255, 25/;"	f	struct:fabgl::Bitmap
Bitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct Bitmap {$/;"	s	namespace:fabgl
BitmapDrawingInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  BitmapDrawingInfo(int X_, int Y_, Bitmap const * bitmap_) : X(X_), Y(Y_), bitmap(bitmap_) { }$/;"	f	struct:fabgl::BitmapDrawingInfo
BitmapDrawingInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct BitmapDrawingInfo {$/;"	s	namespace:fabgl
Bitmapped	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Bitmapped,    \/**< The display controller can represents text and bitmapped graphics *\/$/;"	e	enum:fabgl::DisplayControllerType
BitmappedDisplayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^BitmappedDisplayController::BitmappedDisplayController()$/;"	f	class:fabgl::BitmappedDisplayController
BitmappedDisplayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^class BitmappedDisplayController : public BaseDisplayController {$/;"	c	namespace:fabgl
Black	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Black,          \/**< Equivalent to RGB888(0,0,0) *\/$/;"	e	enum:fabgl::Color
Black	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Black=0x000000,                 \/\/\/< @htmlcolorblock{000000}$/;"	e	enum:CRGB::__anonbcc8608a0c03
BlackLightFluorescent	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    BlackLightFluorescent=0xA700FF \/* 0 K, 167, 0, 255 *\/,$/;"	e	enum:__anon4cec7af20203
BlanchedAlmond	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        BlanchedAlmond=0xFFEBCD,        \/\/\/< @htmlcolorblock{FFEBCD}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Blank	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  GlyphOptions & Blank(uint8_t value) { blank = value; return *this; }$/;"	f	union:fabgl::GlyphOptions	typeref:typename:GlyphOptions &
Blank	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Blank,              \/**< Invisible text *\/$/;"	e	enum:fabgl::CharStyle
BlendMode	examples/test/lib/JFixLib/src/Event/JOsc.h	/^enum BlendMode { BLEND_NONE, BLEND_MAX, BLEND_TEST };$/;"	g
Blink	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Blink,              \/**< Blinking text *\/$/;"	e	enum:fabgl::CharStyle
Blue	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Blue,           \/**< Equivalent to RGB888(0,0,128) *\/$/;"	e	enum:fabgl::Color
Blue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Blue=0x0000FF,                  \/\/\/< @htmlcolorblock{0000FF}$/;"	e	enum:CRGB::__anonbcc8608a0c03
BlueViolet	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        BlueViolet=0x8A2BE2,            \/\/\/< @htmlcolorblock{8A2BE2}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Bold	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  GlyphOptions & Bold(bool value) { bold = value; return *this; }$/;"	f	union:fabgl::GlyphOptions	typeref:typename:GlyphOptions &
Bold	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Bold,               \/**< Bold *\/$/;"	e	enum:fabgl::CharStyle
BottomButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  BottomButton,   \/**<     *\/$/;"	e	enum:fabgl::uiScrollBarItem
BottomCenterResize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  BottomCenterResize,   \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
BottomLeft	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  BottomLeft,$/;"	e	enum:fabgl::QuadTreeQuadrant
BottomLeftResize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  BottomLeftResize,     \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
BottomRight	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  BottomRight,$/;"	e	enum:fabgl::QuadTreeQuadrant
BottomRightResize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  BottomRightResize,    \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
BoundedReader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Reader.hpp	/^struct BoundedReader {$/;"	s
BoundedReader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp	/^  explicit BoundedReader(const __FlashStringHelper* ptr, size_t size)$/;"	f	struct:BoundedReader
BoundedReader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp	/^struct BoundedReader<const __FlashStringHelper*, void> {$/;"	s
BoundedReader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp	/^  explicit BoundedReader(const void* ptr, size_t len)$/;"	f	struct:BoundedReader
BoundedReader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp	/^struct BoundedReader<TSource*,$/;"	s
BrightBlack	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  BrightBlack,    \/**< Equivalent to RGB888(64,64,64) *\/$/;"	e	enum:fabgl::Color
BrightBlue	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  BrightBlue,     \/**< Equivalent to RGB888(0,0,255) *\/$/;"	e	enum:fabgl::Color
BrightCyan	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  BrightCyan,     \/**< Equivalent to RGB888(0,255,255) *\/$/;"	e	enum:fabgl::Color
BrightGreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  BrightGreen,    \/**< Equivalent to RGB888(0,255,0) *\/$/;"	e	enum:fabgl::Color
BrightMagenta	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  BrightMagenta,  \/**< Equivalent to RGB888(255,0,255) *\/$/;"	e	enum:fabgl::Color
BrightRed	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  BrightRed,      \/**< Equivalent to RGB888(255,0,0) *\/$/;"	e	enum:fabgl::Color
BrightWhite	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  BrightWhite,    \/**< Equivalent to RGB888(255,255,255) *\/$/;"	e	enum:fabgl::Color
BrightYellow	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  BrightYellow,   \/**< Equivalent to RGB888(255,255,0) *\/$/;"	e	enum:fabgl::Color
Brown	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Brown=0xA52A2A,                 \/\/\/< @htmlcolorblock{A52A2A}$/;"	e	enum:CRGB::__anonbcc8608a0c03
BurlyWood	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        BurlyWood=0xDEB887,             \/\/\/< @htmlcolorblock{DEB887}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Button	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Button,   \/**< Normal button - can have a single state. Generates only click events *\/$/;"	e	enum:fabgl::uiButtonKind
Button1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Button1  = 1,   \/**< Button1 has been pressed *\/$/;"	e	enum:fabgl::uiMessageBoxResult
Button2	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Button2  = 2,   \/**< Button2 has been pressed *\/$/;"	e	enum:fabgl::uiMessageBoxResult
Button3	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Button3  = 3,   \/**< Button3 has been pressed *\/$/;"	e	enum:fabgl::uiMessageBoxResult
ButtonExt0	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  ButtonExt0  = 1,       \/**< Button Ext 0 pressed *\/$/;"	e	enum:fabgl::InputResult
ButtonExt1	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  ButtonExt1  = 2,       \/**< Button Ext 1 pressed *\/$/;"	e	enum:fabgl::InputResult
ButtonExt2	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  ButtonExt2  = 3,       \/**< Button Ext 3 pressed *\/$/;"	e	enum:fabgl::InputResult
ButtonExt3	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  ButtonExt3  = 4,       \/**< Button Ext 4 pressed *\/$/;"	e	enum:fabgl::InputResult
ButtonLeft	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  ButtonLeft  = 5,       \/**< Left button (cancel) or ESC key pressed *\/$/;"	e	enum:fabgl::InputResult
ButtonOK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  ButtonOK = 1,   \/**< OK Button (button1) has been pressed *\/$/;"	e	enum:fabgl::uiMessageBoxResult
ButtonRight	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  ButtonRight = 6,       \/**< Right button (OK), ENTER or RETURN pressed *\/$/;"	e	enum:fabgl::InputResult
C	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define C /;"	d	file:
C	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define C /;"	d	file:
CA1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  CA1, \/**< (1 bit) *\/$/;"	e	enum:fabgl::VIA6522Port
CA1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t CA1()                      { return m_CA1; }$/;"	f	class:fabgl::VIA6522	typeref:typename:uint8_t
CA2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  CA2, \/**< (1 bit) *\/$/;"	e	enum:fabgl::VIA6522Port
CA2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t CA2()                      { return m_CA2; }$/;"	f	class:fabgl::VIA6522	typeref:typename:uint8_t
CALL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define CALL /;"	d	file:
CALL_CC_NN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  CALL_CC_NN,$/;"	e	enum:fabgl::__anonfeda45510103	file:
CALL_NN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  CALL_NN,$/;"	e	enum:fabgl::__anonfeda45510103	file:
CAPSLOCK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t    CAPSLOCK   : 1;  \/**< CAPSLOCK key state at the time of this virtual key event *\/$/;"	m	struct:fabgl::VirtualKeyItem	typeref:typename:uint8_t:1
CATCHUM_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t CATCHUM_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
CATCHUM_DAT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t CATCHUM_DAT[] = {$/;"	v	typeref:typename:const uint8_t[]
CB1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  CB1, \/**< (1 bit) *\/$/;"	e	enum:fabgl::VIA6522Port
CB1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t CB1()                      { return m_CB1; }$/;"	f	class:fabgl::VIA6522	typeref:typename:uint8_t
CB2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  CB2, \/**< (1 bit) *\/$/;"	e	enum:fabgl::VIA6522Port
CB2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t CB2()                      { return m_CB2; }$/;"	f	class:fabgl::VIA6522	typeref:typename:uint8_t
CB_INSTRUCTION_TABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^static const unsigned char CB_INSTRUCTION_TABLE[256] = {$/;"	v	namespace:fabgl	typeref:typename:const unsigned char[256]	file:
CB_PREFIX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  CB_PREFIX,$/;"	e	enum:fabgl::__anonfeda45510103	file:
CC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define CC(/;"	d	file:
CCF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  CCF,$/;"	e	enum:fabgl::__anonfeda45510103	file:
CCP	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^CCP::CCP(HAL * hal, BDOS * bdos)$/;"	f	class:CCP
CCP	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.h	/^class CCP {$/;"	c
CCP_CONSOLEBUFFER_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_CONSOLEBUFFER_ADDR /;"	d	file:
CCP_CONSOLEBUFFER_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_CONSOLEBUFFER_SIZE /;"	d	file:
CCP_DMA1_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_DMA1_ADDR /;"	d	file:
CCP_DMA1_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_DMA1_SIZE /;"	d	file:
CCP_DMA2_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_DMA2_ADDR /;"	d	file:
CCP_DMA2_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_DMA2_SIZE /;"	d	file:
CCP_FCB1_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_FCB1_ADDR /;"	d	file:
CCP_FCB1_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_FCB1_SIZE /;"	d	file:
CCP_FCB2_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_FCB2_ADDR /;"	d	file:
CCP_FCB2_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_FCB2_SIZE /;"	d	file:
CCP_HISTORY_DEPTH	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define CCP_HISTORY_DEPTH /;"	d
CCP_HISTORY_LINEBUFFER_LEN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define CCP_HISTORY_LINEBUFFER_LEN /;"	d
CCP_OUTSTRBUF_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_OUTSTRBUF_ADDR /;"	d	file:
CCP_OUTSTRBUF_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_OUTSTRBUF_SIZE /;"	d	file:
CCP_PFCB_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_PFCB_ADDR /;"	d	file:
CCP_PFCB_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_PFCB_SIZE /;"	d	file:
CCP_STATIC_VARS_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_STATIC_VARS_ADDR /;"	d	file:
CCP_STATIC_VARS_GAP	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^#define CCP_STATIC_VARS_GAP /;"	d	file:
CEveryNBSeconds	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef CEveryNTimePeriods<uint16_t,bseconds16> CEveryNBSeconds;$/;"	t	typeref:typename:CEveryNTimePeriods<uint16_t,bseconds16>
CEveryNHours	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef CEveryNTimePeriods<uint8_t,hours8> CEveryNHours;$/;"	t	typeref:typename:CEveryNTimePeriods<uint8_t,hours8>
CEveryNMillis	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef CEveryNTimePeriods<uint32_t,millis> CEveryNMillis;$/;"	t	typeref:typename:CEveryNTimePeriods<uint32_t,millis>
CEveryNMilliseconds	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define CEveryNMilliseconds /;"	d
CEveryNMinutes	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef CEveryNTimePeriods<uint16_t,minutes16> CEveryNMinutes;$/;"	t	typeref:typename:CEveryNTimePeriods<uint16_t,minutes16>
CEveryNSeconds	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef CEveryNTimePeriods<uint16_t,seconds16> CEveryNSeconds;$/;"	t	typeref:typename:CEveryNTimePeriods<uint16_t,seconds16>
CEveryNTime	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    CEveryNTime() { reset(); mPeriod = 1; };$/;"	f	class:CEveryNTime
CEveryNTime	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    CEveryNTime(TIMETYPE period) { reset(); setPeriod(period); };$/;"	f	class:CEveryNTime
CEveryNTime	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^class CEveryNTime {$/;"	c
CEveryNTimePeriods	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    CEveryNTimePeriods() { reset(); mPeriod = 1; };$/;"	f	class:CEveryNTimePeriods
CEveryNTimePeriods	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    CEveryNTimePeriods(timeType period) { reset(); setPeriod(period); };$/;"	f	class:CEveryNTimePeriods
CEveryNTimePeriods	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^class CEveryNTimePeriods {$/;"	c
CF_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define CF_ADDR /;"	d	file:
CFastLED	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^CFastLED::CFastLED() {$/;"	f	class:CFastLED
CFastLED	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^class CFastLED {$/;"	c
CGAGraphics4ColorsPalette	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^static const RGB222 CGAGraphics4ColorsPalette[4][4] = {$/;"	v	namespace:fabgl	typeref:typename:const RGB222[4][4]	file:
CGAPalette	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^static const RGB222 CGAPalette[16] = {$/;"	v	namespace:fabgl	typeref:typename:const RGB222[16]	file:
CGA_COLORCONTROLREG_BACKCOLR_MASK	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define CGA_COLORCONTROLREG_BACKCOLR_MASK /;"	d	file:
CGA_COLORCONTROLREG_HIGHINTENSITY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define CGA_COLORCONTROLREG_HIGHINTENSITY /;"	d	file:
CGA_COLORCONTROLREG_PALETTESEL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define CGA_COLORCONTROLREG_PALETTESEL /;"	d	file:
CGA_MODECONTROLREG_BIT7BLINK	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define CGA_MODECONTROLREG_BIT7BLINK /;"	d	file:
CGA_MODECONTROLREG_COLOR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define CGA_MODECONTROLREG_COLOR /;"	d	file:
CGA_MODECONTROLREG_ENABLED	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define CGA_MODECONTROLREG_ENABLED /;"	d	file:
CGA_MODECONTROLREG_GRAPH640	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define CGA_MODECONTROLREG_GRAPH640 /;"	d	file:
CGA_MODECONTROLREG_GRAPHICS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define CGA_MODECONTROLREG_GRAPHICS /;"	d	file:
CGA_MODECONTROLREG_TEXT80	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define CGA_MODECONTROLREG_TEXT80 /;"	d	file:
CH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint8_t i8086::CH()$/;"	f	class:fabgl::i8086	typeref:typename:uint8_t
CHANNEL	examples/test/lib/JFixLib/src/defines.h	/^#define CHANNEL /;"	d
CHANNELSCOUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  static constexpr int CHANNELSCOUNT       = 16;$/;"	m	class:IECDrive	typeref:typename:int
CHARTABLE_VIC2CPU	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.cpp	/^inline int CHARTABLE_VIC2CPU(int addr)$/;"	f	typeref:typename:int
CHRTBL_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define CHRTBL_ADDR /;"	d
CHRTBL_DEVICES	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define CHRTBL_DEVICES /;"	d
CHRTBL_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define CHRTBL_SIZE /;"	d
CHSV	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))$/;"	f	struct:CHSV
CHSV	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^struct CHSV {$/;"	s
CHSVPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette16( const CHSV& c00,const CHSV& c01,const CHSV& c02,const CHSV& c03,$/;"	f	class:CHSVPalette16
CHSVPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette16( const CHSV& c1)$/;"	f	class:CHSVPalette16
CHSVPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette16( const CHSV& c1, const CHSV& c2)$/;"	f	class:CHSVPalette16
CHSVPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette16( const CHSV& c1, const CHSV& c2, const CHSV& c3)$/;"	f	class:CHSVPalette16
CHSVPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette16( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)$/;"	f	class:CHSVPalette16
CHSVPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette16( const CHSVPalette16& rhs)$/;"	f	class:CHSVPalette16
CHSVPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette16( const TProgmemHSVPalette16& rhs)$/;"	f	class:CHSVPalette16
CHSVPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette16() {};$/;"	f	class:CHSVPalette16
CHSVPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^class CHSVPalette16 {$/;"	c
CHSVPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette256( const CHSV& c00,const CHSV& c01,const CHSV& c02,const CHSV& c03,$/;"	f	class:CHSVPalette256
CHSVPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette256( const CHSV& c1)$/;"	f	class:CHSVPalette256
CHSVPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette256( const CHSV& c1, const CHSV& c2)$/;"	f	class:CHSVPalette256
CHSVPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette256( const CHSV& c1, const CHSV& c2, const CHSV& c3)$/;"	f	class:CHSVPalette256
CHSVPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette256( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)$/;"	f	class:CHSVPalette256
CHSVPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette256( const CHSVPalette16& rhs16)$/;"	f	class:CHSVPalette256
CHSVPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette256( const CHSVPalette256& rhs)$/;"	f	class:CHSVPalette256
CHSVPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette256( const TProgmemRGBPalette16& rhs)$/;"	f	class:CHSVPalette256
CHSVPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette256() {};$/;"	f	class:CHSVPalette256
CHSVPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^class CHSVPalette256 {$/;"	c
CHSVPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette32( const CHSV& c00,const CHSV& c01,const CHSV& c02,const CHSV& c03,$/;"	f	class:CHSVPalette32
CHSVPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette32( const CHSV& c1)$/;"	f	class:CHSVPalette32
CHSVPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette32( const CHSV& c1, const CHSV& c2)$/;"	f	class:CHSVPalette32
CHSVPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette32( const CHSV& c1, const CHSV& c2, const CHSV& c3)$/;"	f	class:CHSVPalette32
CHSVPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette32( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)$/;"	f	class:CHSVPalette32
CHSVPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette32( const CHSVPalette32& rhs)$/;"	f	class:CHSVPalette32
CHSVPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette32( const TProgmemHSVPalette32& rhs)$/;"	f	class:CHSVPalette32
CHSVPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette32() {};$/;"	f	class:CHSVPalette32
CHSVPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^class CHSVPalette32 {$/;"	c
CL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint8_t i8086::CL()$/;"	f	class:fabgl::i8086	typeref:typename:uint8_t
CLC1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define CLC1 /;"	d
CLEDController	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(Unc/;"	f	class:CLEDController
CLEDController	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^class CLEDController {$/;"	c
CLI_CHK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^#define CLI_CHK /;"	d
CLI_CHK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^#define CLI_CHK$/;"	d
CLK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  static const int      CLK      = 4433618;$/;"	m	class:fabgl::VICNoiseGenerator	typeref:typename:const int
CLKS_PER_US	examples/test/.pio/libdeps/esp32dev/FastLED/src/led_sysdefs.h	/^#define CLKS_PER_US /;"	d
CLKS_TO_MICROS	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^#define CLKS_TO_MICROS(/;"	d
CLKTimeOutError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static bool CLKTimeOutError(int PS2Port)    { return s_CLKTimeOutError[PS2Port]; }$/;"	f	class:fabgl::PS2Controller	typeref:typename:bool
CLKTimeOutError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::CLKTimeOutError()$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
CLK_DBL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/led_sysdefs_arm_k20.h	/^#define CLK_DBL /;"	d
CLK_DBL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/led_sysdefs_arm_k66.h	/^#define CLK_DBL /;"	d
CLK_DBL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/led_sysdefs_arm_kl26.h	/^#define CLK_DBL /;"	d
CLK_DBL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/led_sysdefs_arm_mxrt1062.h	/^#define CLK_DBL /;"	d
CLK_ENABLE_INPUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define CLK_ENABLE_INPUT(/;"	d	file:
CLK_ENABLE_OUTPUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define CLK_ENABLE_OUTPUT(/;"	d	file:
CLK_RX_TIMEOUT_VAL	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define CLK_RX_TIMEOUT_VAL /;"	d	file:
CLK_TX_TIMEOUT_VAL	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define CLK_TX_TIMEOUT_VAL /;"	d	file:
CLOCKLESS_FREQUENCY	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^    #define CLOCKLESS_FREQUENCY /;"	d
CLOCKLESS_FREQUENCY	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^#define CLOCKLESS_FREQUENCY /;"	d
CLOCKLESS_FREQUENCY	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define CLOCKLESS_FREQUENCY /;"	d
CLOCKLESS_PIO_MAX_TIME_PERIOD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_gen.h	/^#define CLOCKLESS_PIO_MAX_TIME_PERIOD /;"	d
CLOCKLESS_PIO_SIDESET_COUNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_gen.h	/^#define CLOCKLESS_PIO_SIDESET_COUNT /;"	d
CLOCKLESS_PIO_WRAP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_gen.h	/^#define CLOCKLESS_PIO_WRAP /;"	d
CLOCKLESS_PIO_WRAP_TARGET	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_gen.h	/^#define CLOCKLESS_PIO_WRAP_TARGET /;"	d
CLOCK_DIVIDER_A	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static int CLOCK_DIVIDER_A;$/;"	v	typeref:typename:int
CLOCK_DIVIDER_B	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static int CLOCK_DIVIDER_B;$/;"	v	typeref:typename:int
CLOCK_DIVIDER_N	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static int CLOCK_DIVIDER_N;$/;"	v	typeref:typename:int
CLOCK_HI_DELAY	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	#define CLOCK_HI_DELAY /;"	d
CLOCK_LO_DELAY	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	#define CLOCK_LO_DELAY /;"	d
CLR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define CLR(/;"	d	file:
CM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	#define CM /;"	d
CM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	#define CM /;"	d
CMC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define CMC(/;"	d	file:
CMDBYTE_DISABLE_KEYBOARD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CMDBYTE_DISABLE_KEYBOARD /;"	d	file:
CMDBYTE_DISABLE_MOUSE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CMDBYTE_DISABLE_MOUSE /;"	d	file:
CMDBYTE_ENABLE_KEYBOARD_IRQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CMDBYTE_ENABLE_KEYBOARD_IRQ /;"	d	file:
CMDBYTE_ENABLE_MOUSE_IRQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CMDBYTE_ENABLE_MOUSE_IRQ /;"	d	file:
CMDBYTE_STD_SCAN_CONVERSION	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CMDBYTE_STD_SCAN_CONVERSION /;"	d	file:
CMDBYTE_SYSFLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CMDBYTE_SYSFLAG /;"	d	file:
CMDBYTE_UNUSED1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CMDBYTE_UNUSED1 /;"	d	file:
CMDBYTE_UNUSED2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CMDBYTE_UNUSED2 /;"	d	file:
CMDS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^} CMDS[COMMANDSCOUNT] = {$/;"	v	typeref:typename:const struct __anon1168f0c30108[]
CMP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define CMP(/;"	d	file:
CMPLOOP5	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define CMPLOOP5 /;"	d
CMinWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^	CMinWait() { mLastMicros = 0; }$/;"	f	class:CMinWait
CMinWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<int WAIT> class CMinWait {$/;"	c
COLLECTION_MASK	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  COLLECTION_MASK = 0x60,$/;"	e	enum:__anon9bd8dbab0103
COLOR2RGB888	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^const RGB888 COLOR2RGB888[16] = {$/;"	v	namespace:fabgl	typeref:typename:const RGB888[16]
COLORED_ATTRIBUTE_BOLD	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define COLORED_ATTRIBUTE_BOLD /;"	d	file:
COLORED_ATTRIBUTE_FAINT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define COLORED_ATTRIBUTE_FAINT /;"	d	file:
COLORED_ATTRIBUTE_INVALID	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define COLORED_ATTRIBUTE_INVALID /;"	d	file:
COLORED_ATTRIBUTE_ITALIC	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define COLORED_ATTRIBUTE_ITALIC /;"	d	file:
COLORED_ATTRIBUTE_UNDERLINE	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define COLORED_ATTRIBUTE_UNDERLINE /;"	d	file:
COLORS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.cpp	/^static const RGB222 COLORS[16] = { {0, 0, 0},   \/\/ black$/;"	v	typeref:typename:const RGB222[16]	file:
COLOR_GREEN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^#define COLOR_GREEN /;"	d
COLOR_RED	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^#define COLOR_RED /;"	d
COLOR_WHITE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^#define COLOR_WHITE /;"	d
COLOR_YELLOW	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^#define COLOR_YELLOW /;"	d
COLUMNS_COUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^constexpr int       COLUMNS_COUNT = sizeof(COLUMNS_STR) \/ sizeof(char const *);$/;"	v	typeref:typename:int
COLUMNS_INT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const int    COLUMNS_INT[] = { 0, 80, 132 };$/;"	v	typeref:typename:const int[]
COLUMNS_STR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * COLUMNS_STR[] = { "Max", "80", "132" };$/;"	v	typeref:typename:const char * []
COM1Interrupt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^bool Machine::COM1Interrupt(PC8250 * source, void * context)$/;"	f	class:Machine	typeref:typename:bool
COM2Interrupt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^bool Machine::COM2Interrupt(PC8250 * source, void * context)$/;"	f	class:Machine	typeref:typename:bool
COMHEAD_INIT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define COMHEAD_INIT /;"	d
COMHEAD_LEN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define COMHEAD_LEN /;"	d
COMHEAD_LOADERFLAG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define COMHEAD_LOADERFLAG /;"	d
COMHEAD_MAGIC	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define COMHEAD_MAGIC /;"	d
COMHEAD_RSXCOUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define COMHEAD_RSXCOUNT /;"	d
COMHEAD_RSXRECORDS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define COMHEAD_RSXRECORDS /;"	d
COMMANDBUFFERMAXLEN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  static constexpr int COMMANDBUFFERMAXLEN = 256;$/;"	m	class:IECDrive	typeref:typename:int
COMMANDSCOUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^constexpr int COMMANDSCOUNT = 24;$/;"	v	typeref:typename:int
COMP0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t COMP0;                   \/*!< Offset: 0x020 (R\/W)  Comparator Register 0    /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
COMP1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t COMP1;                   \/*!< Offset: 0x030 (R\/W)  Comparator Register 1    /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
COMP2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t COMP2;                   \/*!< Offset: 0x040 (R\/W)  Comparator Register 2    /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
COMP3	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t COMP3;                   \/*!< Offset: 0x050 (R\/W)  Comparator Register 3    /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
COMPARE_RESULT_DIFFER	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/arithmeticCompare.hpp	/^  COMPARE_RESULT_DIFFER = 0,$/;"	e	enum:CompareResult
COMPARE_RESULT_EQUAL	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/arithmeticCompare.hpp	/^  COMPARE_RESULT_EQUAL = 1,$/;"	e	enum:CompareResult
COMPARE_RESULT_GREATER	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/arithmeticCompare.hpp	/^  COMPARE_RESULT_GREATER = 2,$/;"	e	enum:CompareResult
COMPARE_RESULT_GREATER_OR_EQUAL	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/arithmeticCompare.hpp	/^  COMPARE_RESULT_GREATER_OR_EQUAL = 3,$/;"	e	enum:CompareResult
COMPARE_RESULT_LESS	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/arithmeticCompare.hpp	/^  COMPARE_RESULT_LESS = 4,$/;"	e	enum:CompareResult
COMPARE_RESULT_LESS_OR_EQUAL	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/arithmeticCompare.hpp	/^  COMPARE_RESULT_LESS_OR_EQUAL = 5$/;"	e	enum:CompareResult
COMPONENT_ADD_INCLUDEDIRS	examples/test/.pio/libdeps/esp32dev/ArduinoJson/component.mk	/^COMPONENT_ADD_INCLUDEDIRS := src$/;"	m
COMPONENT_ADD_INCLUDEDIRS	examples/test/.pio/libdeps/esp32dev/FabGL/component.mk	/^COMPONENT_ADD_INCLUDEDIRS := src src\/comdrivers src\/devdrivers src\/dispdrivers src\/emudevs s/;"	m
COMPONENT_ADD_INCLUDEDIRS	examples/test/.pio/libdeps/esp32dev/FastLED/component.mk	/^COMPONENT_ADD_INCLUDEDIRS := .\/src src\/platforms\/esp\/32$/;"	m
COMPONENT_SRCDIRS	examples/test/.pio/libdeps/esp32dev/FabGL/component.mk	/^COMPONENT_SRCDIRS := src src\/comdrivers src\/devdrivers src\/dispdrivers src\/emudevs src\/netw/;"	m
COMPONENT_SRCDIRS	examples/test/.pio/libdeps/esp32dev/FastLED/component.mk	/^COMPONENT_SRCDIRS := .\/src src\/platforms\/esp\/32$/;"	m
COMPOSE_STATUS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define COMPOSE_STATUS /;"	d	file:
CONCAT_HELPER	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define CONCAT_HELPER(/;"	d
CONCAT_MACRO	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define CONCAT_MACRO(/;"	d
CONFIGURE_CLK_INPUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define CONFIGURE_CLK_INPUT(/;"	d	file:
CONFIGURE_CLK_OUTPUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define CONFIGURE_CLK_OUTPUT(/;"	d	file:
CONFIGURE_DAT_INPUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define CONFIGURE_DAT_INPUT(/;"	d	file:
CONFIGURE_DAT_OUTPUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define CONFIGURE_DAT_OUTPUT(/;"	d	file:
CONFIG_IDF_TARGET_ESP32	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^#define CONFIG_IDF_TARGET_ESP32 /;"	d
CONFIG_ULP_COPROC_RESERVE_MEM	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^#define CONFIG_ULP_COPROC_RESERVE_MEM /;"	d	file:
CONSOLEMODE_DISABLE_CTRLC_EXIT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define CONSOLEMODE_DISABLE_CTRLC_EXIT /;"	d
CONSOLEMODE_DISABLE_STOPSCROLL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define CONSOLEMODE_DISABLE_STOPSCROLL /;"	d
CONSOLEMODE_FUN11_CTRLC_ONLY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define CONSOLEMODE_FUN11_CTRLC_ONLY /;"	d
CONSOLEMODE_RAWCONSOLE_OUTMODE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define CONSOLEMODE_RAWCONSOLE_OUTMODE /;"	d
CONT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	enum ECont { CONT, NOCONT };$/;"	e	enum:ARMHardwareSPIOutput::ECont
CONT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	enum ECont { CONT, NOCONT };$/;"	e	enum:ARMHardwareSPIOutput::ECont
COPYFILE_BUFFERSIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define COPYFILE_BUFFERSIZE /;"	d
CORNERSENSE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  static constexpr int CORNERSENSE = 10;$/;"	m	class:fabgl::uiFrame	typeref:typename:int
COctoWS2811Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^  COctoWS2811Controller() { pocto = NULL; }$/;"	f	class:COctoWS2811Controller
COctoWS2811Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^class COctoWS2811Controller : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {$/;"	c
COctoWS2811Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/octows2811_controller.h	/^  COctoWS2811Controller() { pocto = NULL; }$/;"	f	class:COctoWS2811Controller
COctoWS2811Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/octows2811_controller.h	/^class COctoWS2811Controller : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {$/;"	c
CP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define CP(/;"	d	file:
CPICNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t CPICNT;                  \/*!< Offset: 0x008 (R\/W)  CPI Count Register       /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
CPIR_CPDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  CPIR_CPDR,              \/* Handle "CPIR" and "CPDR". *\/$/;"	e	enum:fabgl::__anonfeda45510103	file:
CPI_CPD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  CPI_CPD,                \/* Handle "CPI" and "CPD". *\/$/;"	e	enum:fabgl::__anonfeda45510103	file:
CPL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  CPL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
CPL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define CPL(/;"	d	file:
CPM141_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM14/cpm141_dsk.h	/^unsigned int CPM141_dsk_len = 337664;$/;"	v	typeref:typename:unsigned int
CPM63K_1_DSK_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/minidisks/CPM22/cpm22_disk1_minidsk.h	/^unsigned int CPM63K_1_DSK_len = 76800;$/;"	v	typeref:typename:unsigned int
CPM63K_2_DSK_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/minidisks/CPM22/cpm22_disk2_minidsk.h	/^unsigned int CPM63K_2_DSK_len = 76800;$/;"	v	typeref:typename:unsigned int
CPMMAXFILES	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^#define CPMMAXFILES /;"	d
CPU	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^enum class CPU {$/;"	g
CPU	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  MOS6502 & CPU()  { return m_CPU; }$/;"	f	class:Machine	typeref:typename:MOS6502 &
CPU_exec	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::CPU_exec(uint16_t addr, uint16_t exitAddr)$/;"	f	class:HAL	typeref:typename:void
CPU_getPC	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  uint16_t CPU_getPC()                            { return m_Z80.getPC(); }$/;"	f	class:HAL	typeref:typename:uint16_t
CPU_pushStack	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::CPU_pushStack(uint16_t value)$/;"	f	class:HAL	typeref:typename:void
CPU_readRegByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  uint8_t CPU_readRegByte(int reg)                { return m_Z80.readRegByte(reg); }$/;"	f	class:HAL	typeref:typename:uint8_t
CPU_readRegWord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  uint16_t CPU_readRegWord(int reg)               { return m_Z80.readRegWord(reg); }$/;"	f	class:HAL	typeref:typename:uint16_t
CPU_reset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  void CPU_reset()                                { m_Z80.reset(); }$/;"	f	class:HAL	typeref:typename:void
CPU_setPC	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  void CPU_setPC(uint16_t value)                  { m_Z80.setPC(value); }$/;"	f	class:HAL	typeref:typename:void
CPU_setStackPointer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::CPU_setStackPointer(uint16_t value)$/;"	f	class:HAL	typeref:typename:void
CPU_stop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  void CPU_stop()                                 { m_execMainLoop = false; }$/;"	f	class:HAL	typeref:typename:void
CPU_writeRegByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  void CPU_writeRegByte(int reg, uint8_t value)   { m_Z80.writeRegByte(reg, value); }$/;"	f	class:HAL	typeref:typename:void
CPU_writeRegWord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  void CPU_writeRegWord(int reg, uint16_t value)  { m_Z80.writeRegWord(reg, value); }$/;"	f	class:HAL	typeref:typename:void
CPUsetALBH	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::CPUsetALBH(uint8_t A, uint8_t L, uint8_t B, uint8_t H)$/;"	f	class:BDOS	typeref:typename:void
CPUsetALBH	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::CPUsetALBH(uint8_t AL, uint8_t BH)$/;"	f	class:BDOS	typeref:typename:void
CPUsetHLBA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::CPUsetHLBA(uint16_t HL, uint16_t BA)$/;"	f	class:BDOS	typeref:typename:void
CP_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  CP_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
CP_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  CP_N,$/;"	e	enum:fabgl::__anonfeda45510103	file:
CP_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  CP_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
CPixelLEDController	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CPixelLEDController() : CLEDController() {}$/;"	f	class:CPixelLEDController
CPixelLEDController	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^template<EOrder RGB_ORDER, int LANES=1, uint32_t MASK=0xFFFFFFFF> class CPixelLEDController : pu/;"	c
CPixelView	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView(PIXEL_TYPE *_leds, int _len) : dir(_len < 0 ? -1 : 1), len(_len), leds(_le/;"	f	class:CPixelView
CPixelView	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView(PIXEL_TYPE *_leds, int _start, int _end) : dir(((_end-_start)<0) ? -1 : 1)/;"	f	class:CPixelView
CPixelView	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView(const CPixelView & other) : dir(other.dir), len(other.len), leds(other.led/;"	f	class:CPixelView
CPixelView	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^class CPixelView {$/;"	c
CRGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))$/;"	f	struct:CRGB
CRGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))$/;"	f	struct:CRGB
CRGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))$/;"	f	struct:CRGB
CRGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))$/;"	f	struct:CRGB
CRGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB(const CHSV& rhs) __attribute__((always_inline))$/;"	f	struct:CRGB
CRGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^struct CRGB {$/;"	s
CRGBArray	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    CRGBArray() : CPixelView<CRGB>(rawleds, SIZE) {}$/;"	f	class:CRGBArray
CRGBArray	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^class CRGBArray : public CPixelView<CRGB> {$/;"	c
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CHSV rhs[16])$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CHSV& c1)$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CHSV& c1, const CHSV& c2)$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CHSV& c1, const CHSV& c2, const CHSV& c3)$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CHSVPalette16& rhs)$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CRGB rhs[16])$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CRGB& c1)$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CRGB& c1, const CRGB& c2)$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CRGB& c1, const CRGB& c2, const CRGB& c3)$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CRGB& c1, const CRGB& c2, const CRGB& c3, const CRGB& c4)$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const CRGBPalette16& rhs)$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16( const TProgmemRGBPalette16& rhs)$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16() {};$/;"	f	class:CRGBPalette16
CRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^class CRGBPalette16 {$/;"	c
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( TProgmemRGBGradientPalette_bytes progpal )$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CHSV rhs[256])$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CHSV& c1)$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CHSV& c1, const CHSV& c2)$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CHSV& c1, const CHSV& c2, const CHSV& c3)$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CHSVPalette256& rhs)$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CRGB rhs[256])$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CRGB& c1)$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CRGB& c1, const CRGB& c2)$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CRGB& c1, const CRGB& c2, const CRGB& c3)$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CRGB& c1, const CRGB& c2, const CRGB& c3, const CRGB& c4)$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CRGBPalette16& rhs16)$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const CRGBPalette256& rhs)$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256( const TProgmemRGBPalette16& rhs)$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256() {};$/;"	f	class:CRGBPalette256
CRGBPalette256	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^class CRGBPalette256 {$/;"	c
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( TProgmemRGBGradientPalette_bytes progpal )$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CHSV rhs[32])$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CHSV& c1)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CHSV& c1, const CHSV& c2)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CHSV& c1, const CHSV& c2, const CHSV& c3)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CHSVPalette32& rhs)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CRGB rhs[32])$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CRGB& c1)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CRGB& c1, const CRGB& c2)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CRGB& c1, const CRGB& c2, const CRGB& c3)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CRGB& c1, const CRGB& c2, const CRGB& c3, const CRGB& c4)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CRGBPalette16& rhs16)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const CRGBPalette32& rhs)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const TProgmemRGBPalette16& rhs)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32( const TProgmemRGBPalette32& rhs)$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32() {};$/;"	f	class:CRGBPalette32
CRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^class CRGBPalette32 {$/;"	c
CRGBSet	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^typedef CPixelView<CRGB> CRGBSet;$/;"	t	typeref:typename:CPixelView<CRGB>
CS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::CS()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
CSI_7BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char CSI_7BIT[] = "\\e[";$/;"	v	namespace:fabgl	typeref:typename:const char[]
CSI_8BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char CSI_8BIT[] = "\\x9B";$/;"	v	namespace:fabgl	typeref:typename:const char[]
CSV	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint16_t CSV;$/;"	m	struct:DiscParameterHeader	typeref:typename:uint16_t
CSmartMatrixController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/smartmatrix_t3.h	/^class CSmartMatrixController : public CPixelLEDController<RGB_ORDER> {$/;"	c
CTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t    CTRL  : 1;  \/**< Status of CTRL (left or right) key *\/$/;"	m	struct:fabgl::uiKeyEventInfo	typeref:typename:uint8_t:1
CTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t    CTRL       : 1;  \/**< CTRL key state at the time of this virtual key event *\/$/;"	m	struct:fabgl::VirtualKeyItem	typeref:typename:uint8_t:1
CTRL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t CTRL;                    \/*!< Offset: 0x000 (R\/W)  Control Register         /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
CTRLCHAR_TO_STR	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char * CTRLCHAR_TO_STR[] = {"NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BELL", "BS",/;"	v	namespace:fabgl	typeref:typename:const char * []
CTRLCMD_DISABLE_KEYBOARD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_DISABLE_KEYBOARD /;"	d	file:
CTRLCMD_DISABLE_MOUSE_PORT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_DISABLE_MOUSE_PORT /;"	d	file:
CTRLCMD_ENABLE_KEYBOARD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_ENABLE_KEYBOARD /;"	d	file:
CTRLCMD_ENABLE_MOUSE_PORT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_ENABLE_MOUSE_PORT /;"	d	file:
CTRLCMD_GET_COMMAND_BYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_GET_COMMAND_BYTE /;"	d	file:
CTRLCMD_NONE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_NONE /;"	d	file:
CTRLCMD_READ_CONTROLLER_RAM_BEGIN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_READ_CONTROLLER_RAM_BEGIN /;"	d	file:
CTRLCMD_READ_CONTROLLER_RAM_END	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_READ_CONTROLLER_RAM_END /;"	d	file:
CTRLCMD_READ_INPUT_PORT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_READ_INPUT_PORT /;"	d	file:
CTRLCMD_READ_OUTPUT_PORT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_READ_OUTPUT_PORT /;"	d	file:
CTRLCMD_SELF_TEST	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_SELF_TEST /;"	d	file:
CTRLCMD_SYSTEM_RESET	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_SYSTEM_RESET /;"	d	file:
CTRLCMD_TEST_KEYBOARD_PORT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_TEST_KEYBOARD_PORT /;"	d	file:
CTRLCMD_TEST_MOUSE_PORT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_TEST_MOUSE_PORT /;"	d	file:
CTRLCMD_WRITE_COMMAND_BYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_WRITE_COMMAND_BYTE /;"	d	file:
CTRLCMD_WRITE_CONTROLLER_RAM_BEGIN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_WRITE_CONTROLLER_RAM_BEGIN /;"	d	file:
CTRLCMD_WRITE_CONTROLLER_RAM_END	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_WRITE_CONTROLLER_RAM_END /;"	d	file:
CTRLCMD_WRITE_KEYBOARD_OUTPUT_BUFFER	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_WRITE_KEYBOARD_OUTPUT_BUFFER /;"	d	file:
CTRLCMD_WRITE_MOUSE_OUTPUT_BUFFER	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_WRITE_MOUSE_OUTPUT_BUFFER /;"	d	file:
CTRLCMD_WRITE_OUTPUT_PORT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_WRITE_OUTPUT_PORT /;"	d	file:
CTRLCMD_WRITE_TO_MOUSE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define CTRLCMD_WRITE_TO_MOUSE /;"	d	file:
CTRLS_DIST	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  static constexpr int CTRLS_DIST          = 4;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:int
CTRLS_DIST	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  static constexpr int CTRLS_DIST          = 4;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:int
CTSStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiLabel *         CTSStatus;$/;"	m	struct:ConfDialogApp	typeref:typename:uiLabel *
CTSStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool CTSStatus()                     { return m_ctsPin != GPIO_UNUSED ? gpio_get_level(m_ctsPi/;"	f	class:fabgl::SerialPort	typeref:typename:bool
CURSORS	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static Cursor CURSORS[] = {$/;"	v	namespace:fabgl	typeref:typename:Cursor[]
CVBS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  CVBS,     \/**< Composite display. *\/$/;"	e	enum:fabgl::VideoMode
CVBS16Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^CVBS16Controller::CVBS16Controller()$/;"	f	class:fabgl::CVBS16Controller
CVBS16Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.h	/^class CVBS16Controller : public CVBSPalettedController {$/;"	c	namespace:fabgl
CVBS16_COLUMNSQUANTUM	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^#define CVBS16_COLUMNSQUANTUM /;"	d	file:
CVBS16_GETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^#define CVBS16_GETPIXEL(/;"	d	file:
CVBS16_GETPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^static inline __attribute__((always_inline)) int CVBS16_GETPIXELINROW(uint8_t * row, int x) {$/;"	f	namespace:fabgl	typeref:typename:int	file:
CVBS16_INVERTPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^#define CVBS16_INVERTPIXELINROW(/;"	d	file:
CVBS16_INVERT_PIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^#define CVBS16_INVERT_PIXEL(/;"	d	file:
CVBS16_SETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^static inline __attribute__((always_inline)) void CVBS16_SETPIXEL(int x, int y, int value) {$/;"	f	namespace:fabgl	typeref:typename:void	file:
CVBS16_SETPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^static inline __attribute__((always_inline)) void CVBS16_SETPIXELINROW(uint8_t * row, int x, int/;"	f	namespace:fabgl	typeref:typename:void	file:
CVBSBaseController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^CVBSBaseController::CVBSBaseController()$/;"	f	class:fabgl::CVBSBaseController
CVBSBaseController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^class CVBSBaseController : public GenericBitmappedDisplayController {$/;"	c	namespace:fabgl
CVBSDrawScanlineCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^typedef void (*CVBSDrawScanlineCallback)(void * arg, uint16_t * dest, int destSample, int scanLi/;"	t	namespace:fabgl	typeref:typename:void (*)(void * arg,uint16_t * dest,int destSample,int scanLine)
CVBSGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^CVBSGenerator::CVBSGenerator() :$/;"	f	class:fabgl::CVBSGenerator
CVBSGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^class CVBSGenerator {$/;"	c	namespace:fabgl
CVBSPalettedController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^CVBSPalettedController::CVBSPalettedController(int columnsQuantum, NativePixelFormat nativePixel/;"	f	class:fabgl::CVBSPalettedController
CVBSPalettedController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^class CVBSPalettedController : public CVBSBaseController {$/;"	c	namespace:fabgl
CVBSParams	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^struct CVBSParams {$/;"	s	namespace:fabgl
CVBS_ALLOCATED_LINES	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^#define CVBS_ALLOCATED_LINES /;"	d
CVBS_I_NTSC_M	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  CVBS_I_NTSC_M() {$/;"	f	struct:fabgl::CVBS_I_NTSC_M	file:
CVBS_I_NTSC_M	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^static const struct CVBS_I_NTSC_M : CVBSParams {$/;"	s	namespace:fabgl	file:
CVBS_I_NTSC_M	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^} CVBS_I_NTSC_M;$/;"	v	namespace:fabgl	typeref:typename:const struct fabgl::CVBS_I_NTSC_M
CVBS_I_NTSC_M_WIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  CVBS_I_NTSC_M_WIDE() : CVBS_I_NTSC_M() {$/;"	f	struct:fabgl::CVBS_I_NTSC_M_WIDE	file:
CVBS_I_NTSC_M_WIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^static const struct CVBS_I_NTSC_M_WIDE : CVBS_I_NTSC_M {$/;"	s	namespace:fabgl	file:
CVBS_I_NTSC_M_WIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^} CVBS_I_NTSC_M_WIDE;$/;"	v	namespace:fabgl	typeref:typename:const struct fabgl::CVBS_I_NTSC_M_WIDE
CVBS_I_PAL_B	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  CVBS_I_PAL_B() {$/;"	f	struct:fabgl::CVBS_I_PAL_B	file:
CVBS_I_PAL_B	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^static const struct CVBS_I_PAL_B : CVBSParams {$/;"	s	namespace:fabgl	file:
CVBS_I_PAL_B	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^} CVBS_I_PAL_B;$/;"	v	namespace:fabgl	typeref:typename:const struct fabgl::CVBS_I_PAL_B
CVBS_I_PAL_B_WIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  CVBS_I_PAL_B_WIDE() : CVBS_I_PAL_B() {$/;"	f	struct:fabgl::CVBS_I_PAL_B_WIDE	file:
CVBS_I_PAL_B_WIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^static const struct CVBS_I_PAL_B_WIDE : CVBS_I_PAL_B {$/;"	s	namespace:fabgl	file:
CVBS_I_PAL_B_WIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^} CVBS_I_PAL_B_WIDE;$/;"	v	namespace:fabgl	typeref:typename:const struct fabgl::CVBS_I_PAL_B_WIDE
CVBS_NOBURSTFLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^#define CVBS_NOBURSTFLAG /;"	d
CVBS_P_NTSC_M	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  CVBS_P_NTSC_M() : CVBS_I_NTSC_M() {$/;"	f	struct:fabgl::CVBS_P_NTSC_M	file:
CVBS_P_NTSC_M	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^static const struct CVBS_P_NTSC_M : CVBS_I_NTSC_M {$/;"	s	namespace:fabgl	file:
CVBS_P_NTSC_M	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^} CVBS_P_NTSC_M;$/;"	v	namespace:fabgl	typeref:typename:const struct fabgl::CVBS_P_NTSC_M
CVBS_P_NTSC_M_EXT	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  CVBS_P_NTSC_M_EXT() : CVBS_P_NTSC_M_WIDE() {$/;"	f	struct:fabgl::CVBS_P_NTSC_M_EXT	file:
CVBS_P_NTSC_M_EXT	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^static const struct CVBS_P_NTSC_M_EXT : CVBS_P_NTSC_M_WIDE {$/;"	s	namespace:fabgl	file:
CVBS_P_NTSC_M_EXT	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^} CVBS_P_NTSC_M_EXT;$/;"	v	namespace:fabgl	typeref:typename:const struct fabgl::CVBS_P_NTSC_M_EXT
CVBS_P_NTSC_M_WIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  CVBS_P_NTSC_M_WIDE() : CVBS_P_NTSC_M() {$/;"	f	struct:fabgl::CVBS_P_NTSC_M_WIDE	file:
CVBS_P_NTSC_M_WIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^static const struct CVBS_P_NTSC_M_WIDE : CVBS_P_NTSC_M {$/;"	s	namespace:fabgl	file:
CVBS_P_NTSC_M_WIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^} CVBS_P_NTSC_M_WIDE;$/;"	v	namespace:fabgl	typeref:typename:const struct fabgl::CVBS_P_NTSC_M_WIDE
CVBS_P_PAL_B	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  CVBS_P_PAL_B() : CVBS_I_PAL_B() {$/;"	f	struct:fabgl::CVBS_P_PAL_B	file:
CVBS_P_PAL_B	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^static const struct CVBS_P_PAL_B : CVBS_I_PAL_B {$/;"	s	namespace:fabgl	file:
CVBS_P_PAL_B	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^} CVBS_P_PAL_B;$/;"	v	namespace:fabgl	typeref:typename:const struct fabgl::CVBS_P_PAL_B
CVBS_P_PAL_B_WIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  CVBS_P_PAL_B_WIDE() : CVBS_P_PAL_B() {$/;"	f	struct:fabgl::CVBS_P_PAL_B_WIDE	file:
CVBS_P_PAL_B_WIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^static const struct CVBS_P_PAL_B_WIDE : CVBS_P_PAL_B {$/;"	s	namespace:fabgl	file:
CVBS_P_PAL_B_WIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^} CVBS_P_PAL_B_WIDE;$/;"	v	namespace:fabgl	typeref:typename:const struct fabgl::CVBS_P_PAL_B_WIDE
CVBS_SUBCARRIERPHASES	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^#define CVBS_SUBCARRIERPHASES /;"	d
CVBS_Standards	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^static CVBSParams const * CVBS_Standards[] = {$/;"	v	namespace:fabgl	typeref:typename:CVBSParams const * []	file:
CWS2812SerialController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/ws2812serial_controller.h	/^    CWS2812SerialController() { pserial = NULL; }$/;"	f	class:CWS2812SerialController
CWS2812SerialController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/ws2812serial_controller.h	/^class CWS2812SerialController : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {$/;"	c
CX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::CX()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
CYCCNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t CYCCNT;                  \/*!< Offset: 0x004 (R\/W)  Cycle Count Register     /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
C_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define C_FLAG /;"	d	file:
C_NS	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^#define C_NS(/;"	d
CadetBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        CadetBlue=0x5F9EA0,             \/\/\/< @htmlcolorblock{5F9EA0}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Cancel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Cancel   = 0,   \/**< Messagebox has been canceled *\/$/;"	e	enum:fabgl::uiMessageBoxResult
Cancel	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  Cancel      = 5,       \/**< Button CANCEL or ESC key pressed *\/$/;"	e	enum:fabgl::InputResult
Candle	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    Candle=0xFF9329 \/* 1900 K, 255, 147, 41 *\/,$/;"	e	enum:__anon4cec7af20203
Canvas	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^Canvas::Canvas(BitmappedDisplayController * displayController)$/;"	f	class:fabgl::Canvas
Canvas	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.h	/^class Canvas {$/;"	c	namespace:fabgl
CarbonArc	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    CarbonArc=0xFFFAF4 \/* 5200 K, 255, 250, 244 *\/,$/;"	e	enum:__anon4cec7af20203
CarriageReturn	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  CarriageReturn,           \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
Center	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Center,           \/**< Center align *\/$/;"	e	enum:fabgl::uiHAlign
CenterLeftResize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  CenterLeftResize,     \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
CenterRightResize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  CenterRightResize,    \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
ChangeOut	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^  typedef void (*ChangeOut)(void * context, int timerIndex);$/;"	t	class:fabgl::PIT8253	typeref:typename:void (*)(void * context,int timerIndex)
Channel	examples/test/lib/JFixLib/src/JFixture.h	/^enum Channel{$/;"	g
ChannelType	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  enum class ChannelType {$/;"	g	class:IECDrive
CharStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^enum CharStyle {$/;"	g	namespace:fabgl
CharStyleToColorAttributeIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int CharStyleToColorAttributeIndex(CharStyle attribute)$/;"	f	namespace:fabgl	typeref:typename:int
CharWidth	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int CharWidth          = 8;$/;"	m	class:MOS6561	typeref:typename:const int
Chartreuse	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Chartreuse=0x7FFF00,            \/\/\/< @htmlcolorblock{7FFF00}$/;"	e	enum:CRGB::__anonbcc8608a0c03
CheckBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  CheckBox,          \/**< Normal checkbox *\/$/;"	e	enum:fabgl::uiCheckBoxKind
ChipPackage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^enum class ChipPackage {$/;"	g	namespace:fabgl
Chocolate	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Chocolate=0xD2691E,             \/\/\/< @htmlcolorblock{D2691E}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Circle	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Circle,  \/**< Circle line ends *\/$/;"	e	enum:fabgl::LineEnds
Clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Clear,$/;"	e	enum:fabgl::PrimitiveCmd
ClearBlueSky	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    ClearBlueSky=0x409CFF \/* 20000 K, 64, 156, 255 *\/,$/;"	e	enum:__anon4cec7af20203
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/clockless_apollo3.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/clockless_arm_d21.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/clockless_arm_kl26.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^class ClocklessController : public CPixelLEDController<_RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER>$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    ClocklessController()$/;"	f	class:ClocklessController
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER>$/;"	c
ClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^class ClocklessController : public CPixelLEDController<RGB_ORDER> {$/;"	c
Close	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    Close,$/;"	e	enum:IECDrive::ArbState
CloseButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  CloseButton,          \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
Closed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    Closed,$/;"	e	enum:IECDrive::ChannelType
Code	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  enum Code {$/;"	g	class:DeserializationError
CodePage	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.h	/^struct CodePage {$/;"	s	namespace:fabgl
CodePage1252	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.cpp	/^const CodePage CodePage1252 = {$/;"	v	namespace:fabgl	typeref:typename:const CodePage
CodePage437	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.cpp	/^const CodePage CodePage437 = {$/;"	v	namespace:fabgl	typeref:typename:const CodePage
CodePages	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.h	/^struct CodePages {$/;"	s	namespace:fabgl
Codepoint	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp	/^  Codepoint() : highSurrogate_(0), codepoint_(0) {}$/;"	f	class:Utf16::Codepoint
Codepoint	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp	/^class Codepoint {$/;"	c	namespace:Utf16
CollectionData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionData.hpp	/^class CollectionData {$/;"	c
Collision	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    void Collision( int x)$/;"	f	struct:Race::Player	typeref:typename:void
Collision Detection Example (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Collision Detection Example (click for video):$/;"	S	chapter:FabGL
CollisionDetectionCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^typedef void (*CollisionDetectionCallback)(void * callbackObj, Sprite * spriteA, Sprite * sprite/;"	t	namespace:fabgl	typeref:typename:void (*)(void * callbackObj,Sprite * spriteA,Sprite * spriteB,Point collisionPoint)
CollisionDetector	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^CollisionDetector::CollisionDetector(int maxObjectsCount, int width, int height)$/;"	f	class:fabgl::CollisionDetector
CollisionDetector	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^class CollisionDetector {$/;"	c	namespace:fabgl
Color	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^enum Color {$/;"	g	namespace:fabgl
ColorFromPalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CHSV ColorFromPalette( const CHSVPalette16& pal, uint8_t index, uint8_t brightness, TBlendType b/;"	f	typeref:typename:CHSV
ColorFromPalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CHSV ColorFromPalette( const CHSVPalette256& pal, uint8_t index, uint8_t brightness, TBlendType)$/;"	f	typeref:typename:CHSV
ColorFromPalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CHSV ColorFromPalette( const CHSVPalette32& pal, uint8_t index, uint8_t brightness, TBlendType b/;"	f	typeref:typename:CHSV
ColorFromPalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType b/;"	f	typeref:typename:CRGB
ColorFromPalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB ColorFromPalette( const CRGBPalette256& pal, uint8_t index, uint8_t brightness, TBlendType)$/;"	f	typeref:typename:CRGB
ColorFromPalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB ColorFromPalette( const CRGBPalette32& pal, uint8_t index, uint8_t brightness, TBlendType b/;"	f	typeref:typename:CRGB
ColorFromPalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB ColorFromPalette( const TProgmemRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlen/;"	f	typeref:typename:CRGB
ColorFromPalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB ColorFromPalette( const TProgmemRGBPalette32& pal, uint8_t index, uint8_t brightness, TBlen/;"	f	typeref:typename:CRGB
ColorTemperature	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^} ColorTemperature;$/;"	t	typeref:enum:__anon4cec7af20203
Commodore VIC20 emulator (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Commodore VIC20 emulator (click for video):$/;"	S	chapter:FabGL
CompareResult	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/arithmeticCompare.hpp	/^enum CompareResult {$/;"	g
Comparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  explicit Comparer(T value) : rhs(value) {}$/;"	f	struct:Comparer
Comparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  explicit Comparer(const T& value)$/;"	f	struct:Comparer
Comparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  explicit Comparer(decltype(nullptr)) : NullComparer() {}$/;"	f	struct:Comparer
Comparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^struct Comparer<T, typename enable_if<IsString<T>::value>::type>$/;"	s
Comparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^struct Comparer<T, typename enable_if<is_convertible<$/;"	s
Comparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^struct Comparer<T, typename enable_if<is_integral<T>::value ||$/;"	s
Comparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^struct Comparer<decltype(nullptr), void> : NullComparer {$/;"	s
ComparerBase	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^struct ComparerBase : Visitor<CompareResult> {};$/;"	s
ConfDialogApp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^struct ConfDialogApp : public uiApp {$/;"	s
ConfigDialog	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^struct ConfigDialog : public uiApp {$/;"	s	file:
Contribution to ArduinoJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CONTRIBUTING.md	/^# Contribution to ArduinoJson$/;"	c
Contributor Covenant Code of Conduct	examples/test/.pio/libdeps/esp32dev/FastLED/code_of_conduct.md	/^# Contributor Covenant Code of Conduct$/;"	c
ConvCtrl	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^enum class ConvCtrl {$/;"	g	namespace:fabgl
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^struct Converter<JsonArray> : private detail::VariantAttorney {$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^struct Converter<JsonArrayConst> : private detail::VariantAttorney {$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^struct Converter<JsonObject> : private detail::VariantAttorney {$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^struct Converter<JsonObjectConst> : private detail::VariantAttorney {$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^struct Converter {$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^struct Converter<$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^struct Converter<JsonString> : private detail::VariantAttorney {$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^struct Converter<SerializedValue<const char*>>$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^struct Converter<T, typename detail::enable_if<detail::is_enum<T>::value>::type>$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^struct Converter<bool> : private detail::VariantAttorney {$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^struct Converter<const char*> : private detail::VariantAttorney {$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^struct Converter<decltype(nullptr)> : private detail::VariantAttorney {$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^struct Converter<JsonVariant> : private detail::VariantAttorney {$/;"	s
Converter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^struct Converter<JsonVariantConst> : private detail::VariantAttorney {$/;"	s
ConverterNeedsWriteableRef	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^struct ConverterNeedsWriteableRef {$/;"	s	namespace:detail
CoolWhiteFluorescent	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    CoolWhiteFluorescent=0xD4EBFF \/* 0 K, 212, 235, 255 *\/,$/;"	e	enum:__anon4cec7af20203
Copied	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  enum Ownership { Copied, Linked };$/;"	e	enum:JsonString::Ownership
Copy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StoragePolicy.hpp	/^struct Copy {};$/;"	s	namespace:StringStoragePolicy
CopyRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CopyRect,$/;"	e	enum:fabgl::PrimitiveCmd
Coral	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Coral=0xFF7F50,                 \/\/\/< @htmlcolorblock{FF7F50}$/;"	e	enum:CRGB::__anonbcc8608a0c03
CoreDebug	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^#define CoreDebug /;"	d
CoreDebug_BASE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^#define CoreDebug_BASE /;"	d
CoreDebug_DEMCR_TRCENA_Msk	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^#define CoreDebug_DEMCR_TRCENA_Msk /;"	d
CoreDebug_DEMCR_TRCENA_Pos	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^#define CoreDebug_DEMCR_TRCENA_Pos /;"	d
CoreDebug_Type	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^} CoreDebug_Type;$/;"	t	typeref:struct:__anon5f1c9b840108
CoreUsage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct CoreUsage {$/;"	s	namespace:fabgl
CornflowerBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        CornflowerBlue=0x6495ED,        \/\/\/< @htmlcolorblock{6495ED}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Cornsilk	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Cornsilk=0xFFF8DC,              \/\/\/< @htmlcolorblock{FFF8DC}$/;"	e	enum:CRGB::__anonbcc8608a0c03
CountingDecorator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/CountingDecorator.hpp	/^  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}$/;"	f	class:CountingDecorator
CountingDecorator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/CountingDecorator.hpp	/^class CountingDecorator {$/;"	c
CreateVirtualKeysQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  CreateVirtualKeysQueue,  \/**< Virtual keys are generated and put on a queue. You can call Key/;"	e	enum:fabgl::KbdMode
Crimson	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Crimson=0xDC143C,               \/\/\/< @htmlcolorblock{DC143C}$/;"	e	enum:CRGB::__anonbcc8608a0c03
CurrentVideoMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct CurrentVideoMode {$/;"	s	namespace:fabgl
Cursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct Cursor {$/;"	s	namespace:fabgl
CursorCross1	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorCross1,               \/**< 9x9 cross *\/$/;"	e	enum:fabgl::CursorName
CursorCross2	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorCross2,               \/**< 11x11 cross *\/$/;"	e	enum:fabgl::CursorName
CursorDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  CursorDown,  \/**< Cursor Down *\/$/;"	e	enum:fabgl::LineEditorSpecialChar
CursorDownArrow	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorDownArrow,            \/**< 11x11 down arrow *\/$/;"	e	enum:fabgl::CursorName
CursorHome	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  CursorHome,               \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
CursorLeft	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  CursorLeft,               \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
CursorLeftArrow	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorLeftArrow,            \/**< 11x11 left arrow *\/$/;"	e	enum:fabgl::CursorName
CursorMove	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorMove,                 \/**< 19x19 move *\/$/;"	e	enum:fabgl::CursorName
CursorName	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^enum CursorName : uint8_t {$/;"	g	namespace:fabgl	typeref:typename:uint8_t
CursorOff	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  CursorOff,                \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
CursorOn	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  CursorOn,                 \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
CursorPen	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorPen,                  \/**< 16x16 pen *\/$/;"	e	enum:fabgl::CursorName
CursorPoint	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorPoint,                \/**< 5x5 point *\/$/;"	e	enum:fabgl::CursorName
CursorPointer	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorPointer,              \/**< 12x17 mouse pointer *\/$/;"	e	enum:fabgl::CursorName
CursorPointerAmigaLike	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorPointerAmigaLike,     \/**< 11x11 Amiga like colored mouse pointer *\/$/;"	e	enum:fabgl::CursorName
CursorPointerShadowed	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorPointerShadowed,      \/**< 11x19 shadowed mouse pointer *\/$/;"	e	enum:fabgl::CursorName
CursorPointerSimple	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorPointerSimple,        \/**< 11x19 mouse pointer *\/$/;"	e	enum:fabgl::CursorName
CursorPointerSimpleReduced	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorPointerSimpleReduced, \/**< 10x15 mouse pointer *\/$/;"	e	enum:fabgl::CursorName
CursorPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  CursorPos,                \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
CursorPos2	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  CursorPos2,               \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
CursorResize1	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorResize1,              \/**< 12x12 resize orientation 1 *\/$/;"	e	enum:fabgl::CursorName
CursorResize2	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorResize2,              \/**< 12x12 resize orientation 2 *\/$/;"	e	enum:fabgl::CursorName
CursorResize3	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorResize3,              \/**< 11x17 resize orientation 3 *\/$/;"	e	enum:fabgl::CursorName
CursorResize4	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorResize4,              \/**< 17x11 resize orientation 4 *\/$/;"	e	enum:fabgl::CursorName
CursorRight	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  CursorRight,              \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
CursorRightArrow	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorRightArrow,           \/**< 11x11 right arrow *\/$/;"	e	enum:fabgl::CursorName
CursorTextInput	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorTextInput,            \/**< 7x15 text input *\/$/;"	e	enum:fabgl::CursorName
CursorUp	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  CursorUp,    \/**< Cursor Up *\/$/;"	e	enum:fabgl::LineEditorSpecialChar
CursorUp	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  CursorUp,                 \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
CursorUpArrow	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  CursorUpArrow,              \/**< 11x11 up arrow *\/$/;"	e	enum:fabgl::CursorName
Cyan	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Cyan,           \/**< Equivalent to RGB888(0,128,128) *\/$/;"	e	enum:fabgl::Color
Cyan	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Cyan=0x00FFFF,                  \/\/\/< @htmlcolorblock{00FFFF}$/;"	e	enum:CRGB::__anonbcc8608a0c03
CyclesPerFrame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int CyclesPerFrame     = FrameWidth * FrameHeight \/ 4;$/;"	m	class:MOS6561	typeref:typename:const int
D	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define D /;"	d	file:
DAA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  DAA,$/;"	e	enum:fabgl::__anonfeda45510103	file:
DAA_DAS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static int32_t DAA_DAS()$/;"	f	namespace:fabgl	typeref:typename:int32_t	file:
DAC	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  DAC,             \/**< Use DAC. Available on gpio 25 or 26. Very low resources occupation. *\/$/;"	e	enum:fabgl::SoundGenMethod
DAD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define DAD(/;"	d	file:
DADVANCE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define DADVANCE /;"	d
DATALENS_INT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const int    DATALENS_INT[]   = { 5, 6, 7, 8 };$/;"	v	typeref:typename:const int[]
DATALENS_STR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * DATALENS_STR[]   = { "5 bits", "6 bits", "7 bits", "8 bits" };$/;"	v	typeref:typename:const char * []
DATA_NOP	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^class DATA_NOP {$/;"	c
DATA_RATE_KHZ	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^#define DATA_RATE_KHZ(/;"	d
DATA_RATE_MHZ	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^#define DATA_RATE_MHZ(/;"	d
DATEBASE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^  static constexpr int32_t DATEBASE = 722389;$/;"	m	struct:DateTime	typeref:typename:int32_t
DATE_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t DATE_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
DAT_ENABLE_INPUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define DAT_ENABLE_INPUT(/;"	d	file:
DAT_ENABLE_OUTPUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define DAT_ENABLE_OUTPUT(/;"	d	file:
DCDStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool DCDStatus()                     { return m_dcdPin != GPIO_UNUSED ? gpio_get_level(m_dcdPi/;"	f	class:fabgl::SerialPort	typeref:typename:bool
DCOUNT2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define DCOUNT2 /;"	d
DCR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define DCR(/;"	d	file:
DCRDR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t DCRDR;                   \/*!< Offset: 0x008 (R\/W)  Debug Core Register Data /;"	m	struct:__anon5f1c9b840108	typeref:typename:__IO uint32_t
DCRSR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __O  uint32_t DCRSR;                   \/*!< Offset: 0x004 ( \/W)  Debug Core Register Selec/;"	m	struct:__anon5f1c9b840108	typeref:typename:__O uint32_t
DCS_7BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char DCS_7BIT[] = "\\eP";$/;"	v	namespace:fabgl	typeref:typename:const char[]
DCS_8BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char DCS_8BIT[] = "\\x90";$/;"	v	namespace:fabgl	typeref:typename:const char[]
DD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define DD(/;"	d	file:
DDRA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t DDRA()                     { return m_DDRA; }$/;"	f	class:fabgl::VIA6522	typeref:typename:uint8_t
DDRB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t DDRB()                     { return m_DDRB; }$/;"	f	class:fabgl::VIA6522	typeref:typename:uint8_t
DD_PREFIX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  DD_PREFIX,$/;"	e	enum:fabgl::__anonfeda45510103	file:
DE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define DE /;"	d	file:
DE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define DE /;"	d	file:
DEBUG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^void DEBUG( String str)$/;"	f	typeref:typename:void
DEBUG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^#define DEBUG /;"	d
DEBUG6522	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define DEBUG6522 /;"	d
DEBUG6561	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^#define DEBUG6561 /;"	d
DEBUGIEC	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^#define DEBUGIEC /;"	d
DEBUGMACHINE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^#define DEBUGMACHINE /;"	d
DEBUG_BDOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^#define DEBUG_BDOS /;"	d
DEBUG_BIOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^#define DEBUG_BIOS /;"	d
DEBUG_ERRORS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^#define DEBUG_ERRORS /;"	d
DEBUG_FULL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^#define DEBUG_FULL /;"	d
DEBUG_HAL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^#define DEBUG_HAL /;"	d
DEBUG_NONE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^#define DEBUG_NONE /;"	d
DEBUG_SCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^#define DEBUG_SCB /;"	d
DEC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define DEC(/;"	d	file:
DECGRAPH_TO_CP437	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^static const uint8_t DECGRAPH_TO_CP437[255] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,/;"	v	namespace:fabgl	typeref:typename:const uint8_t[255]	file:
DECLARE_GRADIENT_PALETTE	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^#define DECLARE_GRADIENT_PALETTE(/;"	d
DECLARE_SPI0	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^#define DECLARE_SPI0(/;"	d
DECLARE_SPI1	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^ #define DECLARE_SPI1(/;"	d
DECOMPOSE_STATUS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define DECOMPOSE_STATUS(/;"	d	file:
DEC_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  DEC_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
DEC_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  DEC_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
DEC_RR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  DEC_RR,$/;"	e	enum:fabgl::__anonfeda45510103	file:
DEFAULTCPUSPEEDHZ	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^#define DEFAULTCPUSPEEDHZ /;"	d
DEFAULT_TERMINAL_TYPE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.h	/^#define DEFAULT_TERMINAL_TYPE /;"	d
DEFINE_GRADIENT_PALETTE	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorpalettes.cpp	/^DEFINE_GRADIENT_PALETTE( Rainbow_gp ) {$/;"	f
DEFINE_GRADIENT_PALETTE	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^#define DEFINE_GRADIENT_PALETTE(/;"	d
DELAYDRAW_MILLIS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^#define DELAYDRAW_MILLIS /;"	d
DELAY_NS	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	#define DELAY_NS /;"	d
DEMCR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t DEMCR;                   \/*!< Offset: 0x00C (R\/W)  Debug Exception and Monit/;"	m	struct:__anon5f1c9b840108	typeref:typename:__IO uint32_t
DEVICE_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t DEVICE_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
DF_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define DF_ADDR /;"	d	file:
DH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint8_t i8086::DH()$/;"	f	class:fabgl::i8086	typeref:typename:uint8_t
DHCSR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t DHCSR;                   \/*!< Offset: 0x000 (R\/W)  Debug Halting Control and/;"	m	struct:__anon5f1c9b840108	typeref:typename:__IO uint32_t
DI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  DI,$/;"	e	enum:fabgl::__anonfeda45510103	file:
DI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::DI()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
DIFF_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t DIFF_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
DINT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define DINT(/;"	d
DINTPIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define DINTPIN(/;"	d
DIR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    __IO uint32_t  DIR;                               \/*!< Direction of GPIO pins.             /;"	m	struct:__anon7de97ea30108	typeref:typename:__IO uint32_t
DIRBCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint16_t DIRBCB;$/;"	m	struct:DiscParameterHeader	typeref:typename:uint16_t
DIRCLR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    __IO uint32_t  DIRCLR;                            \/*!< DIR clear register.                 /;"	m	struct:__anon7de97ea30108	typeref:typename:__IO uint32_t
DIRECTORY_EXT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define DIRECTORY_EXT /;"	d
DIRLABELFLAGS_ACCESS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define DIRLABELFLAGS_ACCESS /;"	d
DIRLABELFLAGS_CREATE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define DIRLABELFLAGS_CREATE /;"	d
DIRLABELFLAGS_EXISTS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define DIRLABELFLAGS_EXISTS /;"	d
DIRLABELFLAGS_PASSWORD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define DIRLABELFLAGS_PASSWORD /;"	d
DIRLABELFLAGS_UPDATE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define DIRLABELFLAGS_UPDATE /;"	d
DIRLABEL_FILENAME	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define DIRLABEL_FILENAME /;"	d
DIRSET	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    __IO uint32_t  DIRSET;                            \/*!< DIR set register.                   /;"	m	struct:__anon7de97ea30108	typeref:typename:__IO uint32_t
DIR_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t DIR_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
DISABLE_DITHER	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define DISABLE_DITHER /;"	d
DISKCOUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static const int DISKCOUNT                    = 4;$/;"	m	class:Mits88Disk	typeref:typename:const int
DISKCOUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^constexpr int DISKCOUNT = 4;$/;"	v	typeref:typename:int
DITHER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define DITHER /;"	d
DITHER5	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define DITHER5 /;"	d
DIVIDER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define DIVIDER /;"	d
DJNZ_E	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  DJNZ_E,$/;"	e	enum:fabgl::__anonfeda45510103	file:
DL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint8_t i8086::DL()$/;"	f	class:fabgl::i8086	typeref:typename:uint8_t
DMA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  uint16_t  DMA;$/;"	m	struct:FileSearchState	typeref:typename:uint16_t
DMABuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^struct DMABuffer {$/;"	s
DMXSERIAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<EOrder RGB_ORDER> class DMXSERIAL : public DMXSerialController<RGB_ORDER> {};$/;"	c
DMXSIMPLE	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class DMXSIMPLE : public DMXSimpleController<DATA_P/;"	c
DMXSerialController	examples/test/.pio/libdeps/esp32dev/FastLED/src/dmx.h	/^template <EOrder RGB_ORDER = RGB> class DMXSerialController : public CPixelLEDController<RGB_ORD/;"	c
DMXSimpleController	examples/test/.pio/libdeps/esp32dev/FastLED/src/dmx.h	/^template <uint8_t DATA_PIN, EOrder RGB_ORDER = RGB> class DMXSimpleController : public CPixelLED/;"	c
DNOP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define DNOP /;"	d
DONE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define DONE /;"	d
DONE	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    DONE,$/;"	e	enum:JEnvState
DOS_1_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/AltairDOS/DOS_1_dsk.h	/^const uint8_t DOS_1_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
DOS_2_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/AltairDOS/DOS_2_dsk.h	/^const uint8_t DOS_2_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
DOTSTAR	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	DOTSTAR   \/\/\/< APA102 LED chipset alias$/;"	e	enum:ESPIChipsets
DP1903Controller400Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class DP1903Controller400Khz : public ClocklessController<DATA_PIN, 4 * FMUL, 16 * FMUL, 4 * FMU/;"	c
DP1903Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class DP1903Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 8 * FMUL, 2 * FMUL/;"	c
DPB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint16_t DPB;$/;"	m	struct:DiscParameterHeader	typeref:typename:uint16_t
DPB_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define DPB_ADDR /;"	d
DPB_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define DPB_SIZE /;"	d
DPH_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define DPH_ADDR /;"	d
DPH_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define DPH_SIZE /;"	d
DPoint	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  struct DPoint {$/;"	s	class:PolygonsTest
DPoint	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  struct DPoint {$/;"	s	class:PolygonsTest
DPoint	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  struct DPoint {$/;"	s	class:PolygonsTest
DS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::DS()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
DS3231	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^DS3231::DS3231()$/;"	f	class:fabgl::DS3231
DS3231	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^class DS3231 {$/;"	c	namespace:fabgl
DS3231_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^#define DS3231_ADDR /;"	d	file:
DS3231_FREQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^#define DS3231_FREQ /;"	d	file:
DSRStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool DSRStatus()                     { return m_dsrPin != GPIO_UNUSED ? gpio_get_level(m_dsrPi/;"	f	class:fabgl::SerialPort	typeref:typename:bool
DTABCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint16_t DTABCB;$/;"	m	struct:DiscParameterHeader	typeref:typename:uint16_t
DTRStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool DTRStatus()                     { return m_DTRStatus; }$/;"	f	class:fabgl::SerialPort	typeref:typename:bool
DUE_TIMER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define DUE_TIMER /;"	d
DUE_TIMER_CHANNEL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define DUE_TIMER_CHANNEL /;"	d
DUE_TIMER_GROUP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define DUE_TIMER_GROUP /;"	d
DUE_TIMER_ID	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define DUE_TIMER_ID /;"	d
DUE_TIMER_RUNNING	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define DUE_TIMER_RUNNING /;"	d
DUE_TIMER_VAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define DUE_TIMER_VAL /;"	d
DUMPEVENTS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^#define DUMPEVENTS /;"	d	file:
DUMP_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t DUMP_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
DUSE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define DUSE /;"	d
DWT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^#define DWT /;"	d
DWT_BASE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^#define DWT_BASE /;"	d
DWT_CTRL_CYCCNTENA_Msk	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^#define DWT_CTRL_CYCCNTENA_Msk /;"	d
DWT_CTRL_CYCCNTENA_Pos	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^#define DWT_CTRL_CYCCNTENA_Pos /;"	d
DWT_Type	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^} DWT_Type;$/;"	t	typeref:struct:__anon5f1c9b840208
DX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::DX()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
DarkBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkBlue=0x00008B,              \/\/\/< @htmlcolorblock{00008B}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkCyan	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkCyan=0x008B8B,              \/\/\/< @htmlcolorblock{008B8B}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkGoldenrod	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkGoldenrod=0xB8860B,         \/\/\/< @htmlcolorblock{B8860B}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkGray	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkGray=0xA9A9A9,              \/\/\/< @htmlcolorblock{A9A9A9}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkGreen=0x006400,             \/\/\/< @htmlcolorblock{006400}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkGrey	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkGrey=0xA9A9A9,              \/\/\/< @htmlcolorblock{A9A9A9}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkKhaki	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkKhaki=0xBDB76B,             \/\/\/< @htmlcolorblock{BDB76B}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkMagenta	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkMagenta=0x8B008B,           \/\/\/< @htmlcolorblock{8B008B}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkOliveGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkOliveGreen=0x556B2F,        \/\/\/< @htmlcolorblock{556B2F}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkOrange	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkOrange=0xFF8C00,            \/\/\/< @htmlcolorblock{FF8C00}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkOrchid	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkOrchid=0x9932CC,            \/\/\/< @htmlcolorblock{9932CC}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkRed	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkRed=0x8B0000,               \/\/\/< @htmlcolorblock{8B0000}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkSalmon	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkSalmon=0xE9967A,            \/\/\/< @htmlcolorblock{E9967A}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkSeaGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkSeaGreen=0x8FBC8F,          \/\/\/< @htmlcolorblock{8FBC8F}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkSlateBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkSlateBlue=0x483D8B,         \/\/\/< @htmlcolorblock{483D8B}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkSlateGray	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkSlateGray=0x2F4F4F,         \/\/\/< @htmlcolorblock{2F4F4F}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkSlateGrey	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkSlateGrey=0x2F4F4F,         \/\/\/< @htmlcolorblock{2F4F4F}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkTurquoise	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkTurquoise=0x00CED1,         \/\/\/< @htmlcolorblock{00CED1}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DarkViolet	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DarkViolet=0x9400D3,            \/\/\/< @htmlcolorblock{9400D3}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DataAccepted	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    DataAccepted,$/;"	e	enum:IECDrive::LinkState
DateTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^  DateTime() : days_since1978(0), hour_BCD(0), minutes_BCD(0), seconds_BCD(0) { }$/;"	f	struct:DateTime
DateTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^  DateTime(int year, int month, int day, int hour, int minutes, int seconds) { set(year, month, /;"	f	struct:DateTime
DateTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^struct DateTime {$/;"	s
DateTime	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^DateTime::DateTime(int seconds_, int minutes_, int hours_, int dayOfMonth_, int month_, int year/;"	f	class:fabgl::DateTime
DateTime	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  DateTime() { }$/;"	f	struct:fabgl::DateTime
DateTime	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^struct DateTime {$/;"	s	namespace:fabgl
DeadKeyVirtualKeyDef	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^struct DeadKeyVirtualKeyDef {$/;"	s	namespace:fabgl
DeepPink	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DeepPink=0xFF1493,              \/\/\/< @htmlcolorblock{FF1493}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DeepSkyBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DeepSkyBlue=0x00BFFF,           \/\/\/< @htmlcolorblock{00BFFF}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DefaultAllocator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/DynamicJsonDocument.hpp	/^struct DefaultAllocator {$/;"	s
DefaultChange	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  DefaultChange,    \/**< Trig interrupt if GPIO is opposite of default value *\/$/;"	e	enum:fabgl::MCPIntTrigger
DefaultConfFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^static const char DefaultConfFile[] =$/;"	v	typeref:typename:const char[]
Delegate	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Delegate() : m_func(nullptr) {$/;"	f	struct:fabgl::Delegate
Delegate	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Delegate(Func f) : Delegate() {$/;"	f	struct:fabgl::Delegate
Delegate	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct Delegate {$/;"	s	namespace:fabgl
DeleteCharacter	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  DeleteCharacter,          \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
DeleteLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  DeleteLine,               \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
Deserialization	examples/test/.pio/libdeps/esp32dev/ArduinoJson/README.md	/^### Deserialization$/;"	S	section:Quickstart
DeserializationError	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  DeserializationError() {}$/;"	f	class:DeserializationError
DeserializationError	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  DeserializationError(Code c) : code_(c) {}$/;"	f	class:DeserializationError
DeserializationError	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^class DeserializationError {$/;"	c
DeserializationOption	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^namespace DeserializationOption {$/;"	n
DeserializationOption	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/NestingLimit.hpp	/^namespace DeserializationOption {$/;"	n
DeserializationOptions	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationOptions.hpp	/^struct DeserializationOptions {$/;"	s
Dev board connected to TFT ILI9341 240x320, TFT ST7789 240x240 and OLED SSD1306 128x64 (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Dev board connected to TFT ILI9341 240x320, TFT ST7789 240x240 and OLED SSD1306 128x64 (clic/;"	S	chapter:FabGL
Device	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  Device(Machine * machine) : m_machine(machine) { }$/;"	f	struct:Device
Device	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^struct Device {$/;"	s
DialogStyle	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^struct DialogStyle : uiStyle {$/;"	s
DimGray	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DimGray=0x696969,               \/\/\/< @htmlcolorblock{696969}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DimGrey	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DimGrey=0x696969,               \/\/\/< @htmlcolorblock{696969}$/;"	e	enum:CRGB::__anonbcc8608a0c03
DirComp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int DirComp(const void * i1, const void * i2)$/;"	f	namespace:fabgl	typeref:typename:int
DirItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct DirItem {$/;"	s	namespace:fabgl
DirectSunlight	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    DirectSunlight=0xFFFFFF \/* 6000 K, 255, 255, 255 *\/,$/;"	e	enum:__anon4cec7af20203
DiscParameterBlock	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^struct DiscParameterBlock {$/;"	s
DiscParameterHeader	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^struct DiscParameterHeader {$/;"	s
DiskFormat	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^enum DiskFormat {$/;"	g
Disk_338K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  Disk_338K,$/;"	e	enum:DiskFormat
DisplayControllerType	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^enum class DisplayControllerType {$/;"	g	namespace:fabgl
DodgerBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        DodgerBlue=0x1E90FF,            \/\/\/< @htmlcolorblock{1E90FF}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Double Buffering Example (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Double Buffering Example (click for video):$/;"	S	chapter:FabGL
DoubleWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  GlyphOptions & DoubleWidth(uint8_t value) { doubleWidth = value; return *this; }$/;"	f	union:fabgl::GlyphOptions	typeref:typename:GlyphOptions &
DrawBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  DrawBitmap,$/;"	e	enum:fabgl::PrimitiveCmd
DrawEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  DrawEllipse,$/;"	e	enum:fabgl::PrimitiveCmd
DrawGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  DrawGlyph,$/;"	e	enum:fabgl::PrimitiveCmd
DrawPath	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  DrawPath,$/;"	e	enum:fabgl::PrimitiveCmd
DrawRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  DrawRect,$/;"	e	enum:fabgl::PrimitiveCmd
DrawScanlineCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^typedef void (*DrawScanlineCallback)(void * arg, uint8_t * dest, int scanLine);$/;"	t	namespace:fabgl	typeref:typename:void (*)(void * arg,uint8_t * dest,int scanLine)
DriveType	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^enum class DriveType {$/;"	g	namespace:fabgl
DummyWriter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/DummyWriter.hpp	/^class DummyWriter {$/;"	c
DynamicJsonBuffer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/compatibility.hpp	/^#define DynamicJsonBuffer /;"	d
DynamicJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/DynamicJsonDocument.hpp	/^typedef BasicJsonDocument<DefaultAllocator> DynamicJsonDocument;$/;"	t	typeref:typename:BasicJsonDocument<DefaultAllocator>
E	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define E /;"	d	file:
EASE16	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^#define EASE16(/;"	d	file:
EASE8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^#define EASE8(/;"	d	file:
EASE8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EASE8_C /;"	d
EBDA_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define EBDA_ADDR /;"	d
EBDA_DRIVER_OFFSET	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^EBDA_DRIVER_OFFSET equ 0x22     ; Pointing device device driver far call offset$/;"	d
EBDA_DRIVER_OFFSET	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define EBDA_DRIVER_OFFSET /;"	d
EBDA_DRIVER_SEG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^EBDA_DRIVER_SEG    equ 0x24     ; Pointing device device driver far call segment$/;"	d
EBDA_DRIVER_SEG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define EBDA_DRIVER_SEG /;"	d
EBDA_FLAGS1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^EBDA_FLAGS1        equ 0x26     ; Flags 1$/;"	d
EBDA_FLAGS1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define EBDA_FLAGS1 /;"	d
EBDA_FLAGS2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^EBDA_FLAGS2        equ 0x27     ; Flags 2$/;"	d
EBDA_FLAGS2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define EBDA_FLAGS2 /;"	d
EBDA_PACKET	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^EBDA_PACKET        equ 0x28     ; Start of packet$/;"	d
EBDA_PACKET	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define EBDA_PACKET /;"	d
EBDA_SEG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^EBDA_SEG           equ 0x9fc0   ; segment of Extended BIOS Data Area (EBDA) - must match with sa/;"	d
EBDA_SEG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^#define EBDA_SEG /;"	d
EBlockChipsets	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^enum EBlockChipsets {$/;"	g
ECHO_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t ECHO_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
ECont	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	enum ECont { CONT, NOCONT };$/;"	g	class:ARMHardwareSPIOutput
ECont	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	enum ECont { CONT, NOCONT };$/;"	g	class:ARMHardwareSPIOutput
ED_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t ED_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
ED_INSTRUCTION_TABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^static const unsigned char ED_INSTRUCTION_TABLE[256] = {$/;"	v	namespace:fabgl	typeref:typename:const unsigned char[256]	file:
ED_PREFIX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  ED_PREFIX,$/;"	e	enum:fabgl::__anonfeda45510103	file:
ED_UNDEFINED	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  ED_UNDEFINED            \/* ED_UNDEFINED is used to catch undefined$/;"	e	enum:fabgl::__anonfeda45510103	file:
EDitherMode	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^typedef uint8_t EDitherMode;$/;"	t	typeref:typename:uint8_t
EI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  EI,$/;"	e	enum:fabgl::__anonfeda45510103	file:
ELast	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	enum ELast { NOTLAST, LAST };$/;"	g	class:ARMHardwareSPIOutput
ELast	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	enum ELast { NOTLAST, LAST };$/;"	g	class:ARMHardwareSPIOutput
END	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  END,                      \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
ENDLOOP5	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define ENDLOOP5 /;"	d
EOrder	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^enum EOrder {$/;"	g
ERASE_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t ERASE_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
ES	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::ES()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
ESM	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^enum ESM { SMART_MATRIX };$/;"	g
ESP32	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^#define ESP32$/;"	d
ESP32D0WDQ5	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  ESP32D0WDQ5,  \/**< ESP32D0WDQ5 *\/$/;"	e	enum:fabgl::ChipPackage
ESP32D0WDQ6	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  ESP32D0WDQ6,  \/**< Unknown *\/$/;"	e	enum:fabgl::ChipPackage
ESP32D2WDQ5	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  ESP32D2WDQ5,  \/**< ESP32D2WDQ5 *\/$/;"	e	enum:fabgl::ChipPackage
ESP32PICOD4	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  ESP32PICOD4,  \/**< ESP32PICOD4 *\/$/;"	e	enum:fabgl::ChipPackage
ESP32RMTController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^ESP32RMTController::ESP32RMTController(int DATA_PIN, int T1, int T2, int T3, int maxChannel, int/;"	f	class:ESP32RMTController
ESP32RMTController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^class ESP32RMTController$/;"	c
ESP32SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	ESP32SPIOutput() { m_pSelect = NULL; }$/;"	f	class:ESP32SPIOutput
ESP32SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	ESP32SPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ESP32SPIOutput
ESP32SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^class ESP32SPIOutput {$/;"	c
ESP8266	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/led_sysdefs_esp8266.h	/^#define ESP8266$/;"	d
ESP8266SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	ESP8266SPIOutput() { m_pSelect = NULL; }$/;"	f	class:ESP8266SPIOutput
ESP8266SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	ESP8266SPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ESP8266SPIOutput
ESP8266SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^class ESP8266SPIOutput {$/;"	c
ESPCLKS_TO_NS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^#define ESPCLKS_TO_NS(/;"	d
ESPIChipsets	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^enum ESPIChipsets {$/;"	g
ESP_ADJUST	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^#define ESP_ADJUST /;"	d
ESP_ADJUST	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^#define ESP_ADJUST /;"	d
ESP_ADJUST2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^#define ESP_ADJUST2 /;"	d
ESP_ADJUST2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^#define ESP_ADJUST2 /;"	d
ESP_IDF_VERSION	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^#define ESP_IDF_VERSION /;"	d
ESP_IDF_VERSION_VAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^#define ESP_IDF_VERSION_VAL(/;"	d
ESP_TO_RMT_CYCLES	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define ESP_TO_RMT_CYCLES(/;"	d
EVERY_N_BSECONDS	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EVERY_N_BSECONDS(/;"	d
EVERY_N_BSECONDS_I	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EVERY_N_BSECONDS_I(/;"	d
EVERY_N_HOURS	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EVERY_N_HOURS(/;"	d
EVERY_N_HOURS_I	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EVERY_N_HOURS_I(/;"	d
EVERY_N_MILLIS	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EVERY_N_MILLIS(/;"	d
EVERY_N_MILLISECONDS	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EVERY_N_MILLISECONDS(/;"	d
EVERY_N_MILLISECONDS_I	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EVERY_N_MILLISECONDS_I(/;"	d
EVERY_N_MILLIS_I	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EVERY_N_MILLIS_I(/;"	d
EVERY_N_MINUTES	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EVERY_N_MINUTES(/;"	d
EVERY_N_MINUTES_I	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EVERY_N_MINUTES_I(/;"	d
EVERY_N_SECONDS	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EVERY_N_SECONDS(/;"	d
EVERY_N_SECONDS_I	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define EVERY_N_SECONDS_I(/;"	d
EVTGROUP_DONE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^#define EVTGROUP_DONE /;"	d	file:
EVTGROUP_READ	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^#define EVTGROUP_READ /;"	d	file:
EVTGROUP_READY	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^#define EVTGROUP_READY /;"	d	file:
EVTGROUP_WRITE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^#define EVTGROUP_WRITE /;"	d	file:
EWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	enum EWait { PRE, POST, NONE };$/;"	g	class:ARMHardwareSPIOutput
EWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	enum EWait { PRE, POST, NONE };$/;"	g	class:ARMHardwareSPIOutput
EXCCNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t EXCCNT;                  \/*!< Offset: 0x00C (R\/W)  Exception Overhead Count /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
EXCHANGE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define EXCHANGE(/;"	d	file:
EXTIO_CONFIG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define EXTIO_CONFIG /;"	d	file:
EXTIO_CONFIG_AVAILABLE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define EXTIO_CONFIG_AVAILABLE /;"	d	file:
EXTIO_CONFIG_INT_POLARITY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define EXTIO_CONFIG_INT_POLARITY /;"	d	file:
EXTIO_DIRA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define EXTIO_DIRA /;"	d	file:
EXTIO_DIRB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define EXTIO_DIRB /;"	d	file:
EXTIO_GPIO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define EXTIO_GPIO /;"	d	file:
EXTIO_GPIOCONF	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define EXTIO_GPIOCONF /;"	d	file:
EXTIO_GPIOSEL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define EXTIO_GPIOSEL /;"	d	file:
EXTIO_PORTA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define EXTIO_PORTA /;"	d	file:
EXTIO_PORTB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define EXTIO_PORTB /;"	d	file:
EXTIO_PULLUPA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define EXTIO_PULLUPA /;"	d	file:
EXTIO_PULLUPB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define EXTIO_PULLUPB /;"	d	file:
EXX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  EXX,$/;"	e	enum:fabgl::__anonfeda45510103	file:
EX_AF_AF_PRIME	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  EX_AF_AF_PRIME,$/;"	e	enum:fabgl::__anonfeda45510103	file:
EX_DE_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  EX_DE_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
EX_INDIRECT_SP_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  EX_INDIRECT_SP_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
ElementProxy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp	/^  ElementProxy(TUpstream upstream, size_t index)$/;"	f	class:ElementProxy
ElementProxy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp	/^  ElementProxy(const ElementProxy& src)$/;"	f	class:ElementProxy
ElementProxy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp	/^class ElementProxy : public VariantRefBase<ElementProxy<TUpstream>>,$/;"	c
EmptyInput	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^    EmptyInput,$/;"	e	enum:DeserializationError::Code
EmuState	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^struct EmuState {$/;"	s	namespace:fabgl
EmuTerminalMaxChars	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^constexpr int EmuTerminalMaxChars = 8;$/;"	v	namespace:fabgl	typeref:typename:int
Emulation	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  enum class Emulation {$/;"	g	class:fabgl::GraphicsAdapter
Enforcement	examples/test/.pio/libdeps/esp32dev/FastLED/code_of_conduct.md	/^## Enforcement$/;"	s	chapter:Contributor Covenant Code of Conduct
Enforcement Guidelines	examples/test/.pio/libdeps/esp32dev/FastLED/code_of_conduct.md	/^## Enforcement Guidelines$/;"	s	chapter:Contributor Covenant Code of Conduct
Enforcement Responsibilities	examples/test/.pio/libdeps/esp32dev/FastLED/code_of_conduct.md	/^## Enforcement Responsibilities$/;"	s	chapter:Contributor Covenant Code of Conduct
Enter	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  Enter       = 6,       \/**< Button OK, ENTER or RETURN pressed *\/$/;"	e	enum:fabgl::InputResult
EraseToEndOfLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  EraseToEndOfLine,         \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
EraseToEndOfScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  EraseToEndOfScreen,       \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
Error	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Error,     \/**< Error icon *\/$/;"	e	enum:fabgl::uiMessageBoxIcon
EscapeSequence	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/EscapeSequence.hpp	/^class EscapeSequence {$/;"	c
Event	examples/test/lib/JFixLib/src/Event/Event.cpp	/^Event::Event() {$/;"	f	class:Event
Event	examples/test/lib/JFixLib/src/Event/Event.h	/^class Event {$/;"	c
Ext2XT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^  struct Ext2XT {$/;"	s	function:BIOS::getKeyFromBuffer	file:
F	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define F /;"	d	file:
F	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define F /;"	d	file:
FABGLEXTB_CURSORLEFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_CURSORLEFT /;"	d	file:
FABGLEXTB_CURSORRIGHT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_CURSORRIGHT /;"	d	file:
FABGLEXTB_DELETECHAR	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_DELETECHAR /;"	d	file:
FABGLEXTB_DISABLEFABSEQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_DISABLEFABSEQ /;"	d	file:
FABGLEXTB_GETCURSORCOL	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_GETCURSORCOL /;"	d	file:
FABGLEXTB_GETCURSORPOS	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_GETCURSORPOS /;"	d	file:
FABGLEXTB_GETCURSORROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_GETCURSORROW /;"	d	file:
FABGLEXTB_INSERTSPACE	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_INSERTSPACE /;"	d	file:
FABGLEXTB_ISVKDOWN	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_ISVKDOWN /;"	d	file:
FABGLEXTB_SETBGCOLOR	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_SETBGCOLOR /;"	d	file:
FABGLEXTB_SETCHAR	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_SETCHAR /;"	d	file:
FABGLEXTB_SETCHARSTYLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_SETCHARSTYLE /;"	d	file:
FABGLEXTB_SETCURSORPOS	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_SETCURSORPOS /;"	d	file:
FABGLEXTB_SETFGCOLOR	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_SETFGCOLOR /;"	d	file:
FABGLEXTB_SETTERMTYPE	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTB_SETTERMTYPE /;"	d	file:
FABGLEXTX_CLEAR	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_CLEAR /;"	d	file:
FABGLEXTX_DELAY	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_DELAY /;"	d	file:
FABGLEXTX_ENABLECURSOR	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_ENABLECURSOR /;"	d	file:
FABGLEXTX_GETGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_GETGPIO /;"	d	file:
FABGLEXTX_GETMOUSEPOS	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_GETMOUSEPOS /;"	d	file:
FABGLEXTX_GRAPHICSCMD	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_GRAPHICSCMD /;"	d	file:
FABGLEXTX_READADC	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_READADC /;"	d	file:
FABGLEXTX_SETCURSORPOS	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_SETCURSORPOS /;"	d	file:
FABGLEXTX_SETGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_SETGPIO /;"	d	file:
FABGLEXTX_SETUPADC	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_SETUPADC /;"	d	file:
FABGLEXTX_SETUPGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_SETUPGPIO /;"	d	file:
FABGLEXTX_SHOWMOUSE	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_SHOWMOUSE /;"	d	file:
FABGLEXTX_SOUND	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXTX_SOUND /;"	d	file:
FABGLEXT_CMD	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_CMD /;"	d	file:
FABGLEXT_ENDCODE	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_ENDCODE /;"	d	file:
FABGLEXT_GCLEAR	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GCLEAR /;"	d	file:
FABGLEXT_GELLIPSE	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GELLIPSE /;"	d	file:
FABGLEXT_GFILLELLIPSE	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GFILLELLIPSE /;"	d	file:
FABGLEXT_GFILLPATH	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GFILLPATH /;"	d	file:
FABGLEXT_GFILLRECT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GFILLRECT /;"	d	file:
FABGLEXT_GLINE	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GLINE /;"	d	file:
FABGLEXT_GPATH	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GPATH /;"	d	file:
FABGLEXT_GPENWIDTH	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GPENWIDTH /;"	d	file:
FABGLEXT_GRECT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GRECT /;"	d	file:
FABGLEXT_GSCROLL	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GSCROLL /;"	d	file:
FABGLEXT_GSETBRUSHCOLOR	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GSETBRUSHCOLOR /;"	d	file:
FABGLEXT_GSETPENCOLOR	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GSETPENCOLOR /;"	d	file:
FABGLEXT_GSETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GSETPIXEL /;"	d	file:
FABGLEXT_GSPRITECOUNT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GSPRITECOUNT /;"	d	file:
FABGLEXT_GSPRITEDEF	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GSPRITEDEF /;"	d	file:
FABGLEXT_GSPRITESET	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_GSPRITESET /;"	d	file:
FABGLEXT_MAXSUBCMDLEN	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_MAXSUBCMDLEN /;"	d	file:
FABGLEXT_REPLYCODE	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_REPLYCODE /;"	d	file:
FABGLEXT_STARTCODE	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_STARTCODE /;"	d	file:
FABGLEXT_USERSEQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define FABGLEXT_USERSEQ /;"	d	file:
FABGLIB_CACHE_FONT_IN_RAM	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_CACHE_FONT_IN_RAM /;"	d
FABGLIB_CHARS_CONSUMER_TASK_PRIORITY	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_CHARS_CONSUMER_TASK_PRIORITY /;"	d
FABGLIB_CVBSCONTROLLER_PERFORMANCE_CHECK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_CVBSCONTROLLER_PERFORMANCE_CHECK /;"	d
FABGLIB_DEFAULT_BLINK_PERIOD_MS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_DEFAULT_BLINK_PERIOD_MS /;"	d
FABGLIB_DEFAULT_DISPLAYCONTROLLER_QUEUE_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_DEFAULT_DISPLAYCONTROLLER_QUEUE_SIZE /;"	d
FABGLIB_DEFAULT_SCODETOVK_TASK_STACK_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_DEFAULT_SCODETOVK_TASK_STACK_SIZE /;"	d
FABGLIB_DEFAULT_TERMINAL_INPUT_CONSUMER_TASK_STACK_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_DEFAULT_TERMINAL_INPUT_CONSUMER_TASK_STACK_SIZE /;"	d
FABGLIB_DEFAULT_TERMINAL_INPUT_QUEUE_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_DEFAULT_TERMINAL_INPUT_QUEUE_SIZE /;"	d
FABGLIB_DEFAULT_TERMINAL_KEYBOARD_READER_TASK_STACK_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_DEFAULT_TERMINAL_KEYBOARD_READER_TASK_STACK_SIZE /;"	d
FABGLIB_HAS_VirtualKeyO_STRING	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_HAS_VirtualKeyO_STRING /;"	d
FABGLIB_KEYBOARD_READER_TASK_PRIORITY	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_KEYBOARD_READER_TASK_PRIORITY /;"	d
FABGLIB_KEYBOARD_VIRTUALKEY_QUEUE_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_KEYBOARD_VIRTUALKEY_QUEUE_SIZE /;"	d
FABGLIB_MAX_CSI_PARAMS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_MAX_CSI_PARAMS /;"	d
FABGLIB_MAX_DCS_CONTENT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_MAX_DCS_CONTENT /;"	d
FABGLIB_MINFREELARGESTBLOCK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_MINFREELARGESTBLOCK /;"	d
FABGLIB_MOUSE_EVENTS_QUEUE_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_MOUSE_EVENTS_QUEUE_SIZE /;"	d
FABGLIB_PRIMITIVES_DYNBUFFERS_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_PRIMITIVES_DYNBUFFERS_SIZE /;"	d
FABGLIB_SCODETOVK_TASK_PRIORITY	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_SCODETOVK_TASK_PRIORITY /;"	d
FABGLIB_TERMINAL_DEBUG_REPORT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_DEBUG_REPORT /;"	d
FABGLIB_TERMINAL_DEBUG_REPORT_DESCS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_DEBUG_REPORT_DESCS /;"	d
FABGLIB_TERMINAL_DEBUG_REPORT_DESCSALL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_DEBUG_REPORT_DESCSALL /;"	d
FABGLIB_TERMINAL_DEBUG_REPORT_ERRORS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_DEBUG_REPORT_ERRORS /;"	d
FABGLIB_TERMINAL_DEBUG_REPORT_ESC	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_DEBUG_REPORT_ESC /;"	d
FABGLIB_TERMINAL_DEBUG_REPORT_INQUEUE_CODES	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_DEBUG_REPORT_INQUEUE_CODES /;"	d
FABGLIB_TERMINAL_DEBUG_REPORT_IN_CODES	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_DEBUG_REPORT_IN_CODES /;"	d
FABGLIB_TERMINAL_DEBUG_REPORT_OSC_CONTENT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_DEBUG_REPORT_OSC_CONTENT /;"	d
FABGLIB_TERMINAL_DEBUG_REPORT_OUT_CODES	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_DEBUG_REPORT_OUT_CODES /;"	d
FABGLIB_TERMINAL_DEBUG_REPORT_UNSUPPORT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_DEBUG_REPORT_UNSUPPORT /;"	d
FABGLIB_TERMINAL_FLOWCONTROL_RXFIFO_MAX_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_FLOWCONTROL_RXFIFO_MAX_THRESHOLD /;"	d
FABGLIB_TERMINAL_FLOWCONTROL_RXFIFO_MIN_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_FLOWCONTROL_RXFIFO_MIN_THRESHOLD /;"	d
FABGLIB_TERMINAL_OUTPUT_QUEUE_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_OUTPUT_QUEUE_SIZE /;"	d
FABGLIB_TERMINAL_XOFF_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_XOFF_THRESHOLD /;"	d
FABGLIB_TERMINAL_XON_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_TERMINAL_XON_THRESHOLD /;"	d
FABGLIB_UI_EVENTS_QUEUE_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^#define FABGLIB_UI_EVENTS_QUEUE_SIZE /;"	d
FABGLIB_UNDERLINE_POSITION	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_UNDERLINE_POSITION /;"	d
FABGLIB_USE_APLL_AB_COEF	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_USE_APLL_AB_COEF /;"	d
FABGLIB_VGAPALETTEDCONTROLLER_PRIMTASK_PRIORITY	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_VGAPALETTEDCONTROLLER_PRIMTASK_PRIORITY /;"	d
FABGLIB_VGAPALETTEDCONTROLLER_PRIMTASK_STACK_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_VGAPALETTEDCONTROLLER_PRIMTASK_STACK_SIZE /;"	d
FABGLIB_VGAXCONTROLLER_PERFORMANCE_CHECK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_VGAXCONTROLLER_PERFORMANCE_CHECK /;"	d
FABGLIB_VIDEO_CPUINTENSIVE_TASKS_CORE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_VIDEO_CPUINTENSIVE_TASKS_CORE /;"	d
FABGLIB_VIEWPORT_MEMORY_POOL_COUNT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_VIEWPORT_MEMORY_POOL_COUNT /;"	d
FABGLIB_XTAL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define FABGLIB_XTAL /;"	d
FABGL_DEFAULT_SCENETASK_STACKSIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^#define FABGL_DEFAULT_SCENETASK_STACKSIZE /;"	d
FABGL_ESP_IDF_VERSION	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  #define FABGL_ESP_IDF_VERSION /;"	d
FABGL_ESP_IDF_VERSION_VAL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  #define FABGL_ESP_IDF_VERSION_VAL /;"	d
FABGL_FONT_INCLUDE_DEFINITION	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabfonts.cpp	/^#define FABGL_FONT_INCLUDE_DEFINITION$/;"	d	file:
FABGL_NEED_PSRAM_DISABLE_HACK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^    #define FABGL_NEED_PSRAM_DISABLE_HACK$/;"	d
FABGL_OLDI2C	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  #define FABGL_OLDI2C$/;"	d
FABGL_SOUNDGEN_DEFAULT_SAMPLE_RATE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^#define FABGL_SOUNDGEN_DEFAULT_SAMPLE_RATE /;"	d
FABGL_SOUNDGEN_SAMPLE_BUFFER_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^#define FABGL_SOUNDGEN_SAMPLE_BUFFER_SIZE /;"	d
FADE	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^#define FADE /;"	d	file:
FADE	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^#define FADE(/;"	d	file:
FADE_16	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^#define FADE_16$/;"	d	file:
FASTLED_ACCURATE_CLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/led_sysdefs_apollo3.h	/^#define FASTLED_ACCURATE_CLOCK$/;"	d
FASTLED_ACCURATE_CLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/led_sysdefs_arm_d21.h	/^#define FASTLED_ACCURATE_CLOCK$/;"	d
FASTLED_ACCURATE_CLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/led_sysdefs_arm_d51.h	/^#define FASTLED_ACCURATE_CLOCK$/;"	d
FASTLED_ACCURATE_CLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/led_sysdefs_arm_k20.h	/^#define FASTLED_ACCURATE_CLOCK$/;"	d
FASTLED_ACCURATE_CLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/led_sysdefs_arm_k66.h	/^#define FASTLED_ACCURATE_CLOCK$/;"	d
FASTLED_ACCURATE_CLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/led_sysdefs_arm_kl26.h	/^#define FASTLED_ACCURATE_CLOCK$/;"	d
FASTLED_ACCURATE_CLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/led_sysdefs_arm_mxrt1062.h	/^#define FASTLED_ACCURATE_CLOCK$/;"	d
FASTLED_ACCURATE_CLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define FASTLED_ACCURATE_CLOCK$/;"	d
FASTLED_ACCURATE_CLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define FASTLED_ACCURATE_CLOCK$/;"	d
FASTLED_ACCURATE_CLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define FASTLED_ACCURATE_CLOCK$/;"	d
FASTLED_ACCURATE_CLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^#define FASTLED_ACCURATE_CLOCK$/;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_config.h	/^#define FASTLED_ALLOW_INTERRUPTS$/;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/led_sysdefs_apollo3.h	/^#define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/led_sysdefs_arm_d21.h	/^#define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/led_sysdefs_arm_d51.h	/^#define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/led_sysdefs_arm_k20.h	/^#define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/led_sysdefs_arm_k66.h	/^#define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/led_sysdefs_arm_mxrt1062.h	/^#define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^    #define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^#define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^# define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALLOW_INTERRUPTS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/led_sysdefs_esp8266.h	/^# define FASTLED_ALLOW_INTERRUPTS /;"	d
FASTLED_ALL_PINS_HARDWARE_SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^#define FASTLED_ALL_PINS_HARDWARE_SPI$/;"	d
FASTLED_ALL_PINS_HARDWARE_SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^#define FASTLED_ALL_PINS_HARDWARE_SPI$/;"	d
FASTLED_ALL_PINS_HARDWARE_SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^    #define FASTLED_ALL_PINS_HARDWARE_SPI$/;"	d
FASTLED_APOLLO3	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/led_sysdefs_apollo3.h	/^#define FASTLED_APOLLO3$/;"	d
FASTLED_ARM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/led_sysdefs_arm_d21.h	/^#define FASTLED_ARM$/;"	d
FASTLED_ARM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/led_sysdefs_arm_d51.h	/^#define FASTLED_ARM$/;"	d
FASTLED_ARM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/led_sysdefs_arm_k20.h	/^#define FASTLED_ARM$/;"	d
FASTLED_ARM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/led_sysdefs_arm_k66.h	/^#define FASTLED_ARM$/;"	d
FASTLED_ARM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/led_sysdefs_arm_kl26.h	/^#define FASTLED_ARM$/;"	d
FASTLED_ARM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/led_sysdefs_arm_mxrt1062.h	/^#define FASTLED_ARM$/;"	d
FASTLED_ARM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define FASTLED_ARM$/;"	d
FASTLED_ARM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^#define FASTLED_ARM$/;"	d
FASTLED_ARM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define FASTLED_ARM$/;"	d
FASTLED_ARM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define FASTLED_ARM$/;"	d
FASTLED_ARM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define FASTLED_ARM$/;"	d
FASTLED_ARM_M0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define FASTLED_ARM_M0$/;"	d
FASTLED_ARM_M0_PLUS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/led_sysdefs_arm_d21.h	/^#define FASTLED_ARM_M0_PLUS$/;"	d
FASTLED_ARM_M0_PLUS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/led_sysdefs_arm_kl26.h	/^#define FASTLED_ARM_M0_PLUS$/;"	d
FASTLED_ARM_M0_PLUS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define FASTLED_ARM_M0_PLUS$/;"	d
FASTLED_AVR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^#define FASTLED_AVR$/;"	d
FASTLED_BLEND_FIXED	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_config.h	/^#define FASTLED_BLEND_FIXED /;"	d
FASTLED_DEBUG	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define FASTLED_DEBUG(/;"	d
FASTLED_ESP32	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^#define FASTLED_ESP32$/;"	d
FASTLED_ESP32_RAW_PIN_ORDER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^#   define FASTLED_ESP32_RAW_PIN_ORDER$/;"	d
FASTLED_ESP32_SPI_BUS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    #define FASTLED_ESP32_SPI_BUS /;"	d
FASTLED_ESP8266	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/led_sysdefs_esp8266.h	/^#define FASTLED_ESP8266$/;"	d
FASTLED_ESP8266_NODEMCU_PIN_ORDER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/led_sysdefs_esp8266.h	/^#   define FASTLED_ESP8266_NODEMCU_PIN_ORDER$/;"	d
FASTLED_ESP8266_RAW_PIN_ORDER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/led_sysdefs_esp8266.h	/^#   define FASTLED_ESP8266_RAW_PIN_ORDER$/;"	d
FASTLED_ESP_IO	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^struct FASTLED_ESP_IO {$/;"	s
FASTLED_FORCE_SOFTWARE_PINS	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_config.h	/^#define FASTLED_FORCE_SOFTWARE_PINS$/;"	d
FASTLED_FORCE_SOFTWARE_SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_config.h	/^#define FASTLED_FORCE_SOFTWARE_SPI$/;"	d
FASTLED_FORCE_SOFTWARE_SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define FASTLED_FORCE_SOFTWARE_SPI$/;"	d
FASTLED_HAS_BLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^#define FASTLED_HAS_BLOCKLESS /;"	d
FASTLED_HAS_BLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define FASTLED_HAS_BLOCKLESS /;"	d
FASTLED_HAS_BLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^#define FASTLED_HAS_BLOCKLESS /;"	d
FASTLED_HAS_BLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^#define FASTLED_HAS_BLOCKLESS /;"	d
FASTLED_HAS_BLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^#define FASTLED_HAS_BLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/clockless_apollo3.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/clockless_arm_d21.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/clockless_arm_kl26.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define FASTLED_HAS_CLOCKLESS$/;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_CLOCKLESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^#define FASTLED_HAS_CLOCKLESS /;"	d
FASTLED_HAS_MILLIS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^#define FASTLED_HAS_MILLIS$/;"	d
FASTLED_HAS_MILLIS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/led_sysdefs_esp8266.h	/^#define FASTLED_HAS_MILLIS$/;"	d
FASTLED_HAS_PRAGMA_MESSAGE	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^#define FASTLED_HAS_PRAGMA_MESSAGE$/;"	d
FASTLED_I2S_MAX_CONTROLLERS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^#define FASTLED_I2S_MAX_CONTROLLERS /;"	d
FASTLED_INCLUDE_PGMSPACE	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_progmem.h	/^#define FASTLED_INCLUDE_PGMSPACE /;"	d
FASTLED_INTERNAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^#define FASTLED_INTERNAL$/;"	d	file:
FASTLED_INTERNAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.cpp	/^#define FASTLED_INTERNAL$/;"	d	file:
FASTLED_INTERNAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorpalettes.cpp	/^#define FASTLED_INTERNAL$/;"	d	file:
FASTLED_INTERNAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^#define FASTLED_INTERNAL$/;"	d	file:
FASTLED_INTERNAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^#define FASTLED_INTERNAL$/;"	d	file:
FASTLED_INTERNAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.cpp	/^#define FASTLED_INTERNAL$/;"	d	file:
FASTLED_INTERNAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^#define FASTLED_INTERNAL$/;"	d	file:
FASTLED_INTERNAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms.cpp	/^#define FASTLED_INTERNAL$/;"	d	file:
FASTLED_INTERNAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^#define FASTLED_INTERNAL$/;"	d	file:
FASTLED_INTERNAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^#define FASTLED_INTERNAL$/;"	d	file:
FASTLED_INTERNAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/wiring.cpp	/^#define FASTLED_INTERNAL$/;"	d	file:
FASTLED_INTERRUPT_RETRY_COUNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_config.h	/^#define FASTLED_INTERRUPT_RETRY_COUNT /;"	d
FASTLED_NAMESPACE_BEGIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/led_sysdefs.h	/^#define FASTLED_NAMESPACE_BEGIN$/;"	d
FASTLED_NAMESPACE_BEGIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define FASTLED_NAMESPACE_BEGIN /;"	d
FASTLED_NAMESPACE_END	examples/test/.pio/libdeps/esp32dev/FastLED/src/led_sysdefs.h	/^#define FASTLED_NAMESPACE_END$/;"	d
FASTLED_NAMESPACE_END	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define FASTLED_NAMESPACE_END /;"	d
FASTLED_NEEDS_YIELD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define FASTLED_NEEDS_YIELD$/;"	d
FASTLED_NEEDS_YIELD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^#define FASTLED_NEEDS_YIELD$/;"	d
FASTLED_NOISE_ALLOW_AVERAGE_TO_OVERFLOW	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_config.h	/^#define FASTLED_NOISE_ALLOW_AVERAGE_TO_OVERFLOW /;"	d
FASTLED_NOISE_FIXED	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_config.h	/^#define FASTLED_NOISE_FIXED /;"	d
FASTLED_NO_PINMAP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/led_sysdefs_apollo3.h	/^#define FASTLED_NO_PINMAP$/;"	d
FASTLED_NO_PINMAP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define FASTLED_NO_PINMAP$/;"	d
FASTLED_NO_PINMAP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define FASTLED_NO_PINMAP$/;"	d
FASTLED_NO_PINMAP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define FASTLED_NO_PINMAP$/;"	d
FASTLED_NRF52_DEBUGPRINT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^#define FASTLED_NRF52_DEBUGPRINT(/;"	d
FASTLED_NRF52_ENABLED_PWM_INSTANCES	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^} FASTLED_NRF52_ENABLED_PWM_INSTANCES;$/;"	t	typeref:enum:_FASTLED_NRF52_ENABLED_PWM_INSTANCE
FASTLED_NRF52_ENABLE_PWM_INSTANCE0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^#define FASTLED_NRF52_ENABLE_PWM_INSTANCE0$/;"	d
FASTLED_NRF52_INLINE_ATTRIBUTE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^    #define FASTLED_NRF52_INLINE_ATTRIBUTE /;"	d
FASTLED_NRF52_MAXIMUM_PIXELS_PER_STRING	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^#define FASTLED_NRF52_MAXIMUM_PIXELS_PER_STRING /;"	d
FASTLED_NRF52_PWM0_INSTANCE_IDX	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    FASTLED_NRF52_PWM0_INSTANCE_IDX,$/;"	e	enum:_FASTLED_NRF52_ENABLED_PWM_INSTANCE
FASTLED_NRF52_PWM1_INSTANCE_IDX	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    FASTLED_NRF52_PWM1_INSTANCE_IDX,$/;"	e	enum:_FASTLED_NRF52_ENABLED_PWM_INSTANCE
FASTLED_NRF52_PWM2_INSTANCE_IDX	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    FASTLED_NRF52_PWM2_INSTANCE_IDX,$/;"	e	enum:_FASTLED_NRF52_ENABLED_PWM_INSTANCE
FASTLED_NRF52_PWM3_INSTANCE_IDX	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    FASTLED_NRF52_PWM3_INSTANCE_IDX,$/;"	e	enum:_FASTLED_NRF52_ENABLED_PWM_INSTANCE
FASTLED_NRF52_PWM_ID	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^#define FASTLED_NRF52_PWM_ID /;"	d
FASTLED_NRF52_PWM_INSTANCE_COUNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    FASTLED_NRF52_PWM_INSTANCE_COUNT$/;"	e	enum:_FASTLED_NRF52_ENABLED_PWM_INSTANCE
FASTLED_NRF52_PWM_INTERRUPT_HANDLER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^typedef void (*FASTLED_NRF52_PWM_INTERRUPT_HANDLER)();$/;"	t	typeref:typename:void (*)()
FASTLED_NRF52_SPIM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        #define FASTLED_NRF52_SPIM /;"	d
FASTLED_RAND16_13849	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^#define FASTLED_RAND16_13849 /;"	d
FASTLED_RAND16_2053	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^#define FASTLED_RAND16_2053 /;"	d
FASTLED_REGISTER	examples/test/.pio/libdeps/esp32dev/FastLED/src/cpp_compat.h	/^#define FASTLED_REGISTER /;"	d
FASTLED_REGISTER	examples/test/.pio/libdeps/esp32dev/FastLED/src/cpp_compat.h	/^#define FASTLED_REGISTER$/;"	d
FASTLED_RISCV	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^#define FASTLED_RISCV$/;"	d
FASTLED_RMT_BUILTIN_DRIVER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define FASTLED_RMT_BUILTIN_DRIVER /;"	d
FASTLED_RMT_MAX_CHANNELS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define FASTLED_RMT_MAX_CHANNELS /;"	d
FASTLED_RMT_MAX_CONTROLLERS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define FASTLED_RMT_MAX_CONTROLLERS /;"	d
FASTLED_RMT_MEM_BLOCKS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define FASTLED_RMT_MEM_BLOCKS /;"	d
FASTLED_RMT_MEM_WORDS_PER_CHANNEL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define FASTLED_RMT_MEM_WORDS_PER_CHANNEL /;"	d
FASTLED_RMT_SERIAL_DEBUG	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define FASTLED_RMT_SERIAL_DEBUG /;"	d
FASTLED_RP2040_CLOCKLESS_IRQ_SHARED	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define FASTLED_RP2040_CLOCKLESS_IRQ_SHARED /;"	d
FASTLED_RP2040_CLOCKLESS_PIO	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define FASTLED_RP2040_CLOCKLESS_PIO /;"	d
FASTLED_SCALE8_FIXED	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_config.h	/^#define FASTLED_SCALE8_FIXED /;"	d
FASTLED_SLOW_CLOCK_ADJUST	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define FASTLED_SLOW_CLOCK_ADJUST /;"	d
FASTLED_SPI_BYTE_ONLY	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/led_sysdefs_arm_kl26.h	/^#define FASTLED_SPI_BYTE_ONLY$/;"	d
FASTLED_SPI_BYTE_ONLY	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define FASTLED_SPI_BYTE_ONLY$/;"	d
FASTLED_SPI_BYTE_ONLY	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^#define FASTLED_SPI_BYTE_ONLY$/;"	d
FASTLED_TEENSY3	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/led_sysdefs_arm_k20.h	/^#define FASTLED_TEENSY3$/;"	d
FASTLED_TEENSY3	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/led_sysdefs_arm_k66.h	/^#define FASTLED_TEENSY3$/;"	d
FASTLED_TEENSY4	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/led_sysdefs_arm_mxrt1062.h	/^#define FASTLED_TEENSY4$/;"	d
FASTLED_TEENSYLC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/led_sysdefs_arm_kl26.h	/^#define FASTLED_TEENSYLC$/;"	d
FASTLED_UNUSABLE_PIN_MASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^#define FASTLED_UNUSABLE_PIN_MASK /;"	d
FASTLED_USE_GLOBAL_BRIGHTNESS	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_config.h	/^#define FASTLED_USE_GLOBAL_BRIGHTNESS /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_progmem.h	/^#define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/led_sysdefs_apollo3.h	/^#define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/led_sysdefs_arm_k20.h	/^#define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/led_sysdefs_arm_k66.h	/^#define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/led_sysdefs_arm_kl26.h	/^#define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/led_sysdefs_arm_mxrt1062.h	/^#define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^    #define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastled_avr.h	/^#define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^#define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^# define FASTLED_USE_PROGMEM /;"	d
FASTLED_USE_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/led_sysdefs_esp8266.h	/^# define FASTLED_USE_PROGMEM /;"	d
FASTLED_USING_NAMESPACE	examples/test/.pio/libdeps/esp32dev/FastLED/src/led_sysdefs.h	/^#define FASTLED_USING_NAMESPACE$/;"	d
FASTLED_USING_NAMESPACE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define FASTLED_USING_NAMESPACE /;"	d
FASTLED_VERSION	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^#define FASTLED_VERSION /;"	d
FASTLED_XTENSA	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^#define FASTLED_XTENSA$/;"	d
FAST_SPI_INTERRUPTS_WRITE_PINS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define FAST_SPI_INTERRUPTS_WRITE_PINS /;"	d
FCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  uint16_t  FCB;$/;"	m	struct:FileSearchState	typeref:typename:uint16_t
FCB_AL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_AL /;"	d
FCB_CR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_CR /;"	d
FCB_DR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_DR /;"	d
FCB_EX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_EX /;"	d
FCB_F1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_F1 /;"	d
FCB_F2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_F2 /;"	d
FCB_F3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_F3 /;"	d
FCB_F4	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_F4 /;"	d
FCB_F5	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_F5 /;"	d
FCB_F6	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_F6 /;"	d
FCB_F7	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_F7 /;"	d
FCB_F8	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_F8 /;"	d
FCB_R0	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_R0 /;"	d
FCB_R1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_R1 /;"	d
FCB_R2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_R2 /;"	d
FCB_RC	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_RC /;"	d
FCB_S1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_S1 /;"	d
FCB_S2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_S2 /;"	d
FCB_T1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_T1 /;"	d
FCB_T2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_T2 /;"	d
FCB_T3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_T3 /;"	d
FCB_TS1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_TS1 /;"	d
FCB_TS2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_TS2 /;"	d
FCB_USR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define FCB_USR /;"	d
FD0PathEdit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiTextEdit      * FD0PathEdit;$/;"	m	struct:ConfigDialog	typeref:typename:uiTextEdit *	file:
FD1PathEdit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiTextEdit      * FD1PathEdit;$/;"	m	struct:ConfigDialog	typeref:typename:uiTextEdit *	file:
FD_PREFIX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  FD_PREFIX,$/;"	e	enum:fabgl::__anonfeda45510103	file:
FIXED_WIDTH_EMBEDDED_FONTS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabfonts.cpp	/^static const FontInfo * FIXED_WIDTH_EMBEDDED_FONTS[] = {$/;"	v	namespace:fabgl	typeref:typename:const FontInfo * []	file:
FIXFRAC8	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^#define FIXFRAC8(/;"	d	file:
FIX_BITS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^#define FIX_BITS(/;"	d
FLAGS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define FLAGS /;"	d	file:
FLAG_AF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define FLAG_AF /;"	d	file:
FLAG_CF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define FLAG_CF /;"	d	file:
FLAG_DF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define FLAG_DF /;"	d	file:
FLAG_IF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define FLAG_IF /;"	d	file:
FLAG_OF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define FLAG_OF /;"	d	file:
FLAG_PF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define FLAG_PF /;"	d	file:
FLAG_SF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define FLAG_SF /;"	d	file:
FLAG_START_BIT	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define FLAG_START_BIT /;"	d
FLAG_TF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define FLAG_TF /;"	d	file:
FLAG_ZF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define FLAG_ZF /;"	d	file:
FLOWCTRL_STR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * FLOWCTRL_STR[]   = { "None", "XON\/XOFF", "RTS\/CTS", "Combi" };$/;"	v	typeref:typename:const char * []
FL_ALIGN_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_progmem.h	/^#define FL_ALIGN_PROGMEM /;"	d
FL_FALLTHROUGH	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define FL_FALLTHROUGH /;"	d
FL_NOP	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^#  define FL_NOP /;"	d
FL_NOP2	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^#  define FL_NOP2 /;"	d
FL_NRF_GPIO	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^#define FL_NRF_GPIO /;"	d
FL_NRF_GPIO_BASE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^#define FL_NRF_GPIO_BASE /;"	d
FL_NRF_GPIO_Type	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^} FL_NRF_GPIO_Type;$/;"	t	typeref:struct:__anon7de97ea30108
FL_PGM_READ_BYTE_NEAR	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_progmem.h	/^#define FL_PGM_READ_BYTE_NEAR(/;"	d
FL_PGM_READ_DWORD_NEAR	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_progmem.h	/^#define FL_PGM_READ_DWORD_NEAR(/;"	d
FL_PGM_READ_WORD_NEAR	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_progmem.h	/^#define FL_PGM_READ_WORD_NEAR(/;"	d
FL_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_progmem.h	/^#define FL_PROGMEM /;"	d
FMUL	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^#define FMUL /;"	d
FOLDCNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t FOLDCNT;                 \/*!< Offset: 0x018 (R\/W)  Folded-instruction Count /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
FONTINFODLAFS_STRIKEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define FONTINFODLAFS_STRIKEOUT /;"	d
FONTINFOFLAGS_ITALIC	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define FONTINFOFLAGS_ITALIC /;"	d
FONTINFOFLAGS_UNDERLINE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define FONTINFOFLAGS_UNDERLINE /;"	d
FONTINFOFLAGS_VARWIDTH	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define FONTINFOFLAGS_VARWIDTH /;"	d
FONTS_COUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^constexpr int       FONTS_COUNT             = sizeof(FONTS_STR) \/ sizeof(char const *);$/;"	v	typeref:typename:int
FONTS_INFO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const fabgl::FontInfo * FONTS_INFO[] = { nullptr, &fabgl::FONT_4x6, &fabgl::FONT_5x7, &fa/;"	v	typeref:typename:const fabgl::FontInfo * []
FONTS_STR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * FONTS_STR[]            = { "Auto", "VGA 4x6", "VGA 5x7", "VGA 5x8", "VGA 6x8/;"	v	typeref:typename:const char * []
FONT_10x20_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_10x20.h	/^static const uint8_t FONT_10x20_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_4x6_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_4x6.h	/^static const uint8_t FONT_4x6_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_5x7_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_5x7.h	/^static const uint8_t FONT_5x7_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_5x8_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_5x8.h	/^static const uint8_t FONT_5x8_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_6x10_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_6x10.h	/^static const uint8_t FONT_6x10_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_6x12_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_6x12.h	/^static const uint8_t FONT_6x12_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_6x13_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_6x13.h	/^static const uint8_t FONT_6x13_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_6x8_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_6x8.h	/^static const uint8_t FONT_6x8_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_6x9_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_6x9.h	/^static const uint8_t FONT_6x9_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_7x13_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_7x13.h	/^static const uint8_t FONT_7x13_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_7x14_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_7x14.h	/^static const uint8_t FONT_7x14_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_8x13_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_8x13.h	/^static const uint8_t FONT_8x13_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_8x14_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_8x14.h	/^static const uint8_t FONT_8x14_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_8x16_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_8x16.h	/^static const uint8_t FONT_8x16_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_8x19_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_8x19.h	/^static const uint8_t FONT_8x19_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_8x8_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_8x8.h	/^static const uint8_t FONT_8x8_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_8x9_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_8x9.h	/^static const uint8_t FONT_8x9_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_9x15_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_9x15.h	/^static const uint8_t FONT_9x15_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_9x16	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_9x16.h	/^const FontInfo FONT_9x16 = {$/;"	v	namespace:fabgl	typeref:typename:const FontInfo
FONT_9x16_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_9x16.h	/^static const uint8_t FONT_9x16_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_9x18_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_9x18.h	/^static const uint8_t FONT_9x18_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_BIGSERIF_8x14_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_bigserif_8x14.h	/^static const uint8_t FONT_BIGSERIF_8x14_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_BIGSERIF_8x16_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_bigserif_8x16.h	/^static const uint8_t FONT_BIGSERIF_8x16_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_BLOCK_8x14_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_block_8x14.h	/^static const uint8_t FONT_BLOCK_8x14_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_BROADWAY_8x14_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_broadway_8x14.h	/^static const uint8_t FONT_BROADWAY_8x14_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_COMPUTER_8x14_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_computer_8x14.h	/^static const uint8_t FONT_COMPUTER_8x14_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_COURIER_8x14_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_courier_8x14.h	/^static const uint8_t FONT_COURIER_8x14_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_HEIGHT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^#define FONT_HEIGHT /;"	d
FONT_LCD_8x14_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_lcd_8x14.h	/^static const uint8_t FONT_LCD_8x14_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_OLDENGL_8x16_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_oldengl_8x16.h	/^static const uint8_t FONT_OLDENGL_8x16_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_SANSERIF_8x14_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_sanserif_8x14.h	/^static const uint8_t FONT_SANSERIF_8x14_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_SANSERIF_8x16_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_sanserif_8x16.h	/^static const uint8_t FONT_SANSERIF_8x16_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_SCALE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^#define FONT_SCALE /;"	d
FONT_SLANT_8x14_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_slant_8x14.h	/^static const uint8_t FONT_SLANT_8x14_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_WIDTH	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^#define FONT_WIDTH /;"	d
FONT_WIGGLY_8x16_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_wiggly_8x16.h	/^static const uint8_t FONT_WIGGLY_8x16_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_std_12_CHPTR	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_12.h	/^static const uint32_t FONT_std_12_CHPTR[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint32_t[]
FONT_std_12_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_12.h	/^static const uint8_t FONT_std_12_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_std_14_CHPTR	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_14.h	/^static const uint32_t FONT_std_14_CHPTR[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint32_t[]
FONT_std_14_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_14.h	/^static const uint8_t FONT_std_14_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_std_15_CHPTR	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_15.h	/^static const uint32_t FONT_std_15_CHPTR[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint32_t[]
FONT_std_15_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_15.h	/^static const uint8_t FONT_std_15_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_std_16_CHPTR	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_16.h	/^static const uint32_t FONT_std_16_CHPTR[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint32_t[]
FONT_std_16_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_16.h	/^static const uint8_t FONT_std_16_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_std_17_CHPTR	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_17.h	/^static const uint32_t FONT_std_17_CHPTR[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint32_t[]
FONT_std_17_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_17.h	/^static const uint8_t FONT_std_17_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_std_18_CHPTR	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_18.h	/^static const uint32_t FONT_std_18_CHPTR[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint32_t[]
FONT_std_18_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_18.h	/^static const uint8_t FONT_std_18_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_std_22_CHPTR	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_22.h	/^static const uint32_t FONT_std_22_CHPTR[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint32_t[]
FONT_std_22_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_22.h	/^static const uint8_t FONT_std_22_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FONT_std_24_CHPTR	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_24.h	/^static const uint32_t FONT_std_24_CHPTR[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint32_t[]
FONT_std_24_DATA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_24.h	/^static const uint8_t FONT_std_24_DATA[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
FORCE_INLINE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/attributes.hpp	/^#  define FORCE_INLINE /;"	d
FORCE_INLINE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/attributes.hpp	/^#  define FORCE_INLINE$/;"	d
FORCE_REFERENCE	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^#define FORCE_REFERENCE(/;"	d	file:
FORCE_REFERENCE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^#define FORCE_REFERENCE(/;"	d
FORMAT_SPIFFS_IF_FAILED	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^#define FORMAT_SPIFFS_IF_FAILED /;"	d
FORWARD_HUES	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    FORWARD_HUES,   \/\/\/< Hue always goes clockwise around the color wheel$/;"	e	enum:__anon875718a30103
FRC1Timer	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline uint32_t FRC1Timer()$/;"	f	namespace:fabgl	typeref:typename:uint32_t
FRC1TimerMax	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^constexpr int FRC1TimerMax = 8388607;$/;"	v	namespace:fabgl	typeref:typename:int
FRC1Timer_init	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline void FRC1Timer_init(int prescaler)$/;"	f	namespace:fabgl	typeref:typename:void
FRC1Timer_prescaler	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline int FRC1Timer_prescaler(int prescaler = 0)$/;"	f	namespace:fabgl	typeref:typename:int
FRC_TIMER_PRESCALER_1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define FRC_TIMER_PRESCALER_1 /;"	d
FRC_TIMER_PRESCALER_16	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define FRC_TIMER_PRESCALER_16 /;"	d
FRC_TIMER_PRESCALER_256	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define FRC_TIMER_PRESCALER_256 /;"	d
FUNCTION0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t FUNCTION0;               \/*!< Offset: 0x028 (R\/W)  Function Register 0      /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
FUNCTION1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t FUNCTION1;               \/*!< Offset: 0x038 (R\/W)  Function Register 1      /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
FUNCTION2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t FUNCTION2;               \/*!< Offset: 0x048 (R\/W)  Function Register 2      /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
FUNCTION3	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t FUNCTION3;               \/*!< Offset: 0x058 (R\/W)  Function Register 3      /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
F_CARRY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define F_CARRY /;"	d	file:
F_CPU	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/led_sysdefs_apollo3.h	/^#define F_CPU /;"	d
F_CPU	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define F_CPU /;"	d
F_CPU	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^    #define F_CPU /;"	d
F_CPU	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define F_CPU /;"	d
F_CPU	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define F_CPU /;"	d
F_CPU_MHZ	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^#define F_CPU_MHZ /;"	d
F_CPU_RMT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define F_CPU_RMT /;"	d
F_HCARRY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define F_HCARRY /;"	d	file:
F_NEG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define F_NEG /;"	d	file:
F_PARITY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define F_PARITY /;"	d	file:
F_TIMER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^    #define F_TIMER /;"	d
F_UN1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define F_UN1 /;"	d	file:
F_UN3	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define F_UN3 /;"	d	file:
F_UN5	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define F_UN5 /;"	d	file:
F_ZERO	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define F_ZERO /;"	d	file:
FabGL	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^# FabGL$/;"	c
FabGL ClassicRacer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/README.md	/^# FabGL ClassicRacer$/;"	c
FairyLight	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        FairyLight=0xFFE42D,           \/\/\/< @htmlcolorblock{FFE42D}$/;"	e	enum:CRGB::__anonbcc8608a0c03
FairyLightNCC	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        FairyLightNCC=0xFF9D2A         \/\/\/< @htmlcolorblock{FFE42D}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Fast porting for a new board on existing hardware	examples/test/.pio/libdeps/esp32dev/FastLED/PORTING.md	/^# Fast porting for a new board on existing hardware$/;"	c
FastLED	examples/test/.pio/libdeps/esp32dev/FastLED/CMakeLists.txt	/^project(FastLED)$/;"	p
FastLED	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^CFastLED FastLED;$/;"	v	typeref:typename:CFastLED
FastLED 3.1.4	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.1.4$/;"	c
FastLED 3.1.5	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.1.5$/;"	c
FastLED 3.1.6	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.1.6$/;"	c
FastLED 3.1.7 (skipped)	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.1.7 (skipped)$/;"	c
FastLED 3.1.8	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.1.8$/;"	c
FastLED 3.2.1	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.2.1$/;"	c
FastLED 3.2.10	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.2.10$/;"	c
FastLED 3.2.2	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.2.2$/;"	c
FastLED 3.2.4	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.2.4$/;"	c
FastLED 3.2.5	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.2.5$/;"	c
FastLED 3.2.6	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.2.6$/;"	c
FastLED 3.2.9	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.2.9$/;"	c
FastLED 3.3.0	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.3.0$/;"	c
FastLED 3.3.1	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.3.1$/;"	c
FastLED 3.3.2	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.3.2$/;"	c
FastLED 3.3.3	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.3.3$/;"	c
FastLED 3.4.0	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.4.0$/;"	c
FastLED 3.5.0	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.5.0$/;"	c
FastLED 3.6	examples/test/.pio/libdeps/esp32dev/FastLED/README.md	/^FastLED 3.6$/;"	c
FastLED 3.6.0	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED 3.6.0$/;"	c
FastLED2	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED2$/;"	c
FastLED3.0	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED3.0$/;"	c
FastLED3.0.1	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED3.0.1$/;"	c
FastLED3.0.2	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED3.0.2$/;"	c
FastLED3.1.0	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED3.1.0$/;"	c
FastLED3.1.1	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED3.1.1$/;"	c
FastLED3.1.3	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED3.1.3$/;"	c
FastLED3.2	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^FastLED3.2$/;"	c
FastLED_SRCS	examples/test/.pio/libdeps/esp32dev/FastLED/CMakeLists.txt	/^set(FastLED_SRCS$/;"	v
FastPin	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^template<uint8_t PIN> class FastPin {$/;"	c
FastPinBB	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^template<uint8_t PIN> class FastPinBB : public FastPin<PIN> {};$/;"	c
FastSPI_LED	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^#define FastSPI_LED /;"	d
FastSPI_LED2	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^#define FastSPI_LED2 /;"	d
Features	examples/test/.pio/libdeps/esp32dev/ArduinoJson/README.md	/^## Features$/;"	s
FileBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^FileBrowser::FileBrowser()$/;"	f	class:fabgl::FileBrowser
FileBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^FileBrowser::FileBrowser(char const * path)$/;"	f	class:fabgl::FileBrowser
FileBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^class FileBrowser {$/;"	c	namespace:fabgl
FileBrowserForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  FileBrowserForm(InputBox * inputBox_)$/;"	f	struct:fabgl::FileBrowserForm
FileBrowserForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^struct FileBrowserForm : public InputForm {$/;"	s	namespace:fabgl
FileSearchState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^struct FileSearchState {$/;"	s
FileSelectorForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  FileSelectorForm(InputBox * inputBox_)$/;"	f	struct:fabgl::FileSelectorForm
FileSelectorForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^struct FileSelectorForm : public InputForm {$/;"	s	namespace:fabgl
FillBackground	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  GlyphOptions & FillBackground(bool value) { fillBackground = value; return *this; }$/;"	f	union:fabgl::GlyphOptions	typeref:typename:GlyphOptions &
FillEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  FillEllipse,$/;"	e	enum:fabgl::PrimitiveCmd
FillPath	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  FillPath,$/;"	e	enum:fabgl::PrimitiveCmd
FillRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  FillRect,$/;"	e	enum:fabgl::PrimitiveCmd
Filter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^  explicit Filter(JsonVariantConst v) : variant_(v) {}$/;"	f	class:DeserializationOption::Filter
Filter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^class Filter {$/;"	c	namespace:DeserializationOption
FireBrick	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        FireBrick=0xB22222,             \/\/\/< @htmlcolorblock{B22222}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Fixtures to support	README.md	/^# Fixtures to support$/;"	c
FlashString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  FlashString(const __FlashStringHelper* str, size_t sz)$/;"	f	class:FlashString
FlashString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^class FlashString {$/;"	c
FlexibleInlineBlockClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^class FlexibleInlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, __FL/;"	c
FloatParts	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatParts.hpp	/^  FloatParts(TFloat value) {$/;"	f	struct:FloatParts
FloatParts	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatParts.hpp	/^struct FloatParts {$/;"	s
FloatTraits	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^struct FloatTraits {};$/;"	s
FloatTraits	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^struct FloatTraits<T, 4 \/*32bits*\/> {$/;"	s
FloatTraits	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^struct FloatTraits<T, 8 \/*64bits*\/> {$/;"	s
FloralWhite	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        FloralWhite=0xFFFAF0,           \/\/\/< @htmlcolorblock{FFFAF0}$/;"	e	enum:CRGB::__anonbcc8608a0c03
FlowControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^enum class FlowControl {$/;"	g	namespace:fabgl
Flush	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Flush,$/;"	e	enum:fabgl::PrimitiveCmd
FontInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct FontInfo {$/;"	s	namespace:fabgl
For more information	examples/test/.pio/libdeps/esp32dev/FastLED/README.md	/^## For more information$/;"	s	chapter:FastLED 3.6
ForestGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        ForestGreen=0x228B22,           \/\/\/< @htmlcolorblock{228B22}$/;"	e	enum:CRGB::__anonbcc8608a0c03
FrameHeight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int FrameHeight        = 312;   \/\/ includes vertical blanking$/;"	m	class:MOS6561	typeref:typename:const int
FrameWidth	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int FrameWidth         = 284;   \/\/ includes horizontal blanking (must be a mult/;"	m	class:MOS6561	typeref:typename:const int
FrenchLayout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.cpp	/^const KeyboardLayout FrenchLayout {$/;"	v	namespace:fabgl	typeref:typename:const KeyboardLayout
FrontPorch	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  FrontPorch,   \/**< Horizontal line sequence is: FRONTPORCH -> SYNC -> BACKPORCH -> VISIBLEARE/;"	e	enum:fabgl::VGAScanStart
Fuchsia	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Fuchsia=0xFF00FF,               \/\/\/< @htmlcolorblock{FF00FF}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Full release of the library	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^## Full release of the library$/;"	s	chapter:FastLED2
FullSpectrumFluorescent	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    FullSpectrumFluorescent=0xFFF4F2 \/* 0 K, 255, 244, 242 *\/,$/;"	e	enum:__anon4cec7af20203
G	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t G : 2;  \/**< The Green channel *\/$/;"	m	struct:fabgl::RGB222	typeref:typename:uint8_t:2
G	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t G : 2;  \/**< The Green channel *\/$/;"	m	struct:fabgl::RGBA2222	typeref:typename:uint8_t:2
G	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t G;  \/**< The Green channel *\/$/;"	m	struct:fabgl::RGB888	typeref:typename:uint8_t
G	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t G;  \/**< The Green channel *\/$/;"	m	struct:fabgl::RGBA8888	typeref:typename:uint8_t
GBR	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^	GBR=0120,  \/\/\/< Green, Blue,  Red   (0120)$/;"	e	enum:EOrder
GCJ_PINMODE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^#define GCJ_PINMODE(/;"	d
GCJ_PINMODE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^#define GCJ_PINMODE(/;"	d
GE8822	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class GE8822 : public GE8822Controller800Khz<DATA_P/;"	c
GE8822Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class GE8822Controller800Khz : public ClocklessController<DATA_PIN, 3 * FMUL, 5 * FMUL, 3 * FMUL/;"	c
GE8822Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class GE8822Controller800Khz : public ClocklessController<DATA_PIN, C_NS(350), C_NS(660), C_NS(3/;"	c
GENCOM_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t GENCOM_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
GET_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t GET_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
GET_MILLIS	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define GET_MILLIS /;"	d
GLYPHMAP_BGCOLOR_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^#define GLYPHMAP_BGCOLOR_BIT /;"	d
GLYPHMAP_FGCOLOR_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^#define GLYPHMAP_FGCOLOR_BIT /;"	d
GLYPHMAP_INDEX_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^#define GLYPHMAP_INDEX_BIT /;"	d
GLYPHMAP_ITEM_MAKE	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^#define GLYPHMAP_ITEM_MAKE(/;"	d
GLYPHMAP_OPTIONS_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^#define GLYPHMAP_OPTIONS_BIT /;"	d
GORILLA_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t GORILLA_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
GPIOREAD_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^static const char GPIOREAD_BAS[] =    "1 PRINT \\"Sets GPIO-36 as digital input and continuously/;"	v	typeref:typename:const char[]
GPIOREAD_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char GPIOREAD_BAS[] =    "1 PRINT \\"Sets GPIO-36 as digital input and continuously/;"	v	typeref:typename:const char[]
GPIOStream	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.h	/^class GPIOStream {$/;"	c	namespace:fabgl
GPIO_AUTO	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define GPIO_AUTO /;"	d
GPIO_BIT_CLEAR_REG	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  static constexpr uint32_t GPIO_BIT_CLEAR_REG = GPIO_OUT_W1TC_REG;$/;"	m	class:_ESPPIN	typeref:typename:uint32_t
GPIO_BIT_CLEAR_REG	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  static constexpr uint32_t GPIO_BIT_CLEAR_REG = PIN < 32 ? GPIO_OUT_W1TC_REG : GPIO_OUT1_W1TC_R/;"	m	class:_ESPPIN	typeref:typename:uint32_t
GPIO_BIT_SET_REG	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  static constexpr uint32_t GPIO_BIT_SET_REG = GPIO_OUT_W1TS_REG;$/;"	m	class:_ESPPIN	typeref:typename:uint32_t
GPIO_BIT_SET_REG	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  static constexpr uint32_t GPIO_BIT_SET_REG = PIN < 32 ? GPIO_OUT_W1TS_REG : GPIO_OUT1_W1TS_REG/;"	m	class:_ESPPIN	typeref:typename:uint32_t
GPIO_REG	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  static constexpr uint32_t GPIO_REG = GPIO_OUT_REG;$/;"	m	class:_ESPPIN	typeref:typename:uint32_t
GPIO_REG	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  static constexpr uint32_t GPIO_REG = PIN < 32 ? GPIO_OUT_REG : GPIO_OUT1_REG;$/;"	m	class:_ESPPIN	typeref:typename:uint32_t
GPIO_UNUSED	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define GPIO_UNUSED /;"	d
GRAPH_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^static const char GRAPH_BAS[] =       "1 REM Draws some graphics" NL$/;"	v	typeref:typename:const char[]
GRAPH_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char GRAPH_BAS[] =       "1 REM Draws some graphics" NL$/;"	v	typeref:typename:const char[]
GRB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^	GRB=0102,  \/\/\/< Green, Red,   Blue  (0102)$/;"	e	enum:EOrder
GREEN	examples/test/lib/JFixLib/src/JFixture.h	/^  GREEN,$/;"	e	enum:Channel
GREP_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t GREP_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
GS1903	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class GS1903 : public WS2812Controller800Khz<DATA_P/;"	c
GUI	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t    GUI   : 1;  \/**< Status of GUI (Windows logo) key *\/$/;"	m	struct:fabgl::uiKeyEventInfo	typeref:typename:uint8_t:1
GUI	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t    GUI        : 1;  \/**< GUI key state at the time of this virtual key event *\/$/;"	m	struct:fabgl::VirtualKeyItem	typeref:typename:uint8_t:1
GW6205	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class GW6205 : public GW6205Controller800Khz<DATA_P/;"	c
GW6205Controller400Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class GW6205Controller400Khz : public ClocklessController<DATA_PIN, 6 * FMUL, 7 * FMUL, 6 * FMUL/;"	c
GW6205Controller400Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class GW6205Controller400Khz : public ClocklessController<DATA_PIN, C_NS(800), C_NS(800), C_NS(8/;"	c
GW6205Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class GW6205Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 4 * FMUL, 4 * FMUL/;"	c
GW6205Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class GW6205Controller800Khz : public ClocklessController<DATA_PIN, C_NS(400), C_NS(400), C_NS(4/;"	c
GW6205_400	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class GW6205_400 : public GW6205Controller400Khz<DA/;"	c
Gainsboro	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Gainsboro=0xDCDCDC,             \/\/\/< @htmlcolorblock{DCDCDC}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Game controls	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/README.md	/^## Game controls$/;"	s	chapter:FabGL ClassicRacer
Game score	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/README.md	/^## Game score$/;"	s	chapter:FabGL ClassicRacer
GameController	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  GameController( int id_, gcmode mode_) : mode(mode_), id( id_ )  { }$/;"	f	struct:GameController
GameController	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^struct GameController$/;"	s
GameController	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  GameController( int id_, gcmode mode_) : mode(mode_), id( id_ ) { }$/;"	f	struct:GameController
GameController	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^struct GameController$/;"	s
GameControllerJoystick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  GameControllerJoystick( int id_, int pinUp_ = -1, int pinDown_ = -1, int pinLeft_ = -1, int pi/;"	f	struct:GameControllerJoystick
GameControllerJoystick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  GameControllerJoystick() : GameController( 0, MODE_DIRECTIONAL ) { }$/;"	f	struct:GameControllerJoystick
GameControllerJoystick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^struct GameControllerJoystick : public GameController$/;"	s
GameControllerJoystick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  GameControllerJoystick( int id_, int pinUp_ = -1, int pinDown_ = -1, int pinLeft_ = -1, int pi/;"	f	struct:GameControllerJoystick
GameControllerJoystick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  GameControllerJoystick() : GameController( 0, MODE_DIRECTIONAL ) { }$/;"	f	struct:GameControllerJoystick
GameControllerJoystick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^struct GameControllerJoystick : public GameController$/;"	s
GameControllerKeys	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  GameControllerKeys() : GameController( 0, MODE_DIRECTIONAL ) { }$/;"	f	struct:GameControllerKeys
GameControllerKeys	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  GameControllerKeys(int id_, VirtualKey up_ = fabgl::VK_NONE, VirtualKey down_ = fabgl::VK_NONE/;"	f	struct:GameControllerKeys
GameControllerKeys	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^struct GameControllerKeys : public GameController$/;"	s
GameControllerKeys	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  GameControllerKeys() : GameController( 0, MODE_DIRECTIONAL ) { }$/;"	f	struct:GameControllerKeys
GameControllerKeys	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  GameControllerKeys(int id_, VirtualKey up_ = fabgl::VK_NONE, VirtualKey down_ = fabgl::VK_NONE/;"	f	struct:GameControllerKeys
GameControllerKeys	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^struct GameControllerKeys : public GameController$/;"	s
GameControllerMouse	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  GameControllerMouse( int id_) : GameController( id_, MODE_RELATIVEPOS )$/;"	f	struct:GameControllerMouse
GameControllerMouse	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  GameControllerMouse() : GameController( 0, MODE_DIRECTIONAL ) { }$/;"	f	struct:GameControllerMouse
GameControllerMouse	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^struct GameControllerMouse : public GameController$/;"	s
GameControllerMouse	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  GameControllerMouse( int id_) : GameController( id_, MODE_RELATIVEPOS )$/;"	f	struct:GameControllerMouse
GameControllerMouse	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  GameControllerMouse() : GameController( 0, MODE_DIRECTIONAL ) { }$/;"	f	struct:GameControllerMouse
GameControllerMouse	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^struct GameControllerMouse : public GameController$/;"	s
GeneralFailure	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  GeneralFailure,$/;"	e	enum:AbortReason
GenerateVirtualKeys	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  GenerateVirtualKeys,     \/**< Virtual keys are generated. You can call Keyboard.isVKDown() on/;"	e	enum:fabgl::KbdMode
GenericBitmappedDisplayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^class GenericBitmappedDisplayController : public BitmappedDisplayController {$/;"	c	namespace:fabgl
GermanLayout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.cpp	/^const KeyboardLayout GermanLayout {$/;"	v	namespace:fabgl	typeref:typename:const KeyboardLayout
Getting Help	examples/test/.pio/libdeps/esp32dev/FastLED/README.md	/^## Getting Help$/;"	s	chapter:FastLED 3.6
GhostWhite	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        GhostWhite=0xF8F8FF,            \/\/\/< @htmlcolorblock{F8F8FF}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Glyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Glyph() : X(0), Y(0), width(0), height(0), data(nullptr) { }$/;"	f	struct:fabgl::Glyph
Glyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Glyph(int X_, int Y_, int width_, int height_, uint8_t const * data_) : X(X_), Y(Y_), width(wi/;"	f	struct:fabgl::Glyph
Glyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct Glyph {$/;"	s	namespace:fabgl
GlyphOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^union GlyphOptions {$/;"	u	namespace:fabgl
GlyphsBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct GlyphsBuffer {$/;"	s	namespace:fabgl
GlyphsBufferRenderInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  GlyphsBufferRenderInfo(int itemX_, int itemY_, GlyphsBuffer const * glyphsBuffer_) : itemX(ite/;"	f	struct:fabgl::GlyphsBufferRenderInfo
GlyphsBufferRenderInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct GlyphsBufferRenderInfo {$/;"	s	namespace:fabgl
GoToIdle	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    GoToIdle,$/;"	e	enum:IECDrive::LinkState
Gold	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Gold=0xFFD700,                  \/\/\/< @htmlcolorblock{FFD700}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Goldenrod	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Goldenrod=0xDAA520,             \/\/\/< @htmlcolorblock{DAA520}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Graphical User Interface - GUI (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Graphical User Interface - GUI (click for video):$/;"	S	chapter:FabGL
GraphicsAdapter	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^GraphicsAdapter::GraphicsAdapter()$/;"	f	class:fabgl::GraphicsAdapter
GraphicsAdapter	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^class GraphicsAdapter {$/;"	c	namespace:fabgl
Gray	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Gray=0x808080,                  \/\/\/< @htmlcolorblock{808080}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Green	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Green,          \/**< Equivalent to RGB888(0,128,0) *\/$/;"	e	enum:fabgl::Color
Green	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Green=0x008000,                 \/\/\/< @htmlcolorblock{008000}$/;"	e	enum:CRGB::__anonbcc8608a0c03
GreenYellow	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        GreenYellow=0xADFF2F,           \/\/\/< @htmlcolorblock{ADFF2F}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Grey	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Grey=0x808080,                  \/\/\/< @htmlcolorblock{808080}$/;"	e	enum:CRGB::__anonbcc8608a0c03
GrowLightFluorescent	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    GrowLightFluorescent=0xFFEFF7 \/* 0 K, 255, 239, 247 *\/,$/;"	e	enum:__anon4cec7af20203
H	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define H /;"	d	file:
HAL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^HAL::HAL()$/;"	f	class:HAL
HAL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^class HAL {$/;"	c
HALT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  HALT,$/;"	e	enum:fabgl::__anonfeda45510103	file:
HANDLE_OTA_SERVER	examples/test/lib/JFixLib/src/JOtaServer.h	/^    HANDLE_OTA_SERVER$/;"	e	enum:JOtaServer::Mode
HASH	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint16_t HASH;$/;"	m	struct:DiscParameterHeader	typeref:typename:uint16_t
HAS_DMX_SERIAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/dmx.h	/^#define HAS_DMX_SERIAL$/;"	d
HAS_DMX_SIMPLE	examples/test/.pio/libdeps/esp32dev/FastLED/src/dmx.h	/^#define HAS_DMX_SIMPLE$/;"	d
HAS_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^#define HAS_HARDWARE_PIN_SUPPORT$/;"	d
HAS_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^#define HAS_HARDWARE_PIN_SUPPORT$/;"	d
HAS_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^#define HAS_HARDWARE_PIN_SUPPORT$/;"	d
HAS_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^#define HAS_HARDWARE_PIN_SUPPORT$/;"	d
HAS_PIXIE	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^#define HAS_PIXIE$/;"	d
HAS_PORTDC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^#define HAS_PORTDC /;"	d
HAS_PORTDC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define HAS_PORTDC /;"	d
HAS_WIFI	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define HAS_WIFI$/;"	d
HBANK	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint8_t  HBANK;$/;"	m	struct:DiscParameterHeader	typeref:typename:uint8_t
HBackPorch	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int16_t       HBackPorch;      \/**< Horizontal Back Porch duration in pixels *\/$/;"	m	struct:fabgl::VGATimings	typeref:typename:int16_t
HBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  HBar,           \/**<     *\/$/;"	e	enum:fabgl::uiScrollBarItem
HC_FLAGS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define HC_FLAGS /;"	d	file:
HD0CylEdit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiTextEdit      * HD0PathEdit, * HD0CylEdit, * HD0HdsEdit, * HD0SecEdit;$/;"	m	struct:ConfigDialog	typeref:typename:uiTextEdit *	file:
HD0HdsEdit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiTextEdit      * HD0PathEdit, * HD0CylEdit, * HD0HdsEdit, * HD0SecEdit;$/;"	m	struct:ConfigDialog	typeref:typename:uiTextEdit *	file:
HD0PathEdit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiTextEdit      * HD0PathEdit, * HD0CylEdit, * HD0HdsEdit, * HD0SecEdit;$/;"	m	struct:ConfigDialog	typeref:typename:uiTextEdit *	file:
HD0SecEdit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiTextEdit      * HD0PathEdit, * HD0CylEdit, * HD0HdsEdit, * HD0SecEdit;$/;"	m	struct:ConfigDialog	typeref:typename:uiTextEdit *	file:
HD1CylEdit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiTextEdit      * HD1PathEdit, * HD1CylEdit, * HD1HdsEdit, * HD1SecEdit;$/;"	m	struct:ConfigDialog	typeref:typename:uiTextEdit *	file:
HD1HdsEdit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiTextEdit      * HD1PathEdit, * HD1CylEdit, * HD1HdsEdit, * HD1SecEdit;$/;"	m	struct:ConfigDialog	typeref:typename:uiTextEdit *	file:
HD1PathEdit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiTextEdit      * HD1PathEdit, * HD1CylEdit, * HD1HdsEdit, * HD1SecEdit;$/;"	m	struct:ConfigDialog	typeref:typename:uiTextEdit *	file:
HD1SecEdit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiTextEdit      * HD1PathEdit, * HD1CylEdit, * HD1HdsEdit, * HD1SecEdit;$/;"	m	struct:ConfigDialog	typeref:typename:uiTextEdit *	file:
HDD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  HDD,$/;"	e	enum:MediaType
HELP_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t HELP_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
HEXCOM_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t HEXCOM_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
HFrontPorch	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int16_t       HFrontPorch;     \/**< Horizontal Front Porch duration in pixels *\/$/;"	m	struct:fabgl::VGATimings	typeref:typename:int16_t
HGC_CONFSWITCH_ALLOWGRAPHICSMODE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define HGC_CONFSWITCH_ALLOWGRAPHICSMODE /;"	d	file:
HGC_CONFSWITCH_ALLOWPAGE1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define HGC_CONFSWITCH_ALLOWPAGE1 /;"	d	file:
HGC_MODECONTROLREG_BIT7BLINK	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define HGC_MODECONTROLREG_BIT7BLINK /;"	d	file:
HGC_MODECONTROLREG_ENABLED	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define HGC_MODECONTROLREG_ENABLED /;"	d	file:
HGC_MODECONTROLREG_GRAPHICS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define HGC_MODECONTROLREG_GRAPHICS /;"	d	file:
HGC_MODECONTROLREG_GRAPHICSPAGE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^#define HGC_MODECONTROLREG_GRAPHICSPAGE /;"	d	file:
HI1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define HI1 /;"	d
HI2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define HI2 /;"	d
HIGHSCORE_ITEMS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^#define HIGHSCORE_ITEMS /;"	d
HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define HL /;"	d	file:
HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define HL /;"	d	file:
HL_IX_IY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define HL_IX_IY /;"	d	file:
HPC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define HPC /;"	d	file:
HSP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define HSP /;"	d	file:
HSVHue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^} HSVHue;$/;"	t	typeref:enum:__anonbcc8608a0603
HSV_SECTION_3	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^#define HSV_SECTION_3 /;"	d	file:
HSV_SECTION_6	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^#define HSV_SECTION_6 /;"	d	file:
HScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::HScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
HScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::HScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::TFTController	typeref:typename:void
HScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::HScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
HScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::HScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
HScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::HScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
HScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::HScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
HScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::HScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
HScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::HScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
HScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::HScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
HScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  HScroll,$/;"	e	enum:fabgl::PrimitiveCmd
HScrollBarPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int HScrollBarPos()     { return m_HScrollBarPosition; }$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:int
HScrollBarRange	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int HScrollBarRange()   { return m_HScrollBarRange; }$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:int
HScrollBarVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int HScrollBarVisible() { return m_HScrollBarVisible; }$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:int
HStartingBlock	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  VGAScanStart  HStartingBlock;  \/**< Horizontal starting block. DetermineshHorizontal order of/;"	m	struct:fabgl::VGATimings	typeref:typename:VGAScanStart
HSyncLogic	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  char          HSyncLogic;      \/**< Horizontal Sync polarity '+' or '-' *\/$/;"	m	struct:fabgl::VGATimings	typeref:typename:char
HSyncPulse	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int16_t       HSyncPulse;      \/**< Horizontal Sync Pulse duration in pixels *\/$/;"	m	struct:fabgl::VGATimings	typeref:typename:int16_t
HTMLColorCode	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    } HTMLColorCode;$/;"	t	struct:CRGB	typeref:enum:CRGB::__anonbcc8608a0c03
HUE_AQUA	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    HUE_AQUA = 128,    \/\/\/< Aqua (180°)$/;"	e	enum:__anonbcc8608a0603
HUE_BLUE	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    HUE_BLUE = 160,    \/\/\/< Blue (225°)$/;"	e	enum:__anonbcc8608a0603
HUE_GREEN	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    HUE_GREEN = 96,    \/\/\/< Green (135°)$/;"	e	enum:__anonbcc8608a0603
HUE_MAX	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.h	/^#define HUE_MAX /;"	d
HUE_MAX_RAINBOW	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.h	/^#define HUE_MAX_RAINBOW /;"	d
HUE_MAX_SPECTRUM	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.h	/^#define HUE_MAX_SPECTRUM /;"	d
HUE_ORANGE	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    HUE_ORANGE = 32,   \/\/\/< Orange (45°)$/;"	e	enum:__anonbcc8608a0603
HUE_PINK	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    HUE_PINK = 224     \/\/\/< Pink (315°)$/;"	e	enum:__anonbcc8608a0603
HUE_PURPLE	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    HUE_PURPLE = 192,  \/\/\/< Purple (270°)$/;"	e	enum:__anonbcc8608a0603
HUE_RED	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    HUE_RED = 0,       \/\/\/< Red (0°)$/;"	e	enum:__anonbcc8608a0603
HUE_YELLOW	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    HUE_YELLOW = 64,   \/\/\/< Yellow (90°)$/;"	e	enum:__anonbcc8608a0603
HVisibleArea	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int16_t       HVisibleArea;    \/**< Horizontal visible area length in pixels *\/$/;"	m	struct:fabgl::VGATimings	typeref:typename:int16_t
H_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define H_FLAG /;"	d	file:
Hall of fame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/README.md	/^## Hall of fame$/;"	s	chapter:FabGL ClassicRacer
Halogen	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    Halogen=0xFFF1E0 \/* 3200 K, 255, 241, 224 *\/,$/;"	e	enum:__anon4cec7af20203
Hardsoft	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  Hardsoft,          \/**< Hardware\/software flow control. Use XON\/XOFF and RTS\/CTS *\/$/;"	e	enum:fabgl::FlowControl
Hardware	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  Hardware,          \/**< Hardware flow control. Use RTS and CTS signals *\/$/;"	e	enum:fabgl::FlowControl
Hazeltine1500	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  Hazeltine1500,  \/**< Emulated Hazeltine 1500 terminal *\/$/;"	e	enum:fabgl::TermType
HeatColor	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB HeatColor( uint8_t temperature)$/;"	f	typeref:typename:CRGB
HighNoonSun	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    HighNoonSun=0xFFFFFB \/* 5400 K, 255, 255, 251 *\/,$/;"	e	enum:__anon4cec7af20203
HighPressureSodium	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    HighPressureSodium=0xFFB74C \/* 0 K, 255, 183, 76 *\/,$/;"	e	enum:__anon4cec7af20203
Honeydew	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Honeydew=0xF0FFF0,              \/\/\/< @htmlcolorblock{F0FFF0}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Horizontal	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Horizontal,        \/**< Horizontal orientation *\/$/;"	e	enum:fabgl::uiOrientation
HorizontalBlanking	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int HorizontalBlanking = 63;$/;"	m	class:MOS6561	typeref:typename:const int
HotPink	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        HotPink=0xFF69B4,               \/\/\/< @htmlcolorblock{FF69B4}$/;"	e	enum:CRGB::__anonbcc8608a0c03
HttpEvent	examples/test/lib/JFixLib/src/JOtaServer.h	/^void HttpEvent(HttpEvent_t *event){$/;"	f	typeref:typename:void
I2C	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^I2C::I2C(int bus)$/;"	f	class:fabgl::I2C
I2C	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^class I2C {$/;"	c	namespace:fabgl
I2C	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  I2C,      \/**< I2C display. *\/$/;"	e	enum:fabgl::VideoMode
I2CJobInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^struct I2CJobInfo {$/;"	s	namespace:fabgl
I2C_COMMTASK_PRIORITY	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^#define I2C_COMMTASK_PRIORITY /;"	d	file:
I2C_COMMTASK_STACK	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^#define I2C_COMMTASK_STACK /;"	d	file:
I2C_DEFAULT_FREQUENCY	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^#define I2C_DEFAULT_FREQUENCY /;"	d	file:
I2S_BASE_CLK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^#define I2S_BASE_CLK /;"	d
I2S_DEVICE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^#define I2S_DEVICE /;"	d
I2S_MAX_CLK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^#define I2S_MAX_CLK /;"	d
I2S_MAX_PULSE_PER_BIT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^#define I2S_MAX_PULSE_PER_BIT /;"	d
I80186MODE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  #define I80186MODE /;"	d
I8086_SHOW_OPCODE_STATS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^#define I8086_SHOW_OPCODE_STATS /;"	d
IBM PC Emulator (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### IBM PC Emulator (click for video):$/;"	S	chapter:FabGL
ICMP	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.cpp	/^ICMP::ICMP()$/;"	f	class:fabgl::ICMP
ICMP	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.h	/^ class ICMP {$/;"	c	namespace:fabgl
ICW1_IC4	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define ICW1_IC4 /;"	d	file:
ICW1_LTIM	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define ICW1_LTIM /;"	d	file:
ICW1_SNGL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define ICW1_SNGL /;"	d	file:
ICW4_AEOI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define ICW4_AEOI /;"	d	file:
ICW4_BUF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define ICW4_BUF /;"	d	file:
ICW4_MS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define ICW4_MS /;"	d	file:
ICW4_PM	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define ICW4_PM /;"	d	file:
ICW4_SFNM	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define ICW4_SFNM /;"	d	file:
IDATA2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define IDATA2 /;"	d
IDATACLC3	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define IDATACLC3 /;"	d
IDLE	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    IDLE,$/;"	e	enum:JEnvState
IDLE	examples/test/lib/JFixLib/src/JOtaServer.h	/^    IDLE,$/;"	e	enum:JOtaServer::Mode
IECDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^IECDrive::IECDrive(Machine * machine, int deviceNum)$/;"	f	class:IECDrive
IECDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^class IECDrive {$/;"	c
IEEE754binary32_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^} IEEE754binary32_t;$/;"	t	typeref:union:__anon26d1ab7c010a
IFF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define IFF /;"	d	file:
IF_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define IF_ADDR /;"	d	file:
IF_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t IF_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
ILI9341Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.h	/^class ILI9341Controller : public TFTController {$/;"	c	namespace:fabgl
ILI9341_DEVICECODE	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_DEVICECODE /;"	d	file:
ILI9341_DISPLAYFUNCCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_DISPLAYFUNCCTRL /;"	d	file:
ILI9341_DISPON	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_DISPON /;"	d	file:
ILI9341_DRIVERTIMINGCTRLA	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_DRIVERTIMINGCTRLA /;"	d	file:
ILI9341_DRIVERTIMINGCTRLB	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_DRIVERTIMINGCTRLB /;"	d	file:
ILI9341_ENABLE3G	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_ENABLE3G /;"	d	file:
ILI9341_FRAMERATECTRL1	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_FRAMERATECTRL1 /;"	d	file:
ILI9341_GAMMASET	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_GAMMASET /;"	d	file:
ILI9341_NEGGAMMACORR	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_NEGGAMMACORR /;"	d	file:
ILI9341_NORON	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_NORON /;"	d	file:
ILI9341_PIXELFORMATSET	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_PIXELFORMATSET /;"	d	file:
ILI9341_POSGAMMACORR	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_POSGAMMACORR /;"	d	file:
ILI9341_POWERCTR1	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_POWERCTR1 /;"	d	file:
ILI9341_POWERCTR2	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_POWERCTR2 /;"	d	file:
ILI9341_POWERCTRLA	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_POWERCTRLA /;"	d	file:
ILI9341_POWERCTRLB	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_POWERCTRLB /;"	d	file:
ILI9341_POWERONSEQCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_POWERONSEQCTRL /;"	d	file:
ILI9341_PUMPRATIOCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_PUMPRATIOCTRL /;"	d	file:
ILI9341_SLEEPOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_SLEEPOUT /;"	d	file:
ILI9341_SWRESET	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_SWRESET /;"	d	file:
ILI9341_VCOMCTR1	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_VCOMCTR1 /;"	d	file:
ILI9341_VCOMCTR2	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ILI9341_VCOMCTR2 /;"	d	file:
IM_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  IM_N,$/;"	e	enum:fabgl::__anonfeda45510103	file:
IN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    __I  uint32_t  IN;                                \/*!< Read GPIO port.                     /;"	m	struct:__anon7de97ea30108	typeref:typename:__I uint32_t
INC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define INC(/;"	d	file:
INCLEDS3	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define INCLEDS3 /;"	d
INC_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  INC_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
INC_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  INC_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
INC_RR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  INC_RR,$/;"	e	enum:fabgl::__anonfeda45510103	file:
INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define INDIRECT_HL /;"	d	file:
INIR_INDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  INIR_INDR,              \/* Handle "INIR" and "INDR". *\/$/;"	e	enum:fabgl::__anonfeda45510103	file:
INI_IND	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  INI_IND,                \/* Handle "INI" and "IND". *\/$/;"	e	enum:fabgl::__anonfeda45510103	file:
INNER_SEI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^#define INNER_SEI /;"	d
INR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define INR(/;"	d	file:
INSTANTIATE_EVERY_N_TIME_PERIODS	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define INSTANTIATE_EVERY_N_TIME_PERIODS(/;"	d
INSTRUCTION_TABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^static const unsigned char INSTRUCTION_TABLE[256] = {$/;"	v	namespace:fabgl	typeref:typename:const unsigned char[256]	file:
INTERRUPT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/led_sysdefs_apollo3.h	/^#define INTERRUPT_THRESHOLD /;"	d
INTERRUPT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/led_sysdefs_arm_d21.h	/^#define INTERRUPT_THRESHOLD /;"	d
INTERRUPT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/led_sysdefs_arm_d51.h	/^#define INTERRUPT_THRESHOLD /;"	d
INTERRUPT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/led_sysdefs_arm_k20.h	/^#define INTERRUPT_THRESHOLD /;"	d
INTERRUPT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/led_sysdefs_arm_k66.h	/^#define INTERRUPT_THRESHOLD /;"	d
INTERRUPT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/led_sysdefs_arm_kl26.h	/^#define INTERRUPT_THRESHOLD /;"	d
INTERRUPT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/led_sysdefs_arm_mxrt1062.h	/^#define INTERRUPT_THRESHOLD /;"	d
INTERRUPT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define INTERRUPT_THRESHOLD /;"	d
INTERRUPT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define INTERRUPT_THRESHOLD /;"	d
INTERRUPT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^#define INTERRUPT_THRESHOLD /;"	d
INTERRUPT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^# define INTERRUPT_THRESHOLD /;"	d
INTERRUPT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/led_sysdefs_esp8266.h	/^# define INTERRUPT_THRESHOLD /;"	d
INTR_SRC	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^static const int INTR_SRC[]       = { ETS_UART0_INTR_SOURCE, ETS_UART1_INTR_SOURCE, ETS_UART2_IN/;"	v	namespace:fabgl	typeref:typename:const int[]	file:
INVALIDRECT	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^#define INVALIDRECT /;"	d	file:
IN_A_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  IN_A_N,$/;"	e	enum:fabgl::__anonfeda45510103	file:
IN_R_C	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  IN_R_C,                 \/* Correctly handle undocumented "IN F, (C)"$/;"	e	enum:fabgl::__anonfeda45510103	file:
IP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::IP()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
IRQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^int MOS6502::IRQ()$/;"	f	class:fabgl::MOS6502	typeref:typename:int
IRQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^int Z80::IRQ(int data_on_bus)$/;"	f	class:fabgl::Z80	typeref:typename:int
IRQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^bool i8086::IRQ(uint8_t interrupt_num)$/;"	f	class:fabgl::i8086	typeref:typename:bool
ISCTRLCHAR	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^#define ISCTRLCHAR(/;"	d	file:
ISRHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^void IRAM_ATTR CVBSGenerator::ISRHandler(void * arg)$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:void IRAM_ATTR
ISRHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void IRAM_ATTR SoundGenerator::ISRHandler(void * arg)$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void IRAM_ATTR
ISRHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void IRAM_ATTR VGA16Controller::ISRHandler(void * arg)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void IRAM_ATTR
ISRHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void IRAM_ATTR VGA2Controller::ISRHandler(void * arg)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void IRAM_ATTR
ISRHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void IRAM_ATTR VGA4Controller::ISRHandler(void * arg)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void IRAM_ATTR
ISRHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void IRAM_ATTR VGA8Controller::ISRHandler(void * arg)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void IRAM_ATTR
ISRHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void IRAM_ATTR VGADirectController::ISRHandler(void * arg)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void IRAM_ATTR
ISRHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void IRAM_ATTR VGATextController::ISRHandler(void * arg)$/;"	f	class:fabgl::VGATextController	typeref:typename:void IRAM_ATTR
I_STAGEBGE	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define I_STAGEBGE(/;"	d
I_STAGEBL	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define I_STAGEBL(/;"	d
I_STAGEBLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define I_STAGEBLE(/;"	d
I_STAGEDECI	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define I_STAGEDECI(/;"	d
I_STAGEINCI	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define I_STAGEINCI(/;"	d
I_STAGERSTI	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define I_STAGERSTI(/;"	d
Idle	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    Idle,$/;"	e	enum:IECDrive::ArbState
Idle	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    Idle,$/;"	e	enum:IECDrive::LinkState
IncompleteInput	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^    IncompleteInput,$/;"	e	enum:DeserializationError::Code
IndianRed	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        IndianRed=0xCD5C5C,             \/\/\/< @htmlcolorblock{CD5C5C}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Indigo	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Indigo=0x4B0082,                \/\/\/< @htmlcolorblock{4B0082}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Info	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Info,      \/**< Info icon *\/$/;"	e	enum:fabgl::uiMessageBoxIcon
InlineBlockClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PORT_MASK> {$/;"	c
InlineBlockClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, LANE_MASK> {$/;"	c
InlineBlockClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PORT_MASK> {$/;"	c
InlineBlockClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PORT_MASK> {$/;"	c
InlineBlockClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PORT_MASK> {$/;"	c
Input	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  Input,    \/**< GPIO is input *\/$/;"	e	enum:fabgl::MCPDir
InputApp	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  InputApp(InputForm * form_)      { form = form_; }$/;"	f	struct:fabgl::InputApp
InputApp	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^struct InputApp : public uiApp {$/;"	s	namespace:fabgl
InputBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^InputBox::InputBox(uiApp * app)$/;"	f	class:fabgl::InputBox
InputBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^class InputBox {$/;"	c	namespace:fabgl
InputForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  InputForm(InputBox * inputBox_)$/;"	f	struct:fabgl::InputForm
InputForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^struct InputForm {$/;"	s	namespace:fabgl
InputPin	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	InputPin(int pin) : Pin(pin) { setInput(); }$/;"	f	class:InputPin
InputPin	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^class InputPin : public Pin {$/;"	c
InputResult	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^enum class InputResult {$/;"	g	namespace:fabgl
InsertChar	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  InsertChar,               \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
InsertLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  InsertLine,               \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
Installation Tutorial - TTGO VGA32 (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Installation Tutorial - TTGO VGA32 (click for video):$/;"	S	chapter:FabGL
Installation Tutorial - fabgl development board (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Installation Tutorial - fabgl development board (click for video):$/;"	S	chapter:FabGL
Intellimouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  Intellimouse,   \/**< Microsoft Intellimouse compatible with three buttons, X and Y movements /;"	e	enum:fabgl::MouseType
Interrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  typedef bool (*Interrupt)(void * context, int num);$/;"	t	class:fabgl::i8086	typeref:typename:bool (*)(void * context,int num)
InterruptCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^  typedef bool (*InterruptCallback)(void * context);$/;"	t	class:fabgl::MC146818	typeref:typename:bool (*)(void * context)
InterruptCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  typedef bool (*InterruptCallback)(PC8250 * source, void * context);$/;"	t	class:fabgl::PC8250	typeref:typename:bool (*)(PC8250 * source,void * context)
InterruptCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  typedef bool (*InterruptCallback)(void * context);$/;"	t	class:fabgl::i8042	typeref:typename:bool (*)(void * context)
InterruptLock	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^			InterruptLock() {$/;"	f	struct:ClocklessController::showRGBInternal::InterruptLock
InterruptLock	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^		struct InterruptLock {$/;"	s	function:ClocklessController::showRGBInternal
InvalidInput	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^    InvalidInput,$/;"	e	enum:DeserializationError::Code
Inverse	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Inverse,            \/**< Swap background and foreground colors *\/$/;"	e	enum:fabgl::CharStyle
Invert	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  GlyphOptions & Invert(uint8_t value) { invert = value; return *this; }$/;"	f	union:fabgl::GlyphOptions	typeref:typename:GlyphOptions &
InvertRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  InvertRect,$/;"	e	enum:fabgl::PrimitiveCmd
IsChar	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^struct IsChar$/;"	s
IsCharOrVoid	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp	/^struct IsCharOrVoid {$/;"	s
IsCharOrVoid	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp	/^struct IsCharOrVoid<const T> : IsCharOrVoid<T> {};$/;"	s
IsString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/IsString.hpp	/^struct IsString : false_type {};$/;"	s
IsString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/IsString.hpp	/^struct IsString<$/;"	s
IsVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantTag.hpp	/^struct IsVariant : is_base_of<VariantTag, T> {};$/;"	s
ItalianLayout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.cpp	/^const KeyboardLayout ItalianLayout {$/;"	v	namespace:fabgl	typeref:typename:const KeyboardLayout
Italic	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  GlyphOptions & Italic(bool value) { italic = value; return *this; }$/;"	f	union:fabgl::GlyphOptions	typeref:typename:GlyphOptions &
Italic	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Italic,             \/**< Italic *\/$/;"	e	enum:fabgl::CharStyle
IteratorReader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp	/^  explicit IteratorReader(TIterator begin, TIterator end)$/;"	f	class:IteratorReader
IteratorReader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp	/^class IteratorReader {$/;"	c
Ivory	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Ivory=0xFFFFF0,                 \/\/\/< @htmlcolorblock{FFFFF0}$/;"	e	enum:CRGB::__anonbcc8608a0c03
JAddressableMode	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  enum JAddressableMode { J_WS2812B, J_WS2816B };$/;"	g	class:JFixtureAddr
JDrawMode	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  enum JDrawMode { TEST, TEST_PERLIN, LIVE };$/;"	g	class:JFixtureAddr
JEVENT	examples/test/lib/JFixLib/src/Event/Event.h	/^#define JEVENT$/;"	d
JE_CursorKeys	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  JE_CursorKeys,$/;"	e	enum:JoyEmu
JE_Mouse	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  JE_Mouse,$/;"	e	enum:JoyEmu
JE_None	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  JE_None,$/;"	e	enum:JoyEmu
JEnv	examples/test/lib/JFixLib/src/Event/JEnv.cpp	/^JEnv::JEnv() {}$/;"	f	class:JEnv
JEnv	examples/test/lib/JFixLib/src/Event/JEnv.h	/^class JEnv{$/;"	c
JEnvState	examples/test/lib/JFixLib/src/Event/JEnv.h	/^enum JEnvState{$/;"	g
JEnv_h	examples/test/lib/JFixLib/src/Event/JEnv.h	/^#define JEnv_h$/;"	d
JEspnowDevice	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  JEspnowDevice() {$/;"	f	class:JEspnowDevice
JEspnowDevice	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^class JEspnowDevice : public JFixture {$/;"	c
JEspnowMsg	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  JEspnowMsg(){};$/;"	f	class:JEspnowMsg
JEspnowMsg	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^class JEspnowMsg {$/;"	c
JEvent_Perlin	examples/test/lib/JFixLib/src/Event/JEvent_Perlin.h	/^    JEvent_Perlin(){};$/;"	f	class:JEvent_Perlin
JEvent_Perlin	examples/test/lib/JFixLib/src/Event/JEvent_Perlin.h	/^class JEvent_Perlin : public Event{$/;"	c
JFixLib	README.md	/^# JFixLib$/;"	c
JFixture	examples/test/lib/JFixLib/src/JFixture.h	/^  JFixture(){$/;"	f	class:JFixture
JFixture	examples/test/lib/JFixLib/src/JFixture.h	/^class JFixture: public JOtaServer, public JModes{$/;"	c
JFixtureAddr	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  JFixtureAddr(){};$/;"	f	class:JFixtureAddr
JFixtureAddr	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^class JFixtureAddr : public JFixtureGraphics {$/;"	c
JFixtureDimmer	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  JFixtureDimmer(){};$/;"	f	class:JFixtureDimmer
JFixtureDimmer	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^class JFixtureDimmer: public JEspnowDevice, public JWS2812B_status{$/;"	c
JFixtureGraphics	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  JFixtureGraphics() {$/;"	f	class:JFixtureGraphics
JFixtureGraphics	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^class JFixtureGraphics : public JEspnowDevice {$/;"	c
JJonisk	examples/test/lib/JFixLib/src/JJonisk.h	/^class JJonisk: public JFixtureDimmer{$/;"	c
JJoniskSettings	examples/test/lib/JFixLib/src/JJonisk.h	/^    JJoniskSettings(){};$/;"	f	class:JJoniskSettings
JJoniskSettings	examples/test/lib/JFixLib/src/JJonisk.h	/^class JJoniskSettings{$/;"	c
JLag	examples/test/lib/JFixLib/src/JLag.h	/^    JLag(){};$/;"	f	class:JLag
JLag	examples/test/lib/JFixLib/src/JLag.h	/^class JLag{$/;"	c
JMPLOOP2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define JMPLOOP2 /;"	d
JModes	examples/test/lib/JFixLib/src/JModes.h	/^  JModes(){$/;"	f	class:JModes
JModes	examples/test/lib/JFixLib/src/JModes.h	/^class JModes{$/;"	c
JMsgArguments	examples/test/lib/JFixLib/src/JModes.h	/^    JMsgArguments(){};$/;"	f	class:JMsgArguments
JMsgArguments	examples/test/lib/JFixLib/src/JModes.h	/^class JMsgArguments{$/;"	c
JOsc	examples/test/lib/JFixLib/src/Event/JOsc.cpp	/^JOsc::JOsc(JWavetable *w) { this->w = w; }$/;"	f	class:JOsc
JOsc	examples/test/lib/JFixLib/src/Event/JOsc.h	/^class JOsc : public Event {$/;"	c
JOtaServer	examples/test/lib/JFixLib/src/JOtaServer.h	/^class JOtaServer{$/;"	c
JP_CC_NN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  JP_CC_NN,$/;"	e	enum:fabgl::__anonfeda45510103	file:
JP_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  JP_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
JP_NN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  JP_NN,$/;"	e	enum:fabgl::__anonfeda45510103	file:
JR_DD_E	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  JR_DD_E,$/;"	e	enum:fabgl::__anonfeda45510103	file:
JR_E	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  JR_E,$/;"	e	enum:fabgl::__anonfeda45510103	file:
JRect	examples/test/lib/JFixLib/src/Event/JRect.cpp	/^JRect::JRect(unsigned short lifeTime) {$/;"	f	class:JRect
JRect	examples/test/lib/JFixLib/src/Event/JRect.h	/^class JRect: public Event{$/;"	c
JSON_ARRAY_SIZE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^#define JSON_ARRAY_SIZE(/;"	d
JSON_OBJECT_SIZE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^#define JSON_OBJECT_SIZE(/;"	d
JSON_STRING_SIZE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^#define JSON_STRING_SIZE(/;"	d
JTlFix	examples/test/lib/JFixLib/src/JTlFix.h	/^class JTlFix: public JFixtureAddr{$/;"	c
JTlFixSettings	examples/test/lib/JFixLib/src/JTlFix.h	/^    JTlFixSettings(){};$/;"	f	class:JTlFixSettings
JTlFixSettings	examples/test/lib/JFixLib/src/JTlFix.h	/^class JTlFixSettings{$/;"	c
JWS2812B_status	examples/test/lib/JFixLib/src/JWS2812B_status.h	/^    JWS2812B_status(){};$/;"	f	class:JWS2812B_status
JWS2812B_status	examples/test/lib/JFixLib/src/JWS2812B_status.h	/^  JWS2812B_status(){$/;"	f	class:JWS2812B_status
JWS2812B_status	examples/test/lib/JFixLib/src/JWS2812B_status.h	/^class JWS2812B_status{$/;"	c
JWavetable	examples/test/lib/JFixLib/src/Event/JWavetable.cpp	/^JWavetable::JWavetable(int resolution){$/;"	f	class:JWavetable
JWavetable	examples/test/lib/JFixLib/src/Event/JWavetable.h	/^class JWavetable{$/;"	c
J_WS2812B	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  enum JAddressableMode { J_WS2812B, J_WS2816B };$/;"	e	enum:JFixtureAddr::JAddressableMode
J_WS2816B	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  enum JAddressableMode { J_WS2812B, J_WS2816B };$/;"	e	enum:JFixtureAddr::JAddressableMode
JapaneseLayout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.cpp	/^const KeyboardLayout JapaneseLayout {$/;"	v	namespace:fabgl	typeref:typename:const KeyboardLayout
Joy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^enum Joy {$/;"	g
JoyDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  JoyDown,$/;"	e	enum:Joy
JoyEmu	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^enum JoyEmu {$/;"	g
JoyFire	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  JoyFire,$/;"	e	enum:Joy
JoyLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  JoyLeft,$/;"	e	enum:Joy
JoyRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  JoyRight,$/;"	e	enum:Joy
JoyUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  JoyUp,$/;"	e	enum:Joy
JsonArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE JsonArray() : data_(0), pool_(0) {}$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE
JsonArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE JsonArray(detail::MemoryPool* pool, detail::CollectionData* data)$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE
JsonArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^class JsonArray : public detail::VariantOperators<JsonArray> {$/;"	c
JsonArrayConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  FORCE_INLINE JsonArrayConst() : data_(0) {}$/;"	f	class:JsonArrayConst	typeref:typename:FORCE_INLINE
JsonArrayConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  FORCE_INLINE JsonArrayConst(const detail::CollectionData* data)$/;"	f	class:JsonArrayConst	typeref:typename:FORCE_INLINE
JsonArrayConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^class JsonArrayConst : public detail::VariantOperators<JsonArrayConst> {$/;"	c
JsonArrayConstIterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonArrayConstIterator() : slot_(0) {}$/;"	f	class:JsonArrayConstIterator
JsonArrayConstIterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  explicit JsonArrayConstIterator(const detail::VariantSlot* slot)$/;"	f	class:JsonArrayConstIterator
JsonArrayConstIterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^class JsonArrayConstIterator {$/;"	c
JsonArrayIterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonArrayIterator() : slot_(0) {}$/;"	f	class:JsonArrayIterator
JsonArrayIterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  explicit JsonArrayIterator(detail::MemoryPool* pool,$/;"	f	class:JsonArrayIterator
JsonArrayIterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^class JsonArrayIterator {$/;"	c
JsonBuffer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/compatibility.hpp	/^#define JsonBuffer /;"	d
JsonDeserializer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  JsonDeserializer(MemoryPool* pool, TReader reader,$/;"	f	class:JsonDeserializer
JsonDeserializer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^class JsonDeserializer {$/;"	c
JsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  JsonDocument() : pool_(0, 0) {}$/;"	f	class:JsonDocument
JsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  JsonDocument(char* buf, size_t capa) : pool_(buf, capa) {}$/;"	f	class:JsonDocument
JsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  JsonDocument(detail::MemoryPool pool) : pool_(pool) {}$/;"	f	class:JsonDocument
JsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^class JsonDocument : public detail::VariantOperators<const JsonDocument&> {$/;"	c
JsonFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/JsonFloat.hpp	/^typedef double JsonFloat;$/;"	t	typeref:typename:double
JsonInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/JsonInteger.hpp	/^typedef int64_t JsonInteger;$/;"	t	typeref:typename:int64_t
JsonObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE JsonObject() : data_(0), pool_(0) {}$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE
JsonObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE JsonObject(detail::MemoryPool* buf, detail::CollectionData* data)$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE
JsonObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^class JsonObject : public detail::VariantOperators<JsonObject> {$/;"	c
JsonObjectConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  JsonObjectConst() : data_(0) {}$/;"	f	class:JsonObjectConst
JsonObjectConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  JsonObjectConst(const detail::CollectionData* data) : data_(data) {}$/;"	f	class:JsonObjectConst
JsonObjectConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^class JsonObjectConst : public detail::VariantOperators<JsonObjectConst> {$/;"	c
JsonObjectConstIterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonObjectConstIterator() : slot_(0) {}$/;"	f	class:JsonObjectConstIterator
JsonObjectConstIterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  explicit JsonObjectConstIterator(const detail::VariantSlot* slot)$/;"	f	class:JsonObjectConstIterator
JsonObjectConstIterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^class JsonObjectConstIterator {$/;"	c
JsonObjectIterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonObjectIterator() : slot_(0) {}$/;"	f	class:JsonObjectIterator
JsonObjectIterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  explicit JsonObjectIterator(detail::MemoryPool* pool,$/;"	f	class:JsonObjectIterator
JsonObjectIterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^class JsonObjectIterator {$/;"	c
JsonPair	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonPair.hpp	/^  JsonPair(detail::MemoryPool* pool, detail::VariantSlot* slot) {$/;"	f	class:JsonPair
JsonPair	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonPair.hpp	/^class JsonPair {$/;"	c
JsonPairConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonPair.hpp	/^  JsonPairConst(const detail::VariantSlot* slot) {$/;"	f	class:JsonPairConst
JsonPairConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonPair.hpp	/^class JsonPairConst {$/;"	c
JsonPairConstPtr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonPairConstPtr(const detail::VariantSlot* slot) : pair_(slot) {}$/;"	f	class:JsonPairConstPtr
JsonPairConstPtr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^class JsonPairConstPtr {$/;"	c
JsonPairPtr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonPairPtr(detail::MemoryPool* pool, detail::VariantSlot* slot)$/;"	f	class:JsonPairPtr
JsonPairPtr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^class JsonPairPtr {$/;"	c
JsonSerializer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  JsonSerializer(TWriter writer) : formatter_(writer) {}$/;"	f	class:JsonSerializer
JsonSerializer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^class JsonSerializer : public Visitor<size_t> {$/;"	c
JsonString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  JsonString() : data_(0), size_(0), ownership_(Linked) {}$/;"	f	class:JsonString
JsonString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  JsonString(const char* data, Ownership ownership = Linked)$/;"	f	class:JsonString
JsonString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  JsonString(const char* data, size_t sz, Ownership ownership = Linked)$/;"	f	class:JsonString
JsonString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^class JsonString {$/;"	c
JsonStringAdapter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/JsonString.hpp	/^  JsonStringAdapter(const JsonString& s)$/;"	f	class:JsonStringAdapter
JsonStringAdapter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/JsonString.hpp	/^class JsonStringAdapter : public SizedRamString {$/;"	c
JsonUInt	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/JsonInteger.hpp	/^typedef uint64_t JsonUInt;$/;"	t	typeref:typename:uint64_t
JsonVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  JsonVariant() : data_(0), pool_(0) {}$/;"	f	class:JsonVariant
JsonVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  JsonVariant(detail::MemoryPool* pool, detail::VariantData* data)$/;"	f	class:JsonVariant
JsonVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^class JsonVariant : public detail::VariantRefBase<JsonVariant>,$/;"	c
JsonVariantConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  JsonVariantConst() : data_(0) {}$/;"	f	class:JsonVariantConst
JsonVariantConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  explicit JsonVariantConst(const detail::VariantData* data) : data_(data) {}$/;"	f	class:JsonVariantConst
JsonVariantConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^class JsonVariantConst : public detail::VariantTag,$/;"	c
K170	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^#define K170 /;"	d	file:
K171	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^#define K171 /;"	d	file:
K255	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^#define K255 /;"	d	file:
K85	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^#define K85 /;"	d	file:
KINETISK_SPI0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^#define KINETISK_SPI0 /;"	d
KINETISK_SPI0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^#define KINETISK_SPI0 /;"	d
Kaypro	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  Kaypro,         \/**< Emulated Kaypro *\/$/;"	e	enum:fabgl::TermType
KbdMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^enum class KbdMode {$/;"	g	namespace:fabgl
Keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^Keyboard::Keyboard()$/;"	f	class:fabgl::Keyboard
Keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^class Keyboard : public PS2Device {$/;"	c	namespace:fabgl
KeyboardLayout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^struct KeyboardLayout {$/;"	s	namespace:fabgl
KeyboardPort0	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  KeyboardPort0,              \/**< Keyboard on Port 0 (no mouse) *\/$/;"	e	enum:fabgl::PS2Preset
KeyboardPort0_MousePort1	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  KeyboardPort0_MousePort1,   \/**< Keyboard on Port 0 and Mouse on Port 1 *\/$/;"	e	enum:fabgl::PS2Preset
KeyboardPort1	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  KeyboardPort1,              \/**< Keyboard on Port 1 (no mouse) *\/$/;"	e	enum:fabgl::PS2Preset
KeyboardPort1_MousePort0	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  KeyboardPort1_MousePort0,   \/**< Keyboard on Port 1 and Mouse on Port 0 *\/$/;"	e	enum:fabgl::PS2Preset
KeypadMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^enum KeypadMode {$/;"	g	namespace:fabgl
Khaki	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Khaki=0xF0E68C,                 \/\/\/< @htmlcolorblock{F0E68C}$/;"	e	enum:CRGB::__anonbcc8608a0c03
L	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define L /;"	d	file:
LABEL_PORT0_ENABLE_RX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT0_ENABLE_RX /;"	d	file:
LABEL_PORT0_RX_CHECK_CLK	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT0_RX_CHECK_CLK /;"	d	file:
LABEL_PORT0_RX_CLK_IS_HIGH	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT0_RX_CLK_IS_HIGH /;"	d	file:
LABEL_PORT0_RX_CLK_IS_LOW	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT0_RX_CLK_IS_LOW /;"	d	file:
LABEL_PORT0_RX_CLK_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT0_RX_CLK_TIMEOUT /;"	d	file:
LABEL_PORT0_RX_WAIT_LOOP	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT0_RX_WAIT_LOOP /;"	d	file:
LABEL_PORT0_STOP_RX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT0_STOP_RX /;"	d	file:
LABEL_PORT0_TX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT0_TX /;"	d	file:
LABEL_PORT0_TX_EXIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT0_TX_EXIT /;"	d	file:
LABEL_PORT0_TX_NEXT_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT0_TX_NEXT_BIT /;"	d	file:
LABEL_PORT0_TX_WAIT_CLK_HIGH	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT0_TX_WAIT_CLK_HIGH /;"	d	file:
LABEL_PORT1_ENABLE_RX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT1_ENABLE_RX /;"	d	file:
LABEL_PORT1_RX_CHECK_CLK	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT1_RX_CHECK_CLK /;"	d	file:
LABEL_PORT1_RX_CLK_IS_HIGH	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT1_RX_CLK_IS_HIGH /;"	d	file:
LABEL_PORT1_RX_CLK_IS_LOW	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT1_RX_CLK_IS_LOW /;"	d	file:
LABEL_PORT1_RX_CLK_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT1_RX_CLK_TIMEOUT /;"	d	file:
LABEL_PORT1_RX_WAIT_LOOP	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT1_RX_WAIT_LOOP /;"	d	file:
LABEL_PORT1_STOP_RX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT1_STOP_RX /;"	d	file:
LABEL_PORT1_TX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT1_TX /;"	d	file:
LABEL_PORT1_TX_EXIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT1_TX_EXIT /;"	d	file:
LABEL_PORT1_TX_NEXT_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT1_TX_NEXT_BIT /;"	d	file:
LABEL_PORT1_TX_WAIT_CLK_HIGH	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_PORT1_TX_WAIT_CLK_HIGH /;"	d	file:
LABEL_RX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_RX /;"	d	file:
LABEL_RX_NEXT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_RX_NEXT /;"	d	file:
LABEL_WAIT_COMMAND	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define LABEL_WAIT_COMMAND /;"	d	file:
LADDER_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t LADDER_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
LADDER_DAT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t LADDER_DAT[] = {$/;"	v	typeref:typename:const uint8_t[]
LALT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t    LALT  : 1;  \/**< Status of left-ALT key *\/$/;"	m	struct:fabgl::uiKeyEventInfo	typeref:typename:uint8_t:1
LALT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t    LALT       : 1;  \/**< LEFT ALT key state at the time of this virtual key event *\/$/;"	m	struct:fabgl::VirtualKeyItem	typeref:typename:uint8_t:1
LANE_MASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define LANE_MASK /;"	d
LAST	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	enum ELast { NOTLAST, LAST };$/;"	e	enum:ARMHardwareSPIOutput::ELast
LAST	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	enum ELast { NOTLAST, LAST };$/;"	e	enum:ARMHardwareSPIOutput::ELast
LAST_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^#define LAST_PIN /;"	d
LAYOUTSCOUNT	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  static constexpr int LAYOUTSCOUNT = 9;$/;"	m	struct:fabgl::SupportedLayouts	typeref:typename:int
LD2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define LD2(/;"	d
LDIR_LDDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LDIR_LDDR,              \/* Handle "LDIR" and "LDDR". *\/$/;"	e	enum:fabgl::__anonfeda45510103	file:
LDI_LDD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LDI_LDD,                \/* Handle "LDI" and "LDD". *\/$/;"	e	enum:fabgl::__anonfeda45510103	file:
LDSCL4	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define LDSCL4(/;"	d
LD_A_INDIRECT_BC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_A_INDIRECT_BC,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_A_INDIRECT_DE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_A_INDIRECT_DE,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_A_INDIRECT_NN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_A_INDIRECT_NN,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_A_I_LD_A_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_A_I_LD_A_R,          \/* Handle "LD A, I" and "LD A, R". *\/$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_HL_INDIRECT_NN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_HL_INDIRECT_NN,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_INDIRECT_BC_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_INDIRECT_BC_A,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_INDIRECT_DE_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_INDIRECT_DE_A,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_INDIRECT_HL_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_INDIRECT_HL_N,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_INDIRECT_HL_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_INDIRECT_HL_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_INDIRECT_NN_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_INDIRECT_NN_A,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_INDIRECT_NN_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_INDIRECT_NN_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_INDIRECT_NN_RR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_INDIRECT_NN_RR,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_I_A_LD_R_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_I_A_LD_R_A,          \/* Handle "LD I, A" and "LD I, A". *\/$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_RR_INDIRECT_NN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_RR_INDIRECT_NN,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_RR_NN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_RR_NN,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_R_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_R_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_R_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_R_N,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_R_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_R_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LD_SP_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  LD_SP_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
LEDColorCorrection	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^} LEDColorCorrection;$/;"	t	typeref:enum:__anon4cec7af20103
LEDS	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^#define LEDS /;"	d
LED_TIMER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define LED_TIMER /;"	d
LEFT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^#define LEFT /;"	d
LEFT_POS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^#define LEFT_POS /;"	d
LERP	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^#define LERP(/;"	d	file:
LFSRINIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  static const uint16_t LFSRINIT = 0x0202;$/;"	m	class:fabgl::VICNoiseGenerator	typeref:typename:const uint16_t
LIB8STATIC	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define LIB8STATIC /;"	d
LIB8STATIC_ALWAYS_INLINE	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define LIB8STATIC_ALWAYS_INLINE /;"	d
LIB8_ATTINY	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^#define LIB8_ATTINY /;"	d
LIB_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t LIB_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
LINEARBLEND	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    LINEARBLEND=1,        \/\/\/< Linear interpolation between palette entries, with wrap-around/;"	e	enum:__anon875718a30403
LINEARBLEND_NOWRAP	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    LINEARBLEND_NOWRAP=2  \/\/\/< Linear interpolation between palette entries, but no wrap-arou/;"	e	enum:__anon875718a30403
LINK_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t LINK_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
LIVE	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  enum JDrawMode { TEST, TEST_PERLIN, LIVE };$/;"	e	enum:JFixtureAddr::JDrawMode
LO1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define LO1 /;"	d
LO2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define LO2 /;"	d
LOADDITHER7	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define LOADDITHER7(/;"	d
LOADLEDS3	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define LOADLEDS3(/;"	d
LOGICALDEV_AUXIN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define LOGICALDEV_AUXIN /;"	d
LOGICALDEV_AUXOUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define LOGICALDEV_AUXOUT /;"	d
LOGICALDEV_CONIN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define LOGICALDEV_CONIN /;"	d
LOGICALDEV_CONOUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define LOGICALDEV_CONOUT /;"	d
LOGICALDEV_LIST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define LOGICALDEV_LIST /;"	d
LONGEST_HUES	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    LONGEST_HUES    \/\/\/< Hue goes whichever way is longest$/;"	e	enum:__anon875718a30103
LOOP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define LOOP /;"	d
LOOP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define LOOP /;"	d
LPC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define LPC /;"	d	file:
LPD1886	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class LPD1886 : public LPD1886Controller1250Khz<DAT/;"	c
LPD1886Controller1250Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class LPD1886Controller1250Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 3 * FMUL, 2 * FM/;"	c
LPD1886Controller1250Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class LPD1886Controller1250Khz : public ClocklessController<DATA_PIN, C_NS(200), C_NS(400), C_NS/;"	c
LPD1886Controller1250Khz_8bit	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class LPD1886Controller1250Khz_8bit : public ClocklessController<DATA_PIN, 2 * FMUL, 3 * FMUL, 2/;"	c
LPD1886Controller1250Khz_8bit	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class LPD1886Controller1250Khz_8bit : public ClocklessController<DATA_PIN, C_NS(200), C_NS(400),/;"	c
LPD1886_8BIT	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class LPD1886_8BIT : public LPD1886Controller1250Kh/;"	c
LPD6803	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	LPD6803,  \/\/\/< LPD6803 LED chipset$/;"	e	enum:ESPIChipsets
LPD6803Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	LPD6803Controller() {}$/;"	f	class:LPD6803Controller
LPD6803Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class LPD6803Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
LPD8806	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	LPD8806,  \/\/\/< LPD8806 LED chipset$/;"	e	enum:ESPIChipsets
LPD8806Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	LPD8806Controller()  {}$/;"	f	class:LPD8806Controller
LPD8806Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class LPD8806Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
LPD8806_ADJUST	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	class LPD8806_ADJUST {$/;"	c	class:LPD8806Controller
LSBToggle	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^    bool    LSBToggle;    \/\/ true: Read load LSB, false: Read load MSB$/;"	m	struct:fabgl::PIT8253::TimerInfo	typeref:typename:bool
LSP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define LSP /;"	d	file:
LSUCNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t LSUCNT;                  \/*!< Offset: 0x014 (R\/W)  LSU Count Register       /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
Latch	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Latch.hpp	/^  Latch(TReader reader) : reader_(reader), loaded_(false) {$/;"	f	class:Latch
Latch	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Latch.hpp	/^class Latch {$/;"	c
Lavender	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Lavender=0xE6E6FA,              \/\/\/< @htmlcolorblock{E6E6FA}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LavenderBlush	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LavenderBlush=0xFFF0F5,         \/\/\/< @htmlcolorblock{FFF0F5}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LawnGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LawnGreen=0x7CFC00,             \/\/\/< @htmlcolorblock{7CFC00}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Left	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Left,             \/**< Left align *\/$/;"	e	enum:fabgl::uiHAlign
LeftButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  LeftButton,     \/**<     *\/$/;"	e	enum:fabgl::uiScrollBarItem
LeftToRight	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  LeftToRight,    \/**< Left to right *\/$/;"	e	enum:fabgl::TerminalTransition
LegacyMouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  LegacyMouse,    \/**< Legacy PS2 mouse with three buttons, X and Y movements. *\/$/;"	e	enum:fabgl::MouseType
LemonChiffon	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LemonChiffon=0xFFFACD,          \/\/\/< @htmlcolorblock{FFFACD}$/;"	e	enum:CRGB::__anonbcc8608a0c03
License	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/README.md	/^## License$/;"	s	chapter:FabGL ClassicRacer
LightBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightBlue=0xADD8E6,             \/\/\/< @htmlcolorblock{ADD8E6}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightCoral	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightCoral=0xF08080,            \/\/\/< @htmlcolorblock{F08080}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightCyan	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightCyan=0xE0FFFF,             \/\/\/< @htmlcolorblock{E0FFFF}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightGoldenrodYellow	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightGoldenrodYellow=0xFAFAD2,  \/\/\/< @htmlcolorblock{FAFAD2}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightGreen=0x90EE90,            \/\/\/< @htmlcolorblock{90EE90}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightGrey	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightGrey=0xD3D3D3,             \/\/\/< @htmlcolorblock{D3D3D3}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightMemoryPool	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^LightMemoryPool::LightMemoryPool(int poolSize)$/;"	f	class:fabgl::LightMemoryPool
LightMemoryPool	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^class LightMemoryPool {$/;"	c	namespace:fabgl
LightPink	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightPink=0xFFB6C1,             \/\/\/< @htmlcolorblock{FFB6C1}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightSalmon	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightSalmon=0xFFA07A,           \/\/\/< @htmlcolorblock{FFA07A}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightSeaGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightSeaGreen=0x20B2AA,         \/\/\/< @htmlcolorblock{20B2AA}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightSkyBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightSkyBlue=0x87CEFA,          \/\/\/< @htmlcolorblock{87CEFA}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightSlateGray	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightSlateGray=0x778899,        \/\/\/< @htmlcolorblock{778899}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightSlateGrey	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightSlateGrey=0x778899,        \/\/\/< @htmlcolorblock{778899}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightSteelBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightSteelBlue=0xB0C4DE,        \/\/\/< @htmlcolorblock{B0C4DE}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LightYellow	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LightYellow=0xFFFFE0,           \/\/\/< @htmlcolorblock{FFFFE0}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Lime	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Lime=0x00FF00,                  \/\/\/< @htmlcolorblock{00FF00}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LimeGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        LimeGreen=0x32CD32,             \/\/\/< @htmlcolorblock{32CD32}$/;"	e	enum:CRGB::__anonbcc8608a0c03
LineEditor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^LineEditor::LineEditor(Terminal * terminal)$/;"	f	class:fabgl::LineEditor
LineEditor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^class LineEditor {$/;"	c	namespace:fabgl
LineEditorSpecialChar	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^enum class LineEditorSpecialChar {$/;"	g	namespace:fabgl
LineEnds	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^enum class LineEnds : uint8_t {$/;"	g	namespace:fabgl	typeref:typename:uint8_t
LineFeed	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  LineFeed,                 \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
LineStatusCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  typedef void (*LineStatusCallback)(void * args, bool parityError, bool framingError, bool over/;"	t	class:fabgl::SerialPort	typeref:typename:void (*)(void * args,bool parityError,bool framingError,bool overflowError,bool breakDetected,bool fromISR)
LineTo	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  LineTo,$/;"	e	enum:fabgl::PrimitiveCmd
Linen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Linen=0xFAF0E6,                 \/\/\/< @htmlcolorblock{FAF0E6}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Lines	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	} Lines;$/;"	t	class:InlineBlockClocklessController	typeref:union:InlineBlockClocklessController::__anona800f11d010a
Lines	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	} Lines;$/;"	t	class:SixteenWayInlineBlockClocklessController	typeref:union:SixteenWayInlineBlockClocklessController::__anona800f11d020a
Lines	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^  } Lines;$/;"	t	class:COctoWS2811Controller	typeref:union:COctoWS2811Controller::__anonf4de0cf3010a
Lines	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	} Lines;$/;"	t	class:InlineBlockClocklessController	typeref:union:InlineBlockClocklessController::__anon2749c531010a
Lines	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	} Lines;$/;"	t	class:SixteenWayInlineBlockClocklessController	typeref:union:SixteenWayInlineBlockClocklessController::__anon2749c531020a
Lines	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^} Lines;$/;"	t	typeref:union:__anonf80a47c5010a
Lines	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    } Lines;$/;"	t	class:InlineBlockClocklessController	typeref:union:InlineBlockClocklessController::__anonedf8fd7e010a
Lines	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^	} Lines;$/;"	t	class:InlineBlockClocklessController	typeref:union:InlineBlockClocklessController::__anon110b7520010a
Link	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StoragePolicy.hpp	/^struct Link {};$/;"	s	namespace:StringStoragePolicy
LinkOrCopy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StoragePolicy.hpp	/^struct LinkOrCopy {$/;"	s	namespace:StringStoragePolicy
LinkState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  enum class LinkState {$/;"	g	class:IECDrive
Linked	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  enum Ownership { Copied, Linked };$/;"	e	enum:JsonString::Ownership
Listen	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    Listen,$/;"	e	enum:IECDrive::ArbState
Lock	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^			void Lock() {$/;"	f	struct:ClocklessController::showRGBInternal::InterruptLock	typeref:typename:void
Loopback Terminal Example (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Loopback Terminal Example (click for video):$/;"	S	chapter:FabGL
LowSpeedOnlyRecommended	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    constexpr                      static bool       LowSpeedOnlyRecommended() {$/;"	f	class:_ARMPIN	typeref:typename:bool
M0ClocklessData	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^struct M0ClocklessData {$/;"	s
M0_ASM_ARGS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define M0_ASM_ARGS /;"	d
M2Keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  M2Keyboard,                   \/**< Standard MF2 keyboard. This is the most common value retur/;"	e	enum:fabgl::PS2DeviceType
MACHINE_CONF_FILENAME	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^#define MACHINE_CONF_FILENAME /;"	d
MAC_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t MAC_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
MASK0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t MASK0;                   \/*!< Offset: 0x024 (R\/W)  Mask Register 0          /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
MASK1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t MASK1;                   \/*!< Offset: 0x034 (R\/W)  Mask Register 1          /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
MASK2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t MASK2;                   \/*!< Offset: 0x044 (R\/W)  Mask Register 2          /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
MASK3	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t MASK3;                   \/*!< Offset: 0x054 (R\/W)  Mask Register 3          /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
MASK_SKIP_BITS	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define MASK_SKIP_BITS /;"	d
MAX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^#define MAX(/;"	d
MAX	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^#define MAX(/;"	d
MAX	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^#define MAX(/;"	d
MAXBALLS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^  static const int MAXBALLS = 100;$/;"	m	class:BallsTest	typeref:typename:const int
MAXBALLS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^  static const int MAXBALLS = 150;$/;"	m	class:BallsTest	typeref:typename:const int
MAXBALLS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^  static const int MAXBALLS = 300;$/;"	m	class:BallsTest	typeref:typename:const int
MAXDRIVERS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^#define MAXDRIVERS /;"	d
MAXNAME	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  static constexpr int MAXNAME             = 32;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:int
MAXPOINTS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  static const int MAXPOINTS   = 7;$/;"	m	class:PolygonsTest	typeref:typename:const int
MAXPOINTS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  static const int MAXPOINTS   = 7;$/;"	m	class:PolygonsTest	typeref:typename:const int
MAXPOINTS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  static const int MAXPOINTS   = 7;$/;"	m	class:PolygonsTest	typeref:typename:const int
MAXPOLYGONS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  static const int MAXPOLYGONS = 60;$/;"	m	class:PolygonsTest	typeref:typename:const int
MAXPOLYGONS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  static const int MAXPOLYGONS = 100;$/;"	m	class:PolygonsTest	typeref:typename:const int
MAXPOLYGONS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  static const int MAXPOLYGONS = 100;$/;"	m	class:PolygonsTest	typeref:typename:const int
MAXPOLYSIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  static const int MAXPOLYSIZE = 80;$/;"	m	class:PolygonsTest	typeref:typename:const int
MAXPOLYSIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  static const int MAXPOLYSIZE = 80;$/;"	m	class:PolygonsTest	typeref:typename:const int
MAXPOLYSIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  static const int MAXPOLYSIZE = 80;$/;"	m	class:PolygonsTest	typeref:typename:const int
MAXSESSIONS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^#define MAXSESSIONS /;"	d
MAXSPEED	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^#define MAXSPEED /;"	d
MAXSPEED_FREQUENCY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^#define MAXSPEED_FREQUENCY /;"	d
MAXSPRITES	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  static const int MAXSPRITES = 20;$/;"	m	class:SpritesTest	typeref:typename:const int
MAXSPRITES	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  static const int MAXSPRITES = 20;$/;"	m	class:SpritesTest	typeref:typename:const int
MAXSPRITES	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  static const int MAXSPRITES = 35;$/;"	m	class:SpritesTest	typeref:typename:const int
MAXTAGLENGTH	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^#define MAXTAGLENGTH /;"	d	file:
MAXVALUELENGTH	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^#define MAXVALUELENGTH /;"	d	file:
MAX_DATA_RATE	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define MAX_DATA_RATE /;"	d
MAX_ENV	examples/test/lib/JFixLib/src/Event/Event.h	/^#define MAX_ENV /;"	d
MAX_EVENTS	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^#define MAX_EVENTS /;"	d
MAX_LIKELY_UPDATE_RATE_HZ	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define MAX_LIKELY_UPDATE_RATE_HZ /;"	d
MAX_MSG	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^#define MAX_MSG /;"	d
MAX_MSG_LEN	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^#define MAX_MSG_LEN /;"	d
MAX_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^#define MAX_PIN /;"	d
MAX_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^#define MAX_PIN /;"	d
MAX_PULSES	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define MAX_PULSES /;"	d
MBASIC_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t MBASIC_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
MC146818	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^MC146818::MC146818()$/;"	f	class:fabgl::MC146818
MC146818	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^class MC146818 {$/;"	c	namespace:fabgl
MC146818Interrupt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^bool Machine::MC146818Interrupt(void * context)$/;"	f	class:Machine	typeref:typename:bool
MCP23S17	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^MCP23S17::MCP23S17()$/;"	f	class:fabgl::MCP23S17
MCP23S17	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^class MCP23S17 {$/;"	c	namespace:fabgl
MCPDir	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^enum class MCPDir {$/;"	g	namespace:fabgl
MCPIntTrigger	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^enum class MCPIntTrigger {$/;"	g	namespace:fabgl
MCP_A0	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_A0 /;"	d
MCP_A1	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_A1 /;"	d
MCP_A2	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_A2 /;"	d
MCP_A3	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_A3 /;"	d
MCP_A4	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_A4 /;"	d
MCP_A5	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_A5 /;"	d
MCP_A6	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_A6 /;"	d
MCP_A7	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_A7 /;"	d
MCP_B0	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_B0 /;"	d
MCP_B1	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_B1 /;"	d
MCP_B2	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_B2 /;"	d
MCP_B3	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_B3 /;"	d
MCP_B4	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_B4 /;"	d
MCP_B5	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_B5 /;"	d
MCP_B6	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_B6 /;"	d
MCP_B7	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_B7 /;"	d
MCP_BNK1_DEFVAL	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_BNK1_DEFVAL /;"	d
MCP_BNK1_GPINTEN	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_BNK1_GPINTEN /;"	d
MCP_BNK1_GPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_BNK1_GPIO /;"	d
MCP_BNK1_GPPU	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_BNK1_GPPU /;"	d
MCP_BNK1_INTCAP	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_BNK1_INTCAP /;"	d
MCP_BNK1_INTCON	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_BNK1_INTCON /;"	d
MCP_BNK1_INTF	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_BNK1_INTF /;"	d
MCP_BNK1_IOCON	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_BNK1_IOCON /;"	d
MCP_BNK1_IODIR	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_BNK1_IODIR /;"	d
MCP_BNK1_IPOL	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_BNK1_IPOL /;"	d
MCP_BNK1_OLAT	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_BNK1_OLAT /;"	d
MCP_DEFVAL	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_DEFVAL /;"	d
MCP_DMACHANNEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_DMACHANNEL /;"	d
MCP_GPINTEN	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_GPINTEN /;"	d
MCP_GPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_GPIO /;"	d
MCP_GPIO2MASK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_GPIO2MASK(/;"	d
MCP_GPIO2REG	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_GPIO2REG(/;"	d
MCP_GPPU	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_GPPU /;"	d
MCP_INTCAP	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_INTCAP /;"	d
MCP_INTCON	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_INTCON /;"	d
MCP_INTF	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_INTF /;"	d
MCP_IOCON	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_IOCON /;"	d
MCP_IOCON_BANK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_IOCON_BANK /;"	d
MCP_IOCON_DISSLW	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_IOCON_DISSLW /;"	d
MCP_IOCON_HAEN	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_IOCON_HAEN /;"	d
MCP_IOCON_INTPOL	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_IOCON_INTPOL /;"	d
MCP_IOCON_MIRROR	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_IOCON_MIRROR /;"	d
MCP_IOCON_ODR	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_IOCON_ODR /;"	d
MCP_IOCON_SEQOP	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_IOCON_SEQOP /;"	d
MCP_IODIR	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_IODIR /;"	d
MCP_IPOL	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_IPOL /;"	d
MCP_MAXDEVICES	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_MAXDEVICES /;"	d
MCP_OLAT	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_OLAT /;"	d
MCP_PORTA	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_PORTA /;"	d
MCP_PORTB	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_PORTB /;"	d
MCP_SPI_FREQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^#define MCP_SPI_FREQ /;"	d
MEM16	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define MEM16(/;"	d	file:
MEM8	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define MEM8(/;"	d	file:
MEMSIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^MEMSIZE equ 639$/;"	d
MEM_BGE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define MEM_BGE(/;"	d	file:
MEM_BL	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define MEM_BL(/;"	d	file:
MEM_INC	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define MEM_INC(/;"	d	file:
MEM_INDREADR	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define MEM_INDREADR(/;"	d	file:
MEM_INDWRITEI	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define MEM_INDWRITEI(/;"	d	file:
MEM_INDWRITER	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define MEM_INDWRITER(/;"	d	file:
MEM_READR	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define MEM_READR(/;"	d	file:
MEM_WRITEI	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define MEM_WRITEI(/;"	d	file:
MEM_WRITER	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define MEM_WRITER(/;"	d	file:
MENU_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^#define MENU_TIMEOUT /;"	d
MF	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint8_t  MF;$/;"	m	struct:DiscParameterHeader	typeref:typename:uint8_t
MF2KeyboardWithTranslation	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  MF2KeyboardWithTranslation,   \/**< Standard MF2 keyboard with translation *\/$/;"	e	enum:fabgl::PS2DeviceType
MIDDLE_POS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^#define MIDDLE_POS /;"	d
MIN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^#define MIN(/;"	d
MIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^#define MIN(/;"	d
MIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define MIN(/;"	d
MIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^#define MIN(/;"	d
MIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^#define MIN(/;"	d
MINIMUM_EDIT_WIDTH	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  static constexpr int MINIMUM_EDIT_WIDTH  = 64;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:int
MIN_ACCEPTABLE_DITHER_RATE_HZ	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define MIN_ACCEPTABLE_DITHER_RATE_HZ /;"	d
MODEL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^MODEL    equ 0xfc$/;"	d
MODE_ABSOLUTEPOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^enum gcmode { MODE_DIRECTIONAL, MODE_ABSOLUTEPOS, MODE_RELATIVEPOS, MODE_NONE };$/;"	e	enum:gcmode
MODE_ABSOLUTEPOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^enum gcmode { MODE_DIRECTIONAL, MODE_ABSOLUTEPOS, MODE_RELATIVEPOS, MODE_NONE };$/;"	e	enum:gcmode
MODE_BOUNCE	examples/test/lib/JFixLib/src/Event/Event.h	/^enum boundariesMode { MODE_BOUNCE, MODE_RESET };$/;"	e	enum:boundariesMode
MODE_DIRECTIONAL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^enum gcmode { MODE_DIRECTIONAL, MODE_ABSOLUTEPOS, MODE_RELATIVEPOS, MODE_NONE };$/;"	e	enum:gcmode
MODE_DIRECTIONAL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^enum gcmode { MODE_DIRECTIONAL, MODE_ABSOLUTEPOS, MODE_RELATIVEPOS, MODE_NONE };$/;"	e	enum:gcmode
MODE_NONE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^enum gcmode { MODE_DIRECTIONAL, MODE_ABSOLUTEPOS, MODE_RELATIVEPOS, MODE_NONE };$/;"	e	enum:gcmode
MODE_NONE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^enum gcmode { MODE_DIRECTIONAL, MODE_ABSOLUTEPOS, MODE_RELATIVEPOS, MODE_NONE };$/;"	e	enum:gcmode
MODE_RELATIVEPOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^enum gcmode { MODE_DIRECTIONAL, MODE_ABSOLUTEPOS, MODE_RELATIVEPOS, MODE_NONE };$/;"	e	enum:gcmode
MODE_RELATIVEPOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^enum gcmode { MODE_DIRECTIONAL, MODE_ABSOLUTEPOS, MODE_RELATIVEPOS, MODE_NONE };$/;"	e	enum:gcmode
MODE_RESET	examples/test/lib/JFixLib/src/Event/Event.h	/^enum boundariesMode { MODE_BOUNCE, MODE_RESET };$/;"	e	enum:boundariesMode
MODFREQ_NONE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^enum modfreqmode { MODFREQ_NONE, MODFREQ_TO_END, MODFREQ_TO_RELEASE, MODFREQ_TO_SUSTAIN  };$/;"	e	enum:modfreqmode
MODFREQ_NONE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^enum modfreqmode { MODFREQ_NONE, MODFREQ_TO_END, MODFREQ_TO_RELEASE, MODFREQ_TO_SUSTAIN  };$/;"	e	enum:modfreqmode
MODFREQ_TO_END	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^enum modfreqmode { MODFREQ_NONE, MODFREQ_TO_END, MODFREQ_TO_RELEASE, MODFREQ_TO_SUSTAIN  };$/;"	e	enum:modfreqmode
MODFREQ_TO_END	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^enum modfreqmode { MODFREQ_NONE, MODFREQ_TO_END, MODFREQ_TO_RELEASE, MODFREQ_TO_SUSTAIN  };$/;"	e	enum:modfreqmode
MODFREQ_TO_RELEASE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^enum modfreqmode { MODFREQ_NONE, MODFREQ_TO_END, MODFREQ_TO_RELEASE, MODFREQ_TO_SUSTAIN  };$/;"	e	enum:modfreqmode
MODFREQ_TO_RELEASE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^enum modfreqmode { MODFREQ_NONE, MODFREQ_TO_END, MODFREQ_TO_RELEASE, MODFREQ_TO_SUSTAIN  };$/;"	e	enum:modfreqmode
MODFREQ_TO_SUSTAIN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^enum modfreqmode { MODFREQ_NONE, MODFREQ_TO_END, MODFREQ_TO_RELEASE, MODFREQ_TO_SUSTAIN  };$/;"	e	enum:modfreqmode
MODFREQ_TO_SUSTAIN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^enum modfreqmode { MODFREQ_NONE, MODFREQ_TO_END, MODFREQ_TO_RELEASE, MODFREQ_TO_SUSTAIN  };$/;"	e	enum:modfreqmode
MOS6502	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^class MOS6502 {$/;"	c	namespace:fabgl
MOS6561	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.cpp	/^MOS6561::MOS6561(Machine * machine, fabgl::VGAController * displayController)$/;"	f	class:MOS6561
MOS6561	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^class MOS6561 {$/;"	c
MOUSE_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^static const char MOUSE_BAS[] =       "1 PRINT \\"Shows mouse positions and status\\"" NL$/;"	v	typeref:typename:const char[]
MOUSE_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char MOUSE_BAS[] =       "1 PRINT \\"Shows mouse positions and status\\"" NL$/;"	v	typeref:typename:const char[]
MOV1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define MOV1(/;"	d
MOV_ADDDE04	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define MOV_ADDDE04(/;"	d
MOV_ADDDE14	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define MOV_ADDDE14(/;"	d
MOV_NEGD04	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define MOV_NEGD04(/;"	d
MOV_NEGD14	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define MOV_NEGD14(/;"	d
MOV_NEGD24	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define MOV_NEGD24(/;"	d
MSGDEBUG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^#define MSGDEBUG /;"	d
MS_COUNTER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/led_sysdefs_arm_k20.h	/^#  define MS_COUNTER /;"	d
MS_COUNTER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/led_sysdefs_arm_k66.h	/^#  define MS_COUNTER /;"	d
MS_COUNTER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/led_sysdefs_arm_kl26.h	/^#  define MS_COUNTER /;"	d
MS_COUNTER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint32_t MS_COUNTER;$/;"	m	class:FlexibleInlineBlockClocklessController	typeref:typename:uint32_t
MS_COUNTER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^#    define MS_COUNTER /;"	d
MUL8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define MUL8_C /;"	d
M_DELAY_US	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define M_DELAY_US(/;"	d	file:
M_LONG_BE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define M_LONG_BE(/;"	d	file:
M_LONG_BGE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define M_LONG_BGE(/;"	d	file:
M_LONG_BL	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define M_LONG_BL(/;"	d	file:
M_LONG_BNE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define M_LONG_BNE(/;"	d	file:
M_LONG_STAGEBGE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define M_LONG_STAGEBGE(/;"	d	file:
M_LONG_STAGEBL	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define M_LONG_STAGEBL(/;"	d	file:
M_LONG_STAGEBLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define M_LONG_STAGEBLE(/;"	d	file:
M_STAGEBGE	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define M_STAGEBGE(/;"	d
M_STAGEBL	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define M_STAGEBL(/;"	d
M_STAGEBLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define M_STAGEBLE(/;"	d
Machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^Machine::Machine()$/;"	f	class:Machine
Machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^class Machine {$/;"	c
Machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^Machine::Machine() :$/;"	f	class:Machine
Machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^class Machine {$/;"	c
Machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^Machine::Machine(fabgl::VGAController * displayController)$/;"	f	class:Machine
Machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^class Machine {$/;"	c
MachineConf	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^MachineConf::MachineConf()$/;"	f	class:MachineConf
MachineConf	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^class MachineConf {$/;"	c
MachineConfItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  MachineConfItem()$/;"	f	struct:MachineConfItem
MachineConfItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^struct MachineConfItem {$/;"	s
Magenta	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Magenta,        \/**< Equivalent to RGB888(128,0,128) *\/$/;"	e	enum:fabgl::Color
Magenta	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Magenta=0xFF00FF,               \/\/\/< @htmlcolorblock{FF00FF}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Maroon	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Maroon=0x800000,                \/\/\/< @htmlcolorblock{800000}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Mask	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Mask,       \/**< 1 bit per pixel. 0 = transparent, 1 = opaque (color must be specified apart)/;"	e	enum:fabgl::PixelFormat
Max	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/mpl/max.hpp	/^struct Max {};$/;"	s
Max	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/mpl/max.hpp	/^struct Max<X, Y, false> {$/;"	s
Max	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/mpl/max.hpp	/^struct Max<X, Y, true> {$/;"	s
MaxTextColumns	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int MaxTextColumns     = 32;$/;"	m	class:MOS6561	typeref:typename:const int
MaximizeButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  MaximizeButton,       \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
MediaType	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^enum MediaType {$/;"	g
MediumAquamarine	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        MediumAquamarine=0x66CDAA,      \/\/\/< @htmlcolorblock{66CDAA}$/;"	e	enum:CRGB::__anonbcc8608a0c03
MediumBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        MediumBlue=0x0000CD,            \/\/\/< @htmlcolorblock{0000CD}$/;"	e	enum:CRGB::__anonbcc8608a0c03
MediumOrchid	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        MediumOrchid=0xBA55D3,          \/\/\/< @htmlcolorblock{BA55D3}$/;"	e	enum:CRGB::__anonbcc8608a0c03
MediumPurple	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        MediumPurple=0x9370DB,          \/\/\/< @htmlcolorblock{9370DB}$/;"	e	enum:CRGB::__anonbcc8608a0c03
MediumSeaGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        MediumSeaGreen=0x3CB371,        \/\/\/< @htmlcolorblock{3CB371}$/;"	e	enum:CRGB::__anonbcc8608a0c03
MediumSlateBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        MediumSlateBlue=0x7B68EE,       \/\/\/< @htmlcolorblock{7B68EE}$/;"	e	enum:CRGB::__anonbcc8608a0c03
MediumSpringGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        MediumSpringGreen=0x00FA9A,     \/\/\/< @htmlcolorblock{00FA9A}$/;"	e	enum:CRGB::__anonbcc8608a0c03
MediumTurquoise	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        MediumTurquoise=0x48D1CC,       \/\/\/< @htmlcolorblock{48D1CC}$/;"	e	enum:CRGB::__anonbcc8608a0c03
MediumVioletRed	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        MediumVioletRed=0xC71585,       \/\/\/< @htmlcolorblock{C71585}$/;"	e	enum:CRGB::__anonbcc8608a0c03
MemberProxy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp	/^  FORCE_INLINE MemberProxy(TUpstream upstream, TStringRef key)$/;"	f	class:MemberProxy	typeref:typename:FORCE_INLINE
MemberProxy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp	/^  MemberProxy(const MemberProxy& src)$/;"	f	class:MemberProxy
MemberProxy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp	/^class MemberProxy$/;"	c
MemoryPool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  MemoryPool(char* buf, size_t capa)$/;"	f	class:MemoryPool
MemoryPool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^class MemoryPool {$/;"	c
MemoryPoolPrint	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  MemoryPoolPrint(MemoryPool* pool) : pool_(pool), size_(0) {$/;"	f	class:detail::MemoryPoolPrint
MemoryPoolPrint	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^class MemoryPoolPrint : public Print {$/;"	c	namespace:detail
Menu	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^  Menu()$/;"	f	struct:Menu
Menu	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^struct Menu : public Scene $/;"	s
MenuCallback	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^typedef void (*MenuCallback)();$/;"	t	typeref:typename:void (*)()
MercuryVapor	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    MercuryVapor=0xD8F7FF \/* 0 K, 216, 247, 255 *\/,$/;"	e	enum:__anon4cec7af20203
MessageForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  MessageForm(InputBox * inputBox_)$/;"	f	struct:fabgl::MessageForm
MessageForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^struct MessageForm : public InputForm {$/;"	s	namespace:fabgl
MetalHalide	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    MetalHalide=0xF2FCFF \/* 0 K, 242, 252, 255 *\/,$/;"	e	enum:__anon4cec7af20203
MidnightBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        MidnightBlue=0x191970,          \/\/\/< @htmlcolorblock{191970}$/;"	e	enum:CRGB::__anonbcc8608a0c03
MiniDisk_76K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  MiniDisk_76K,$/;"	e	enum:DiskFormat
MinimizeButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  MinimizeButton,       \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
MintCream	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        MintCream=0xF5FFFA,             \/\/\/< @htmlcolorblock{F5FFFA}$/;"	e	enum:CRGB::__anonbcc8608a0c03
MistyRose	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        MistyRose=0xFFE4E1,             \/\/\/< @htmlcolorblock{FFE4E1}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Mits88Disk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^Mits88Disk::Mits88Disk(Machine * machine, DiskFormat diskFormat)$/;"	f	class:Mits88Disk
Mits88Disk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^class Mits88Disk : public Device {$/;"	c
Moccasin	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Moccasin=0xFFE4B5,              \/\/\/< @htmlcolorblock{FFE4B5}$/;"	e	enum:CRGB::__anonbcc8608a0c03
ModalWindowState	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct ModalWindowState {$/;"	s	namespace:fabgl
Mode	examples/test/lib/JFixLib/src/JOtaServer.h	/^  enum Mode{$/;"	g	class:JOtaServer
Modeline Studio Example (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Modeline Studio Example (click for video):$/;"	S	chapter:FabGL
Mono	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Mono,       \/**< 1 bit per pixel. 0 = black, 1 = white *\/$/;"	e	enum:fabgl::NativePixelFormat
Mouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^Mouse::Mouse()$/;"	f	class:fabgl::Mouse
Mouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^class Mouse : public PS2Device {$/;"	c	namespace:fabgl
Mouse5Buttons	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  Mouse5Buttons,                \/**< Mouse with 5 buttons *\/$/;"	e	enum:fabgl::PS2DeviceType
MouseButtons	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  MouseButtons() : left(0), middle(0), right(0) { }$/;"	f	struct:fabgl::MouseButtons
MouseButtons	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct MouseButtons {$/;"	s	namespace:fabgl
MouseDelta	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^struct MouseDelta {$/;"	s	namespace:fabgl
MousePacket	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^struct MousePacket {$/;"	s	namespace:fabgl
MousePort0	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  MousePort0,                 \/**< Mouse on port 0 (no keyboard) *\/$/;"	e	enum:fabgl::PS2Preset
MousePort1	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  MousePort1,                 \/**< Mouse on port 1 (no keyboard) *\/$/;"	e	enum:fabgl::PS2Preset
MouseStandard	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  MouseStandard,                \/**< Standard mouse *\/$/;"	e	enum:fabgl::PS2DeviceType
MouseStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  MouseStatus() : X(0), Y(0), wheelDelta(0) { }$/;"	f	struct:fabgl::MouseStatus
MouseStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct MouseStatus {$/;"	s	namespace:fabgl
MouseType	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^enum MouseType {$/;"	g	namespace:fabgl
MouseWithScrollWheel	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  MouseWithScrollWheel,         \/**< Mouse with Scroll Wheel *\/$/;"	e	enum:fabgl::PS2DeviceType
MoveArea	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  MoveArea,             \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
MoveTo	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  MoveTo,$/;"	e	enum:fabgl::PrimitiveCmd
MsgPackDeserializer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  MsgPackDeserializer(MemoryPool* pool, TReader reader,$/;"	f	class:MsgPackDeserializer
MsgPackDeserializer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^class MsgPackDeserializer {$/;"	c
MsgPackSerializer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  MsgPackSerializer(TWriter writer) : writer_(writer) {}$/;"	f	class:MsgPackSerializer
MsgPackSerializer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^class MsgPackSerializer : public Visitor<size_t> {$/;"	c
Multitasking CP/M Plus Example (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Multitasking CP\/M Plus Example (click for video):$/;"	S	chapter:FabGL
MyApp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^class MyApp : public uiApp {$/;"	c
MySprite	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^struct MySprite : Sprite {$/;"	s
MySprite	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^struct MySprite : Sprite {$/;"	s
MySprite	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^struct MySprite : Sprite {$/;"	s
NEED_CXX_BITS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define NEED_CXX_BITS$/;"	d
NEED_CXX_BITS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^#define NEED_CXX_BITS$/;"	d
NEED_CXX_BITS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/led_sysdefs_esp8266.h	/^#define NEED_CXX_BITS$/;"	d
NEG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  NEG,$/;"	e	enum:fabgl::__anonfeda45510103	file:
NEOPIXEL	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};$/;"	c
NL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^#define NL /;"	d
NL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^#define NL /;"	d
NL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^#define NL /;"	d
NMI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^int MOS6502::NMI()$/;"	f	class:fabgl::MOS6502	typeref:typename:int
NMI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^int Z80::NMI()$/;"	f	class:fabgl::Z80	typeref:typename:int
NOBLEND	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    NOBLEND=0,            \/\/\/< No interpolation between palette entries$/;"	e	enum:__anon875718a30403
NOCONT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	enum ECont { CONT, NOCONT };$/;"	e	enum:ARMHardwareSPIOutput::ECont
NOCONT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	enum ECont { CONT, NOCONT };$/;"	e	enum:ARMHardwareSPIOutput::ECont
NOCRASH_BONUS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^#define NOCRASH_BONUS /;"	d
NONE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	enum EWait { PRE, POST, NONE };$/;"	e	enum:ARMHardwareSPIOutput::EWait
NONE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	enum EWait { PRE, POST, NONE };$/;"	e	enum:ARMHardwareSPIOutput::EWait
NOP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  NOP,$/;"	e	enum:fabgl::__anonfeda45510103	file:
NOPSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	NOPSPIOutput() { m_pSelect = NULL; }$/;"	f	class:NOPSPIOutput
NOPSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	NOPSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:NOPSPIOutput
NOPSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^class NOPSPIOutput {$/;"	c
NOT	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t NOT      : 1;  \/**< If enabled performs NOT logical operator on destination. Implemen/;"	m	struct:fabgl::PaintOptions	typeref:typename:uint8_t:1
NOTHING	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define NOTHING /;"	d
NOTLAST	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	enum ELast { NOTLAST, LAST };$/;"	e	enum:ARMHardwareSPIOutput::ELast
NOTLAST	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	enum ELast { NOTLAST, LAST };$/;"	e	enum:ARMHardwareSPIOutput::ELast
NOT_ASSIGNED	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^#define NOT_ASSIGNED /;"	d
NOT_ASSIGNED	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^#define NOT_ASSIGNED /;"	d
NO_CLOCK_CORRECTION	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#	define NO_CLOCK_CORRECTION /;"	d
NO_CORRECTION	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^#define NO_CORRECTION /;"	d
NO_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^#define NO_HARDWARE_PIN_SUPPORT$/;"	d
NO_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastpin_apollo3.h	/^#define NO_HARDWARE_PIN_SUPPORT$/;"	d
NO_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/fastpin_arm_d21.h	/^#define NO_HARDWARE_PIN_SUPPORT$/;"	d
NO_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/fastpin_arm_d51.h	/^#define NO_HARDWARE_PIN_SUPPORT$/;"	d
NO_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastpin_arm_k20.h	/^#define NO_HARDWARE_PIN_SUPPORT$/;"	d
NO_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastpin_arm_k66.h	/^#define NO_HARDWARE_PIN_SUPPORT$/;"	d
NO_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastpin_arm_kl26.h	/^#define NO_HARDWARE_PIN_SUPPORT$/;"	d
NO_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastpin_arm_mxrt1062.h	/^#define NO_HARDWARE_PIN_SUPPORT$/;"	d
NO_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/fastpin_arm_rp2040.h	/^#define NO_HARDWARE_PIN_SUPPORT$/;"	d
NO_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastpin_arm_sam.h	/^#define NO_HARDWARE_PIN_SUPPORT$/;"	d
NO_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/fastpin_arm_stm32.h	/^#define NO_HARDWARE_PIN_SUPPORT$/;"	d
NO_HARDWARE_PIN_SUPPORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastpin_avr.h	/^#define NO_HARDWARE_PIN_SUPPORT$/;"	d
NO_INLINE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/attributes.hpp	/^#  define NO_INLINE /;"	d
NO_INLINE	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/attributes.hpp	/^#  define NO_INLINE$/;"	d
NO_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^#define NO_PIN /;"	d
NO_PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define NO_PROGMEM$/;"	d
NO_TIME	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^#define NO_TIME(/;"	d
NRF51	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define NRF51$/;"	d
NRF51SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    NRF51SPIOutput() { FastPin<_DATA_PIN>::setOutput(); FastPin<_CLOCK_PIN>::setOutput(); }$/;"	f	class:NRF51SPIOutput
NRF51SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    NRF51SPIOutput(Selectable *pSelect) {  FastPin<_DATA_PIN>::setOutput(); FastPin<_CLOCK_PIN>:/;"	f	class:NRF51SPIOutput
NRF51SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^class NRF51SPIOutput {$/;"	c
NRF52SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        NRF52SPIOutput() {}$/;"	f	class:NRF52SPIOutput
NRF52SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^    class NRF52SPIOutput {$/;"	c
NS	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^#define NS(/;"	d
NSVKEY_REGS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define NSVKEY_REGS /;"	d	file:
NS_PER_CYCLE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define NS_PER_CYCLE /;"	d
NS_TO_CYCLES	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define NS_TO_CYCLES(/;"	d
NTSC_640x240_60hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define NTSC_640x240_60hz /;"	d
NTSC_720x240_60hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define NTSC_720x240_60hz /;"	d
NUMBER_BIT	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  NUMBER_BIT = 0x08,$/;"	e	enum:__anon9bd8dbab0103
NUMLOCK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t    NUMLOCK    : 1;  \/**< NUMLOCK key state at the time of this virtual key event *\/$/;"	m	struct:fabgl::VirtualKeyItem	typeref:typename:uint8_t:1
NUM_ARGUMENTS	examples/test/lib/JFixLib/src/JModes.h	/^#define NUM_ARGUMENTS /;"	d
NUM_BUSSES	examples/test/lib/JFixLib/src/JFixture.h	/^#define NUM_BUSSES /;"	d
NUM_COLOR_CHANNELS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^#define NUM_COLOR_CHANNELS /;"	d
NUM_COLOR_CHANNELS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define NUM_COLOR_CHANNELS /;"	d
NUM_CONTROLLERS	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^#define NUM_CONTROLLERS /;"	d
NUM_DMA_BUFFERS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^#define NUM_DMA_BUFFERS /;"	d
NUM_LAGGERS	examples/test/lib/JFixLib/src/JFixture.h	/^#define NUM_LAGGERS /;"	d
NUM_ONESHOT_FLAGS	examples/test/lib/JFixLib/src/JModes.h	/^#define NUM_ONESHOT_FLAGS /;"	d
Native	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Native,     \/**< Native device pixel format *\/$/;"	e	enum:fabgl::PixelFormat
NativePixelFormat	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^enum class NativePixelFormat : uint8_t {$/;"	g	namespace:fabgl	typeref:typename:uint8_t
NavajoWhite	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        NavajoWhite=0xFFDEAD,           \/\/\/< @htmlcolorblock{FFDEAD}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Navy	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Navy=0x000080,                  \/\/\/< @htmlcolorblock{000080}$/;"	e	enum:CRGB::__anonbcc8608a0c03
NestingLimit	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/NestingLimit.hpp	/^  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}$/;"	f	class:DeserializationOption::NestingLimit
NestingLimit	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/NestingLimit.hpp	/^  explicit NestingLimit(uint8_t n) : value_(n) {}$/;"	f	class:DeserializationOption::NestingLimit
NestingLimit	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/NestingLimit.hpp	/^class NestingLimit {$/;"	c	namespace:DeserializationOption
Network Terminal Example (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Network Terminal Example (click for video):$/;"	S	chapter:FabGL
New platform porting guide	examples/test/.pio/libdeps/esp32dev/FastLED/PORTING.md	/^New platform porting guide$/;"	c
No pull requests please!	examples/test/.pio/libdeps/esp32dev/FabGL/CODE_OF_CONDUCT.md	/^# No pull requests please!$/;"	c
No pull requests please!	examples/test/.pio/libdeps/esp32dev/FabGL/CONTRIBUTING.md	/^# No pull requests please!$/;"	c
NoAbort	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  NoAbort,$/;"	e	enum:AbortReason
NoMemory	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^    NoMemory,$/;"	e	enum:DeserializationError::Code
NoVirtualKeys	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  NoVirtualKeys,           \/**< No virtual keys are generated *\/$/;"	e	enum:fabgl::KbdMode
NoiseWaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^NoiseWaveformGenerator::NoiseWaveformGenerator()$/;"	f	class:fabgl::NoiseWaveformGenerator
NoiseWaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^class NoiseWaveformGenerator : public WaveformGenerator {$/;"	c	namespace:fabgl
None	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  None,$/;"	e	enum:fabgl::QuadTreeQuadrant
None	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  None,              \/**< No flow control *\/$/;"	e	enum:fabgl::FlowControl
None	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  None,    \/**< No line ends *\/$/;"	e	enum:fabgl::LineEnds
None	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^    None,$/;"	e	enum:fabgl::GraphicsAdapter::Emulation
None	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  None,                 \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
None	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  None,           \/**<     *\/$/;"	e	enum:fabgl::uiScrollBarItem
None	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  None,      \/**< No icon is displayed *\/$/;"	e	enum:fabgl::uiMessageBoxIcon
None	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  None,     \/**< Video mode has not been set. *\/$/;"	e	enum:fabgl::VideoMode
None	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  None,    \/**< Unspecified *\/$/;"	e	enum:fabgl::DriveType
None	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  None        = 0,       \/**< Still running *\/$/;"	e	enum:fabgl::InputResult
None	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  None,$/;"	e	enum:fabgl::TerminalTransition
Normal	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  Normal,             \/**< Normal orientation *\/$/;"	e	enum:fabgl::SSD1306Orientation
NorwegianLayout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.cpp	/^const KeyboardLayout NorwegianLayout{$/;"	v	namespace:fabgl	typeref:typename:const KeyboardLayout
NullComparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^struct NullComparer : ComparerBase {$/;"	s
Numeric	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Numeric,      \/\/ DECKPNM$/;"	e	enum:fabgl::KeypadMode
OCTOWS2811	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^enum OWS2811 { OCTOWS2811,OCTOWS2811_400, OCTOWS2813};$/;"	e	enum:OWS2811
OCTOWS2811_400	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^enum OWS2811 { OCTOWS2811,OCTOWS2811_400, OCTOWS2813};$/;"	e	enum:OWS2811
OCTOWS2813	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^enum OWS2811 { OCTOWS2811,OCTOWS2811_400, OCTOWS2813};$/;"	e	enum:OWS2811
OCW2_EOI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define OCW2_EOI /;"	d	file:
OCW2_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define OCW2_R /;"	d	file:
OCW2_SL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define OCW2_SL /;"	d	file:
OCW3_POLL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define OCW3_POLL /;"	d	file:
OCW3_RIS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define OCW3_RIS /;"	d	file:
OCW3_RR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define OCW3_RR /;"	d	file:
OCW3_SMM	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define OCW3_SMM /;"	d	file:
OFNOISE_FASTFLOOR	examples/test/lib/JFixLib/src/ofNoise.h	/^#define OFNOISE_FASTFLOOR(/;"	d
OF_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define OF_ADDR /;"	d	file:
OLED_128x32	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define OLED_128x32 /;"	d
OLED_128x64	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define OLED_128x64 /;"	d
OPCODE_CPI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define OPCODE_CPI /;"	d	file:
OPCODE_CPIR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define OPCODE_CPIR /;"	d	file:
OPCODE_INI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define OPCODE_INI /;"	d	file:
OPCODE_INIR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define OPCODE_INIR /;"	d	file:
OPCODE_LDI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define OPCODE_LDI /;"	d	file:
OPCODE_LDIR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define OPCODE_LDIR /;"	d	file:
OPCODE_LD_A_I	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define OPCODE_LD_A_I /;"	d	file:
OPCODE_LD_I_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define OPCODE_LD_I_A /;"	d	file:
OPCODE_OTIR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define OPCODE_OTIR /;"	d	file:
OPCODE_OUTI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define OPCODE_OUTI /;"	d	file:
OPCODE_PLACEHOLDER	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define OPCODE_PLACEHOLDER /;"	d	file:
OPCODE_RETI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#       define OPCODE_RETI /;"	d	file:
OPCODE_RLD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define OPCODE_RLD /;"	d	file:
OP_AND	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_AND /;"	d	file:
OP_ASL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_ASL /;"	d	file:
OP_BCDADC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^void MOS6502::OP_BCDADC(uint8_t m)$/;"	f	class:fabgl::MOS6502	typeref:typename:void
OP_BCDSBC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^void MOS6502::OP_BCDSBC(uint8_t m)$/;"	f	class:fabgl::MOS6502	typeref:typename:void
OP_BINADC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^void MOS6502::OP_BINADC(uint8_t m)$/;"	f	class:fabgl::MOS6502	typeref:typename:void
OP_BINSBC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^void MOS6502::OP_BINSBC(uint8_t m)$/;"	f	class:fabgl::MOS6502	typeref:typename:void
OP_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_BIT /;"	d	file:
OP_CMP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_CMP /;"	d	file:
OP_CPX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_CPX /;"	d	file:
OP_CPY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_CPY /;"	d	file:
OP_DEC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_DEC /;"	d	file:
OP_EOR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_EOR /;"	d	file:
OP_INC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_INC /;"	d	file:
OP_LDA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_LDA /;"	d	file:
OP_LDX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_LDX /;"	d	file:
OP_LDY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_LDY /;"	d	file:
OP_LSR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_LSR /;"	d	file:
OP_ORA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_ORA /;"	d	file:
OP_ROL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_ROL /;"	d	file:
OP_ROR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define OP_ROR /;"	d	file:
OR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define OR(/;"	d	file:
ORA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define ORA(/;"	d	file:
OR_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  OR_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
OR_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  OR_N,$/;"	e	enum:fabgl::__anonfeda45510103	file:
OR_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  OR_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
OSC_7BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char OSC_7BIT[] = "\\e]";$/;"	v	namespace:fabgl	typeref:typename:const char[]
OSC_8BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char OSC_8BIT[] = "\\x9D";$/;"	v	namespace:fabgl	typeref:typename:const char[]
OSC_J	examples/test/lib/JFixLib/src/Event/JOsc.h	/^#define OSC_J$/;"	d
OTIR_OTDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  OTIR_OTDR,              \/* Handle "OTIR" and "OTDR". *\/$/;"	e	enum:fabgl::__anonfeda45510103	file:
OUT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    __IO uint32_t  OUT;                               \/*!< Write GPIO port.                    /;"	m	struct:__anon7de97ea30108	typeref:typename:__IO uint32_t
OUTCLR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    __IO uint32_t  OUTCLR;                            \/*!< Clear individual bits in GPIO port. /;"	m	struct:__anon7de97ea30108	typeref:typename:__IO uint32_t
OUTI_OUTD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  OUTI_OUTD,              \/* Handle "OUTI" and "OUTD".*\/$/;"	e	enum:fabgl::__anonfeda45510103	file:
OUTSET	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    __IO uint32_t  OUTSET;                            \/*!< Set individual bits in GPIO port.   /;"	m	struct:__anon7de97ea30108	typeref:typename:__IO uint32_t
OUT_C_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  OUT_C_R,                \/* Correctly handle undocumented "OUT (C), 0"$/;"	e	enum:fabgl::__anonfeda45510103	file:
OUT_N_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  OUT_N_A,$/;"	e	enum:fabgl::__anonfeda45510103	file:
OVERFLOW_TABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^static const int OVERFLOW_TABLE[4] = {$/;"	v	namespace:fabgl	typeref:typename:const int[4]	file:
OVERLAYB_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t OVERLAYB_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
OWNED_KEY_BIT	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  OWNED_KEY_BIT = 0x80$/;"	e	enum:__anon9bd8dbab0103
OWNED_VALUE_BIT	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  OWNED_VALUE_BIT = 0x01,$/;"	e	enum:__anon9bd8dbab0103
OWS2811	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^enum OWS2811 { OCTOWS2811,OCTOWS2811_400, OCTOWS2813};$/;"	g
ObjectComparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  explicit ObjectComparer(const CollectionData& rhs) : rhs_(&rhs) {}$/;"	f	struct:ObjectComparer
ObjectComparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^struct ObjectComparer : ComparerBase {$/;"	s
Ok	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^    Ok,$/;"	e	enum:DeserializationError::Code
OldATKeyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  OldATKeyboard,                \/**< Old AT keyboard *\/$/;"	e	enum:fabgl::PS2DeviceType
OldLace	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        OldLace=0xFDF5E6,               \/\/\/< @htmlcolorblock{FDF5E6}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Olive	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Olive=0x808000,                 \/\/\/< @htmlcolorblock{808000}$/;"	e	enum:CRGB::__anonbcc8608a0c03
OliveDrab	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        OliveDrab=0x6B8E23,             \/\/\/< @htmlcolorblock{6B8E23}$/;"	e	enum:CRGB::__anonbcc8608a0c03
OneShot	examples/test/lib/JFixLib/src/JModes.h	/^  enum OneShot{$/;"	g	class:JModes
Open	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    Open,$/;"	e	enum:IECDrive::ArbState
OpenFileCache	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^struct OpenFileCache {$/;"	s
Orange	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Orange=0xFFA500,                \/\/\/< @htmlcolorblock{FFA500}$/;"	e	enum:CRGB::__anonbcc8608a0c03
OrangeRed	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        OrangeRed=0xFF4500,             \/\/\/< @htmlcolorblock{FF4500}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Orchid	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Orchid=0xDA70D6,                \/\/\/< @htmlcolorblock{DA70D6}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Osborne	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  Osborne,        \/**< Emulated Osborne I *\/$/;"	e	enum:fabgl::TermType
Our Pledge	examples/test/.pio/libdeps/esp32dev/FastLED/code_of_conduct.md	/^## Our Pledge$/;"	s	chapter:Contributor Covenant Code of Conduct
Our Standards	examples/test/.pio/libdeps/esp32dev/FastLED/code_of_conduct.md	/^## Our Standards$/;"	s	chapter:Contributor Covenant Code of Conduct
OutOfMemory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  OutOfMemory,$/;"	e	enum:AbortReason
Output	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  Output    \/**< GPIO is output *\/$/;"	e	enum:fabgl::MCPDir
OutputPin	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	OutputPin(int pin) : Pin(pin) { setOutput(); }$/;"	f	class:OutputPin
OutputPin	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^class OutputPin : public Pin {$/;"	c
OvercastSky	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    OvercastSky=0xC9E2FF \/* 7000 K, 201, 226, 255 *\/,$/;"	e	enum:__anon4cec7af20203
Ownership	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  enum Ownership { Copied, Linked };$/;"	g	class:JsonString
P	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define P(/;"	d	file:
P	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^#define P(/;"	d	file:
P9813	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	P9813,    \/\/\/< P9813 LED chipset$/;"	e	enum:ESPIChipsets
P9813Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	P9813Controller() {}$/;"	f	class:P9813Controller
P9813Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class P9813Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
PA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  PA,  \/**< (8 bit) *\/$/;"	e	enum:fabgl::VIA6522Port
PA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t PA()                       { return m_PA; }$/;"	f	class:fabgl::VIA6522	typeref:typename:uint8_t
PAGE0READ	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define PAGE0READ(/;"	d	file:
PAGE0WRITE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define PAGE0WRITE(/;"	d	file:
PAGE0_BDOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_BDOS /;"	d
PAGE0_CURDRVUSR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_CURDRVUSR /;"	d
PAGE0_DMA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_DMA /;"	d
PAGE0_FCB1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_FCB1 /;"	d
PAGE0_FCB1PASSADDR_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_FCB1PASSADDR_W /;"	d
PAGE0_FCB1PASSLEN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_FCB1PASSLEN /;"	d
PAGE0_FCB2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_FCB2 /;"	d
PAGE0_FCB2PASSADDR_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_FCB2PASSADDR_W /;"	d
PAGE0_FCB2PASSLEN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_FCB2PASSLEN /;"	d
PAGE0_IOBYTE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_IOBYTE /;"	d
PAGE0_IRQ	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_IRQ /;"	d
PAGE0_LOADDRIVE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_LOADDRIVE /;"	d
PAGE0_OSBASE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_OSBASE /;"	d
PAGE0_WSTART	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_WSTART /;"	d
PAGE0_WSTARTADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PAGE0_WSTARTADDR /;"	d
PAGE1READ	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define PAGE1READ(/;"	d	file:
PAGE1WRITE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define PAGE1WRITE(/;"	d	file:
PAGECROSS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define PAGECROSS(/;"	d	file:
PALETTE16	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  PALETTE16,  \/**< 4 bit palette (16 colors), packed as two pixels per byte. *\/$/;"	e	enum:fabgl::NativePixelFormat
PALETTE2	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  PALETTE2,   \/**< 1 bit palette (2 colors), packed as 8 pixels per byte. *\/$/;"	e	enum:fabgl::NativePixelFormat
PALETTE4	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  PALETTE4,   \/**< 2 bit palette (4 colors), packed as 4 pixels per byte. *\/$/;"	e	enum:fabgl::NativePixelFormat
PALETTE8	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  PALETTE8,   \/**< 3 bit palette (8 colors), packed as 8 pixels every 3 bytes. *\/$/;"	e	enum:fabgl::NativePixelFormat
PAL_720x288_50hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define PAL_720x288_50hz /;"	d
PAL_720x576_50Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define PAL_720x576_50Hz /;"	d
PAL_768x288_50hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define PAL_768x288_50hz /;"	d
PARITY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define PARITY(/;"	d	file:
PARITY_CHAR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char   PARITY_CHAR[]    = { 'N', 'E', 'O' };$/;"	v	typeref:typename:const char[]
PARITY_STR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PARITY_STR[]     = { "None", "Even", "Odd" };$/;"	v	typeref:typename:const char * []
PB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  PB,  \/**< (8 bit) *\/$/;"	e	enum:fabgl::VIA6522Port
PB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t PB()                       { return m_PB; }$/;"	f	class:fabgl::VIA6522	typeref:typename:uint8_t
PC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define PC /;"	d	file:
PC8250	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^PC8250::PC8250(int freq)$/;"	f	class:fabgl::PC8250
PC8250	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^class PC8250 {$/;"	c	namespace:fabgl
PC8250_DEBUG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_DEBUG /;"	d	file:
PC8250_DEFAULT_FREQ_HZ	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^#define PC8250_DEFAULT_FREQ_HZ /;"	d
PC8250_IER_LINE_INT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_IER_LINE_INT /;"	d	file:
PC8250_IER_MODEM_INT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_IER_MODEM_INT /;"	d	file:
PC8250_IER_RX_INT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_IER_RX_INT /;"	d	file:
PC8250_IER_TX_INT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_IER_TX_INT /;"	d	file:
PC8250_LCR_DLAB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_LCR_DLAB /;"	d	file:
PC8250_LCR_MBITSTOP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_LCR_MBITSTOP /;"	d	file:
PC8250_LCR_PARITYEN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_LCR_PARITYEN /;"	d	file:
PC8250_LCR_PARITYEVEN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_LCR_PARITYEVEN /;"	d	file:
PC8250_LCR_SENDBREAK	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_LCR_SENDBREAK /;"	d	file:
PC8250_LSR_BI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_LSR_BI /;"	d	file:
PC8250_LSR_DR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_LSR_DR /;"	d	file:
PC8250_LSR_FE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_LSR_FE /;"	d	file:
PC8250_LSR_OE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_LSR_OE /;"	d	file:
PC8250_LSR_PE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_LSR_PE /;"	d	file:
PC8250_LSR_TEMT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_LSR_TEMT /;"	d	file:
PC8250_LSR_THRE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_LSR_THRE /;"	d	file:
PC8250_MCR_DTR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MCR_DTR /;"	d	file:
PC8250_MCR_LOOPBACK	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MCR_LOOPBACK /;"	d	file:
PC8250_MCR_OUT1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MCR_OUT1 /;"	d	file:
PC8250_MCR_OUT2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MCR_OUT2 /;"	d	file:
PC8250_MCR_RTS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MCR_RTS /;"	d	file:
PC8250_MSR_CTS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MSR_CTS /;"	d	file:
PC8250_MSR_DCD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MSR_DCD /;"	d	file:
PC8250_MSR_DCTS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MSR_DCTS /;"	d	file:
PC8250_MSR_DDCD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MSR_DDCD /;"	d	file:
PC8250_MSR_DDSR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MSR_DDSR /;"	d	file:
PC8250_MSR_DSR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MSR_DSR /;"	d	file:
PC8250_MSR_RI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MSR_RI /;"	d	file:
PC8250_MSR_TERI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^#define PC8250_MSR_TERI /;"	d	file:
PCSR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __I  uint32_t PCSR;                    \/*!< Offset: 0x01C (R\/ )  Program Counter Sample Re/;"	m	struct:__anon5f1c9b840208	typeref:typename:__I uint32_t
PC_Graphics_320x200_4Colors	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^    PC_Graphics_320x200_4Colors,$/;"	e	enum:fabgl::GraphicsAdapter::Emulation
PC_Graphics_640x200_2Colors	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^    PC_Graphics_640x200_2Colors,$/;"	e	enum:fabgl::GraphicsAdapter::Emulation
PC_Graphics_HGC_720x348	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^    PC_Graphics_HGC_720x348,$/;"	e	enum:fabgl::GraphicsAdapter::Emulation
PC_Text_40x25_16Colors	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^    PC_Text_40x25_16Colors,$/;"	e	enum:fabgl::GraphicsAdapter::Emulation
PC_Text_80x25_16Colors	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^    PC_Text_80x25_16Colors,$/;"	e	enum:fabgl::GraphicsAdapter::Emulation
PERM_PORT0_DISABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define PERM_PORT0_DISABLE(/;"	d	file:
PERM_PORT1_DISABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define PERM_PORT1_DISABLE(/;"	d	file:
PF_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define PF_ADDR /;"	d	file:
PHI2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int PHI2               = 4433618;  \/\/ VIC frequency (CPU frequency is PHI2\/4)$/;"	m	class:MOS6561	typeref:typename:const int
PHYSICALDEVICE_BAUD_110	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_110 /;"	d
PHYSICALDEVICE_BAUD_1200	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_1200 /;"	d
PHYSICALDEVICE_BAUD_134	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_134 /;"	d
PHYSICALDEVICE_BAUD_150	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_150 /;"	d
PHYSICALDEVICE_BAUD_1800	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_1800 /;"	d
PHYSICALDEVICE_BAUD_19200	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_19200 /;"	d
PHYSICALDEVICE_BAUD_2400	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_2400 /;"	d
PHYSICALDEVICE_BAUD_300	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_300 /;"	d
PHYSICALDEVICE_BAUD_3600	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_3600 /;"	d
PHYSICALDEVICE_BAUD_4800	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_4800 /;"	d
PHYSICALDEVICE_BAUD_50	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_50 /;"	d
PHYSICALDEVICE_BAUD_600	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_600 /;"	d
PHYSICALDEVICE_BAUD_7200	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_7200 /;"	d
PHYSICALDEVICE_BAUD_75	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_75 /;"	d
PHYSICALDEVICE_BAUD_9600	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_9600 /;"	d
PHYSICALDEVICE_BAUD_NONE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_BAUD_NONE /;"	d
PHYSICALDEVICE_FLAG_INOUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_FLAG_INOUT /;"	d
PHYSICALDEVICE_FLAG_INPUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_FLAG_INPUT /;"	d
PHYSICALDEVICE_FLAG_OUTPUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_FLAG_OUTPUT /;"	d
PHYSICALDEVICE_FLAG_SERIAL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_FLAG_SERIAL /;"	d
PHYSICALDEVICE_FLAG_SERIAL_XONXOFF	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_FLAG_SERIAL_XONXOFF /;"	d
PHYSICALDEVICE_FLAG_SOFTBAUD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEVICE_FLAG_SOFTBAUD /;"	d
PHYSICALDEV_CRT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEV_CRT /;"	d
PHYSICALDEV_KBD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEV_KBD /;"	d
PHYSICALDEV_LPT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEV_LPT /;"	d
PHYSICALDEV_UART1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEV_UART1 /;"	d
PHYSICALDEV_UART2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define PHYSICALDEV_UART2 /;"	d
PIC8259	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^class PIC8259 {$/;"	c	namespace:fabgl
PIC8259A_A00	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^PIC8259A_A00 equ 0x20 ; 8259A PORT$/;"	d
PIC8259A_A01	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^PIC8259A_A01 equ 0x21 ; 8259A PORT$/;"	d
PIC8259B_A00	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^PIC8259B_A00 equ 0xa0 ; 8259B PORT$/;"	d
PIC8259B_A01	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^PIC8259B_A01 equ 0xa1 ; 8259B PORT$/;"	d
PIC8259_EOI	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^PIC8259_EOI equ 0x20 ; EOI (End Of Interrupt)$/;"	d
PICO_DEFAULT_SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define PICO_DEFAULT_SPI /;"	d
PICO_DEFAULT_SPI_CSN_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define PICO_DEFAULT_SPI_CSN_PIN /;"	d
PICO_DEFAULT_SPI_RX_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define PICO_DEFAULT_SPI_RX_PIN /;"	d
PICO_DEFAULT_SPI_SCK_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define PICO_DEFAULT_SPI_SCK_PIN /;"	d
PICO_DEFAULT_SPI_TX_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define PICO_DEFAULT_SPI_TX_PIN /;"	d
PIN_CNF	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    __IO uint32_t  PIN_CNF[32];                       \/*!< Configuration of GPIO pins.         /;"	m	struct:__anon7de97ea30108	typeref:typename:__IO uint32_t[32]
PIN_MASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^#define PIN_MASK /;"	d
PIO_DELAY	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_DELAY(/;"	d
PIO_INSTR_IN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_INSTR_IN /;"	d
PIO_INSTR_IRQ	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_INSTR_IRQ /;"	d
PIO_INSTR_JMP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_INSTR_JMP /;"	d
PIO_INSTR_MOV	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_INSTR_MOV /;"	d
PIO_INSTR_OUT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_INSTR_OUT /;"	d
PIO_INSTR_PULL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_INSTR_PULL /;"	d
PIO_INSTR_PUSH	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_INSTR_PUSH /;"	d
PIO_INSTR_SET	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_INSTR_SET /;"	d
PIO_INSTR_WAIT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_INSTR_WAIT /;"	d
PIO_IN_CNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_IN_CNT(/;"	d
PIO_IN_SRC_ISR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_IN_SRC_ISR /;"	d
PIO_IN_SRC_NULL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_IN_SRC_NULL /;"	d
PIO_IN_SRC_OSR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_IN_SRC_OSR /;"	d
PIO_IN_SRC_PINS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_IN_SRC_PINS /;"	d
PIO_IN_SRC_X	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_IN_SRC_X /;"	d
PIO_IN_SRC_Y	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_IN_SRC_Y /;"	d
PIO_IRQ_CLEAR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_IRQ_CLEAR /;"	d
PIO_IRQ_IDX	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_IRQ_IDX(/;"	d
PIO_IRQ_IDX_REL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_IRQ_IDX_REL /;"	d
PIO_IRQ_WAIT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_IRQ_WAIT /;"	d
PIO_JMP_ADR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_JMP_ADR(/;"	d
PIO_JMP_CND_ALWAYS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_JMP_CND_ALWAYS /;"	d
PIO_JMP_CND_NOT_OSRE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_JMP_CND_NOT_OSRE /;"	d
PIO_JMP_CND_NOT_X	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_JMP_CND_NOT_X /;"	d
PIO_JMP_CND_NOT_Y	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_JMP_CND_NOT_Y /;"	d
PIO_JMP_CND_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_JMP_CND_PIN /;"	d
PIO_JMP_CND_X_DEC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_JMP_CND_X_DEC /;"	d
PIO_JMP_CND_X_NE_Y	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_JMP_CND_X_NE_Y /;"	d
PIO_JMP_CND_Y_DEC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_JMP_CND_Y_DEC /;"	d
PIO_MOV_DST_EXEC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_DST_EXEC /;"	d
PIO_MOV_DST_ISR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_DST_ISR /;"	d
PIO_MOV_DST_OSR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_DST_OSR /;"	d
PIO_MOV_DST_PC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_DST_PC /;"	d
PIO_MOV_DST_PINS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_DST_PINS /;"	d
PIO_MOV_DST_X	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_DST_X /;"	d
PIO_MOV_DST_Y	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_DST_Y /;"	d
PIO_MOV_OP_INVERT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_OP_INVERT /;"	d
PIO_MOV_OP_NONE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_OP_NONE /;"	d
PIO_MOV_OP_REVERSE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_OP_REVERSE /;"	d
PIO_MOV_SRC_ISR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_SRC_ISR /;"	d
PIO_MOV_SRC_NULL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_SRC_NULL /;"	d
PIO_MOV_SRC_OSR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_SRC_OSR /;"	d
PIO_MOV_SRC_PINS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_SRC_PINS /;"	d
PIO_MOV_SRC_STATUS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_SRC_STATUS /;"	d
PIO_MOV_SRC_X	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_SRC_X /;"	d
PIO_MOV_SRC_Y	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_MOV_SRC_Y /;"	d
PIO_NOP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_NOP /;"	d
PIO_OUT_CNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_OUT_CNT(/;"	d
PIO_OUT_DST_EXEC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_OUT_DST_EXEC /;"	d
PIO_OUT_DST_ISR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_OUT_DST_ISR /;"	d
PIO_OUT_DST_NULL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_OUT_DST_NULL /;"	d
PIO_OUT_DST_PC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_OUT_DST_PC /;"	d
PIO_OUT_DST_PINDIRS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_OUT_DST_PINDIRS /;"	d
PIO_OUT_DST_PINS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_OUT_DST_PINS /;"	d
PIO_OUT_DST_X	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_OUT_DST_X /;"	d
PIO_OUT_DST_Y	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_OUT_DST_Y /;"	d
PIO_PULL_BLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_PULL_BLOCK /;"	d
PIO_PULL_IFEMPTY	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_PULL_IFEMPTY /;"	d
PIO_PUSH_BLOCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_PUSH_BLOCK /;"	d
PIO_PUSH_IFFULL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_PUSH_IFFULL /;"	d
PIO_SET_DATA	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_SET_DATA(/;"	d
PIO_SET_DST_PINDIRS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_SET_DST_PINDIRS /;"	d
PIO_SET_DST_PINS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_SET_DST_PINS /;"	d
PIO_SET_DST_X	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_SET_DST_X /;"	d
PIO_SET_DST_Y	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_SET_DST_Y /;"	d
PIO_SIDESET	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_SIDESET(/;"	d
PIO_SIDESET_ENABLE_BIT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_SIDESET_ENABLE_BIT /;"	d
PIO_WAIT_IDX	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_WAIT_IDX(/;"	d
PIO_WAIT_POLARITY_0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_WAIT_POLARITY_0 /;"	d
PIO_WAIT_POLARITY_1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_WAIT_POLARITY_1 /;"	d
PIO_WAIT_SRC_GPIO	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_WAIT_SRC_GPIO /;"	d
PIO_WAIT_SRC_IRQ	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_WAIT_SRC_IRQ /;"	d
PIO_WAIT_SRC_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define PIO_WAIT_SRC_PIN /;"	d
PIP_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t PIP_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
PIT8253	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.cpp	/^PIT8253::PIT8253()$/;"	f	class:fabgl::PIT8253
PIT8253	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^class PIT8253 {$/;"	c	namespace:fabgl
PITChangeOut	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::PITChangeOut(void * context, int timerIndex)$/;"	f	class:Machine	typeref:typename:void
PIT_FRC1_FREQUENCY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^#define PIT_FRC1_FREQUENCY /;"	d
PIT_FRC1_PRESCALER	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^#define PIT_FRC1_PRESCALER /;"	d
PIT_TICK_FREQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^#define PIT_TICK_FREQ /;"	d
PIXIE	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PIXIE : public PixieController<DATA_PIN, RGB_/;"	c
PL9823	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PL9823 : public PL9823Controller<DATA_PIN, RG/;"	c
PL9823Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class PL9823Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 8 * FMUL, 3 * FMUL, RGB_/;"	c
PL9823Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class PL9823Controller : public ClocklessController<DATA_PIN, C_NS(350), C_NS(1010), C_NS(350), /;"	c
PLAY_SOUND_PRIORITY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^#define PLAY_SOUND_PRIORITY /;"	d
PLAY_SOUND_PRIORITY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^#define PLAY_SOUND_PRIORITY /;"	d
PMASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^#define PMASK /;"	d
PMASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define PMASK /;"	d
PMASK_HI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^#define PMASK_HI /;"	d
PMASK_HI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define PMASK_HI /;"	d
PMASK_LO	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^#define PMASK_LO /;"	d
PMASK_LO	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define PMASK_LO /;"	d
POP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define POP(/;"	d	file:
POP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define POP(/;"	d	file:
POP_SS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  POP_SS,$/;"	e	enum:fabgl::__anonfeda45510103	file:
PORT0_ICW1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define PORT0_ICW1 /;"	d	file:
PORT0_OCW3	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define PORT0_OCW3 /;"	d	file:
PORTA_FIRST_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^#define PORTA_FIRST_PIN /;"	d
PORTA_FIRST_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^#define PORTA_FIRST_PIN /;"	d
PORTB_FIRST_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define PORTB_FIRST_PIN /;"	d
PORTB_FIRST_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^#define PORTB_FIRST_PIN /;"	d
PORTC_FIRST_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^#define PORTC_FIRST_PIN /;"	d
PORTC_FIRST_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define PORTC_FIRST_PIN /;"	d
PORTD_FIRST_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^#define PORTD_FIRST_PIN /;"	d
PORTD_FIRST_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define PORTD_FIRST_PIN /;"	d
PORTD_FIRST_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^#define PORTD_FIRST_PIN /;"	d
PORT_MASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^#define PORT_MASK /;"	d
PORT_MASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define PORT_MASK /;"	d
PORT_MASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^#define PORT_MASK /;"	d
PORT_MASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^#define PORT_MASK /;"	d
PORT_MASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^#define PORT_MASK /;"	d
PORT_SHIFT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define PORT_SHIFT(/;"	d
POST	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	enum EWait { PRE, POST, NONE };$/;"	e	enum:ARMHardwareSPIOutput::EWait
POST	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	enum EWait { PRE, POST, NONE };$/;"	e	enum:ARMHardwareSPIOutput::EWait
POWER_DEBUG_PRINT	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^#define POWER_DEBUG_PRINT /;"	d	file:
POWER_LED	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^#define POWER_LED /;"	d	file:
POWER_MGT_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.h	/^#define POWER_MGT_H$/;"	d
PRE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	enum EWait { PRE, POST, NONE };$/;"	e	enum:ARMHardwareSPIOutput::EWait
PRE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	enum EWait { PRE, POST, NONE };$/;"	e	enum:ARMHardwareSPIOutput::EWait
PREF_BAUDRATE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_BAUDRATE       = "BaudRate";$/;"	v	typeref:typename:const char *
PREF_BGCOLOR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_BGCOLOR        = "BGColor";$/;"	v	typeref:typename:const char *
PREF_BOOTINFO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_BOOTINFO       = "BootInfo";$/;"	v	typeref:typename:const char *
PREF_COLUMNS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_COLUMNS        = "Columns";$/;"	v	typeref:typename:const char *
PREF_DATALEN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_DATALEN        = "DataLen";$/;"	v	typeref:typename:const char *
PREF_FGCOLOR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_FGCOLOR        = "FGColor";$/;"	v	typeref:typename:const char *
PREF_FLOWCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_FLOWCTRL       = "FlowCtrl";$/;"	v	typeref:typename:const char *
PREF_FONT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_FONT           = "Font";$/;"	v	typeref:typename:const char *
PREF_KBDLAYOUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_KBDLAYOUT      = "KbdLayout";$/;"	v	typeref:typename:const char *
PREF_PARITY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_PARITY         = "Parity";$/;"	v	typeref:typename:const char *
PREF_RESOLUTION	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_RESOLUTION     = "Resolution";$/;"	v	typeref:typename:const char *
PREF_ROWS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_ROWS           = "Rows";$/;"	v	typeref:typename:const char *
PREF_STOPBITS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_STOPBITS       = "StopBits";$/;"	v	typeref:typename:const char *
PREF_TEMPRESOLUTION	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_TEMPRESOLUTION = "TempResolution";$/;"	v	typeref:typename:const char *
PREF_TERMTYPE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_TERMTYPE       = "TermType";$/;"	v	typeref:typename:const char *
PREF_UARTPORT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_UARTPORT       = "UARTPort";$/;"	v	typeref:typename:const char *
PREF_VERMAJ	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_VERMAJ         = "VerMaj";$/;"	v	typeref:typename:const char *
PREF_VERMIN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * PREF_VERMIN         = "VerMin";$/;"	v	typeref:typename:const char *
PRESCALE4	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define PRESCALE4(/;"	d
PRESCALEA2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define PRESCALEA2(/;"	d
PRESCALEB4	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define PRESCALEB4(/;"	d
PRGCreator	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^PRGCreator::PRGCreator(int startingAddress)$/;"	f	class:PRGCreator
PRGCreator	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^class PRGCreator {$/;"	c
PROFILE_SUB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char PROFILE_SUB[] =     "path A:BIN;A:SDK"                            NL$/;"	v	typeref:typename:const char[]
PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_progmem.h	/^#define PROGMEM /;"	d
PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define PROGMEM$/;"	d
PROGMEM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define PROGMEM$/;"	d
PROGRAMS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^static const char * PROGRAMS[]    =    { BLINK_BAS,$/;"	v	typeref:typename:const char * []
PROGRAMS_COUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^constexpr int       PROGRAMS_COUNT = sizeof(PROGRAMS_NAME) \/ sizeof(char const *);$/;"	v	typeref:typename:int
PROGRAMS_HELP	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^static const char * PROGRAMS_HELP[] = { "Sets GPIO-12 as Output pin and ", "turns it On (hi) and/;"	v	typeref:typename:const char * []
PROGRAMS_NAME	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^static const char * PROGRAMS_NAME[] =  { "BLINK.BAS",$/;"	v	typeref:typename:const char * []
PS2Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^PS2Controller::PS2Controller()$/;"	f	class:fabgl::PS2Controller
PS2Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^class PS2Controller {$/;"	c	namespace:fabgl
PS2Device	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^PS2Device::PS2Device()$/;"	f	class:fabgl::PS2Device
PS2Device	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^class PS2Device {$/;"	c	namespace:fabgl
PS2DeviceLock	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  PS2DeviceLock(PS2Device * PS2Device) : m_PS2Device(PS2Device) { m_PS2Device->lock(-1); }$/;"	f	struct:fabgl::PS2DeviceLock
PS2DeviceLock	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^struct PS2DeviceLock {$/;"	s	namespace:fabgl
PS2DeviceType	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^enum class PS2DeviceType {$/;"	g	namespace:fabgl
PS2PortAutoDisableRX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  PS2PortAutoDisableRX(int PS2Port) : port(PS2Port) {$/;"	f	struct:fabgl::PS2PortAutoDisableRX
PS2PortAutoDisableRX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^struct PS2PortAutoDisableRX {$/;"	s	namespace:fabgl
PS2Preset	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^enum class PS2Preset {$/;"	g	namespace:fabgl
PS2_CMD_DISABLE_SCANNING	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_DISABLE_SCANNING /;"	d	file:
PS2_CMD_ECHO	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_ECHO /;"	d	file:
PS2_CMD_ENABLE_SCANNING	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_ENABLE_SCANNING /;"	d	file:
PS2_CMD_GETSET_CURRENT_SCANCODE_SET	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_GETSET_CURRENT_SCANCODE_SET /;"	d	file:
PS2_CMD_IDENTIFY	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_IDENTIFY /;"	d	file:
PS2_CMD_RESEND_LAST_BYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_RESEND_LAST_BYTE /;"	d	file:
PS2_CMD_RESET	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_RESET /;"	d	file:
PS2_CMD_SETLEDS	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_SETLEDS /;"	d	file:
PS2_CMD_SET_DEFAULT_PARAMS	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_SET_DEFAULT_PARAMS /;"	d	file:
PS2_CMD_SET_REMOTE_MODE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_SET_REMOTE_MODE /;"	d	file:
PS2_CMD_SET_RESOLUTION	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_SET_RESOLUTION /;"	d	file:
PS2_CMD_SET_SAMPLE_RATE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_SET_SAMPLE_RATE /;"	d	file:
PS2_CMD_SET_SCALING	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_SET_SCALING /;"	d	file:
PS2_CMD_SET_STREAM_MODE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_SET_STREAM_MODE /;"	d	file:
PS2_CMD_SET_TYPEMATIC_RATE_AND_DELAY	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_SET_TYPEMATIC_RATE_AND_DELAY /;"	d	file:
PS2_CMD_STATUS_REQUEST	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_CMD_STATUS_REQUEST /;"	d	file:
PS2_DEFAULT_CMD_SUBTIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_DEFAULT_CMD_SUBTIMEOUT /;"	d	file:
PS2_DEFAULT_CMD_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_DEFAULT_CMD_TIMEOUT /;"	d	file:
PS2_PORT0	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define PS2_PORT0 /;"	d	file:
PS2_PORT1	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define PS2_PORT1 /;"	d	file:
PS2_QUICK_CMD_SUBTIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_QUICK_CMD_SUBTIMEOUT /;"	d	file:
PS2_QUICK_CMD_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_QUICK_CMD_TIMEOUT /;"	d	file:
PS2_REPLY_ACK	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_REPLY_ACK /;"	d	file:
PS2_REPLY_ECHO	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_REPLY_ECHO /;"	d	file:
PS2_REPLY_ERROR1	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_REPLY_ERROR1 /;"	d	file:
PS2_REPLY_ERROR2	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_REPLY_ERROR2 /;"	d	file:
PS2_REPLY_RESEND	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_REPLY_RESEND /;"	d	file:
PS2_REPLY_SELFTEST_FAILED1	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_REPLY_SELFTEST_FAILED1 /;"	d	file:
PS2_REPLY_SELFTEST_FAILED2	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_REPLY_SELFTEST_FAILED2 /;"	d	file:
PS2_REPLY_SELFTEST_OK	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^#define PS2_REPLY_SELFTEST_OK /;"	d	file:
PSBIDATA4	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define PSBIDATA4(/;"	d
PSRAM_HACK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  #define PSRAM_HACK /;"	d
PSRAM_WORKAROUND1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  #define PSRAM_WORKAROUND1$/;"	d
PSRAM_WORKAROUND2	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  #define PSRAM_WORKAROUND2$/;"	d
PULSES_PER_FILL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define PULSES_PER_FILL /;"	d
PUSH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define PUSH(/;"	d	file:
PUSH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define PUSH(/;"	d	file:
PUSH_SS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  PUSH_SS,$/;"	e	enum:fabgl::__anonfeda45510103	file:
PUT_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t PUT_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
PWM0_IRQHandler	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms.cpp	/^                void PWM0_IRQHandler(void) { ++isrCount; PWM_Arbiter<0>::isr_handler(); }$/;"	f	typeref:typename:void
PWM12BIT	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^    PWM12BIT$/;"	e	enum:JFixtureDimmer::PwmMode
PWM1_IRQHandler	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms.cpp	/^                void PWM1_IRQHandler(void) { ++isrCount; PWM_Arbiter<1>::isr_handler(); }$/;"	f	typeref:typename:void
PWM2_IRQHandler	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms.cpp	/^                void PWM2_IRQHandler(void) { ++isrCount; PWM_Arbiter<2>::isr_handler(); }$/;"	f	typeref:typename:void
PWM3_IRQHandler	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms.cpp	/^                void PWM3_IRQHandler(void) { ++isrCount; PWM_Arbiter<3>::isr_handler(); }$/;"	f	typeref:typename:void
PWM_Arbiter	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^class PWM_Arbiter {$/;"	c
P_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define P_FLAG /;"	d	file:
Page0ReadByteCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  typedef int  (*Page0ReadByteCallback)(void * context, int addr);$/;"	t	class:fabgl::MOS6502	typeref:typename:int (*)(void * context,int addr)
Page0WriteByteCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  typedef void (*Page0WriteByteCallback)(void * context, int addr, int value);$/;"	t	class:fabgl::MOS6502	typeref:typename:void (*)(void * context,int addr,int value)
Page1ReadByteCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  typedef int  (*Page1ReadByteCallback)(void * context, int addr);$/;"	t	class:fabgl::MOS6502	typeref:typename:int (*)(void * context,int addr)
Page1WriteByteCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  typedef void (*Page1WriteByteCallback)(void * context, int addr, int value);$/;"	t	class:fabgl::MOS6502	typeref:typename:void (*)(void * context,int addr,int value)
PageDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  PageDown,       \/**<     *\/$/;"	e	enum:fabgl::uiScrollBarItem
PageLeft	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  PageLeft,       \/**<     *\/$/;"	e	enum:fabgl::uiScrollBarItem
PageRight	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  PageRight,      \/**<     *\/$/;"	e	enum:fabgl::uiScrollBarItem
PageUp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  PageUp,         \/**<     *\/$/;"	e	enum:fabgl::uiScrollBarItem
PaintOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  PaintOptions() : swapFGBG(false), NOT(false) { }$/;"	f	struct:fabgl::PaintOptions
PaintOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct PaintOptions {$/;"	s	namespace:fabgl
PaintState	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct PaintState {$/;"	s	namespace:fabgl
PaleGoldenrod	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        PaleGoldenrod=0xEEE8AA,         \/\/\/< @htmlcolorblock{EEE8AA}$/;"	e	enum:CRGB::__anonbcc8608a0c03
PaleGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        PaleGreen=0x98FB98,             \/\/\/< @htmlcolorblock{98FB98}$/;"	e	enum:CRGB::__anonbcc8608a0c03
PaleTurquoise	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        PaleTurquoise=0xAFEEEE,         \/\/\/< @htmlcolorblock{AFEEEE}$/;"	e	enum:CRGB::__anonbcc8608a0c03
PaleVioletRed	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        PaleVioletRed=0xDB7093,         \/\/\/< @htmlcolorblock{DB7093}$/;"	e	enum:CRGB::__anonbcc8608a0c03
PapayaWhip	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        PapayaWhip=0xFFEFD5,            \/\/\/< @htmlcolorblock{FFEFD5}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Parent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Parent,   \/**< Rectangle coordiantes relative to parent window *\/$/;"	e	enum:fabgl::uiOrigin
Path	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct Path {$/;"	s	namespace:fabgl
PeachPuff	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        PeachPuff=0xFFDAB9,             \/\/\/< @htmlcolorblock{FFDAB9}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Peru	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Peru=0xCD853F,                  \/\/\/< @htmlcolorblock{CD853F}$/;"	e	enum:CRGB::__anonbcc8608a0c03
PhysicalDevice	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^struct PhysicalDevice {$/;"	s
Pin	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	Pin(int pin) : mPin(pin) { _init(); }$/;"	f	class:Pin
Pin	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^class Pin : public Selectable {$/;"	c
Pink	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Pink=0xFFC0CB,                  \/\/\/< @htmlcolorblock{FFC0CB}$/;"	e	enum:CRGB::__anonbcc8608a0c03
PixelController	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : /;"	f	struct:PixelController
PixelController	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : /;"	f	struct:PixelController
PixelController	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        PixelController(const PixelController & other) {$/;"	f	struct:PixelController
PixelController	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        PixelController(const uint8_t *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER,/;"	f	struct:PixelController
PixelController	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^struct PixelController {$/;"	s
PixelDesc	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct PixelDesc {$/;"	s	namespace:fabgl
PixelFormat	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^enum class PixelFormat : uint8_t {$/;"	g	namespace:fabgl	typeref:typename:uint8_t
PixieController	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	PixieController() : Serial(-1, DATA_PIN) {}$/;"	f	class:PixieController
PixieController	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class PixieController : public CPixelLEDController<RGB_ORDER> {$/;"	c
Plaid	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Plaid=0xCC5533,                 \/\/\/< @htmlcolorblock{CC5533}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Player	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    Player()$/;"	f	struct:Race::Player
Player	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  struct Player$/;"	s	struct:Race
Plum	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Plum=0xDDA0DD,                  \/\/\/< @htmlcolorblock{DDA0DD}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Point	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Point() : X(0), Y(0) { }$/;"	f	struct:fabgl::Point
Point	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Point(int X_, int Y_) : X(X_), Y(Y_) { }$/;"	f	struct:fabgl::Point
Point	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct Point {$/;"	s	namespace:fabgl
Polygon	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  struct Polygon {$/;"	s	class:PolygonsTest
Polygon	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  struct Polygon {$/;"	s	class:PolygonsTest
Polygon	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  struct Polygon {$/;"	s	class:PolygonsTest
PolygonsTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^class PolygonsTest : public Test {$/;"	c
PolygonsTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^class PolygonsTest : public Test {$/;"	c
PolygonsTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^class PolygonsTest : public Test {$/;"	c
PortInputCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  typedef void (*PortInputCallback)(void * context, VIA6522 * via, VIA6522Port port);$/;"	t	class:fabgl::VIA6522	typeref:typename:void (*)(void * context,VIA6522 * via,VIA6522Port port)
PortOutputCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  typedef void (*PortOutputCallback)(void * context, VIA6522 * via, VIA6522Port port);$/;"	t	class:fabgl::VIA6522	typeref:typename:void (*)(void * context,VIA6522 * via,VIA6522Port port)
Porting clockless.h	examples/test/.pio/libdeps/esp32dev/FastLED/PORTING.md	/^## Porting clockless.h$/;"	s	chapter:Fast porting for a new board on existing hardware
Porting fastpin.h	examples/test/.pio/libdeps/esp32dev/FastLED/PORTING.md	/^## Porting fastpin.h$/;"	s	chapter:Fast porting for a new board on existing hardware
Porting fastspi.h	examples/test/.pio/libdeps/esp32dev/FastLED/PORTING.md	/^## Porting fastspi.h$/;"	s	chapter:Fast porting for a new board on existing hardware
PowderBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        PowderBlue=0xB0E0E6,            \/\/\/< @htmlcolorblock{B0E0E6}$/;"	e	enum:CRGB::__anonbcc8608a0c03
PrettyJsonSerializer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp	/^  PrettyJsonSerializer(TWriter writer) : base(writer), nesting_(0) {}$/;"	f	class:PrettyJsonSerializer
PrettyJsonSerializer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp	/^class PrettyJsonSerializer : public JsonSerializer<TWriter> {$/;"	c
Preview 1	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^## Preview 1$/;"	s	chapter:Add pin definitions for Teensy++ 2.0
Preview 2	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^## Preview 2$/;"	s	chapter:FastLED2
Preview 3	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^## Preview 3$/;"	s	chapter:FastLED2
PreviousChange	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  PreviousChange    \/**< Trig interrupt if GPIO changes *\/$/;"	e	enum:fabgl::MCPIntTrigger
Primitive	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Primitive() { }$/;"	f	struct:fabgl::Primitive
Primitive	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Primitive(PrimitiveCmd cmd_) : cmd(cmd_) { }$/;"	f	struct:fabgl::Primitive
Primitive	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Primitive(PrimitiveCmd cmd_, Rect const & rect_) : cmd(cmd_), rect(rect_) { }$/;"	f	struct:fabgl::Primitive
Primitive	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct Primitive {$/;"	s	namespace:fabgl
PrimitiveCmd	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^enum PrimitiveCmd : uint8_t {$/;"	g	namespace:fabgl	typeref:typename:uint8_t
Print	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct Print {$/;"	s	namespace:fabgl
Program	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^struct Program {$/;"	s
ProgressForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  ProgressForm(InputBox * inputBox_)$/;"	f	struct:fabgl::ProgressForm
ProgressForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^struct ProgressForm : public InputForm {$/;"	s	namespace:fabgl
ProgsDialog	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/progsdialog.h	/^  ProgsDialog(uiFrame * parent)$/;"	f	struct:ProgsDialog
ProgsDialog	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/progsdialog.h	/^ struct ProgsDialog : public uiFrame {$/;"	s
Purple	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Purple=0x800080,                \/\/\/< @htmlcolorblock{800080}$/;"	e	enum:CRGB::__anonbcc8608a0c03
PwmMode	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  enum PwmMode{$/;"	g	class:JFixtureDimmer
Q	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Q(/;"	d	file:
QADD7_ARM_DSP_ASM	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define QADD7_ARM_DSP_ASM /;"	d
QADD7_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define QADD7_C /;"	d
QADD8_ARM_DSP_ASM	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define QADD8_ARM_DSP_ASM /;"	d
QADD8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define QADD8_C /;"	d
QLO2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define QLO2(/;"	d
QLO4	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define QLO4 /;"	d
QMUL8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define QMUL8_C /;"	d
QSUB8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define QSUB8_C /;"	d
QUADTREE_LEVEL_SPLIT_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^#define QUADTREE_LEVEL_SPLIT_THRESHOLD /;"	d
QVGA_320x240_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define QVGA_320x240_60Hz /;"	d
QuadTree	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^QuadTree::QuadTree(CollisionDetector * collisionDetector, QuadTree * parent, QuadTreeQuadrant qu/;"	f	class:fabgl::QuadTree
QuadTree	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^class QuadTree {$/;"	c	namespace:fabgl
QuadTreeObject	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  QuadTreeObject(QuadTreeObject * next_, Sprite * sprite_)$/;"	f	struct:fabgl::QuadTreeObject
QuadTreeObject	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^struct QuadTreeObject {$/;"	s	namespace:fabgl
QuadTreeQuadrant	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^enum QuadTreeQuadrant {$/;"	g	namespace:fabgl
Question	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Question,  \/**< Question icon *\/$/;"	e	enum:fabgl::uiMessageBoxIcon
Quickstart	examples/test/.pio/libdeps/esp32dev/ArduinoJson/README.md	/^## Quickstart$/;"	s
R	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t R : 2;  \/**< The Red channel   *\/$/;"	m	struct:fabgl::RGB222	typeref:typename:uint8_t:2
R	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t R : 2;  \/**< The Red channel (LSB) *\/$/;"	m	struct:fabgl::RGBA2222	typeref:typename:uint8_t:2
R	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t R;  \/**< The Red channel   *\/$/;"	m	struct:fabgl::RGB888	typeref:typename:uint8_t
R	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t R;  \/**< The Red channel   *\/$/;"	m	struct:fabgl::RGBA8888	typeref:typename:uint8_t
R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define R(/;"	d	file:
RACECARS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^int RACECARS = 200;$/;"	v	typeref:typename:int
RACE_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^#define RACE_TIMEOUT /;"	d
RALT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t    RALT  : 1;  \/**< Status of right-ALT key *\/$/;"	m	struct:fabgl::uiKeyEventInfo	typeref:typename:uint8_t:1
RALT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t    RALT       : 1;  \/**< RIGHT ALT key state at the time of this virtual key event *\/$/;"	m	struct:fabgl::VirtualKeyItem	typeref:typename:uint8_t:1
RAMExpansion	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  RAMExpansionOption RAMExpansion() { return m_RAMExpansion; }$/;"	f	class:Machine	typeref:typename:RAMExpansionOption
RAMExpansionOption	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^enum RAMExpansionOption {$/;"	g
RAM_16K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  RAM_16K,$/;"	e	enum:RAMExpansionOption
RAM_24K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  RAM_24K,$/;"	e	enum:RAMExpansionOption
RAM_27K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  RAM_27K,  \/\/ 3K + 24K$/;"	e	enum:RAMExpansionOption
RAM_32K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  RAM_32K,  \/\/ last 8K mapped to A000, not visible to Basic$/;"	e	enum:RAMExpansionOption
RAM_35K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  RAM_35K,  \/\/ as RAM_32K + 3K$/;"	e	enum:RAMExpansionOption
RAM_3K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  RAM_3K,$/;"	e	enum:RAMExpansionOption
RAM_8K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  RAM_8K,$/;"	e	enum:RAMExpansionOption
RAM_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^#define RAM_SIZE /;"	d
RAM_unexp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  RAM_unexp,$/;"	e	enum:RAMExpansionOption
RAND16_SEED	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.cpp	/^#define RAND16_SEED /;"	d	file:
RAWCOLORS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.cpp	/^static uint8_t RAWCOLORS[16];$/;"	v	typeref:typename:uint8_t[16]	file:
RBG	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^	RBG=0021,  \/\/\/< Red,   Blue,  Green (0021)$/;"	e	enum:EOrder
RD_BYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define RD_BYTE(/;"	d	file:
RD_WORD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define RD_WORD(/;"	d	file:
READ_BYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define READ_BYTE(/;"	d	file:
READ_CLK	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define READ_CLK(/;"	d	file:
READ_D	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define READ_D(/;"	d	file:
READ_DAT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define READ_DAT(/;"	d	file:
READ_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define READ_INDIRECT_HL(/;"	d	file:
READ_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define READ_N(/;"	d	file:
READ_NN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define READ_NN(/;"	d	file:
READ_WORD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define READ_WORD(/;"	d	file:
REAL_FIRST_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^#define REAL_FIRST_PIN /;"	d
RECOMMENDED_VIRTUAL_BITS	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define RECOMMENDED_VIRTUAL_BITS /;"	d
RED	examples/test/lib/JFixLib/src/JFixture.h	/^  RED, $/;"	e	enum:Channel
REDRAW_EVERY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^#define REDRAW_EVERY /;"	d
REFHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^class REFHardwareSPIOutput {$/;"	c
REGA_DV0	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGA_DV0 /;"	d	file:
REGA_DV1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGA_DV1 /;"	d	file:
REGA_DV2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGA_DV2 /;"	d	file:
REGA_RS0	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGA_RS0 /;"	d	file:
REGA_RS1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGA_RS1 /;"	d	file:
REGA_RS2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGA_RS2 /;"	d	file:
REGA_RS3	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGA_RS3 /;"	d	file:
REGA_UIP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGA_UIP /;"	d	file:
REGB_AIE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGB_AIE /;"	d	file:
REGB_DM	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGB_DM /;"	d	file:
REGB_DSE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGB_DSE /;"	d	file:
REGB_H24	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGB_H24 /;"	d	file:
REGB_PIE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGB_PIE /;"	d	file:
REGB_SET	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGB_SET /;"	d	file:
REGB_SQWE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGB_SQWE /;"	d	file:
REGB_UIE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGB_UIE /;"	d	file:
REGC_AF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGC_AF /;"	d	file:
REGC_IRQF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGC_IRQF /;"	d	file:
REGC_PF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGC_PF /;"	d	file:
REGC_UF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGC_UF /;"	d	file:
REGD_VRT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REGD_VRT /;"	d	file:
REG_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_A /;"	d	file:
REG_AH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_AH /;"	d	file:
REG_AL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_AL /;"	d	file:
REG_AX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_AX /;"	d	file:
REG_B	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_B /;"	d	file:
REG_BH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_BH /;"	d	file:
REG_BL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_BL /;"	d	file:
REG_BP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_BP /;"	d	file:
REG_BX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_BX /;"	d	file:
REG_C	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_C /;"	d	file:
REG_CENTURY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_CENTURY /;"	d	file:
REG_CH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_CH /;"	d	file:
REG_CL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_CL /;"	d	file:
REG_CS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_CS /;"	d	file:
REG_CX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_CX /;"	d	file:
REG_D	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_D /;"	d	file:
REG_DAYOFMONTH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_DAYOFMONTH /;"	d	file:
REG_DAYOFWEEK	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_DAYOFWEEK /;"	d	file:
REG_DH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_DH /;"	d	file:
REG_DI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_DI /;"	d	file:
REG_DL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_DL /;"	d	file:
REG_DS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_DS /;"	d	file:
REG_DX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_DX /;"	d	file:
REG_ES	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_ES /;"	d	file:
REG_HOURS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_HOURS /;"	d	file:
REG_HOURS_ALARM	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_HOURS_ALARM /;"	d	file:
REG_MINUTES	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_MINUTES /;"	d	file:
REG_MINUTES_ALARM	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_MINUTES_ALARM /;"	d	file:
REG_MONTH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_MONTH /;"	d	file:
REG_SCRATCH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_SCRATCH /;"	d	file:
REG_SECONDS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_SECONDS /;"	d	file:
REG_SECONDS_ALARM	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_SECONDS_ALARM /;"	d	file:
REG_SI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_SI /;"	d	file:
REG_SP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_SP /;"	d	file:
REG_SS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_SS /;"	d	file:
REG_TMP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_TMP /;"	d	file:
REG_YEAR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^#define REG_YEAR /;"	d	file:
REG_ZERO	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define REG_ZERO /;"	d	file:
RELATIVE_TO_DIRECTIONAL_OFFSET	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^#define RELATIVE_TO_DIRECTIONAL_OFFSET /;"	d
RELATIVE_TO_DIRECTIONAL_OFFSET	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^#define RELATIVE_TO_DIRECTIONAL_OFFSET /;"	d
RELOC_INFO_BRANCH	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^#define RELOC_INFO_BRANCH(/;"	d	file:
RELOC_INFO_LABEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^#define RELOC_INFO_LABEL(/;"	d	file:
RELOC_TYPE_BRANCH	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^#define RELOC_TYPE_BRANCH /;"	d	file:
RELOC_TYPE_LABEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^#define RELOC_TYPE_LABEL /;"	d	file:
RENAME_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t RENAME_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
REPEATRATES	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^const int16_t REPEATRATES[32] = { 33,  37,  41,  45,  50,  54,  58,  62,  66,  75,  83,  91,$/;"	v	namespace:fabgl	typeref:typename:const int16_t[32]
RESERVED0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^          uint32_t RESERVED0[1];$/;"	m	struct:__anon5f1c9b840208	typeref:typename:uint32_t[1]
RESERVED1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    __I  uint32_t  RESERVED1[120];$/;"	m	struct:__anon7de97ea30108	typeref:typename:__I uint32_t[120]
RESERVED1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^          uint32_t RESERVED1[1];$/;"	m	struct:__anon5f1c9b840208	typeref:typename:uint32_t[1]
RESERVED2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^          uint32_t RESERVED2[1];$/;"	m	struct:__anon5f1c9b840208	typeref:typename:uint32_t[1]
RESOLUTIONS_CMDSTR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * RESOLUTIONS_CMDSTR[]   = { "1280x768x2",              \/\/ 0$/;"	v	typeref:typename:const char * []
RESOLUTIONS_CONTROLLER	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const ResolutionController RESOLUTIONS_CONTROLLER[] = { ResolutionController::VGA2Control/;"	v	typeref:typename:const ResolutionController[]
RESOLUTIONS_COUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^constexpr int RESOLUTIONS_COUNT            = sizeof(RESOLUTIONS_STR) \/ sizeof(char const *);$/;"	v	typeref:typename:int
RESOLUTIONS_HEIGHT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const int16_t RESOLUTIONS_HEIGHT[] = {   -1,        \/\/ 0$/;"	v	typeref:typename:const int16_t[]
RESOLUTIONS_MODELINE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * RESOLUTIONS_MODELINE[] = { SVGA_1280x768_50Hz,        \/\/ 0$/;"	v	typeref:typename:const char * []
RESOLUTIONS_STR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * RESOLUTIONS_STR[]      = { "1280x768, B&W",           \/\/ 0$/;"	v	typeref:typename:const char * []
RESOLUTION_DEFAULT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^constexpr int RESOLUTION_DEFAULT           = 5;$/;"	v	typeref:typename:int
RES_B_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RES_B_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RES_B_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RES_B_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RET	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RET,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RET	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define RET(/;"	d	file:
RETI_RETN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RETI_RETN,              \/* Handle "RETI" and "RETN". *\/$/;"	e	enum:fabgl::__anonfeda45510103	file:
RET_CC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RET_CC,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^	RGB=0012,  \/\/\/< Red,   Green, Blue  (0012)$/;"	e	enum:EOrder
RGB222	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^RGB222::RGB222(RGB888 const & value)$/;"	f	class:fabgl::RGB222
RGB222	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGB222() : R(0), G(0), B(0) { }$/;"	f	struct:fabgl::RGB222
RGB222	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGB222(uint8_t red, uint8_t green, uint8_t blue) : R(red), G(green), B(blue) { }$/;"	f	struct:fabgl::RGB222
RGB222	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct RGB222 {$/;"	s	namespace:fabgl
RGB2222toPaletteIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  uint8_t RGB2222toPaletteIndex(uint8_t value) {$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:uint8_t
RGB2222toPaletteIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  uint8_t RGB2222toPaletteIndex(uint8_t value) {$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:uint8_t
RGB565BE	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGB565BE,   \/**< 16 bit per pixel: RGB565 big endian. *\/$/;"	e	enum:fabgl::NativePixelFormat
RGB888	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^RGB888::RGB888(Color color)$/;"	f	class:fabgl::RGB888
RGB888	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGB888() : R(0), G(0), B(0) { }$/;"	f	struct:fabgl::RGB888
RGB888	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGB888(uint8_t red, uint8_t green, uint8_t blue) : R(red), G(green), B(blue) { }$/;"	f	struct:fabgl::RGB888
RGB888	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct RGB888 {$/;"	s	namespace:fabgl
RGB8888toPaletteIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  uint8_t RGB8888toPaletteIndex(RGBA8888 value) {$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:uint8_t
RGB8888toPaletteIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  uint8_t RGB8888toPaletteIndex(RGBA8888 value) {$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:uint8_t
RGB888toMono	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^inline uint8_t RGB888toMono(RGB888 const & rgb)$/;"	f	namespace:fabgl	typeref:typename:uint8_t
RGB888toPackedRGB222	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^uint8_t RGB888toPackedRGB222(RGB888 const & rgb)$/;"	f	namespace:fabgl	typeref:typename:uint8_t
RGB888toPaletteIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  uint8_t RGB888toPaletteIndex(RGB888 const & rgb) {$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:uint8_t
RGB888toPaletteIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  uint8_t RGB888toPaletteIndex(RGB888 const & rgb) {$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:uint8_t
RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGBA2222(int red, int green, int blue, int alpha) : R(red), G(green), B(blue), A(alpha) { }$/;"	f	struct:fabgl::RGBA2222
RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGBA2222,   \/**< 8 bit per pixel: AABBGGRR (bit 7=A 6=A 5=B 4=B 3=G 2=G 1=R 0=R). AA = 0 full/;"	e	enum:fabgl::PixelFormat
RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct RGBA2222 {$/;"	s	namespace:fabgl
RGBA2222toMono	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^inline uint8_t RGBA2222toMono(uint8_t rgba2222)$/;"	f	namespace:fabgl	typeref:typename:uint8_t
RGBA2222toNative	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^inline uint16_t RGBA2222toNative(uint8_t rgba2222)$/;"	f	namespace:fabgl	typeref:typename:uint16_t
RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGBA8888    \/**< 32 bits per pixel: RGBA (R=byte 0, G=byte1, B=byte2, A=byte3). Minimum value/;"	e	enum:fabgl::PixelFormat
RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGBA8888() : R(0), G(0), B(0), A(0) { }$/;"	f	struct:fabgl::RGBA8888
RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGBA8888(int red, int green, int blue, int alpha) : R(red), G(green), B(blue), A(alpha) { }$/;"	f	struct:fabgl::RGBA8888
RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct RGBA8888 {$/;"	s	namespace:fabgl
RGBA8888toMono	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^inline uint8_t RGBA8888toMono(RGBA8888 const & rgba)$/;"	f	namespace:fabgl	typeref:typename:uint8_t
RGBA8888toNative	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^inline uint16_t RGBA8888toNative(RGBA8888 const & rgba8888)$/;"	f	namespace:fabgl	typeref:typename:uint16_t
RGB_BYTE	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define RGB_BYTE(/;"	d
RGB_BYTE0	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define RGB_BYTE0(/;"	d
RGB_BYTE1	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define RGB_BYTE1(/;"	d
RGB_BYTE2	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define RGB_BYTE2(/;"	d
RIGHT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^#define RIGHT /;"	d
RIGHT_POS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^#define RIGHT_POS /;"	d
RIStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool RIStatus()                      { return m_riPin != GPIO_UNUSED ? gpio_get_level(m_riPin)/;"	f	class:fabgl::SerialPort	typeref:typename:bool
RL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define RL(/;"	d	file:
RLA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RLA,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RLC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define RLC(/;"	d	file:
RLCA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RLCA,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RLC_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RLC_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RLC_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RLC_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RLD_RRD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RLD_RRD,                \/* Handle "RLD" and "RRD". *\/$/;"	e	enum:fabgl::__anonfeda45510103	file:
RLMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^    int32_t RLMode;       \/\/ Read\/Load mode$/;"	m	struct:fabgl::PIT8253::TimerInfo	typeref:typename:int32_t
RL_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RL_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RL_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RL_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RMAC_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t RMAC_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
RMEM16	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::RMEM16(int addr)$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
RMEM8	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint8_t i8086::RMEM8(int addr)$/;"	f	class:fabgl::i8086	typeref:typename:uint8_t
RMT_CYCLES_PER_ESP_CYCLE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define RMT_CYCLES_PER_ESP_CYCLE /;"	d
RMT_CYCLES_PER_SEC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define RMT_CYCLES_PER_SEC /;"	d
RMT_RESET_DURATION	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^#define RMT_RESET_DURATION /;"	d
RO	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define RO(/;"	d
ROR1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define ROR1(/;"	d
RORCLC2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define RORCLC2(/;"	d
RORSC04	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define RORSC04(/;"	d
RORSC14	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define RORSC14(/;"	d
RORSC24	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define RORSC24(/;"	d
ROWS_COUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^constexpr int       ROWS_COUNT    = sizeof(ROWS_STR) \/ sizeof(char const *);$/;"	v	typeref:typename:int
ROWS_INT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const int    ROWS_INT[]    = { 0, 24, 25 };$/;"	v	typeref:typename:const int[]
ROWS_STR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * ROWS_STR[]    = { "Max", "24", "25" };$/;"	v	typeref:typename:const char * []
RR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define RR(/;"	d	file:
RRA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RRA,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RRC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define RRC(/;"	d	file:
RRCA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RRCA,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RRC_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RRC_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RRC_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RRC_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RR_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RR_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RR_INSTRUCTION	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define RR_INSTRUCTION(/;"	d	file:
RR_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RR_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RST	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define RST(/;"	d	file:
RST_P	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  RST_P,$/;"	e	enum:fabgl::__anonfeda45510103	file:
RST_TABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^static const int RST_TABLE[8] = {$/;"	v	namespace:fabgl	typeref:typename:const int[8]	file:
RSXInstalled	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::RSXInstalled()$/;"	f	class:BDOS	typeref:typename:bool
RSXPREFIX_LOADER	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define RSXPREFIX_LOADER /;"	d
RSXPREFIX_NAME	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define RSXPREFIX_NAME /;"	d
RSXPREFIX_NEXT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define RSXPREFIX_NEXT /;"	d
RSXPREFIX_NONBANK	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define RSXPREFIX_NONBANK /;"	d
RSXPREFIX_PREV	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define RSXPREFIX_PREV /;"	d
RSXPREFIX_REMOVE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define RSXPREFIX_REMOVE /;"	d
RSXPREFIX_SERIAL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define RSXPREFIX_SERIAL /;"	d
RSXPREFIX_START	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define RSXPREFIX_START /;"	d
RSXRECORD_CODELEN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define RSXRECORD_CODELEN /;"	d
RSXRECORD_NAME	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define RSXRECORD_NAME /;"	d
RSXRECORD_NONBANK	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define RSXRECORD_NONBANK /;"	d
RSXRECORD_OFFSET	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^#define RSXRECORD_OFFSET /;"	d
RTCMEM_LASTVAR	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_LASTVAR /;"	d	file:
RTCMEM_PORT0_DATAIN	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT0_DATAIN /;"	d	file:
RTCMEM_PORT0_DATAOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT0_DATAOUT /;"	d	file:
RTCMEM_PORT0_RX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT0_RX /;"	d	file:
RTCMEM_PORT0_RX_CLK_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT0_RX_CLK_TIMEOUT /;"	d	file:
RTCMEM_PORT0_RX_DISABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT0_RX_DISABLE /;"	d	file:
RTCMEM_PORT0_RX_ENABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT0_RX_ENABLE /;"	d	file:
RTCMEM_PORT0_RX_ENABLED	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT0_RX_ENABLED /;"	d	file:
RTCMEM_PORT0_TX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT0_TX /;"	d	file:
RTCMEM_PORT1_DATAIN	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT1_DATAIN /;"	d	file:
RTCMEM_PORT1_DATAOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT1_DATAOUT /;"	d	file:
RTCMEM_PORT1_RX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT1_RX /;"	d	file:
RTCMEM_PORT1_RX_CLK_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT1_RX_CLK_TIMEOUT /;"	d	file:
RTCMEM_PORT1_RX_DISABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT1_RX_DISABLE /;"	d	file:
RTCMEM_PORT1_RX_ENABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT1_RX_ENABLE /;"	d	file:
RTCMEM_PORT1_RX_ENABLED	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT1_RX_ENABLED /;"	d	file:
RTCMEM_PORT1_TX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PORT1_TX /;"	d	file:
RTCMEM_PROG_START	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_PROG_START /;"	d	file:
RTCMEM_VARS_START	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define RTCMEM_VARS_START /;"	d	file:
RTC_REG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^RTC_REG equ 0x71$/;"	d
RTC_SEL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^RTC_SEL equ 0x70$/;"	d
RTSStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiLabel *         RTSStatus;$/;"	m	struct:ConfDialogApp	typeref:typename:uiLabel *
RTSStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool RTSStatus()                     { return m_RTSStatus; }$/;"	f	class:fabgl::SerialPort	typeref:typename:bool
RXCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  typedef void (*RXCallback)(void * args, uint8_t value, bool fromISR);$/;"	t	class:fabgl::SerialPort	typeref:typename:void (*)(void * args,uint8_t value,bool fromISR)
RXReadyCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  typedef bool (*RXReadyCallback)(void * args, bool fromISR);$/;"	t	class:fabgl::SerialPort	typeref:typename:bool (*)(void * args,bool fromISR)
Race	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Race()$/;"	f	struct:Race
Race	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^struct Race : public Scene$/;"	s
RadioButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RadioButton,       \/**< Radio-button *\/$/;"	e	enum:fabgl::uiCheckBoxKind
RainbowStripesColors_p	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorpalettes.cpp	/^#define RainbowStripesColors_p /;"	d	file:
RainbowStripesColors_p	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorpalettes.h	/^#define RainbowStripesColors_p /;"	d
RawComparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  explicit RawComparer(const char* rhsData, size_t rhsSize)$/;"	f	struct:RawComparer
RawComparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^struct RawComparer : ComparerBase {$/;"	s
RawData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^struct RawData {$/;"	s
RawJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/compatibility.hpp	/^#define RawJson /;"	d
ReadByteCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  typedef int  (*ReadByteCallback)(void * context, int addr);$/;"	t	class:fabgl::MOS6502	typeref:typename:int (*)(void * context,int addr)
ReadByteCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  typedef int  (*ReadByteCallback)(void * context, int addr);$/;"	t	class:fabgl::Z80	typeref:typename:int (*)(void * context,int addr)
ReadByteCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  typedef int  (*ReadByteCallback)(void * context, int addr);$/;"	t	class:fabgl::i8080	typeref:typename:int (*)(void * context,int addr)
ReadDirectory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    ReadDirectory,$/;"	e	enum:IECDrive::ChannelType
ReadIOCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  typedef int  (*ReadIOCallback)(void * context, int addr);$/;"	t	class:fabgl::Z80	typeref:typename:int (*)(void * context,int addr)
ReadIOCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  typedef int  (*ReadIOCallback)(void * context, int addr);$/;"	t	class:fabgl::i8080	typeref:typename:int (*)(void * context,int addr)
ReadPRG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    ReadPRG,$/;"	e	enum:IECDrive::ChannelType
ReadPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  typedef uint8_t (*ReadPort)(void * context, int address);$/;"	t	class:fabgl::i8086	typeref:typename:uint8_t (*)(void * context,int address)
ReadVideoMemory16	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  typedef uint16_t (*ReadVideoMemory16)(void * context, int address);$/;"	t	class:fabgl::i8086	typeref:typename:uint16_t (*)(void * context,int address)
ReadVideoMemory8	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  typedef uint8_t (*ReadVideoMemory8)(void * context, int address);$/;"	t	class:fabgl::i8086	typeref:typename:uint8_t (*)(void * context,int address)
ReadWordCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  typedef int  (*ReadWordCallback)(void * context, int addr);$/;"	t	class:fabgl::Z80	typeref:typename:int (*)(void * context,int addr)
ReadWordCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  typedef int  (*ReadWordCallback)(void * context, int addr);$/;"	t	class:fabgl::i8080	typeref:typename:int (*)(void * context,int addr)
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Reader.hpp	/^  Reader(TSource& source) : source_(&source) {}$/;"	f	struct:Reader
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Reader.hpp	/^struct Reader {$/;"	s
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStreamReader.hpp	/^  explicit Reader(Stream& stream) : stream_(&stream) {}$/;"	f	struct:Reader
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStreamReader.hpp	/^struct Reader<TSource,$/;"	s
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStringReader.hpp	/^  explicit Reader(const ::String& s)$/;"	f	struct:Reader
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStringReader.hpp	/^struct Reader<TSource,$/;"	s
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp	/^  explicit Reader(const __FlashStringHelper* ptr)$/;"	f	struct:Reader
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp	/^struct Reader<const __FlashStringHelper*, void> {$/;"	s
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp	/^  explicit Reader(const TSource& source)$/;"	f	struct:Reader
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp	/^struct Reader<TSource, typename void_<typename TSource::const_iterator>::type>$/;"	s
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp	/^  explicit Reader(const void* ptr)$/;"	f	struct:Reader
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp	/^struct Reader<TSource*,$/;"	s
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/StdStreamReader.hpp	/^  explicit Reader(std::istream& stream) : stream_(&stream) {}$/;"	f	struct:Reader
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/StdStreamReader.hpp	/^struct Reader<TSource, typename enable_if<$/;"	s
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/VariantReader.hpp	/^  explicit Reader(const TVariant& x)$/;"	f	struct:Reader
Reader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/VariantReader.hpp	/^struct Reader<TVariant, typename enable_if<IsVariant<TVariant>::value>::type>$/;"	s
ReadyToReceive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    ReadyToReceive,$/;"	e	enum:IECDrive::LinkState
ReadyToSend	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    ReadyToSend,$/;"	e	enum:IECDrive::LinkState
RebootDialog	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/restartdialog.h	/^  RebootDialog(uiFrame * parent)$/;"	f	struct:RebootDialog
RebootDialog	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/restartdialog.h	/^struct RebootDialog : public uiFrame {$/;"	s
RebootDialogApp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/restartdialog.h	/^class RebootDialogApp : public uiApp {$/;"	c
Rect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Rect() : X1(0), Y1(0), X2(0), Y2(0) { }$/;"	f	struct:fabgl::Rect
Rect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Rect(Rect const & r) { X1 = r.X1; Y1 = r.Y1; X2 = r.X2; Y2 = r.Y2; }$/;"	f	struct:fabgl::Rect
Rect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Rect(int X1_, int Y1_, int X2_, int Y2_) : X1(X1_), Y1(Y1_), X2(X2_), Y2(Y2_) { }$/;"	f	struct:fabgl::Rect
Rect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct Rect {$/;"	s	namespace:fabgl
Red	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Red,            \/**< Equivalent to RGB888(128,0,0) *\/$/;"	e	enum:fabgl::Color
Red	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Red=0xFF0000,                   \/\/\/< @htmlcolorblock{FF0000}$/;"	e	enum:CRGB::__anonbcc8608a0c03
ReducedLuminosity	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  ReducedLuminosity,  \/**< Reduced luminosity *\/$/;"	e	enum:fabgl::CharStyle
Refresh	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Refresh,$/;"	e	enum:fabgl::PrimitiveCmd
RefreshSprites	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RefreshSprites,$/;"	e	enum:fabgl::PrimitiveCmd
Regs	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  struct Regs {$/;"	s	class:fabgl::i8080
Release Candidate 1	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^## Release Candidate 1$/;"	s	chapter:FastLED2
Release Candidate 2	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^## Release Candidate 2$/;"	s	chapter:FastLED2
Release Candidate 3	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^## Release Candidate 3$/;"	s	chapter:FastLED2
Release Candidate 4	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^## Release Candidate 4$/;"	s	chapter:FastLED2
Release Candidate 5	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^## Release Candidate 5$/;"	s	chapter:FastLED2
Release Candidate 6	examples/test/.pio/libdeps/esp32dev/FastLED/release_notes.md	/^## Release Candidate 6$/;"	s	chapter:FastLED2
RenderGlyphsBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RenderGlyphsBuffer,$/;"	e	enum:fabgl::PrimitiveCmd
Reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Reset,$/;"	e	enum:fabgl::PrimitiveCmd
ResolutionController	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^enum class ResolutionController { VGAController, VGA16Controller, VGA8Controller, VGA2Controller/;"	g
RestoreCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  RestoreCursor,            \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
ResultOfGetData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantAttorney.hpp	/^  struct ResultOfGetData {$/;"	s	class:VariantAttorney
ReverseHorizontal	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  ReverseHorizontal,  \/**< Reverse horizontal *\/$/;"	e	enum:fabgl::SSD1306Orientation
ReverseVertical	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  ReverseVertical,    \/**< Reverse vertical *\/$/;"	e	enum:fabgl::SSD1306Orientation
Right	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Right,            \/**< Right align *\/$/;"	e	enum:fabgl::uiHAlign
RightButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RightButton,    \/**<     *\/$/;"	e	enum:fabgl::uiScrollBarItem
RightToLeft	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  RightToLeft,    \/**< Right to left *\/$/;"	e	enum:fabgl::TerminalTransition
RoReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/led_sysdefs_apollo3.h	/^typedef volatile uint8_t RoReg; \/**< Read only 8-bit register (volatile const unsigned int) *\/$/;"	t	typeref:typename:volatile uint8_t
RoReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/led_sysdefs_arm_k20.h	/^typedef volatile       uint8_t RoReg; \/**< Read only 8-bit register (volatile const unsigned in/;"	t	typeref:typename:volatile uint8_t
RoReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/led_sysdefs_arm_k66.h	/^typedef volatile       uint8_t RoReg; \/**< Read only 8-bit register (volatile const unsigned in/;"	t	typeref:typename:volatile uint8_t
RoReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/led_sysdefs_arm_kl26.h	/^typedef volatile       uint8_t RoReg; \/**< Read only 8-bit register (volatile const unsigned in/;"	t	typeref:typename:volatile uint8_t
RoReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/led_sysdefs_arm_mxrt1062.h	/^typedef volatile       uint32_t RoReg; \/**< Read only 8-bit register (volatile const unsigned i/;"	t	typeref:typename:volatile uint32_t
RoReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^typedef volatile uint32_t RoReg;$/;"	t	typeref:typename:volatile uint32_t
RoReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^typedef __I  uint32_t RoReg;$/;"	t	typeref:typename:__I uint32_t
RoReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^typedef volatile uint32_t RoReg;$/;"	t	typeref:typename:volatile uint32_t
RoReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^typedef volatile       uint8_t RoReg; \/**< Read only 8-bit register (volatile const unsigned in/;"	t	typeref:typename:volatile uint8_t
RoReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^typedef volatile       uint8_t RoReg; \/**< Read only 8-bit register (volatile const unsigned in/;"	t	typeref:typename:volatile uint8_t
RoReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^typedef volatile uint32_t RoReg;$/;"	t	typeref:typename:volatile uint32_t
RoReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/led_sysdefs_esp8266.h	/^typedef volatile uint32_t RoReg;$/;"	t	typeref:typename:volatile uint32_t
RosyBrown	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        RosyBrown=0xBC8F8F,             \/\/\/< @htmlcolorblock{BC8F8F}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Rotate0	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  Rotate0,            \/**< Rotate 0 degrees *\/$/;"	e	enum:fabgl::TFTOrientation
Rotate180	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  Rotate180,          \/**< Rotate 180 degrees *\/$/;"	e	enum:fabgl::SSD1306Orientation
Rotate180	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  Rotate180,          \/**< Rotate 180 degrees *\/$/;"	e	enum:fabgl::TFTOrientation
Rotate270	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  Rotate270,          \/**< Rotate 270 degrees *\/$/;"	e	enum:fabgl::TFTOrientation
Rotate90	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  Rotate90,           \/**< Rotate 90 degrees *\/$/;"	e	enum:fabgl::TFTOrientation
RoyalBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        RoyalBlue=0x4169E1,             \/\/\/< @htmlcolorblock{4169E1}$/;"	e	enum:CRGB::__anonbcc8608a0c03
RwReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/led_sysdefs_apollo3.h	/^typedef volatile uint8_t RwReg; \/**< Read-Write 8-bit register (volatile unsigned int) *\/$/;"	t	typeref:typename:volatile uint8_t
RwReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/led_sysdefs_arm_k20.h	/^typedef volatile       uint8_t RwReg; \/**< Read-Write 8-bit register (volatile unsigned int) *\/$/;"	t	typeref:typename:volatile uint8_t
RwReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/led_sysdefs_arm_k66.h	/^typedef volatile       uint8_t RwReg; \/**< Read-Write 8-bit register (volatile unsigned int) *\/$/;"	t	typeref:typename:volatile uint8_t
RwReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/led_sysdefs_arm_kl26.h	/^typedef volatile       uint8_t RwReg; \/**< Read-Write 8-bit register (volatile unsigned int) *\/$/;"	t	typeref:typename:volatile uint8_t
RwReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/led_sysdefs_arm_mxrt1062.h	/^typedef volatile       uint32_t RwReg; \/**< Read-Write 8-bit register (volatile unsigned int) */;"	t	typeref:typename:volatile uint32_t
RwReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^typedef volatile uint32_t RwReg;$/;"	t	typeref:typename:volatile uint32_t
RwReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^typedef __IO uint32_t RwReg;$/;"	t	typeref:typename:__IO uint32_t
RwReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^typedef volatile uint32_t RwReg;$/;"	t	typeref:typename:volatile uint32_t
RwReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^typedef volatile       uint8_t RwReg; \/**< Read-Write 8-bit register (volatile unsigned int) *\/$/;"	t	typeref:typename:volatile uint8_t
RwReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^typedef volatile       uint8_t RwReg; \/**< Read-Write 8-bit register (volatile unsigned int) *\/$/;"	t	typeref:typename:volatile uint8_t
RwReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^typedef volatile uint32_t RwReg;$/;"	t	typeref:typename:volatile uint32_t
RwReg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/led_sysdefs_esp8266.h	/^typedef volatile uint32_t RwReg;$/;"	t	typeref:typename:volatile uint32_t
S	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define S(/;"	d	file:
SAMHArdwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	SAMHArdwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:REFHardwareSPIOutput
SAMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	SAMHardwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:REFHardwareSPIOutput
SAMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	SAMHardwareSPIOutput() { m_pSelect = NULL; }$/;"	f	class:SAMHardwareSPIOutput
SAMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	SAMHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:SAMHardwareSPIOutput
SAMHardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^class SAMHardwareSPIOutput {$/;"	c
SAVE_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t SAVE_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
SAY_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t SAY_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
SBASIC_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t SBASIC_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
SBB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define SBB(/;"	d	file:
SBC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define SBC(/;"	d	file:
SBC_HL_RR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SBC_HL_RR,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SBC_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SBC_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SBC_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SBC_N,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SBC_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SBC_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SBGR2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SBGR2222,   \/**< 8 bit per pixel: VHBBGGRR (bit 7=VSync 6=HSync 5=B 4=B 3=G 2=G 1=R 0=R). Eac/;"	e	enum:fabgl::NativePixelFormat
SCALE02	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define SCALE02(/;"	d
SCALE12	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define SCALE12(/;"	d
SCALE16BY8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define SCALE16BY8_C /;"	d
SCALE16_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define SCALE16_C /;"	d
SCALE22	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define SCALE22(/;"	d
SCALE4	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define SCALE4(/;"	d
SCALE8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define SCALE8_C /;"	d
SCB_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_ADDR /;"	d
SCB_AUXINREDIRECTDEV_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_AUXINREDIRECTDEV_W /;"	d
SCB_AUXOUTREDIRECTDEV_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_AUXOUTREDIRECTDEV_W /;"	d
SCB_BDOSBASE_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_BDOSBASE_W /;"	d
SCB_BDOSFLAGS_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_BDOSFLAGS_B /;"	d
SCB_BDOSFLAGS_B_EXPANDEDERRORMSG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_BDOSFLAGS_B_EXPANDEDERRORMSG /;"	d
SCB_BDOSVERSION_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_BDOSVERSION_B /;"	d
SCB_BIOSPRINTCALL_3B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_BIOSPRINTCALL_3B /;"	d
SCB_BNKBUF	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_BNKBUF /;"	d
SCB_CCOFLAGS1_CHAININING	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCOFLAGS1_CHAININING /;"	d
SCB_CCPDISK_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPDISK_B /;"	d
SCB_CCPFLAGS1_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPFLAGS1_B /;"	d
SCB_CCPFLAGS1_CHAINCHANGEDU	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPFLAGS1_CHAINCHANGEDU /;"	d
SCB_CCPFLAGS1_NULLRSX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPFLAGS1_NULLRSX /;"	d
SCB_CCPFLAGS2_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPFLAGS2_B /;"	d
SCB_CCPFLAGS2_CCPPRESENT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPFLAGS2_CCPPRESENT /;"	d
SCB_CCPFLAGS2_FILESEARCHORDER_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPFLAGS2_FILESEARCHORDER_BIT /;"	d
SCB_CCPFLAGS2_FILESEARCHORDER_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPFLAGS2_FILESEARCHORDER_COM /;"	d
SCB_CCPFLAGS2_FILESEARCHORDER_COM_SUB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPFLAGS2_FILESEARCHORDER_COM_SUB /;"	d
SCB_CCPFLAGS2_FILESEARCHORDER_SUB_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPFLAGS2_FILESEARCHORDER_SUB_COM /;"	d
SCB_CCPFLAGS2_SUBMIT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPFLAGS2_SUBMIT /;"	d
SCB_CCPFLAGS3_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPFLAGS3_B /;"	d
SCB_CCPFLAGS3_COLDSTART	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPFLAGS3_COLDSTART /;"	d
SCB_CCPUSER_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CCPUSER_B /;"	d
SCB_COMMONBASEADDR_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_COMMONBASEADDR_W /;"	d
SCB_CONINREDIRECT_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CONINREDIRECT_W /;"	d
SCB_CONOUTREDIRECTDEV_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CONOUTREDIRECTDEV_W /;"	d
SCB_CONSOLECOLPOS_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CONSOLECOLPOS_B /;"	d
SCB_CONSOLEMODE_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CONSOLEMODE_W /;"	d
SCB_CONSOLEPAGELENGTH_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CONSOLEPAGELENGTH_B /;"	d
SCB_CONSOLEWIDTH_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CONSOLEWIDTH_B /;"	d
SCB_CTRLHMODE_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CTRLHMODE_B /;"	d
SCB_CURRENTDISK_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CURRENTDISK_B /;"	d
SCB_CURRENTDMAADDR_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CURRENTDMAADDR_W /;"	d
SCB_CURRENTUSER_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_CURRENTUSER_B /;"	d
SCB_DATEDAYS_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_DATEDAYS_W /;"	d
SCB_DATEFORMAT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_DATEFORMAT /;"	d
SCB_DCNT_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_DCNT_W /;"	d
SCB_DEFAULTPAGEMODE_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_DEFAULTPAGEMODE_B /;"	d
SCB_DELMODE_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_DELMODE_B /;"	d
SCB_DRIVESEARCHCHAIN0_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_DRIVESEARCHCHAIN0_B /;"	d
SCB_DRIVESEARCHCHAIN1_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_DRIVESEARCHCHAIN1_B /;"	d
SCB_DRIVESEARCHCHAIN2_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_DRIVESEARCHCHAIN2_B /;"	d
SCB_DRIVESEARCHCHAIN3_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_DRIVESEARCHCHAIN3_B /;"	d
SCB_ERRORDRIVE_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_ERRORDRIVE_B /;"	d
SCB_ERRORMODE_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_ERRORMODE_B /;"	d
SCB_HASH2_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_HASH2_W /;"	d
SCB_HASH3_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_HASH3_W /;"	d
SCB_HASHENTRY1_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_HASHENTRY1_W /;"	d
SCB_HASHENTRY2_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_HASHENTRY2_W /;"	d
SCB_HASHL_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_HASHL_B /;"	d
SCB_HOUR_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_HOUR_B /;"	d
SCB_LISTOUTPUTFLAG_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_LISTOUTPUTFLAG_B /;"	d
SCB_LSTOUTREDIRECTDEV_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_LSTOUTREDIRECTDEV_W /;"	d
SCB_MINUTES_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_MINUTES_B /;"	d
SCB_MULTISECTORCOUNT_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_MULTISECTORCOUNT_B /;"	d
SCB_OUTPUTDELIMETER_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_OUTPUTDELIMETER_B /;"	d
SCB_PAGEADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_PAGEADDR /;"	d
SCB_PAGEMODE_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_PAGEMODE_B /;"	d
SCB_PROGRAMRETCODE_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_PROGRAMRETCODE_W /;"	d
SCB_REDIRECTIONVECTS_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_REDIRECTIONVECTS_W /;"	d
SCB_SCBADDR_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_SCBADDR_W /;"	d
SCB_SEARCHA_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_SEARCHA_W /;"	d
SCB_SEARCHL_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_SEARCHL_B /;"	d
SCB_SECONDS_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_SECONDS_B /;"	d
SCB_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_SIZE /;"	d
SCB_TEMPFILEDRIVE_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_TEMPFILEDRIVE_B /;"	d
SCB_TOPOFUSERTPA_W	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_TOPOFUSERTPA_W /;"	d
SCB_UNKNOWN1_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_UNKNOWN1_B /;"	d
SCB_USER1_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_USER1_B /;"	d
SCB_USER2_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_USER2_B /;"	d
SCB_USER3_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_USER3_B /;"	d
SCB_USER4_B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SCB_USER4_B /;"	d
SCB_clearBit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::SCB_clearBit(int field, int bitmask)$/;"	f	class:BDOS	typeref:typename:void
SCB_getByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^uint8_t BDOS::SCB_getByte(int field)$/;"	f	class:BDOS	typeref:typename:uint8_t
SCB_getWord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^uint16_t BDOS::SCB_getWord(int field)$/;"	f	class:BDOS	typeref:typename:uint16_t
SCB_setBit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::SCB_setBit(int field, int bitmask)$/;"	f	class:BDOS	typeref:typename:void
SCB_setByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::SCB_setByte(int field, uint8_t value)$/;"	f	class:BDOS	typeref:typename:void
SCB_setWord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::SCB_setWord(int field, uint16_t value)$/;"	f	class:BDOS	typeref:typename:void
SCB_testBit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::SCB_testBit(int field, int bitmask)$/;"	f	class:BDOS	typeref:typename:bool
SCF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SCF,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SCORE_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^#define SCORE_TIMEOUT /;"	d
SCROLLLOCK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t    SCROLLLOCK : 1;  \/**< SCROLLLOCK key state at the time of this virtual key event */;"	m	struct:fabgl::VirtualKeyItem	typeref:typename:uint8_t:1
SCROR04	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define SCROR04(/;"	d
SCROR14	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define SCROR14(/;"	d
SCROR24	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define SCROR24(/;"	d
SCodeToVKConverterTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^void Keyboard::SCodeToVKConverterTask(void * pvParameters)$/;"	f	class:fabgl::Keyboard	typeref:typename:void
SDCard	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  SDCard,  \/**< SD Card *\/$/;"	e	enum:fabgl::DriveType
SDLAudioCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SoundGenerator::SDLAudioCallback(void * data, Uint8 * buffer, int length)$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
SD_MOUNT_PATH	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^#define SD_MOUNT_PATH /;"	d
SECTOR_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static const int SECTOR_SIZE                  = 137;   \/\/ number of bytes per sector$/;"	m	class:Mits88Disk	typeref:typename:const int
SECTOR_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transdisk.py	/^SECTOR_SIZE = 137$/;"	v
SEI_CHK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^#define SEI_CHK /;"	d
SEI_CHK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^#define SEI_CHK$/;"	d
SERIALPORTS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^#define SERIALPORTS /;"	d
SESSIONTHREAD_STACK_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^#define SESSIONTHREAD_STACK_SIZE /;"	d	file:
SESSIONTHREAD_TASK_PRIORITY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^#define SESSIONTHREAD_TASK_PRIORITY /;"	d	file:
SESSION_MIN_MEM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^#define SESSION_MIN_MEM /;"	d	file:
SET	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define SET(/;"	d	file:
SETDEF_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t SETDEF_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
SET_BRIGHTNESS	examples/test/lib/JFixLib/src/JModes.h	/^    SET_BRIGHTNESS$/;"	e	enum:JModes::OneShot
SET_B_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SET_B_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SET_B_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SET_B_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SET_CHANNELS	examples/test/lib/JFixLib/src/JModes.h	/^    SET_CHANNELS,$/;"	e	enum:JModes::OneShot
SF_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define SF_ADDR /;"	d	file:
SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t    SHIFT : 1;  \/**< Status of SHIFT (left or right) key *\/$/;"	m	struct:fabgl::uiKeyEventInfo	typeref:typename:uint8_t:1
SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t    SHIFT      : 1;  \/**< SHIFT key state at the time of this virtual key event *\/$/;"	m	struct:fabgl::VirtualKeyItem	typeref:typename:uint8_t:1
SHORTEST_HUES	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    SHORTEST_HUES,  \/\/\/< Hue goes whichever way is shortest$/;"	e	enum:__anon875718a30103
SHOWDMADETAILS	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  #define SHOWDMADETAILS /;"	d	file:
SHOW_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t SHOW_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
SI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::SI()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
SIDE_BUTTONS_HEIGHT	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  static constexpr int SIDE_BUTTONS_HEIGHT = 18;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:int
SIDE_BUTTONS_WIDTH	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  static constexpr int SIDE_BUTTONS_WIDTH  = 65;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:int
SID_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t SID_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
SIO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^SIO::SIO(Machine * machine, int address)$/;"	f	class:SIO
SIO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^class SIO : public Device {$/;"	c
SK6812	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class SK6812 : public SK6812Controller<DATA_PIN, RG/;"	c
SK6812Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class SK6812Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 3 * FMUL, 4 * FMUL, RGB_/;"	c
SK6812Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class SK6812Controller : public ClocklessController<DATA_PIN, C_NS(300), C_NS(300), C_NS(600), R/;"	c
SK6822	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class SK6822 : public SK6822Controller<DATA_PIN, RG/;"	c
SK6822Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class SK6822Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 8 * FMUL, 3 * FMUL, RGB_/;"	c
SK6822Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class SK6822Controller : public ClocklessController<DATA_PIN, C_NS(375), C_NS(1000), C_NS(375), /;"	c
SK9822	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	SK9822,   \/\/\/< SK9822 LED chipset$/;"	e	enum:ESPIChipsets
SK9822Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	SK9822Controller() {}$/;"	f	class:SK9822Controller
SK9822Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class SK9822Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
SLA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define SLA(/;"	d	file:
SLA_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SLA_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SLA_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SLA_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SLEEPCNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^    __IO uint32_t SLEEPCNT;                \/*!< Offset: 0x010 (R\/W)  Sleep Count Register     /;"	m	struct:__anon5f1c9b840208	typeref:typename:__IO uint32_t
SLL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define SLL(/;"	d	file:
SLL_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SLL_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SLL_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SLL_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SM16703	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class SM16703 : public SM16703Controller<DATA_PIN, /;"	c
SM16703Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class SM16703Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 4 * FMUL, 3 * FMUL, RGB/;"	c
SM16703Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class SM16703Controller : public ClocklessController<DATA_PIN, C_NS(300), C_NS(600), C_NS(300), /;"	c
SM16716	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	SM16716,  \/\/\/< SM16716 LED chipset$/;"	e	enum:ESPIChipsets
SM16716Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	SM16716Controller() {}$/;"	f	class:SM16716Controller
SM16716Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class SM16716Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
SMART_MATRIX	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^enum ESM { SMART_MATRIX };$/;"	e	enum:ESM
SOC_GPIO_VALID_GPIO_MASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^#define SOC_GPIO_VALID_GPIO_MASK /;"	d
SOC_GPIO_VALID_OUTPUT_GPIO_MASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^#define SOC_GPIO_VALID_OUTPUT_GPIO_MASK /;"	d
SOUND_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^static const char SOUND_BAS[] =       "1 PRINT \\"Generates some sounds\\"" NL$/;"	v	typeref:typename:const char[]
SOUND_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char SOUND_BAS[] =       "1 PRINT \\"Generates some sounds\\"" NL$/;"	v	typeref:typename:const char[]
SP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define SP /;"	d	file:
SP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define SP /;"	d	file:
SP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::SP()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
SPEECH1_TXT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char SPEECH1_TXT[] = "Remember to look up at the stars,"                    NL$/;"	v	typeref:typename:const char[]
SPEECH2_TXT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char SPEECH2_TXT[] = "[\/HEH3LOW8W, AY4 AE4M MAESIHNTAASH, IH4T SHUH4R IH4Z GREY4T /;"	v	typeref:typename:const char[]
SPEECH3_TXT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char SPEECH3_TXT[] = "["                                               NL$/;"	v	typeref:typename:const char[]
SPEECH4_TXT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char SPEECH4_TXT[] = "|m1"                                             NL$/;"	v	typeref:typename:const char[]
SPEED_DIV_128	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define SPEED_DIV_128 /;"	d
SPEED_DIV_16	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define SPEED_DIV_16 /;"	d
SPEED_DIV_2	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define SPEED_DIV_2 /;"	d
SPEED_DIV_32	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define SPEED_DIV_32 /;"	d
SPEED_DIV_4	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define SPEED_DIV_4 /;"	d
SPEED_DIV_64	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define SPEED_DIV_64 /;"	d
SPEED_DIV_8	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define SPEED_DIV_8 /;"	d
SPI	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  SPI,      \/**< SPI display. *\/$/;"	e	enum:fabgl::VideoMode
SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:APA102Controller	typeref:typename:SPIOutput<DATA_PIN,CLOCK_PIN,SPI_SPEED>
SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:LPD6803Controller	typeref:typename:SPIOutput<DATA_PIN,CLOCK_PIN,SPI_SPEED>
SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:LPD8806Controller	typeref:typename:SPIOutput<DATA_PIN,CLOCK_PIN,SPI_SPEED>
SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:P9813Controller	typeref:typename:SPIOutput<DATA_PIN,CLOCK_PIN,SPI_SPEED>
SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:SK9822Controller	typeref:typename:SPIOutput<DATA_PIN,CLOCK_PIN,SPI_SPEED>
SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:SM16716Controller	typeref:typename:SPIOutput<DATA_PIN,CLOCK_PIN,SPI_SPEED>
SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;$/;"	t	class:WS2801Controller	typeref:typename:SPIOutput<DATA_PIN,CLOCK_PIN,SPI_SPEED>
SPIBegin	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^bool MCP23S17::SPIBegin(int CSActiveState)$/;"	f	class:fabgl::MCP23S17	typeref:typename:bool
SPIBegin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::SPIBegin()$/;"	f	class:fabgl::TFTController	typeref:typename:void
SPIBeginWrite	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::SPIBeginWrite()$/;"	f	class:fabgl::TFTController	typeref:typename:void
SPIEnd	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::SPIEnd()$/;"	f	class:fabgl::MCP23S17	typeref:typename:void
SPIEnd	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::SPIEnd()$/;"	f	class:fabgl::TFTController	typeref:typename:void
SPIEndWrite	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::SPIEndWrite()$/;"	f	class:fabgl::TFTController	typeref:typename:void
SPIFFS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  SPIFFS,  \/**< SPIFFS (Flash) *\/$/;"	e	enum:fabgl::DriveType
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput : public APOLLO3HardwareSPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};$/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput : public AVRSoftwareSPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};$/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput : public ESP32SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};$/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput : public ESP8266SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};$/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput : public NRF51SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};$/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput : public NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};$/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput<SPI1_DATA, SPI1_CLOCK, SPI_SPEED> : public Teensy4HardwareSPIOutput<SPI1_DATA, S/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput<SPI2_DATA, SPI2_CLOCK, SPI_SPEED> : public ARMHardwareSPIOutput<SPI2_DATA, SPI2_/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput<SPI2_DATA, SPI2_CLOCK, SPI_SPEED> : public Teensy4HardwareSPIOutput<SPI2_DATA, S/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput<SPI2_DATA, SPI_CLOCK, SPI_SPEED> : public ARMHardwareSPIOutput<SPI2_DATA, SPI_CL/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput<SPI_DATA, SPI2_CLOCK, SPI_SPEED> : public ARMHardwareSPIOutput<SPI_DATA, SPI2_CL/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> : public ARMHardwareSPIOutput<SPI_DATA, SPI_CLOC/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> : public AVRHardwareSPIOutput<SPI_DATA, SPI_CLOC/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> : public ArdunioCoreSPIOutput<SPI_DATA, SPI_CLOC/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> : public SAMHardwareSPIOutput<SPI_DATA, SPI_CLOC/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> : public Teensy4HardwareSPIOutput<SPI_DATA, SPI_/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput<SPI_UART0_DATA, SPI_UART0_CLOCK, SPI_SPEED> : public AVRUSART0SPIOutput<SPI_UART/;"	c
SPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SPIOutput<SPI_UART1_DATA, SPI_UART1_CLOCK, SPI_SPEED> : public AVRUSART1SPIOutput<SPI_UART/;"	c
SPIState	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^struct SPIState {$/;"	s
SPIState	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^struct SPIState {$/;"	s
SPIWriteBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::SPIWriteBuffer(void * data, size_t size)$/;"	f	class:fabgl::TFTController	typeref:typename:void
SPIWriteByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::SPIWriteByte(uint8_t data)$/;"	f	class:fabgl::TFTController	typeref:typename:void
SPIWriteWord	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::SPIWriteWord(uint16_t data)$/;"	f	class:fabgl::TFTController	typeref:typename:void
SPIX	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^#define SPIX /;"	d
SPIX	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^#define SPIX /;"	d
SPIX	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^#define SPIX /;"	d
SPI_ADVANCE	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define SPI_ADVANCE /;"	d
SPI_B0	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define SPI_B0 /;"	d
SPI_B1	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define SPI_B1 /;"	d
SPI_B2	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define SPI_B2 /;"	d
SPI_PUSHR_CONT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^#define SPI_PUSHR_CONT /;"	d
SPI_PUSHR_CONT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^#define SPI_PUSHR_CONT /;"	d
SPI_PUSHR_CTAS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^#define SPI_PUSHR_CTAS(/;"	d
SPI_PUSHR_CTAS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^#define SPI_PUSHR_CTAS(/;"	d
SPI_PUSHR_CTCNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^#define SPI_PUSHR_CTCNT /;"	d
SPI_PUSHR_CTCNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^#define SPI_PUSHR_CTCNT /;"	d
SPI_PUSHR_EOQ	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^#define SPI_PUSHR_EOQ /;"	d
SPI_PUSHR_EOQ	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^#define SPI_PUSHR_EOQ /;"	d
SPI_PUSHR_PCS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^#define SPI_PUSHR_PCS(/;"	d
SPI_PUSHR_PCS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^#define SPI_PUSHR_PCS(/;"	d
SPI_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^#define SPI_t /;"	d
SPI_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^#define SPI_t /;"	d
SPRITE_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^static const char SPRITE_BAS[] =      "1 REM Sprites demo" NL$/;"	v	typeref:typename:const char[]
SPRITE_BAS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const char SPRITE_BAS[] =      "1 REM Sprites demo" NL$/;"	v	typeref:typename:const char[]
SRA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define SRA(/;"	d	file:
SRA_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SRA_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SRA_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SRA_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define SRL(/;"	d	file:
SRL_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SRL_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SRL_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SRL_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define SS(/;"	d	file:
SS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::SS()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
SS2_7BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char SS2_7BIT[] = "\\eN";$/;"	v	namespace:fabgl	typeref:typename:const char[]
SS2_8BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char SS2_8BIT[] = "\\x8E";$/;"	v	namespace:fabgl	typeref:typename:const char[]
SS3_7BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char SS3_7BIT[] = "\\eO";$/;"	v	namespace:fabgl	typeref:typename:const char[]
SS3_8BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char SS3_8BIT[] = "\\x8F";$/;"	v	namespace:fabgl	typeref:typename:const char[]
SSD1306Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^SSD1306Controller::SSD1306Controller()$/;"	f	class:fabgl::SSD1306Controller
SSD1306Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^class SSD1306Controller : public GenericBitmappedDisplayController {$/;"	c	namespace:fabgl
SSD1306Orientation	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^enum class SSD1306Orientation {$/;"	g	namespace:fabgl
SSD1306_ACTIVATE_SCROLL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_ACTIVATE_SCROLL /;"	d	file:
SSD1306_BACKGROUND_PRIMITIVE_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_BACKGROUND_PRIMITIVE_TIMEOUT /;"	d	file:
SSD1306_CHARGEPUMP	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_CHARGEPUMP /;"	d	file:
SSD1306_CLEARPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_CLEARPIXEL(/;"	d	file:
SSD1306_COLUMNADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_COLUMNADDR /;"	d	file:
SSD1306_COMSCANDEC	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_COMSCANDEC /;"	d	file:
SSD1306_COMSCANINC	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_COMSCANINC /;"	d	file:
SSD1306_DEACTIVATE_SCROLL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_DEACTIVATE_SCROLL /;"	d	file:
SSD1306_DISPLAYALLON	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_DISPLAYALLON /;"	d	file:
SSD1306_DISPLAYALLON_RESUME	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_DISPLAYALLON_RESUME /;"	d	file:
SSD1306_DISPLAYOFF	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_DISPLAYOFF /;"	d	file:
SSD1306_DISPLAYON	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_DISPLAYON /;"	d	file:
SSD1306_GETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_GETPIXEL(/;"	d	file:
SSD1306_I2C_FREQUENCY	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_I2C_FREQUENCY /;"	d	file:
SSD1306_I2C_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_I2C_TIMEOUT /;"	d	file:
SSD1306_INVERTDISPLAY	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_INVERTDISPLAY /;"	d	file:
SSD1306_INVERTPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_INVERTPIXEL(/;"	d	file:
SSD1306_LEFT_HORIZONTAL_SCROLL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_LEFT_HORIZONTAL_SCROLL /;"	d	file:
SSD1306_MEMORYMODE	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_MEMORYMODE /;"	d	file:
SSD1306_NORMALDISPLAY	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_NORMALDISPLAY /;"	d	file:
SSD1306_PAGEADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_PAGEADDR /;"	d	file:
SSD1306_RIGHT_HORIZONTAL_SCROLL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_RIGHT_HORIZONTAL_SCROLL /;"	d	file:
SSD1306_SEGREMAP	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SEGREMAP /;"	d	file:
SSD1306_SETCOMPINS	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SETCOMPINS /;"	d	file:
SSD1306_SETCONTRAST	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SETCONTRAST /;"	d	file:
SSD1306_SETDISPLAYCLOCKDIV	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SETDISPLAYCLOCKDIV /;"	d	file:
SSD1306_SETDISPLAYOFFSET	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SETDISPLAYOFFSET /;"	d	file:
SSD1306_SETHIGHCOLUMN	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SETHIGHCOLUMN /;"	d	file:
SSD1306_SETLOWCOLUMN	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SETLOWCOLUMN /;"	d	file:
SSD1306_SETMULTIPLEX	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SETMULTIPLEX /;"	d	file:
SSD1306_SETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SETPIXEL(/;"	d	file:
SSD1306_SETPIXELCOLOR	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SETPIXELCOLOR(/;"	d	file:
SSD1306_SETPRECHARGE	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SETPRECHARGE /;"	d	file:
SSD1306_SETSTARTLINE	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SETSTARTLINE /;"	d	file:
SSD1306_SETVCOMDETECT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SETVCOMDETECT /;"	d	file:
SSD1306_SET_VERTICAL_SCROLL_AREA	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_SET_VERTICAL_SCROLL_AREA /;"	d	file:
SSD1306_UPDATETASK_PRIORITY	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_UPDATETASK_PRIORITY /;"	d	file:
SSD1306_UPDATETASK_STACK	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_UPDATETASK_STACK /;"	d	file:
SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL /;"	d	file:
SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL /;"	d	file:
SSD1306_hardReset	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::SSD1306_hardReset()$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
SSD1306_sendCmd	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^bool SSD1306Controller::SSD1306_sendCmd(uint8_t c)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:bool
SSD1306_sendCmd	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^bool SSD1306Controller::SSD1306_sendCmd(uint8_t c1, uint8_t c2)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:bool
SSD1306_sendCmd	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^bool SSD1306Controller::SSD1306_sendCmd(uint8_t c1, uint8_t c2, uint8_t c3)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:bool
SSD1306_sendData	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^bool SSD1306Controller::SSD1306_sendData(uint8_t * buf, int count, uint8_t ctrl)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:bool
SSD1306_sendScreenBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::SSD1306_sendScreenBuffer(Rect updateRect)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
SSD1306_softReset	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^bool SSD1306Controller::SSD1306_softReset()$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:bool
ST7789Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.h	/^class ST7789Controller : public TFTController {$/;"	c	namespace:fabgl
ST7789_COLMOD	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_COLMOD /;"	d	file:
ST7789_DISPON	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_DISPON /;"	d	file:
ST7789_FRCTRL2	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_FRCTRL2 /;"	d	file:
ST7789_GCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_GCTRL /;"	d	file:
ST7789_INVOFF	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_INVOFF /;"	d	file:
ST7789_INVON	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_INVON /;"	d	file:
ST7789_LCMCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_LCMCTRL /;"	d	file:
ST7789_NORON	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_NORON /;"	d	file:
ST7789_NVGAMCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_NVGAMCTRL /;"	d	file:
ST7789_PORCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_PORCTRL /;"	d	file:
ST7789_PTLAR	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_PTLAR /;"	d	file:
ST7789_PTLON	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_PTLON /;"	d	file:
ST7789_PVGAMCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_PVGAMCTRL /;"	d	file:
ST7789_PWCTRL1	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_PWCTRL1 /;"	d	file:
ST7789_RAMCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_RAMCTRL /;"	d	file:
ST7789_RDDCOLMOD	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_RDDCOLMOD /;"	d	file:
ST7789_SLPOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_SLPOUT /;"	d	file:
ST7789_SWRST	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_SWRST /;"	d	file:
ST7789_VCOMS	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_VCOMS /;"	d	file:
ST7789_VDVS	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_VDVS /;"	d	file:
ST7789_VDVVRHEN	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_VDVVRHEN /;"	d	file:
ST7789_VRHS	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_VRHS /;"	d	file:
ST7789_WRCABCMB	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_WRCABCMB /;"	d	file:
ST7789_WRCACE	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_WRCACE /;"	d	file:
ST7789_WRCTRLD	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_WRCTRLD /;"	d	file:
ST7789_WRDISBV	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^#define ST7789_WRDISBV /;"	d	file:
STACKPOPBYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define STACKPOPBYTE(/;"	d	file:
STACKPOPWORD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define STACKPOPWORD(/;"	d	file:
STACKPUSHBYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define STACKPUSHBYTE(/;"	d	file:
STACKPUSHWORD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^#define STACKPUSHWORD(/;"	d	file:
STACK_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define STACK_ADDR /;"	d
START_DEEPSLEEP	examples/test/lib/JFixLib/src/JModes.h	/^    START_DEEPSLEEP,$/;"	e	enum:JModes::OneShot
START_OTA_SERVER	examples/test/lib/JFixLib/src/JOtaServer.h	/^    START_OTA_SERVER,$/;"	e	enum:JOtaServer::Mode
STATE_READY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define STATE_READY /;"	d	file:
STATE_WAITING_ICW2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define STATE_WAITING_ICW2 /;"	d	file:
STATE_WAITING_ICW3	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define STATE_WAITING_ICW3 /;"	d	file:
STATE_WAITING_ICW4	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^#define STATE_WAITING_ICW4 /;"	d	file:
STATUS_AOBF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define STATUS_AOBF /;"	d	file:
STATUS_CMD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define STATUS_CMD /;"	d	file:
STATUS_IBF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define STATUS_IBF /;"	d	file:
STATUS_INH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define STATUS_INH /;"	d	file:
STATUS_OBF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define STATUS_OBF /;"	d	file:
STATUS_PARITY_ERR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define STATUS_PARITY_ERR /;"	d	file:
STATUS_SYSFLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define STATUS_SYSFLAG /;"	d	file:
STATUS_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^#define STATUS_TIMEOUT /;"	d	file:
STC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define STC(/;"	d	file:
STOPBITS_FLOAT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const float  STOPBITS_FLOAT[] = { 1.0, 1.5, 2.0, 3.0 };$/;"	v	typeref:typename:const float[]
STOPBITS_STR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char * STOPBITS_STR[]   = { "1", "1.5", "2", "3" };$/;"	v	typeref:typename:const char * []
STYLE_BUTTON	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^enum { STYLE_NONE, STYLE_FRAME, STYLE_LABEL, STYLE_STATICLABEL, STYLE_LABELHELP, STYLE_LABELHELP/;"	e	enum:__anonfd22f8f50103
STYLE_CHECKBOX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^enum { STYLE_NONE, STYLE_FRAME, STYLE_LABEL, STYLE_STATICLABEL, STYLE_LABELHELP, STYLE_LABELHELP/;"	e	enum:__anonfd22f8f50103
STYLE_COMBOBOX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^enum { STYLE_NONE, STYLE_FRAME, STYLE_LABEL, STYLE_STATICLABEL, STYLE_LABELHELP, STYLE_LABELHELP/;"	e	enum:__anonfd22f8f50103
STYLE_FRAME	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^enum { STYLE_NONE, STYLE_FRAME, STYLE_LABEL, STYLE_STATICLABEL, STYLE_LABELHELP, STYLE_LABELHELP/;"	e	enum:__anonfd22f8f50103
STYLE_LABEL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^enum { STYLE_NONE, STYLE_FRAME, STYLE_LABEL, STYLE_STATICLABEL, STYLE_LABELHELP, STYLE_LABELHELP/;"	e	enum:__anonfd22f8f50103
STYLE_LABELBUTTON	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^enum { STYLE_NONE, STYLE_FRAME, STYLE_LABEL, STYLE_STATICLABEL, STYLE_LABELHELP, STYLE_LABELHELP/;"	e	enum:__anonfd22f8f50103
STYLE_LABELHELP	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^enum { STYLE_NONE, STYLE_FRAME, STYLE_LABEL, STYLE_STATICLABEL, STYLE_LABELHELP, STYLE_LABELHELP/;"	e	enum:__anonfd22f8f50103
STYLE_LABELHELP2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^enum { STYLE_NONE, STYLE_FRAME, STYLE_LABEL, STYLE_STATICLABEL, STYLE_LABELHELP, STYLE_LABELHELP/;"	e	enum:__anonfd22f8f50103
STYLE_NONE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^enum { STYLE_NONE, STYLE_FRAME, STYLE_LABEL, STYLE_STATICLABEL, STYLE_LABELHELP, STYLE_LABELHELP/;"	e	enum:__anonfd22f8f50103
STYLE_STATICLABEL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^enum { STYLE_NONE, STYLE_FRAME, STYLE_LABEL, STYLE_STATICLABEL, STYLE_LABELHELP, STYLE_LABELHELP/;"	e	enum:__anonfd22f8f50103
ST_7BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char ST_7BIT[]  = "\\e\\\\";$/;"	v	namespace:fabgl	typeref:typename:const char[]
ST_8BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char ST_8BIT[]  = "\\x9C";$/;"	v	namespace:fabgl	typeref:typename:const char[]
SUB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define SUB(/;"	d	file:
SUB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define SUB(/;"	d	file:
SUB8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define SUB8_C /;"	d
SUBMIT_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t SUBMIT_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
SUBMODEL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^SUBMODEL equ 0x01$/;"	d
SUB_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SUB_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SUB_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SUB_N,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SUB_OPCODE_CLK_ENABLE_INPUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define SUB_OPCODE_CLK_ENABLE_INPUT /;"	d	file:
SUB_OPCODE_CLK_ENABLE_OUTPUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define SUB_OPCODE_CLK_ENABLE_OUTPUT /;"	d	file:
SUB_OPCODE_DAT_ENABLE_INPUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define SUB_OPCODE_DAT_ENABLE_INPUT /;"	d	file:
SUB_OPCODE_DAT_ENABLE_OUTPUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define SUB_OPCODE_DAT_ENABLE_OUTPUT /;"	d	file:
SUB_OPCODE_READ_CLK	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define SUB_OPCODE_READ_CLK /;"	d	file:
SUB_OPCODE_READ_DAT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define SUB_OPCODE_READ_DAT /;"	d	file:
SUB_OPCODE_STAGEB	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.h	/^#define SUB_OPCODE_STAGEB /;"	d
SUB_OPCODE_WRITE_CLK	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define SUB_OPCODE_WRITE_CLK /;"	d	file:
SUB_OPCODE_WRITE_DAT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define SUB_OPCODE_WRITE_DAT /;"	d	file:
SUB_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  SUB_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
SVGA_1024x768_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define SVGA_1024x768_60Hz /;"	d
SVGA_1024x768_70Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define SVGA_1024x768_70Hz /;"	d
SVGA_1024x768_75Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define SVGA_1024x768_75Hz /;"	d
SVGA_1280x600_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define SVGA_1280x600_60Hz /;"	d
SVGA_1280x720_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define SVGA_1280x720_60Hz /;"	d
SVGA_1280x720_60HzAlt1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define SVGA_1280x720_60HzAlt1 /;"	d
SVGA_1280x768_50Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define SVGA_1280x768_50Hz /;"	d
SVGA_800x300_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define SVGA_800x300_60Hz /;"	d
SVGA_800x600_56Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define SVGA_800x600_56Hz /;"	d
SVGA_800x600_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define SVGA_800x600_60Hz /;"	d
SVGA_960x540_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define SVGA_960x540_60Hz /;"	d
SWAPBBN1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define SWAPBBN1 /;"	d
SWAPS	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^#define SWAPS(/;"	d
SWAPSA	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^#define SWAPSA(/;"	d
SWAPSB	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^#define SWAPSB(/;"	d
SWS2812	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^enum SWS2812 { WS2812SERIAL };$/;"	g
SYSTEM_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define SYSTEM_ADDR /;"	d
SYX_FLAGS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define SYX_FLAGS /;"	d	file:
SZC_FLAGS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define SZC_FLAGS /;"	d	file:
SZPV_FLAGS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define SZPV_FLAGS /;"	d	file:
SZYXP_FLAGS_TABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^static const unsigned char SZYXP_FLAGS_TABLE[256] = {$/;"	v	namespace:fabgl	typeref:typename:const unsigned char[256]	file:
SZYX_FLAGS_TABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^static const unsigned char SZYX_FLAGS_TABLE[256] = {$/;"	v	namespace:fabgl	typeref:typename:const unsigned char[256]	file:
SZ_FLAGS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define SZ_FLAGS /;"	d	file:
S_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define S_FLAG /;"	d	file:
SaddleBrown	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        SaddleBrown=0x8B4513,           \/\/\/< @htmlcolorblock{8B4513}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Salmon	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Salmon=0xFA8072,                \/\/\/< @htmlcolorblock{FA8072}$/;"	e	enum:CRGB::__anonbcc8608a0c03
SamplesGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^SamplesGenerator::SamplesGenerator(int8_t const * data, int length)$/;"	f	class:fabgl::SamplesGenerator
SamplesGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^class SamplesGenerator : public WaveformGenerator {$/;"	c	namespace:fabgl
SandyBrown	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        SandyBrown=0xF4A460,            \/\/\/< @htmlcolorblock{F4A460}$/;"	e	enum:CRGB::__anonbcc8608a0c03
SaveCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  SaveCursor,               \/**<    *\/$/;"	e	enum:fabgl::ConvCtrl
SawtoothWaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^SawtoothWaveformGenerator::SawtoothWaveformGenerator()$/;"	f	class:fabgl::SawtoothWaveformGenerator
SawtoothWaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^class SawtoothWaveformGenerator : public WaveformGenerator {$/;"	c	namespace:fabgl
ScanCode2SysCode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^  struct ScanCode2SysCode {$/;"	s	function:BIOS::processScancode	file:
Scene	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.cpp	/^Scene::Scene(int maxSpritesCount, int updateTimeMS, int width, int height, int stackSize)$/;"	f	class:fabgl::Scene
Scene	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^class Scene {$/;"	c	namespace:fabgl
Scope	examples/test/.pio/libdeps/esp32dev/FastLED/code_of_conduct.md	/^## Scope$/;"	s	chapter:Contributor Covenant Code of Conduct
Score	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  Score()$/;"	f	struct:Score
Score	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^struct Score : public Scene $/;"	s
ScoreCard	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^struct ScoreCard$/;"	s
Screen	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Screen,   \/**< Rectangle coordinates relative to the screen (that is the root window) *\/$/;"	e	enum:fabgl::uiOrigin
ScreenHeight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int ScreenHeight       = FrameHeight - VerticalBlanking;   \/\/ ScreenHeight = 28/;"	m	class:MOS6561	typeref:typename:const int
ScreenOffsetX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int ScreenOffsetX      = (((VGAWidth - ScreenWidth) \/ 2) & 0xffc) + 4; \/\/ must/;"	m	class:MOS6561	typeref:typename:const int
ScreenOffsetY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int ScreenOffsetY      = (VGAHeight - ScreenHeight) \/ 2;$/;"	m	class:MOS6561	typeref:typename:const int
ScreenWidth	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int ScreenWidth        = FrameWidth - HorizontalBlanking;  \/\/ ScreenWidth  = 23/;"	m	class:MOS6561	typeref:typename:const int
SeaGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        SeaGreen=0x2E8B57,              \/\/\/< @htmlcolorblock{2E8B57}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Seashell	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Seashell=0xFFF5EE,              \/\/\/< @htmlcolorblock{FFF5EE}$/;"	e	enum:CRGB::__anonbcc8608a0c03
SelectForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  SelectForm(InputBox * inputBox_)$/;"	f	struct:fabgl::SelectForm
SelectForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^struct SelectForm : public InputForm {$/;"	s	namespace:fabgl
Selectable	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^class Selectable {$/;"	c
SendDataInvalid	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    SendDataInvalid,$/;"	e	enum:IECDrive::LinkState
SendDataValid	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    SendDataValid,$/;"	e	enum:IECDrive::LinkState
SenderLookingForDevices	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    SenderLookingForDevices,$/;"	e	enum:IECDrive::LinkState
Serial	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	SoftwareSerial Serial;$/;"	m	class:PixieController	typeref:typename:SoftwareSerial
Serial Terminal escape sequences for graphics and sound (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Serial Terminal escape sequences for graphics and sound (click for video):$/;"	S	chapter:FabGL
Serial Terminal for MBC2 Z80 Board (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Serial Terminal for MBC2 Z80 Board (click for video):$/;"	S	chapter:FabGL
SerialPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^SerialPort::SerialPort()$/;"	f	class:fabgl::SerialPort
SerialPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^class SerialPort {$/;"	c	namespace:fabgl
SerialPortTerminalConnector	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^SerialPortTerminalConnector::SerialPortTerminalConnector()$/;"	f	class:fabgl::SerialPortTerminalConnector
SerialPortTerminalConnector	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^SerialPortTerminalConnector::SerialPortTerminalConnector(SerialPort * serialPort, Terminal * ter/;"	f	class:fabgl::SerialPortTerminalConnector
SerialPortTerminalConnector	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^class SerialPortTerminalConnector {$/;"	c	namespace:fabgl
Serialization	examples/test/.pio/libdeps/esp32dev/ArduinoJson/README.md	/^### Serialization$/;"	S	section:Quickstart
SerializedValue	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^  explicit SerializedValue(T str) : str_(str) {}$/;"	f	class:SerializedValue
SerializedValue	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^  explicit SerializedValue(TChar* p, size_t n) : data_(p), size_(n) {}$/;"	f	class:SerializedValue
SerializedValue	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^class SerializedValue {$/;"	c
SerializedValue	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^class SerializedValue<TChar*> {$/;"	c
Session	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^struct Session {$/;"	s
SessionClosed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  SessionClosed,$/;"	e	enum:AbortReason
SetBrushColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SetBrushColor,$/;"	e	enum:fabgl::PrimitiveCmd
SetClippingRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SetClippingRect,$/;"	e	enum:fabgl::PrimitiveCmd
SetGlyphOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SetGlyphOptions,$/;"	e	enum:fabgl::PrimitiveCmd
SetLineEnds	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SetLineEnds,$/;"	e	enum:fabgl::PrimitiveCmd
SetOrigin	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SetOrigin,$/;"	e	enum:fabgl::PrimitiveCmd
SetPaintOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SetPaintOptions,$/;"	e	enum:fabgl::PrimitiveCmd
SetPenColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SetPenColor,$/;"	e	enum:fabgl::PrimitiveCmd
SetPenWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SetPenWidth,$/;"	e	enum:fabgl::PrimitiveCmd
SetPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SetPixel,$/;"	e	enum:fabgl::PrimitiveCmd
SetPixelAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SetPixelAt,$/;"	e	enum:fabgl::PrimitiveCmd
SetScrollingRegion	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SetScrollingRegion,$/;"	e	enum:fabgl::PrimitiveCmd
Setting up the basic files/folders	examples/test/.pio/libdeps/esp32dev/FastLED/PORTING.md	/^## Setting up the basic files\/folders$/;"	s	chapter:Fast porting for a new board on existing hardware
Sienna	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Sienna=0xA0522D,                \/\/\/< @htmlcolorblock{A0522D}$/;"	e	enum:CRGB::__anonbcc8608a0c03
SigmaDelta	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  SigmaDelta,      \/**< Use Sigma-Delta. Available on almost all GPIO pins. Requires a lot of C/;"	e	enum:fabgl::SoundGenMethod
Silver	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Silver=0xC0C0C0,                \/\/\/< @htmlcolorblock{C0C0C0}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Simple Example	examples/test/.pio/libdeps/esp32dev/FastLED/README.md	/^## Simple Example$/;"	s	chapter:FastLED 3.6
Simple Terminal Out Example (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Simple Terminal Out Example (click for video):$/;"	S	chapter:FabGL
SineWaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^SineWaveformGenerator::SineWaveformGenerator()$/;"	f	class:fabgl::SineWaveformGenerator
SineWaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^class SineWaveformGenerator : public WaveformGenerator {$/;"	c	namespace:fabgl
SixteenWayInlineBlockClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^class SixteenWayInlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PM/;"	c
SixteenWayInlineBlockClocklessController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^class SixteenWayInlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PM/;"	c
Size	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Size() : width(0), height(0) { }$/;"	f	struct:fabgl::Size
Size	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Size(int width_, int height_) : width(width_), height(height_) { }$/;"	f	struct:fabgl::Size
Size	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct Size {$/;"	s	namespace:fabgl
SizedRamString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  SizedRamString(const char* str, size_t sz) : str_(str), size_(sz) {}$/;"	f	class:SizedRamString
SizedRamString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^class SizedRamString {$/;"	c
SizedStringAdapter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^struct SizedStringAdapter<const __FlashStringHelper*, void> {$/;"	s
SizedStringAdapter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^struct SizedStringAdapter<TChar*,$/;"	s
SkyBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        SkyBlue=0x87CEEB,               \/\/\/< @htmlcolorblock{87CEEB}$/;"	e	enum:CRGB::__anonbcc8608a0c03
SlateBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        SlateBlue=0x6A5ACD,             \/\/\/< @htmlcolorblock{6A5ACD}$/;"	e	enum:CRGB::__anonbcc8608a0c03
SlateGray	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        SlateGray=0x708090,             \/\/\/< @htmlcolorblock{708090}$/;"	e	enum:CRGB::__anonbcc8608a0c03
SlateGrey	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        SlateGrey=0x708090,             \/\/\/< @htmlcolorblock{708090}$/;"	e	enum:CRGB::__anonbcc8608a0c03
SlotKeySetter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/SlotFunctions.hpp	/^  SlotKeySetter(VariantSlot* instance) : instance_(instance) {}$/;"	f	struct:SlotKeySetter
SlotKeySetter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/SlotFunctions.hpp	/^struct SlotKeySetter {$/;"	s
Snow	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Snow=0xFFFAFA,                  \/\/\/< @htmlcolorblock{FFFAFA}$/;"	e	enum:CRGB::__anonbcc8608a0c03
SodiumVapor	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    SodiumVapor=0xFFD1B2 \/* 0 K, 255, 209, 178 *\/,$/;"	e	enum:__anon4cec7af20203
Software	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  Software,          \/**< Software flow control. Use XON and XOFF control characters *\/$/;"	e	enum:fabgl::FlowControl
SoftwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^class SoftwareSPIOutput : public AVRSoftwareSPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>/;"	c
Sound Engine (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Sound Engine (click for video):$/;"	S	chapter:FabGL
SoundGenMethod	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^enum class SoundGenMethod {$/;"	g	namespace:fabgl
SoundGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^SoundGenerator::SoundGenerator(int sampleRate, gpio_num_t gpio, SoundGenMethod genMethod)$/;"	f	class:fabgl::SoundGenerator
SoundGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^class SoundGenerator {$/;"	c	namespace:fabgl
Space Invaders Example (click for video):	examples/test/.pio/libdeps/esp32dev/FabGL/README.md	/^### Space Invaders Example (click for video):$/;"	S	chapter:FabGL
SpanishLayout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.cpp	/^const KeyboardLayout SpanishLayout {$/;"	v	namespace:fabgl	typeref:typename:const KeyboardLayout
Sponsors	examples/test/.pio/libdeps/esp32dev/ArduinoJson/README.md	/^## Sponsors$/;"	s
SpringGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        SpringGreen=0x00FF7F,           \/\/\/< @htmlcolorblock{00FF7F}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Sprite	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^Sprite::Sprite()$/;"	f	class:fabgl::Sprite
Sprite	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^struct Sprite {$/;"	s	namespace:fabgl
SpritesTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  SpritesTest()$/;"	f	class:SpritesTest
SpritesTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^class SpritesTest : public Test {$/;"	c
SpritesTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  SpritesTest()$/;"	f	class:SpritesTest
SpritesTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^class SpritesTest : public Test {$/;"	c
SpritesTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  SpritesTest()$/;"	f	class:SpritesTest
SpritesTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^class SpritesTest : public Test {$/;"	c
SquareWaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^SquareWaveformGenerator::SquareWaveformGenerator()$/;"	f	class:fabgl::SquareWaveformGenerator
SquareWaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^class SquareWaveformGenerator : public WaveformGenerator {$/;"	c	namespace:fabgl
Stack	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Stack() : m_items(nullptr) { }$/;"	f	class:fabgl::Stack
Stack	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^class Stack {$/;"	c	namespace:fabgl
StackItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  StackItem(StackItem * next_, T const & item_) : next(next_), item(item_) { }$/;"	f	struct:fabgl::StackItem
StackItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct StackItem {$/;"	s	namespace:fabgl
StandardFluorescent	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    StandardFluorescent=0xF4FFFA \/* 0 K, 244, 255, 250 *\/,$/;"	e	enum:__anon4cec7af20203
StaticJsonBuffer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/compatibility.hpp	/^#define StaticJsonBuffer /;"	d
StaticJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp	/^  StaticJsonDocument($/;"	f	class:StaticJsonDocument
StaticJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp	/^  StaticJsonDocument() : JsonDocument(buffer_, capacity_) {}$/;"	f	class:StaticJsonDocument
StaticJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp	/^  StaticJsonDocument(JsonVariant src) : JsonDocument(buffer_, capacity_) {$/;"	f	class:StaticJsonDocument
StaticJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp	/^  StaticJsonDocument(const StaticJsonDocument& src)$/;"	f	class:StaticJsonDocument
StaticJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp	/^class StaticJsonDocument : public JsonDocument {$/;"	c
StaticStringAdapter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  StaticStringAdapter(const char* str) : ZeroTerminatedRamString(str) {}$/;"	f	class:StaticStringAdapter
StaticStringAdapter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^class StaticStringAdapter : public ZeroTerminatedRamString {$/;"	c
StaticStringWriter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StaticStringWriter.hpp	/^  StaticStringWriter(char* buf, size_t size) : end(buf + size), p(buf) {}$/;"	f	class:StaticStringWriter
StaticStringWriter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StaticStringWriter.hpp	/^class StaticStringWriter {$/;"	c
SteelBlue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        SteelBlue=0x4682B4,             \/\/\/< @htmlcolorblock{4682B4}$/;"	e	enum:CRGB::__anonbcc8608a0c03
StepCallback	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^typedef void (*StepCallback)(void *);$/;"	t	typeref:typename:void (*)(void *)
Stream	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct Stream : public Print {$/;"	s	namespace:fabgl
StringAdapter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^struct StringAdapter<const __FlashStringHelper*, void> {$/;"	s
StringAdapter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/JsonString.hpp	/^struct StringAdapter<JsonString> {$/;"	s
StringAdapter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^struct StringAdapter<TChar*, typename enable_if<IsChar<TChar>::value>::type> {$/;"	s
StringAdapter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^struct StringAdapter<TChar[N], typename enable_if<IsChar<TChar>::value>::type> {$/;"	s
StringAdapter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^struct StringAdapter<const char*, void> {$/;"	s
StringAdapter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/StringObject.hpp	/^struct StringAdapter<$/;"	s
StringCopier	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  StringCopier(MemoryPool* pool) : pool_(pool) {}$/;"	f	class:StringCopier
StringCopier	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^class StringCopier {$/;"	c
StringList	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^StringList::StringList()$/;"	f	class:fabgl::StringList
StringList	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^class StringList {$/;"	c	namespace:fabgl
StringMover	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp	/^  StringMover(char* ptr) : writePtr_(ptr) {}$/;"	f	class:StringMover
StringMover	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp	/^class StringMover {$/;"	c
StringStoragePolicy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StoragePolicy.hpp	/^namespace StringStoragePolicy {$/;"	n
Supervisor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^Supervisor::Supervisor(BaseDisplayController * displayController)$/;"	f	class:Supervisor
Supervisor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^class Supervisor {$/;"	c
Supported LED Chipsets	examples/test/.pio/libdeps/esp32dev/FastLED/README.md	/^## Supported LED Chipsets$/;"	s	chapter:FastLED 3.6
Supported Platforms	examples/test/.pio/libdeps/esp32dev/FastLED/README.md	/^## Supported Platforms$/;"	s	chapter:FastLED 3.6
SupportedLayouts	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^struct SupportedLayouts {$/;"	s	namespace:fabgl
SupportedTerminals	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^struct SupportedTerminals {$/;"	s	namespace:fabgl
SwapBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SwapBuffers,$/;"	e	enum:fabgl::PrimitiveCmd
SwapFGBG	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  SwapFGBG,$/;"	e	enum:fabgl::PrimitiveCmd
Switch	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Switch,   \/**< Switch - can have two states. Generates onChange events *\/$/;"	e	enum:fabgl::uiButtonKind
Sync	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  Sync,         \/**< Horizontal line sequence is: SYNC -> BACKPORCH -> VISIBLEAREA -> FRONTPORC/;"	e	enum:fabgl::VGAScanStart
SysReqCallback	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^typedef void (*SysReqCallback)();$/;"	t	typeref:typename:void (*)()
T1_MARK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^#define T1_MARK /;"	d
T1_mult	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    int T1_mult, T2_mult, T3_mult;$/;"	m	class:ClocklessController	typeref:typename:int
T2_MARK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^#define T2_MARK /;"	d
T2_mult	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    int T1_mult, T2_mult, T3_mult;$/;"	m	class:ClocklessController	typeref:typename:int
T3_mult	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    int T1_mult, T2_mult, T3_mult;$/;"	m	class:ClocklessController	typeref:typename:int
TADJUST	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^#define TADJUST /;"	d
TADJUST	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^#define TADJUST /;"	d
TAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^static const char* TAG = "ulp";$/;"	v	typeref:typename:const char *	file:
TBlendType	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^} TBlendType;$/;"	t	typeref:enum:__anon875718a30403
TDynamicRGBGradientPalettePtr	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef TDynamicRGBGradientPalette_bytes TDynamicRGBGradientPalettePtr;  \/\/\/< Alias of ::TDyn/;"	t	typeref:typename:TDynamicRGBGradientPalette_bytes
TDynamicRGBGradientPalette_byte	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef uint8_t TDynamicRGBGradientPalette_byte;  \/\/\/< Byte of an RGB gradient entry, stored /;"	t	typeref:typename:uint8_t
TDynamicRGBGradientPalette_bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef const TDynamicRGBGradientPalette_byte *TDynamicRGBGradientPalette_bytes;  \/\/\/< Pointe/;"	t	typeref:typename:const TDynamicRGBGradientPalette_byte *
TEMP_PORT0_DISABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define TEMP_PORT0_DISABLE(/;"	d	file:
TEMP_PORT0_ENABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define TEMP_PORT0_ENABLE(/;"	d	file:
TEMP_PORT1_DISABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define TEMP_PORT1_DISABLE(/;"	d	file:
TEMP_PORT1_ENABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define TEMP_PORT1_ENABLE(/;"	d	file:
TERMID	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^const char TERMID[] = "?64;1;6;22c";$/;"	v	namespace:fabgl	typeref:typename:const char[]
TERMVERSION_MAJ	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^#define TERMVERSION_MAJ /;"	d
TERMVERSION_MIN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^#define TERMVERSION_MIN /;"	d
TEST	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  enum JDrawMode { TEST, TEST_PERLIN, LIVE };$/;"	e	enum:JFixtureAddr::JDrawMode
TEST_PERLIN	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  enum JDrawMode { TEST, TEST_PERLIN, LIVE };$/;"	e	enum:JFixtureAddr::JDrawMode
TFTController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^TFTController::TFTController()$/;"	f	class:fabgl::TFTController
TFTController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^class TFTController : public GenericBitmappedDisplayController {$/;"	c	namespace:fabgl
TFTOrientation	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^enum class TFTOrientation {$/;"	g	namespace:fabgl
TFT_135x240	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define TFT_135x240 /;"	d
TFT_240x240	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define TFT_240x240 /;"	d
TFT_240x320	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define TFT_240x320 /;"	d
TFT_BACKGROUND_PRIMITIVE_TIMEOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^#define TFT_BACKGROUND_PRIMITIVE_TIMEOUT /;"	d	file:
TFT_CASET	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^#define TFT_CASET /;"	d
TFT_DMACHANNEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^#define TFT_DMACHANNEL /;"	d	file:
TFT_MADCTL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^#define TFT_MADCTL /;"	d
TFT_RAMWR	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^#define TFT_RAMWR /;"	d
TFT_RASET	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^#define TFT_RASET /;"	d
TFT_SPI_MODE	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^#define TFT_SPI_MODE /;"	d	file:
TFT_SPI_WRITE_FREQUENCY	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^#define TFT_SPI_WRITE_FREQUENCY /;"	d
TFT_UPDATETASK_PRIORITY	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^#define TFT_UPDATETASK_PRIORITY /;"	d	file:
TFT_UPDATETASK_STACK	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^#define TFT_UPDATETASK_STACK /;"	d	file:
TF_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define TF_ADDR /;"	d	file:
TGradientDirectionCode	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^} TGradientDirectionCode;$/;"	t	typeref:enum:__anon875718a30103
TIME_AFTER_CRASH	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^#define TIME_AFTER_CRASH /;"	d
TINST_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t TINST_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
TINST_DTA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t TINST_DTA[] = {$/;"	v	typeref:typename:const uint8_t[]
TINST_MSG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t TINST_MSG[] = {$/;"	v	typeref:typename:const uint8_t[]
TM1803	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1803 : public TM1803Controller400Khz<DATA_P/;"	c
TM1803Controller400Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class TM1803Controller400Khz : public ClocklessController<DATA_PIN, 6 * FMUL, 9 * FMUL, 6 * FMUL/;"	c
TM1803Controller400Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class TM1803Controller400Khz : public ClocklessController<DATA_PIN, C_NS(700), C_NS(1100), C_NS(/;"	c
TM1803_PORTA	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	TM1803_PORTA,$/;"	e	enum:EBlockChipsets
TM1803_PORTB	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	TM1803_PORTB,$/;"	e	enum:EBlockChipsets
TM1803_PORTC	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	TM1803_PORTC,$/;"	e	enum:EBlockChipsets
TM1803_PORTD	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	TM1803_PORTD,$/;"	e	enum:EBlockChipsets
TM1803_PORTDC	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	TM1803_PORTDC,$/;"	e	enum:EBlockChipsets
TM1804	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1804 : public TM1809Controller800Khz<DATA_P/;"	c
TM1809	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1809 : public TM1809Controller800Khz<DATA_P/;"	c
TM1809Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class TM1809Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 5 * FMUL, 3 * FMUL/;"	c
TM1809Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class TM1809Controller800Khz : public ClocklessController<DATA_PIN, C_NS(350), C_NS(350), C_NS(4/;"	c
TM1812	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1812 : public TM1809Controller800Khz<DATA_P/;"	c
TM1829	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1829 : public TM1829Controller800Khz<DATA_P/;"	c
TM1829Controller1600Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class TM1829Controller1600Khz : public ClocklessController<DATA_PIN, C_NS(100), C_NS(300), C_NS(/;"	c
TM1829Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class TM1829Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 5 * FMUL, 3 * FMUL/;"	c
TM1829Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class TM1829Controller800Khz : public ClocklessController<DATA_PIN, C_NS(340), C_NS(340), C_NS(5/;"	c
TORAD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^#define TORAD(/;"	d
TOTAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^#define TOTAL /;"	d
TOTAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^#define TOTAL /;"	d
TPA_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^#define TPA_ADDR /;"	d
TProgmemHSVPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef uint32_t TProgmemHSVPalette16[16];  \/\/\/< CHSVPalette16 entries stored in PROGMEM memo/;"	t	typeref:typename:uint32_t[16]
TProgmemHSVPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef uint32_t TProgmemHSVPalette32[32];  \/\/\/< CHSVPalette32 entries stored in PROGMEM memo/;"	t	typeref:typename:uint32_t[32]
TProgmemPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^#define TProgmemPalette16 /;"	d
TProgmemPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^#define TProgmemPalette32 /;"	d
TProgmemRGBGradientPalettePtr	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef TProgmemRGBGradientPalette_bytes TProgmemRGBGradientPalettePtr;$/;"	t	typeref:typename:TProgmemRGBGradientPalette_bytes
TProgmemRGBGradientPalette_byte	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef const uint8_t TProgmemRGBGradientPalette_byte;$/;"	t	typeref:typename:const uint8_t
TProgmemRGBGradientPalette_bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef const TProgmemRGBGradientPalette_byte *TProgmemRGBGradientPalette_bytes;$/;"	t	typeref:typename:const TProgmemRGBGradientPalette_byte *
TProgmemRGBPalette16	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef uint32_t TProgmemRGBPalette16[16];  \/\/\/< CRGBPalette16 entries stored in PROGMEM memo/;"	t	typeref:typename:uint32_t[16]
TProgmemRGBPalette32	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef uint32_t TProgmemRGBPalette32[32];  \/\/\/< CRGBPalette32 entries stored in PROGMEM memo/;"	t	typeref:typename:uint32_t[32]
TRACKS_COUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transdisk.py	/^TRACKS_COUNT = 77$/;"	v
TRACK_SIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transdisk.py	/^TRACK_SIZE = 32$/;"	v
TRGBGradientPaletteEntryUnion	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^} TRGBGradientPaletteEntryUnion;$/;"	t	typeref:union:__anon875718a3020a
TRINKET_SCALE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define TRINKET_SCALE /;"	d
TST	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define TST(/;"	d	file:
TTGOTDisplayV11Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.h	/^class TTGOTDisplayV11Controller : public ST7789Controller {$/;"	c	namespace:fabgl
TURBO_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t TURBO_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
TURBO_MSG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t TURBO_MSG[] = {$/;"	v	typeref:typename:const uint8_t[]
TURBO_OVR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t TURBO_OVR[] = {$/;"	v	typeref:typename:const uint8_t[]
TXTEND	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^#define TXTEND /;"	d
TYPE_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t TYPE_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
Talk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    Talk,$/;"	e	enum:IECDrive::ArbState
Tan	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Tan=0xD2B48C,                   \/\/\/< @htmlcolorblock{D2B48C}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Teal	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Teal=0x008080,                  \/\/\/< @htmlcolorblock{008080}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Teensy4HardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	Teensy4HardwareSPIOutput() { m_pSelect = NULL; m_bitCount = 0;}$/;"	f	class:Teensy4HardwareSPIOutput
Teensy4HardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	Teensy4HardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; m_bitCount = 0;}$/;"	f	class:Teensy4HardwareSPIOutput
Teensy4HardwareSPIOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^class Teensy4HardwareSPIOutput {$/;"	c
TermDecodeVirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::TermDecodeVirtualKey(VirtualKeyItem const & item)$/;"	f	class:fabgl::Terminal	typeref:typename:void
TermInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^struct TermInfo {$/;"	s	namespace:fabgl
TermInfoKbdConv	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^struct TermInfoKbdConv {$/;"	s	namespace:fabgl
TermInfoVideoConv	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^struct TermInfoVideoConv {$/;"	s	namespace:fabgl
TermType	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^enum TermType {$/;"	g	namespace:fabgl
Terminal	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^Terminal::Terminal()$/;"	f	class:fabgl::Terminal
Terminal	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^class Terminal : public Stream {$/;"	c	namespace:fabgl
TerminalController	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^TerminalController::TerminalController(Terminal * terminal)$/;"	f	class:fabgl::TerminalController
TerminalController	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^class TerminalController {$/;"	c	namespace:fabgl
TerminalCursorState	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^struct TerminalCursorState {$/;"	s	namespace:fabgl
TerminalTransition	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^enum class TerminalTransition {$/;"	g	namespace:fabgl
TestControlsFrame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  TestControlsFrame(uiFrame * parent)$/;"	f	struct:TestControlsFrame
TestControlsFrame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^struct TestControlsFrame : public uiFrame {$/;"	s
TestModalDialog	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestModalDialog.h	/^  TestModalDialog(uiFrame * parent)$/;"	f	struct:TestModalDialog
TestModalDialog	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestModalDialog.h	/^struct TestModalDialog : public uiFrame {$/;"	s
TestPaintBoxFrame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestPaintBoxFrame.h	/^  TestPaintBoxFrame(uiFrame * parent)$/;"	f	struct:TestPaintBoxFrame
TestPaintBoxFrame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestPaintBoxFrame.h	/^struct TestPaintBoxFrame : public uiFrame {$/;"	s
TestTimerFrame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestTimerFrame.h	/^  TestTimerFrame(uiFrame * parent)$/;"	f	struct:TestTimerFrame
TestTimerFrame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestTimerFrame.h	/^struct TestTimerFrame : public uiFrame {$/;"	s
TextFormatter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  explicit TextFormatter(TWriter writer) : writer_(writer) {}$/;"	f	class:TextFormatter
TextFormatter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^class TextFormatter {$/;"	c
TextInputForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  TextInputForm(InputBox * inputBox_)$/;"	f	struct:fabgl::TextInputForm
TextInputForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^struct TextInputForm : public InputForm {$/;"	s	namespace:fabgl
Textual	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Textual,      \/**< The display controller can represents text only *\/$/;"	e	enum:fabgl::DisplayControllerType
TextualDisplayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^class TextualDisplayController : public BaseDisplayController {$/;"	c	namespace:fabgl
Thistle	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Thistle=0xD8BFD8,               \/\/\/< @htmlcolorblock{D8BFD8}$/;"	e	enum:CRGB::__anonbcc8608a0c03
TimeOut	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^TimeOut::TimeOut()$/;"	f	class:fabgl::TimeOut
TimeOut	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct TimeOut {$/;"	s	namespace:fabgl
TimerInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^  struct TimerInfo {$/;"	s	class:fabgl::PIT8253
Tomato	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Tomato=0xFF6347,                \/\/\/< @htmlcolorblock{FF6347}$/;"	e	enum:CRGB::__anonbcc8608a0c03
TooDeep	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^    TooDeep$/;"	e	enum:DeserializationError::Code
TopButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  TopButton,      \/**<     *\/$/;"	e	enum:fabgl::uiScrollBarItem
TopCenterResize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  TopCenterResize,      \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
TopLeft	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  TopLeft,$/;"	e	enum:fabgl::QuadTreeQuadrant
TopLeftResize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  TopLeftResize,        \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
TopRight	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  TopRight,$/;"	e	enum:fabgl::QuadTreeQuadrant
TopRightResize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  TopRightResize,       \/**<     *\/$/;"	e	enum:fabgl::uiFrameItem
TriangleWaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^TriangleWaveformGenerator::TriangleWaveformGenerator()$/;"	f	class:fabgl::TriangleWaveformGenerator
TriangleWaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^class TriangleWaveformGenerator : public WaveformGenerator {$/;"	c	namespace:fabgl
Tungsten100W	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    Tungsten100W=0xFFD6AA \/* 2850 K, 255, 214, 170 *\/,$/;"	e	enum:__anon4cec7af20203
Tungsten40W	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    Tungsten40W=0xFFC58F \/* 2600 K, 255, 197, 143 *\/,$/;"	e	enum:__anon4cec7af20203
TurnAround	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    TurnAround,$/;"	e	enum:IECDrive::LinkState
TurnAroundReady	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    TurnAroundReady,$/;"	e	enum:IECDrive::LinkState
Turquoise	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Turquoise=0x40E0D0,             \/\/\/< @htmlcolorblock{40E0D0}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Typical8mmPixel	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    Typical8mmPixel=0xFFE08C \/* 255, 224, 140 *\/,$/;"	e	enum:__anon4cec7af20103
TypicalLEDStrip	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    TypicalLEDStrip=0xFFB0F0 \/* 255, 176, 240 *\/,$/;"	e	enum:__anon4cec7af20103
TypicalPixelString	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    TypicalPixelString=0xFFE08C \/* 255, 224, 140 *\/,$/;"	e	enum:__anon4cec7af20103
TypicalSMD5050	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    TypicalSMD5050=0xFFB0F0 \/* 255, 176, 240 *\/,$/;"	e	enum:__anon4cec7af20103
UARTFLAG_USE_PS2PORT1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^#define UARTFLAG_USE_PS2PORT1 /;"	d
UARTPORT_COUNT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^constexpr int        UARTPORT_COUNT       = sizeof(UARTPORT_STR) \/ sizeof(char const *);$/;"	v	typeref:typename:int
UARTPORT_FLAGS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const bool    UARTPORT_FLAGS[]     = { 0,$/;"	v	typeref:typename:const bool[]
UARTPORT_RX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const uint8_t UARTPORT_RX[]        = { 34,$/;"	v	typeref:typename:const uint8_t[]
UARTPORT_STR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const char *  UARTPORT_STR[]       = { "FabGL Terminal: TX=2 RX=34",$/;"	v	typeref:typename:const char * []
UARTPORT_TX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^static const uint8_t UARTPORT_TX[]        = { 2,$/;"	v	typeref:typename:const uint8_t[]
UART_BASE	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^static const uint32_t UART_BASE[] = { DR_REG_UART_BASE, DR_REG_UART1_BASE, DR_REG_UART2_BASE };$/;"	v	namespace:fabgl	typeref:typename:const uint32_t[]	file:
UART_BAUD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^#define UART_BAUD /;"	d	file:
UART_DATALEN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^#define UART_DATALEN /;"	d	file:
UART_FLOWCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^#define UART_FLOWCTRL /;"	d	file:
UART_PARITY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^#define UART_PARITY /;"	d	file:
UART_RX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^#define UART_RX /;"	d	file:
UART_STOPBITS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^#define UART_STOPBITS /;"	d	file:
UART_TX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^#define UART_TX /;"	d	file:
UART_URX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^#define UART_URX /;"	d	file:
UART_UTX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^#define UART_UTX /;"	d	file:
UCPHA1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^#define UCPHA1 /;"	d
UCS1903	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1903 : public UCS1903Controller400Khz<DATA/;"	c
UCS1903B	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1903B : public UCS1903BController800Khz<DA/;"	c
UCS1903BController800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class UCS1903BController800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 4 * FMUL, 4 * FM/;"	c
UCS1903BController800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class UCS1903BController800Khz : public ClocklessController<DATA_PIN, C_NS(400), C_NS(450), C_NS/;"	c
UCS1903Controller400Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class UCS1903Controller400Khz : public ClocklessController<DATA_PIN, 4 * FMUL, 12 * FMUL, 4 * FM/;"	c
UCS1903Controller400Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class UCS1903Controller400Khz : public ClocklessController<DATA_PIN, C_NS(500), C_NS(1500), C_NS/;"	c
UCS1903_PORTA	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	UCS1903_PORTA,$/;"	e	enum:EBlockChipsets
UCS1903_PORTB	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	UCS1903_PORTB,$/;"	e	enum:EBlockChipsets
UCS1903_PORTC	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	UCS1903_PORTC,$/;"	e	enum:EBlockChipsets
UCS1903_PORTD	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	UCS1903_PORTD,$/;"	e	enum:EBlockChipsets
UCS1903_PORTDC	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	UCS1903_PORTDC,$/;"	e	enum:EBlockChipsets
UCS1904	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1904 : public UCS1904Controller800Khz<DATA/;"	c
UCS1904Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class UCS1904Controller800Khz : public ClocklessController<DATA_PIN, 3 * FMUL, 3 * FMUL, 4 * FMU/;"	c
UCS1904Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class UCS1904Controller800Khz : public ClocklessController<DATA_PIN, C_NS(400), C_NS(400), C_NS(/;"	c
UCS2903	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS2903 : public UCS2903Controller<DATA_PIN, /;"	c
UCS2903Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class UCS2903Controller : public ClocklessController<DATA_PIN, 2 * FMUL, 6 * FMUL, 2 * FMUL, RGB/;"	c
UCS2903Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class UCS2903Controller : public ClocklessController<DATA_PIN, C_NS(250), C_NS(750), C_NS(250), /;"	c
UIEVT_ACTIVATE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_ACTIVATE,$/;"	e	enum:fabgl::uiEventID
UIEVT_APPINIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_APPINIT,$/;"	e	enum:fabgl::uiEventID
UIEVT_CHILDKILLFOCUS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_CHILDKILLFOCUS, \/\/ a UIEVT_KILLFOCUS has been sent to a child$/;"	e	enum:fabgl::uiEventID
UIEVT_CHILDSETFOCUS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_CHILDSETFOCUS,  \/\/ a UIEVT_SETFOCUS has been sent to a child$/;"	e	enum:fabgl::uiEventID
UIEVT_CLICK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_CLICK,$/;"	e	enum:fabgl::uiEventID
UIEVT_CLOSE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_CLOSE,      \/\/ Request to close (frame Close button)$/;"	e	enum:fabgl::uiEventID
UIEVT_CREATE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_CREATE,$/;"	e	enum:fabgl::uiEventID
UIEVT_DBLCLICK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_DBLCLICK,$/;"	e	enum:fabgl::uiEventID
UIEVT_DEACTIVATE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_DEACTIVATE,$/;"	e	enum:fabgl::uiEventID
UIEVT_DEBUGMSG	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_DEBUGMSG,$/;"	e	enum:fabgl::uiEventID
UIEVT_DESTROY	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_DESTROY,$/;"	e	enum:fabgl::uiEventID
UIEVT_EXITMODAL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_EXITMODAL,$/;"	e	enum:fabgl::uiEventID
UIEVT_GENPAINTEVENTS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_GENPAINTEVENTS,$/;"	e	enum:fabgl::uiEventID
UIEVT_HIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_HIDE,$/;"	e	enum:fabgl::uiEventID
UIEVT_KEYDOWN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_KEYDOWN,$/;"	e	enum:fabgl::uiEventID
UIEVT_KEYTYPE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_KEYTYPE,$/;"	e	enum:fabgl::uiEventID
UIEVT_KEYUP	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_KEYUP,$/;"	e	enum:fabgl::uiEventID
UIEVT_KILLFOCUS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_KILLFOCUS,$/;"	e	enum:fabgl::uiEventID
UIEVT_MAXIMIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_MAXIMIZE,   \/\/ Request for maximize$/;"	e	enum:fabgl::uiEventID
UIEVT_MINIMIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_MINIMIZE,   \/\/ Request for minimize$/;"	e	enum:fabgl::uiEventID
UIEVT_MOUSEBUTTONDOWN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_MOUSEBUTTONDOWN,$/;"	e	enum:fabgl::uiEventID
UIEVT_MOUSEBUTTONUP	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_MOUSEBUTTONUP,$/;"	e	enum:fabgl::uiEventID
UIEVT_MOUSEENTER	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_MOUSEENTER,$/;"	e	enum:fabgl::uiEventID
UIEVT_MOUSELEAVE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_MOUSELEAVE,$/;"	e	enum:fabgl::uiEventID
UIEVT_MOUSEMOVE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_MOUSEMOVE,$/;"	e	enum:fabgl::uiEventID
UIEVT_MOUSEWHEEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_MOUSEWHEEL,$/;"	e	enum:fabgl::uiEventID
UIEVT_NULL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_NULL,$/;"	e	enum:fabgl::uiEventID
UIEVT_PAINT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_PAINT,$/;"	e	enum:fabgl::uiEventID
UIEVT_QUIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_QUIT,       \/\/ Quit the application$/;"	e	enum:fabgl::uiEventID
UIEVT_RESHAPEWINDOW	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_RESHAPEWINDOW,$/;"	e	enum:fabgl::uiEventID
UIEVT_RESTORE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_RESTORE,    \/\/ Restore from UIEVT_MAXIMIZE or UIEVT_MINIMIZE$/;"	e	enum:fabgl::uiEventID
UIEVT_SETFOCUS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_SETFOCUS,$/;"	e	enum:fabgl::uiEventID
UIEVT_SETPOS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_SETPOS,$/;"	e	enum:fabgl::uiEventID
UIEVT_SETSIZE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_SETSIZE,$/;"	e	enum:fabgl::uiEventID
UIEVT_SHOW	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_SHOW,$/;"	e	enum:fabgl::uiEventID
UIEVT_TIMER	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  UIEVT_TIMER,$/;"	e	enum:fabgl::uiEventID
UIWINDOW_PARENTCENTER	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^#define UIWINDOW_PARENTCENTER /;"	d
UKLayout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.cpp	/^const KeyboardLayout UKLayout {$/;"	v	namespace:fabgl	typeref:typename:const KeyboardLayout
ULPWakeISR	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^void IRAM_ATTR PS2Controller::ULPWakeISR(void * arg)$/;"	f	class:fabgl::PS2Controller	typeref:typename:void IRAM_ATTR
ULP_code	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^const ulp_insn_t ULP_code[] = {$/;"	v	namespace:fabgl	typeref:typename:const ulp_insn_t[]
UN1_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define UN1_FLAG /;"	d	file:
UN3_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define UN3_FLAG /;"	d	file:
UN5_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define UN5_FLAG /;"	d	file:
UPDATES_PER_FULL_DITHER_CYCLE	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define UPDATES_PER_FULL_DITHER_CYCLE /;"	d
URXD_IN_IDX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^static const int URXD_IN_IDX[]    = { U0RXD_IN_IDX, U1RXD_IN_IDX, U2RXD_IN_IDX };$/;"	v	namespace:fabgl	typeref:typename:const int[]	file:
USBTerm	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  USBTerm,$/;"	e	enum:AbortReason
USED_LANES	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^#define USED_LANES /;"	d
USED_LANES	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define USED_LANES /;"	d
USED_LANES	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^#define USED_LANES /;"	d
USED_LANES	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^#define USED_LANES /;"	d
USERLIB_REL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t USERLIB_REL[] = {$/;"	v	typeref:typename:const uint8_t[]
USE_ASM_MACROS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define USE_ASM_MACROS$/;"	d
USE_CONT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^#define USE_CONT /;"	d
USE_CONT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^#define USE_CONT /;"	d
USE_GET_MILLISECOND_TIMER	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define USE_GET_MILLISECOND_TIMER$/;"	d
USLayout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.cpp	/^const KeyboardLayout USLayout {$/;"	v	namespace:fabgl	typeref:typename:const KeyboardLayout
US_PER_TICK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define US_PER_TICK /;"	d
UTXD_OUT_IDX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^static const int UTXD_OUT_IDX[]   = { U0TXD_OUT_IDX, U1TXD_OUT_IDX, U2TXD_OUT_IDX };$/;"	v	namespace:fabgl	typeref:typename:const int[]	file:
UncorrectedColor	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    UncorrectedColor=0xFFFFFF \/* 255, 255, 255 *\/$/;"	e	enum:__anon4cec7af20103
UncorrectedTemperature	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    UncorrectedTemperature=0xFFFFFF \/* 255, 255, 255 *\/$/;"	e	enum:__anon4cec7af20203
Undefined	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Undefined,  \/**< Undefined pixel format *\/$/;"	e	enum:fabgl::PixelFormat
Underline	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  GlyphOptions & Underline(bool value) { underline = value; return *this; }$/;"	f	union:fabgl::GlyphOptions	typeref:typename:GlyphOptions &
Underline	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Underline,          \/**< Underlined *\/$/;"	e	enum:fabgl::CharStyle
Unknown	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Unknown,$/;"	e	enum:fabgl::ChipPackage
UnknownPS2Device	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  UnknownPS2Device,             \/**< Unknown device or unable to connect to the device *\/$/;"	e	enum:fabgl::PS2DeviceType
Unlock	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^			void Unlock() {$/;"	f	struct:ClocklessController::showRGBInternal::InterruptLock	typeref:typename:void
UpscalePalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void UpscalePalette(const struct CHSVPalette16& srcpal16, struct CHSVPalette256& destpal256)$/;"	f	typeref:typename:void
UpscalePalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void UpscalePalette(const struct CHSVPalette16& srcpal16, struct CHSVPalette32& destpal32)$/;"	f	typeref:typename:void
UpscalePalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void UpscalePalette(const struct CHSVPalette32& srcpal32, struct CHSVPalette256& destpal256)$/;"	f	typeref:typename:void
UpscalePalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void UpscalePalette(const struct CRGBPalette16& srcpal16, struct CRGBPalette256& destpal256)$/;"	f	typeref:typename:void
UpscalePalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void UpscalePalette(const struct CRGBPalette16& srcpal16, struct CRGBPalette32& destpal32)$/;"	f	typeref:typename:void
UpscalePalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void UpscalePalette(const struct CRGBPalette32& srcpal32, struct CRGBPalette256& destpal256)$/;"	f	typeref:typename:void
Utf16	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp	/^namespace Utf16 {$/;"	n
Utf8	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Utf8.hpp	/^namespace Utf8 {$/;"	n
VALUE_IS_ARRAY	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  VALUE_IS_ARRAY = 0x40,$/;"	e	enum:__anon9bd8dbab0103
VALUE_IS_BOOLEAN	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  VALUE_IS_BOOLEAN = 0x06,$/;"	e	enum:__anon9bd8dbab0103
VALUE_IS_FLOAT	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  VALUE_IS_FLOAT = 0x0C,$/;"	e	enum:__anon9bd8dbab0103
VALUE_IS_LINKED_RAW	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  VALUE_IS_LINKED_RAW = 0x02,$/;"	e	enum:__anon9bd8dbab0103
VALUE_IS_LINKED_STRING	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  VALUE_IS_LINKED_STRING = 0x04,$/;"	e	enum:__anon9bd8dbab0103
VALUE_IS_NULL	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  VALUE_IS_NULL = 0,$/;"	e	enum:__anon9bd8dbab0103
VALUE_IS_OBJECT	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  VALUE_IS_OBJECT = 0x20,$/;"	e	enum:__anon9bd8dbab0103
VALUE_IS_OWNED_RAW	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  VALUE_IS_OWNED_RAW = 0x03,$/;"	e	enum:__anon9bd8dbab0103
VALUE_IS_OWNED_STRING	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  VALUE_IS_OWNED_STRING = 0x05,$/;"	e	enum:__anon9bd8dbab0103
VALUE_IS_SIGNED_INTEGER	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  VALUE_IS_SIGNED_INTEGER = 0x0A,$/;"	e	enum:__anon9bd8dbab0103
VALUE_IS_UNSIGNED_INTEGER	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  VALUE_IS_UNSIGNED_INTEGER = 0x08,$/;"	e	enum:__anon9bd8dbab0103
VALUE_MASK	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  VALUE_MASK = 0x7F,$/;"	e	enum:__anon9bd8dbab0103
VARIANT_MCK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define VARIANT_MCK /;"	d
VAR_WIDTH_EMBEDDED_FONTS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabfonts.cpp	/^static const FontInfo * VAR_WIDTH_EMBEDDED_FONTS[] = {$/;"	v	namespace:fabgl	typeref:typename:const FontInfo * []	file:
VBackPorch	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int16_t       VBackPorch;      \/**< Vertical Back Porch duration in lines *\/$/;"	m	struct:fabgl::VGATimings	typeref:typename:int16_t
VBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  VBar,           \/**<     *\/$/;"	e	enum:fabgl::uiScrollBarItem
VDE_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t VDE_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
VESA_640x350_85Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VESA_640x350_85Hz /;"	d
VESA_640x480_75Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VESA_640x480_75Hz /;"	d
VESA_720x400_85Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VESA_720x400_85Hz /;"	d
VESA_768x576_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VESA_768x576_60Hz /;"	d
VFrontPorch	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int16_t       VFrontPorch;     \/**< Vertical Front Porch duration in lines *\/$/;"	m	struct:fabgl::VGATimings	typeref:typename:int16_t
VGA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VGA,      \/**< VGA display. *\/$/;"	e	enum:fabgl::VideoMode
VGA16Controller	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^enum class ResolutionController { VGAController, VGA16Controller, VGA8Controller, VGA2Controller/;"	e	enum:ResolutionController
VGA16Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^VGA16Controller::VGA16Controller()$/;"	f	class:fabgl::VGA16Controller
VGA16Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.h	/^class VGA16Controller : public VGAPalettedController {$/;"	c	namespace:fabgl
VGA16_COLUMNSQUANTUM	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^#define VGA16_COLUMNSQUANTUM /;"	d	file:
VGA16_GETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^#define VGA16_GETPIXEL(/;"	d	file:
VGA16_GETPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^static inline __attribute__((always_inline)) int VGA16_GETPIXELINROW(uint8_t * row, int x) {$/;"	f	namespace:fabgl	typeref:typename:int	file:
VGA16_INVERTPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^#define VGA16_INVERTPIXELINROW(/;"	d	file:
VGA16_INVERT_PIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^#define VGA16_INVERT_PIXEL(/;"	d	file:
VGA16_LinesCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.h	/^#define VGA16_LinesCount /;"	d
VGA16_SETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^static inline __attribute__((always_inline)) void VGA16_SETPIXEL(int x, int y, int value) {$/;"	f	namespace:fabgl	typeref:typename:void	file:
VGA16_SETPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^static inline __attribute__((always_inline)) void VGA16_SETPIXELINROW(uint8_t * row, int x, int /;"	f	namespace:fabgl	typeref:typename:void	file:
VGA2Controller	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^enum class ResolutionController { VGAController, VGA16Controller, VGA8Controller, VGA2Controller/;"	e	enum:ResolutionController
VGA2Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^VGA2Controller::VGA2Controller()$/;"	f	class:fabgl::VGA2Controller
VGA2Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.h	/^class VGA2Controller : public VGAPalettedController {$/;"	c	namespace:fabgl
VGA2_COLUMNSQUANTUM	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^#define VGA2_COLUMNSQUANTUM /;"	d	file:
VGA2_GETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^#define VGA2_GETPIXEL(/;"	d	file:
VGA2_GETPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^static inline __attribute__((always_inline)) int VGA2_GETPIXELINROW(uint8_t * row, int x) {$/;"	f	namespace:fabgl	typeref:typename:int	file:
VGA2_INVERTPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^#define VGA2_INVERTPIXELINROW(/;"	d	file:
VGA2_INVERT_PIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^#define VGA2_INVERT_PIXEL(/;"	d	file:
VGA2_LinesCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.h	/^#define VGA2_LinesCount /;"	d
VGA2_SETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^static inline __attribute__((always_inline)) void VGA2_SETPIXEL(int x, int y, int value) {$/;"	f	namespace:fabgl	typeref:typename:void	file:
VGA2_SETPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^static inline __attribute__((always_inline)) void VGA2_SETPIXELINROW(uint8_t * row, int x, int v/;"	f	namespace:fabgl	typeref:typename:void	file:
VGA4Controller	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^enum class ResolutionController { VGAController, VGA16Controller, VGA8Controller, VGA2Controller/;"	e	enum:ResolutionController
VGA4Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^VGA4Controller::VGA4Controller()$/;"	f	class:fabgl::VGA4Controller
VGA4Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.h	/^class VGA4Controller : public VGAPalettedController {$/;"	c	namespace:fabgl
VGA4_COLUMNSQUANTUM	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^#define VGA4_COLUMNSQUANTUM /;"	d	file:
VGA4_GETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^#define VGA4_GETPIXEL(/;"	d	file:
VGA4_GETPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^static inline __attribute__((always_inline)) int VGA4_GETPIXELINROW(uint8_t * row, int x) {$/;"	f	namespace:fabgl	typeref:typename:int	file:
VGA4_INVERTPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^#define VGA4_INVERTPIXELINROW(/;"	d	file:
VGA4_INVERT_PIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^#define VGA4_INVERT_PIXEL(/;"	d	file:
VGA4_LinesCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.h	/^#define VGA4_LinesCount /;"	d
VGA4_SETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^static inline __attribute__((always_inline)) void VGA4_SETPIXEL(int x, int y, int value) {$/;"	f	namespace:fabgl	typeref:typename:void	file:
VGA4_SETPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^static inline __attribute__((always_inline)) void VGA4_SETPIXELINROW(uint8_t * row, int x, int v/;"	f	namespace:fabgl	typeref:typename:void	file:
VGA8Controller	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^enum class ResolutionController { VGAController, VGA16Controller, VGA8Controller, VGA2Controller/;"	e	enum:ResolutionController
VGA8Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^VGA8Controller::VGA8Controller()$/;"	f	class:fabgl::VGA8Controller
VGA8Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.h	/^class VGA8Controller : public VGAPalettedController {$/;"	c	namespace:fabgl
VGA8_COLUMNSQUANTUM	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^#define VGA8_COLUMNSQUANTUM /;"	d	file:
VGA8_GETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^#define VGA8_GETPIXEL(/;"	d	file:
VGA8_GETPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^static inline __attribute__((always_inline)) int VGA8_GETPIXELINROW(uint8_t * row, int x) {$/;"	f	namespace:fabgl	typeref:typename:int	file:
VGA8_INVERTPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^#define VGA8_INVERTPIXELINROW(/;"	d	file:
VGA8_INVERT_PIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^#define VGA8_INVERT_PIXEL(/;"	d	file:
VGA8_LinesCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.h	/^#define VGA8_LinesCount /;"	d
VGA8_SETPIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^static inline __attribute__((always_inline)) void VGA8_SETPIXEL(int x, int y, int value) {$/;"	f	namespace:fabgl	typeref:typename:void	file:
VGA8_SETPIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^static inline __attribute__((always_inline)) void VGA8_SETPIXELINROW(uint8_t * row, int x, int v/;"	f	namespace:fabgl	typeref:typename:void	file:
VGABaseController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^VGABaseController::VGABaseController()$/;"	f	class:fabgl::VGABaseController
VGABaseController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^class VGABaseController : public GenericBitmappedDisplayController {$/;"	c	namespace:fabgl
VGAController	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^enum class ResolutionController { VGAController, VGA16Controller, VGA8Controller, VGA2Controller/;"	e	enum:ResolutionController
VGAController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^VGAController::VGAController()$/;"	f	class:fabgl::VGAController
VGAController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.h	/^class VGAController : public VGABaseController {$/;"	c	namespace:fabgl
VGADirectController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^VGADirectController::VGADirectController(bool autoRun)$/;"	f	class:fabgl::VGADirectController
VGADirectController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^class VGADirectController : public VGABaseController {$/;"	c	namespace:fabgl
VGAHeight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int VGAHeight          = 384;$/;"	m	class:MOS6561	typeref:typename:const int
VGAPalettedController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^VGAPalettedController::VGAPalettedController(int linesCount, int columnsQuantum, NativePixelForm/;"	f	class:fabgl::VGAPalettedController
VGAPalettedController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^class VGAPalettedController : public VGABaseController {$/;"	c	namespace:fabgl
VGAScanStart	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^enum VGAScanStart {$/;"	g	namespace:fabgl
VGATextController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^VGATextController::VGATextController()$/;"	f	class:fabgl::VGATextController
VGATextController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^class VGATextController  : public TextualDisplayController {$/;"	c	namespace:fabgl
VGATextController_HEIGHT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^#define VGATextController_HEIGHT /;"	d
VGATextController_MODELINE	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^#define VGATextController_MODELINE /;"	d
VGATextController_WIDTH	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^#define VGATextController_WIDTH /;"	d
VGATimings	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^struct VGATimings {$/;"	s	namespace:fabgl
VGAWidth	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int VGAWidth           = 256;$/;"	m	class:MOS6561	typeref:typename:const int
VGA_256x192_50Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_256x192_50Hz /;"	d
VGA_256x384_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_256x384_60Hz /;"	d
VGA_320x200_60HzD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_320x200_60HzD /;"	d
VGA_320x200_70Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_320x200_70Hz /;"	d
VGA_320x200_75Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_320x200_75Hz /;"	d
VGA_320x200_75HzRetro	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_320x200_75HzRetro /;"	d
VGA_400x300_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_400x300_60Hz /;"	d
VGA_480x300_75Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_480x300_75Hz /;"	d
VGA_512x192_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_512x192_60Hz /;"	d
VGA_512x384_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_512x384_60Hz /;"	d
VGA_512x448_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_512x448_60Hz /;"	d
VGA_512x512_58Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_512x512_58Hz /;"	d
VGA_640x200_60HzD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x200_60HzD /;"	d
VGA_640x200_70Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x200_70Hz /;"	d
VGA_640x200_70HzRetro	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x200_70HzRetro /;"	d
VGA_640x240_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x240_60Hz /;"	d
VGA_640x350_70Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x350_70Hz /;"	d
VGA_640x350_70HzAlt1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x350_70HzAlt1 /;"	d
VGA_640x382_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x382_60Hz /;"	d
VGA_640x384_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x384_60Hz /;"	d
VGA_640x400_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x400_60Hz /;"	d
VGA_640x400_70Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x400_70Hz /;"	d
VGA_640x480_60Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x480_60Hz /;"	d
VGA_640x480_60HzAlt1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x480_60HzAlt1 /;"	d
VGA_640x480_60HzD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x480_60HzD /;"	d
VGA_640x480_73Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_640x480_73Hz /;"	d
VGA_720x348_50HzD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_720x348_50HzD /;"	d
VGA_720x348_59HzD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_720x348_59HzD /;"	d
VGA_720x348_73Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_720x348_73Hz /;"	d
VGA_720x350_70Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_720x350_70Hz /;"	d
VGA_720x400_70Hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabglconf.h	/^#define VGA_720x400_70Hz /;"	d
VGA_BLUE_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^#define VGA_BLUE_BIT /;"	d
VGA_GREEN_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^#define VGA_GREEN_BIT /;"	d
VGA_HSYNC_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^#define VGA_HSYNC_BIT /;"	d
VGA_INVERT_PIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^#define VGA_INVERT_PIXEL(/;"	d
VGA_PIXEL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^#define VGA_PIXEL(/;"	d
VGA_PIXELINROW	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^#define VGA_PIXELINROW(/;"	d
VGA_RED_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^#define VGA_RED_BIT /;"	d
VGA_SYNC_MASK	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^#define VGA_SYNC_MASK /;"	d
VGA_VSYNC_BIT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^#define VGA_VSYNC_BIT /;"	d
VIA1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  VIA6522 & VIA1() { return m_VIA1; }$/;"	f	class:Machine	typeref:typename:VIA6522 &
VIA1PortIn	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::VIA1PortIn(void * context, VIA6522 * via, VIA6522Port port)$/;"	f	class:Machine	typeref:typename:void
VIA1PortOut	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::VIA1PortOut(void * context, VIA6522 * via, VIA6522Port port)$/;"	f	class:Machine	typeref:typename:void
VIA2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  VIA6522 & VIA2() { return m_VIA2; }$/;"	f	class:Machine	typeref:typename:VIA6522 &
VIA2PortIn	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::VIA2PortIn(void * context, VIA6522 * via, VIA6522Port port)$/;"	f	class:Machine	typeref:typename:void
VIA2PortOut	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::VIA2PortOut(void * context, VIA6522 * via, VIA6522Port port)$/;"	f	class:Machine	typeref:typename:void
VIA6522	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.cpp	/^VIA6522::VIA6522(int tag)$/;"	f	class:fabgl::VIA6522
VIA6522	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^class VIA6522 {$/;"	c	namespace:fabgl
VIA6522Port	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^enum class VIA6522Port {$/;"	g	namespace:fabgl
VIAREG2STR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^static const char * VIAREG2STR[] = { "ORB_IRB", "ORA_IRA", "DDRB", "DDRA", "T1_C_LO", "T1_C_HI",/;"	v	namespace:fabgl	typeref:typename:const char * []
VIA_ACR_T1_FREERUN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_ACR_T1_FREERUN /;"	d
VIA_ACR_T1_OUTENABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_ACR_T1_OUTENABLE /;"	d
VIA_ACR_T2_COUNTPULSES	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_ACR_T2_COUNTPULSES /;"	d
VIA_IER_CA1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_IER_CA1 /;"	d
VIA_IER_CA2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_IER_CA2 /;"	d
VIA_IER_CB1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_IER_CB1 /;"	d
VIA_IER_CB2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_IER_CB2 /;"	d
VIA_IER_CTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_IER_CTRL /;"	d
VIA_IER_SR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_IER_SR /;"	d
VIA_IER_T1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_IER_T1 /;"	d
VIA_IER_T2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_IER_T2 /;"	d
VIA_REG_ACR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_ACR /;"	d
VIA_REG_DDRA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_DDRA /;"	d
VIA_REG_DDRB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_DDRB /;"	d
VIA_REG_IER	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_IER /;"	d
VIA_REG_IFR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_IFR /;"	d
VIA_REG_ORA_IRA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_ORA_IRA /;"	d
VIA_REG_ORA_IRA_NH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_ORA_IRA_NH /;"	d
VIA_REG_ORB_IRB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_ORB_IRB /;"	d
VIA_REG_PCR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_PCR /;"	d
VIA_REG_SR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_SR /;"	d
VIA_REG_T1_C_HI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_T1_C_HI /;"	d
VIA_REG_T1_C_LO	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_T1_C_LO /;"	d
VIA_REG_T1_L_HI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_T1_L_HI /;"	d
VIA_REG_T1_L_LO	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_T1_L_LO /;"	d
VIA_REG_T2_C_HI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_T2_C_HI /;"	d
VIA_REG_T2_C_LO	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^#define VIA_REG_T2_C_LO /;"	d
VIC	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  MOS6561 & VIC()  { return m_VIC; }$/;"	f	class:Machine	typeref:typename:MOS6561 &
VICNoiseGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^VICNoiseGenerator::VICNoiseGenerator()$/;"	f	class:fabgl::VICNoiseGenerator
VICNoiseGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^class VICNoiseGenerator : public WaveformGenerator {$/;"	c	namespace:fabgl
VIDEOMEMSIZE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^#define VIDEOMEMSIZE /;"	d
VIDEOMEM_END	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define VIDEOMEM_END /;"	d	file:
VIDEOMEM_START	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define VIDEOMEM_START /;"	d	file:
VIRTUAL_BITS	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define VIRTUAL_BITS /;"	d
VK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  VirtualKey VK;         \/**< Virtual key *\/$/;"	m	struct:fabgl::uiKeyEventInfo	typeref:typename:VirtualKey
VK2ASCII1252	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.cpp	/^const VirtualKeyToASCII VK2ASCII1252[] = {$/;"	v	namespace:fabgl	typeref:typename:const VirtualKeyToASCII[]
VK2ASCII437	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.cpp	/^const VirtualKeyToASCII VK2ASCII437[] = {$/;"	v	namespace:fabgl	typeref:typename:const VirtualKeyToASCII[]
VK_0	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_0,               \/**< Number 0 *\/$/;"	e	enum:fabgl::VirtualKey
VK_1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_1,               \/**< Number 1 *\/$/;"	e	enum:fabgl::VirtualKey
VK_2	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_2,               \/**< Number 2 *\/$/;"	e	enum:fabgl::VirtualKey
VK_3	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_3,               \/**< Number 3 *\/$/;"	e	enum:fabgl::VirtualKey
VK_4	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_4,               \/**< Number 4 *\/$/;"	e	enum:fabgl::VirtualKey
VK_5	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_5,               \/**< Number 5 *\/$/;"	e	enum:fabgl::VirtualKey
VK_6	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_6,               \/**< Number 6 *\/$/;"	e	enum:fabgl::VirtualKey
VK_7	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_7,               \/**< Number 7 *\/$/;"	e	enum:fabgl::VirtualKey
VK_8	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_8,               \/**< Number 8 *\/$/;"	e	enum:fabgl::VirtualKey
VK_9	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_9,               \/**< Number 9 *\/$/;"	e	enum:fabgl::VirtualKey
VK_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_A,               \/**< Upper case letter 'A' *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTEACCENT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTEACCENT,     \/**< Acute accent: ´ *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTE_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTE_A,		      \/**< Acute A: Á *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTE_E	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTE_E,		      \/**< Acute E: É *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTE_I	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTE_I,		      \/**< Acute I: Í *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTE_O	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTE_O,		      \/**< Acute O: Ó *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTE_U	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTE_U,		      \/**< Acute U: Ú *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTE_Y	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTE_Y,         \/**< Acute Y: Ý *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTE_a	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTE_a,         \/**< Acute a: á *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTE_e	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTE_e,         \/**< Acute e: é *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTE_i	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTE_i,         \/**< Acute i: í *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTE_o	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTE_o,         \/**< Acute o: ó *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTE_u	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTE_u,         \/**< Acute u: ú *\/$/;"	e	enum:fabgl::VirtualKey
VK_ACUTE_y	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ACUTE_y,         \/**< Acute y: ý *\/$/;"	e	enum:fabgl::VirtualKey
VK_AELIG	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_AELIG,           \/** Upper case aelig  : Æ *\/$/;"	e	enum:fabgl::VirtualKey
VK_AMPERSAND	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_AMPERSAND,       \/**< Ampersand: & *\/$/;"	e	enum:fabgl::VirtualKey
VK_APPLICATION	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_APPLICATION,     \/**< APPLICATION \/ MENU key *\/$/;"	e	enum:fabgl::VirtualKey
VK_ARING	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ARING,           \/** Upper case aring  : Å *\/$/;"	e	enum:fabgl::VirtualKey
VK_ASCII	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ASCII,           \/**< Specifies an ASCII code - used when virtual key is embedded in Virtu/;"	e	enum:fabgl::VirtualKey
VK_ASTERISK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ASTERISK,        \/**< Asterisk: * *\/$/;"	e	enum:fabgl::VirtualKey
VK_AT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_AT,              \/**< At: @ *\/$/;"	e	enum:fabgl::VirtualKey
VK_B	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_B,               \/**< Upper case letter 'B' *\/$/;"	e	enum:fabgl::VirtualKey
VK_BACKSLASH	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_BACKSLASH,       \/**< Backslash: \\ *\/$/;"	e	enum:fabgl::VirtualKey
VK_BACKSPACE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_BACKSPACE,       \/**< Backspace *\/$/;"	e	enum:fabgl::VirtualKey
VK_BREAK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_BREAK,           \/**< CTRL + PAUSE *\/$/;"	e	enum:fabgl::VirtualKey
VK_C	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_C,               \/**< Upper case letter 'C' *\/$/;"	e	enum:fabgl::VirtualKey
VK_CAPSLOCK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CAPSLOCK,        \/**< CAPSLOCK *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET,           \/**< Caret: ^ *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET_A,		      \/**< Caret A: Â *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET_E	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET_E,		      \/**< Caret E: Ê *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET_I	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET_I,		      \/**< Caret I: Î *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET_O	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET_O,		      \/**< Caret O: Ô *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET_U	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET_U,		      \/**< Caret U: Û *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET_Y	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET_Y,         \/**< Caret Y: Ŷ *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET_a	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET_a,		      \/**< Caret a: â *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET_e	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET_e,		      \/**< Caret e: ê *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET_i	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET_i,		      \/**< Caret i: î *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET_o	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET_o,		      \/**< Caret o: ô *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET_u	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET_u,		      \/**< Caret u: û *\/$/;"	e	enum:fabgl::VirtualKey
VK_CARET_y	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CARET_y,         \/**< Caret y: ŷ *\/$/;"	e	enum:fabgl::VirtualKey
VK_CEDILLA_C	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CEDILLA_C,       \/**< Cedilla C: Ç *\/$/;"	e	enum:fabgl::VirtualKey
VK_CEDILLA_c	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CEDILLA_c,       \/**< Cedilla c: ç *\/$/;"	e	enum:fabgl::VirtualKey
VK_COLON	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_COLON,           \/**< Colon: : *\/$/;"	e	enum:fabgl::VirtualKey
VK_COMMA	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_COMMA,           \/**< Comma: , *\/$/;"	e	enum:fabgl::VirtualKey
VK_CURRENCY	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_CURRENCY,        \/**< Currency   : ¤ *\/$/;"	e	enum:fabgl::VirtualKey
VK_D	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_D,               \/**< Upper case letter 'D' *\/$/;"	e	enum:fabgl::VirtualKey
VK_DEGREE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_DEGREE,          \/**< Degree: ° *\/$/;"	e	enum:fabgl::VirtualKey
VK_DELETE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_DELETE,          \/**< DEL *\/$/;"	e	enum:fabgl::VirtualKey
VK_DIAERESIS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_DIAERESIS,	  	  \/**< Diaeresis  : ¨ *\/$/;"	e	enum:fabgl::VirtualKey
VK_DOLLAR	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_DOLLAR,          \/**< Dollar: $ *\/$/;"	e	enum:fabgl::VirtualKey
VK_DOWN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_DOWN,            \/**< Cursor DOWN *\/$/;"	e	enum:fabgl::VirtualKey
VK_E	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_E,               \/**< Upper case letter 'E' *\/$/;"	e	enum:fabgl::VirtualKey
VK_END	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_END,             \/**< END *\/$/;"	e	enum:fabgl::VirtualKey
VK_EQUALS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_EQUALS,          \/**< Equals: = *\/$/;"	e	enum:fabgl::VirtualKey
VK_ESCAPE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ESCAPE,          \/**< ESC *\/$/;"	e	enum:fabgl::VirtualKey
VK_ESZETT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_ESZETT,          \/**< Eszett: ß *\/$/;"	e	enum:fabgl::VirtualKey
VK_EURO	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_EURO,            \/**< Euro: € *\/$/;"	e	enum:fabgl::VirtualKey
VK_EXCLAIM	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_EXCLAIM,         \/**< Exclamation mark: ! *\/$/;"	e	enum:fabgl::VirtualKey
VK_EXCLAIM_INV	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_EXCLAIM_INV,     \/**< Inverted exclamation mark: ! *\/$/;"	e	enum:fabgl::VirtualKey
VK_F	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F,               \/**< Upper case letter 'F' *\/$/;"	e	enum:fabgl::VirtualKey
VK_F1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F1,              \/**< F1 function key *\/$/;"	e	enum:fabgl::VirtualKey
VK_F10	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F10,             \/**< F10 function key *\/$/;"	e	enum:fabgl::VirtualKey
VK_F11	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F11,             \/**< F11 function key *\/$/;"	e	enum:fabgl::VirtualKey
VK_F12	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F12,             \/**< F12 function key *\/$/;"	e	enum:fabgl::VirtualKey
VK_F2	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F2,              \/**< F2 function key *\/$/;"	e	enum:fabgl::VirtualKey
VK_F3	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F3,              \/**< F3 function key *\/$/;"	e	enum:fabgl::VirtualKey
VK_F4	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F4,              \/**< F4 function key *\/$/;"	e	enum:fabgl::VirtualKey
VK_F5	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F5,              \/**< F5 function key *\/$/;"	e	enum:fabgl::VirtualKey
VK_F6	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F6,              \/**< F6 function key *\/$/;"	e	enum:fabgl::VirtualKey
VK_F7	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F7,              \/**< F7 function key *\/$/;"	e	enum:fabgl::VirtualKey
VK_F8	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F8,              \/**< F8 function key *\/$/;"	e	enum:fabgl::VirtualKey
VK_F9	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_F9,              \/**< F9 function key *\/$/;"	e	enum:fabgl::VirtualKey
VK_G	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_G,               \/**< Upper case letter 'G' *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVEACCENT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVEACCENT,     \/**< Grave accent: ` *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVE_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVE_A,		      \/**< Grave A: À *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVE_E	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVE_E,		      \/**< Grave E: È *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVE_I	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVE_I,		      \/**< Grave I: Ì *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVE_O	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVE_O,		      \/**< Grave O: Ò *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVE_U	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVE_U,		      \/**< Grave U: Ù *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVE_Y	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVE_Y,         \/**< Grave Y: Ỳ *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVE_a	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVE_a,         \/**< Grave a: à *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVE_e	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVE_e,         \/**< Grave e: è *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVE_i	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVE_i,         \/**< Grave i: ì *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVE_o	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVE_o,         \/**< Grave o: ò *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVE_u	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVE_u,         \/**< Grave u: ù *\/$/;"	e	enum:fabgl::VirtualKey
VK_GRAVE_y	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GRAVE_y,         \/**< Grave y: ỳ *\/$/;"	e	enum:fabgl::VirtualKey
VK_GREATER	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_GREATER,         \/**< Greater: > *\/$/;"	e	enum:fabgl::VirtualKey
VK_H	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_H,               \/**< Upper case letter 'H' *\/$/;"	e	enum:fabgl::VirtualKey
VK_HANKAKU_ZENKAKU_KANJI	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_HANKAKU_ZENKAKU_KANJI,$/;"	e	enum:fabgl::VirtualKey
VK_HASH	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_HASH,            \/**< Hash: # *\/$/;"	e	enum:fabgl::VirtualKey
VK_HENKAN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_HENKAN,$/;"	e	enum:fabgl::VirtualKey
VK_HOME	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_HOME,            \/**< HOME *\/$/;"	e	enum:fabgl::VirtualKey
VK_I	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_I,               \/**< Upper case letter 'I' *\/$/;"	e	enum:fabgl::VirtualKey
VK_INSERT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_INSERT,          \/**< INS *\/$/;"	e	enum:fabgl::VirtualKey
VK_INTERPUNCT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_INTERPUNCT,	    \/**< Interpunct : · *\/$/;"	e	enum:fabgl::VirtualKey
VK_J	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_J,               \/**< Upper case letter 'J' *\/$/;"	e	enum:fabgl::VirtualKey
VK_K	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_K,               \/**< Upper case letter 'K' *\/$/;"	e	enum:fabgl::VirtualKey
VK_KATAKANA_HIRAGANA_ROMAJI	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KATAKANA_HIRAGANA_ROMAJI,$/;"	e	enum:fabgl::VirtualKey
VK_KP_0	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_0,            \/**< Keypad number 0 *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_1,            \/**< Keypad number 1 *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_2	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_2,            \/**< Keypad number 2 *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_3	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_3,            \/**< Keypad number 3 *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_4	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_4,            \/**< Keypad number 4 *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_5	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_5,            \/**< Keypad number 5 *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_6	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_6,            \/**< Keypad number 6 *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_7	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_7,            \/**< Keypad number 7 *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_8	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_8,            \/**< Keypad number 8 *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_9	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_9,            \/**< Keypad number 9 *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_CENTER	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_CENTER,       \/**< Keypad CENTER key *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_DELETE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_DELETE,       \/**< Keypad DEL *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_DIVIDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_DIVIDE,       \/**< Keypad divide: \/ *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_DOWN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_DOWN,         \/**< Keypad cursor DOWN *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_END	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_END,          \/**< Keypad END *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_ENTER	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_ENTER,        \/**< Keypad ENTER *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_HOME	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_HOME,         \/**< Keypad HOME *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_INSERT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_INSERT,       \/**< Keypad INS *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_LEFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_LEFT,         \/**< Keypad cursor LEFT *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_MINUS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_MINUS,        \/**< Keypad minus: - *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_MULTIPLY	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_MULTIPLY,     \/**< Keypad multiply: * *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_PAGEDOWN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_PAGEDOWN,     \/**< Keypad PAGEDOWN *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_PAGEUP	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_PAGEUP,       \/**< Keypad PAGEUP *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_PERIOD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_PERIOD,       \/**< Keypad period: . *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_PLUS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_PLUS,         \/**< Keypad plus: + *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_RIGHT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_RIGHT,        \/**< Keypad cursor RIGHT *\/$/;"	e	enum:fabgl::VirtualKey
VK_KP_UP	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_KP_UP,           \/**< Keypad cursor UP  *\/$/;"	e	enum:fabgl::VirtualKey
VK_L	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_L,               \/**< Upper case letter 'L' *\/$/;"	e	enum:fabgl::VirtualKey
VK_LALT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_LALT,            \/**< Left ALT *\/$/;"	e	enum:fabgl::VirtualKey
VK_LAST	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_LAST,            \/\/ marks the last virtual key$/;"	e	enum:fabgl::VirtualKey
VK_LCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_LCTRL,           \/**< Left CTRL *\/$/;"	e	enum:fabgl::VirtualKey
VK_LEFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_LEFT,            \/**< Cursor LEFT *\/$/;"	e	enum:fabgl::VirtualKey
VK_LEFTBRACE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_LEFTBRACE,       \/**< Left brace: { *\/$/;"	e	enum:fabgl::VirtualKey
VK_LEFTBRACKET	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_LEFTBRACKET,     \/**< Left bracket: [ *\/$/;"	e	enum:fabgl::VirtualKey
VK_LEFTPAREN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_LEFTPAREN,       \/**< Left parenthesis: ( *\/$/;"	e	enum:fabgl::VirtualKey
VK_LESS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_LESS,            \/**< Less: < *\/$/;"	e	enum:fabgl::VirtualKey
VK_LGUI	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_LGUI,            \/**< Left GUI *\/$/;"	e	enum:fabgl::VirtualKey
VK_LSHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_LSHIFT,          \/**< Left SHIFT *\/$/;"	e	enum:fabgl::VirtualKey
VK_M	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_M,               \/**< Upper case letter 'M' *\/$/;"	e	enum:fabgl::VirtualKey
VK_MINUS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_MINUS,           \/**< Minus: - *\/$/;"	e	enum:fabgl::VirtualKey
VK_MU	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_MU,              \/**< Mu         : µ *\/$/;"	e	enum:fabgl::VirtualKey
VK_MUHENKAN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_MUHENKAN,$/;"	e	enum:fabgl::VirtualKey
VK_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_N,               \/**< Upper case letter 'N' *\/$/;"	e	enum:fabgl::VirtualKey
VK_NEGATION	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_NEGATION,        \/**< Negation: ¬ *\/$/;"	e	enum:fabgl::VirtualKey
VK_NONE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_NONE,            \/**< No character (marks the first virtual key) *\/$/;"	e	enum:fabgl::VirtualKey
VK_NUMLOCK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_NUMLOCK,         \/**< NUMLOCK *\/$/;"	e	enum:fabgl::VirtualKey
VK_O	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_O,               \/**< Upper case letter 'O' *\/$/;"	e	enum:fabgl::VirtualKey
VK_OSLASH	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_OSLASH,          \/** Upper case oslash : Ø *\/$/;"	e	enum:fabgl::VirtualKey
VK_P	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_P,               \/**< Upper case letter 'P' *\/$/;"	e	enum:fabgl::VirtualKey
VK_PAGEDOWN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_PAGEDOWN,        \/**< PAGEDOWN *\/$/;"	e	enum:fabgl::VirtualKey
VK_PAGEUP	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_PAGEUP,          \/**< PAGEUP *\/$/;"	e	enum:fabgl::VirtualKey
VK_PAUSE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_PAUSE,           \/**< PAUSE *\/$/;"	e	enum:fabgl::VirtualKey
VK_PERCENT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_PERCENT,         \/**< Percent: % *\/$/;"	e	enum:fabgl::VirtualKey
VK_PERIOD	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_PERIOD,          \/**< Period: . *\/$/;"	e	enum:fabgl::VirtualKey
VK_PLUS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_PLUS,            \/**< Plus: + *\/$/;"	e	enum:fabgl::VirtualKey
VK_POUND	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_POUND,           \/**< Pound: £ *\/$/;"	e	enum:fabgl::VirtualKey
VK_PRINTSCREEN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_PRINTSCREEN,     \/**< PRINTSCREEN *\/$/;"	e	enum:fabgl::VirtualKey
VK_Q	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_Q,               \/**< Upper case letter 'Q' *\/$/;"	e	enum:fabgl::VirtualKey
VK_QUESTION	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_QUESTION,        \/**< Question mark: ? *\/$/;"	e	enum:fabgl::VirtualKey
VK_QUESTION_INV	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_QUESTION_INV,    \/**< Inverted question mark : ? *\/$/;"	e	enum:fabgl::VirtualKey
VK_QUOTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_QUOTE,           \/**< Quote: ' *\/$/;"	e	enum:fabgl::VirtualKey
VK_QUOTEDBL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_QUOTEDBL,        \/**< Double quote: " *\/$/;"	e	enum:fabgl::VirtualKey
VK_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_R,               \/**< Upper case letter 'R' *\/$/;"	e	enum:fabgl::VirtualKey
VK_RALT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_RALT,            \/**< Right ALT *\/$/;"	e	enum:fabgl::VirtualKey
VK_RCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_RCTRL,           \/**< Right CTRL *\/$/;"	e	enum:fabgl::VirtualKey
VK_RETURN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_RETURN,          \/**< RETURN *\/$/;"	e	enum:fabgl::VirtualKey
VK_RGUI	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_RGUI,            \/**< Right GUI *\/$/;"	e	enum:fabgl::VirtualKey
VK_RIGHT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_RIGHT,           \/**< Cursor RIGHT *\/$/;"	e	enum:fabgl::VirtualKey
VK_RIGHTBRACE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_RIGHTBRACE,      \/**< Right brace: } *\/$/;"	e	enum:fabgl::VirtualKey
VK_RIGHTBRACKET	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_RIGHTBRACKET,    \/**< Right bracket: ] *\/$/;"	e	enum:fabgl::VirtualKey
VK_RIGHTPAREN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_RIGHTPAREN,      \/**< Right parenthesis: ) *\/$/;"	e	enum:fabgl::VirtualKey
VK_RSHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_RSHIFT,          \/**< Right SHIFT *\/$/;"	e	enum:fabgl::VirtualKey
VK_S	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_S,               \/**< Upper case letter 'S' *\/$/;"	e	enum:fabgl::VirtualKey
VK_SCROLLLOCK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_SCROLLLOCK,      \/**< SCROLLLOCK *\/$/;"	e	enum:fabgl::VirtualKey
VK_SECTION	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_SECTION,         \/**< Section: § *\/$/;"	e	enum:fabgl::VirtualKey
VK_SEMICOLON	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_SEMICOLON,       \/**< Semicolon: ; *\/$/;"	e	enum:fabgl::VirtualKey
VK_SHIFT_0	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_SHIFT_0,$/;"	e	enum:fabgl::VirtualKey
VK_SLASH	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_SLASH,           \/**< Slash: \/ *\/$/;"	e	enum:fabgl::VirtualKey
VK_SPACE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_SPACE,           \/**< Space *\/$/;"	e	enum:fabgl::VirtualKey
VK_SQUARE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_SQUARE,          \/**< Square     : ² *\/$/;"	e	enum:fabgl::VirtualKey
VK_SYSREQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_SYSREQ,          \/**< SYSREQ *\/$/;"	e	enum:fabgl::VirtualKey
VK_T	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_T,               \/**< Upper case letter 'T' *\/$/;"	e	enum:fabgl::VirtualKey
VK_TAB	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_TAB,             \/**< TAB *\/$/;"	e	enum:fabgl::VirtualKey
VK_TILDE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_TILDE,           \/**< Tilde: ~ *\/$/;"	e	enum:fabgl::VirtualKey
VK_TILDE_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_TILDE_A,         \/**< Upper case tilde A: Ã *\/$/;"	e	enum:fabgl::VirtualKey
VK_TILDE_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_TILDE_N,		      \/**< Upper case tilde N: Ñ *\/$/;"	e	enum:fabgl::VirtualKey
VK_TILDE_O	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_TILDE_O,         \/**< Upper case tilde O: Õ *\/$/;"	e	enum:fabgl::VirtualKey
VK_TILDE_a	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_TILDE_a,         \/**< Lower case tilde a: ã *\/$/;"	e	enum:fabgl::VirtualKey
VK_TILDE_n	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_TILDE_n,		      \/**< Lower case tilde n: ñ *\/$/;"	e	enum:fabgl::VirtualKey
VK_TILDE_o	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_TILDE_o,         \/**< Lower case tilde o: õ *\/$/;"	e	enum:fabgl::VirtualKey
VK_U	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_U,               \/**< Upper case letter 'U' *\/$/;"	e	enum:fabgl::VirtualKey
VK_UMLAUT_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UMLAUT_A,        \/**< Diaeresis A: Ä *\/$/;"	e	enum:fabgl::VirtualKey
VK_UMLAUT_E	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UMLAUT_E,        \/**< Diaeresis E: Ë *\/$/;"	e	enum:fabgl::VirtualKey
VK_UMLAUT_I	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UMLAUT_I,        \/**< Diaeresis I: Ï *\/$/;"	e	enum:fabgl::VirtualKey
VK_UMLAUT_O	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UMLAUT_O,        \/**< Diaeresis O: Ö *\/$/;"	e	enum:fabgl::VirtualKey
VK_UMLAUT_U	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UMLAUT_U,        \/**< Diaeresis U: Ü *\/$/;"	e	enum:fabgl::VirtualKey
VK_UMLAUT_Y	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UMLAUT_Y,        \/**< Diaeresis Y: Ÿ *\/$/;"	e	enum:fabgl::VirtualKey
VK_UMLAUT_a	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UMLAUT_a,        \/**< Diaeresis a: ä *\/$/;"	e	enum:fabgl::VirtualKey
VK_UMLAUT_e	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UMLAUT_e,        \/**< Diaeresis e: ë *\/$/;"	e	enum:fabgl::VirtualKey
VK_UMLAUT_i	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UMLAUT_i,        \/**< Diaeresis i: ï *\/$/;"	e	enum:fabgl::VirtualKey
VK_UMLAUT_o	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UMLAUT_o,        \/**< Diaeresis o: ö *\/$/;"	e	enum:fabgl::VirtualKey
VK_UMLAUT_u	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UMLAUT_u,        \/**< Diaeresis u: ü *\/$/;"	e	enum:fabgl::VirtualKey
VK_UMLAUT_y	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UMLAUT_y,        \/**< Diaeresis y: ÿ *\/$/;"	e	enum:fabgl::VirtualKey
VK_UNDERSCORE	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UNDERSCORE,      \/**< Underscore: _ *\/$/;"	e	enum:fabgl::VirtualKey
VK_UP	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UP,              \/**< Cursor UP *\/$/;"	e	enum:fabgl::VirtualKey
VK_UPPER_a	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_UPPER_a,		      \/**< primera: a *\/$/;"	e	enum:fabgl::VirtualKey
VK_V	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_V,               \/**< Upper case letter 'V' *\/$/;"	e	enum:fabgl::VirtualKey
VK_VERTICALBAR	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_VERTICALBAR,     \/**< Vertical bar: | *\/$/;"	e	enum:fabgl::VirtualKey
VK_W	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_W,               \/**< Upper case letter 'W' *\/$/;"	e	enum:fabgl::VirtualKey
VK_X	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_X,               \/**< Upper case letter 'X' *\/$/;"	e	enum:fabgl::VirtualKey
VK_Y	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_Y,               \/**< Upper case letter 'Y' *\/$/;"	e	enum:fabgl::VirtualKey
VK_YEN	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_YEN,$/;"	e	enum:fabgl::VirtualKey
VK_Z	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_Z,               \/**< Upper case letter 'Z' *\/$/;"	e	enum:fabgl::VirtualKey
VK_a	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_a,               \/**< Lower case letter 'a' *\/$/;"	e	enum:fabgl::VirtualKey
VK_aelig	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_aelig,           \/** Lower case aelig  : æ *\/$/;"	e	enum:fabgl::VirtualKey
VK_aring	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_aring,           \/** Lower case aring  : å *\/$/;"	e	enum:fabgl::VirtualKey
VK_b	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_b,               \/**< Lower case letter 'b' *\/$/;"	e	enum:fabgl::VirtualKey
VK_c	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_c,               \/**< Lower case letter 'c' *\/$/;"	e	enum:fabgl::VirtualKey
VK_d	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_d,               \/**< Lower case letter 'd' *\/$/;"	e	enum:fabgl::VirtualKey
VK_e	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_e,               \/**< Lower case letter 'e' *\/$/;"	e	enum:fabgl::VirtualKey
VK_f	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_f,               \/**< Lower case letter 'f' *\/$/;"	e	enum:fabgl::VirtualKey
VK_g	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_g,               \/**< Lower case letter 'g' *\/$/;"	e	enum:fabgl::VirtualKey
VK_h	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_h,               \/**< Lower case letter 'h' *\/$/;"	e	enum:fabgl::VirtualKey
VK_i	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_i,               \/**< Lower case letter 'i' *\/$/;"	e	enum:fabgl::VirtualKey
VK_j	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_j,               \/**< Lower case letter 'j' *\/$/;"	e	enum:fabgl::VirtualKey
VK_k	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_k,               \/**< Lower case letter 'k' *\/$/;"	e	enum:fabgl::VirtualKey
VK_l	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_l,               \/**< Lower case letter 'l' *\/$/;"	e	enum:fabgl::VirtualKey
VK_m	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_m,               \/**< Lower case letter 'm' *\/$/;"	e	enum:fabgl::VirtualKey
VK_n	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_n,               \/**< Lower case letter 'n' *\/$/;"	e	enum:fabgl::VirtualKey
VK_o	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_o,               \/**< Lower case letter 'o' *\/$/;"	e	enum:fabgl::VirtualKey
VK_oslash	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_oslash,          \/** Lower case oslash : ø *\/$/;"	e	enum:fabgl::VirtualKey
VK_p	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_p,               \/**< Lower case letter 'p' *\/$/;"	e	enum:fabgl::VirtualKey
VK_q	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_q,               \/**< Lower case letter 'q' *\/$/;"	e	enum:fabgl::VirtualKey
VK_r	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_r,               \/**< Lower case letter 'r' *\/$/;"	e	enum:fabgl::VirtualKey
VK_s	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_s,               \/**< Lower case letter 's' *\/$/;"	e	enum:fabgl::VirtualKey
VK_t	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_t,               \/**< Lower case letter 't' *\/$/;"	e	enum:fabgl::VirtualKey
VK_u	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_u,               \/**< Lower case letter 'u' *\/$/;"	e	enum:fabgl::VirtualKey
VK_v	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_v,               \/**< Lower case letter 'v' *\/$/;"	e	enum:fabgl::VirtualKey
VK_w	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_w,               \/**< Lower case letter 'w' *\/$/;"	e	enum:fabgl::VirtualKey
VK_x	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_x,               \/**< Lower case letter 'x' *\/$/;"	e	enum:fabgl::VirtualKey
VK_y	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_y,               \/**< Lower case letter 'y' *\/$/;"	e	enum:fabgl::VirtualKey
VK_z	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VK_z,               \/**< Lower case letter 'z' *\/$/;"	e	enum:fabgl::VirtualKey
VKtoAlternateVK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^VirtualKey Keyboard::VKtoAlternateVK(VirtualKey in_vk, bool down, KeyboardLayout const * layout)$/;"	f	class:fabgl::Keyboard	typeref:typename:VirtualKey
VScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::VScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
VScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::VScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::TFTController	typeref:typename:void
VScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::VScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
VScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::VScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
VScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::VScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
VScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::VScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
VScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::VScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
VScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::VScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
VScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::VScroll(int scroll, Rect & updateRect)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
VScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  VScroll,$/;"	e	enum:fabgl::PrimitiveCmd
VScrollBarPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int VScrollBarPos()     { return m_VScrollBarPosition; }$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:int
VScrollBarRange	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int VScrollBarRange()  { return m_VScrollBarRange; }$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:int
VScrollBarVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int VScrollBarVisible() { return m_VScrollBarVisible; }$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:int
VSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static bool VSync()                                         { return s_VSync; }$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:bool
VSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  static bool VSync()                        { return s_VSync; }$/;"	f	class:fabgl::VGADirectController	typeref:typename:bool
VSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  bool VSync()                                             { return m_VGADCtrl.VSync(); }$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:bool
VSyncInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::VSyncInterrupt(void * arg)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
VSyncLogic	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  char          VSyncLogic;      \/**< Vertical Sync polarity '+' or '-' *\/$/;"	m	struct:fabgl::VGATimings	typeref:typename:char
VSyncPulse	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int16_t       VSyncPulse;      \/**< Vertical Sync Pulse duration in lines *\/$/;"	m	struct:fabgl::VGATimings	typeref:typename:int16_t
VT52	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  VT52,           \/**< Emulated VT52 terminal *\/$/;"	e	enum:fabgl::TermType
VT52DecodeVirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::VT52DecodeVirtualKey(VirtualKeyItem const & item)$/;"	f	class:fabgl::Terminal	typeref:typename:void
VT52GraphicsMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         VT52GraphicsMode;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
VVisibleArea	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int16_t       VVisibleArea;    \/**< Vertical number of visible lines *\/$/;"	m	struct:fabgl::VGATimings	typeref:typename:int16_t
VariantAttorney	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantAttorney.hpp	/^class VariantAttorney {$/;"	c
VariantComparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  explicit VariantComparer(const VariantData* value) : rhs(value) {}$/;"	f	struct:VariantComparer
VariantComparer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^struct VariantComparer : ComparerBase {$/;"	s
VariantConstPtr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  VariantConstPtr(const detail::VariantData* data) : variant_(data) {}$/;"	f	class:VariantConstPtr
VariantConstPtr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^class VariantConstPtr {$/;"	c
VariantContent	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^union VariantContent {$/;"	u
VariantData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  VariantData() : flags_(VALUE_IS_NULL) {}$/;"	f	class:VariantData
VariantData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^class VariantData {$/;"	c
VariantOperatorTag	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^struct VariantOperatorTag {};$/;"	s
VariantOperators	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^struct VariantOperators : VariantOperatorTag {$/;"	s
VariantPtr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  VariantPtr(detail::MemoryPool* pool, detail::VariantData* data)$/;"	f	class:VariantPtr
VariantPtr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^class VariantPtr {$/;"	c
VariantRefBase	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^class VariantRefBase : public VariantTag {$/;"	c
VariantSlot	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^class VariantSlot {$/;"	c
VariantSlotDiff	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^typedef int_t<ARDUINOJSON_SLOT_OFFSET_SIZE * 8>::type VariantSlotDiff;$/;"	t	typeref:typename:int_t<ARDUINOJSON_SLOT_OFFSET_SIZE * 8>::type
VariantStringSetter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^    VariantStringSetter(VariantData* instance) : instance_(instance) {}$/;"	f	struct:VariantData::VariantStringSetter
VariantStringSetter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  struct VariantStringSetter {$/;"	s	class:VariantData
VariantTag	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantTag.hpp	/^struct VariantTag {};$/;"	s
VariantTo	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantTo.hpp	/^struct VariantTo {};$/;"	s
VariantTo	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantTo.hpp	/^struct VariantTo<JsonArray> {$/;"	s
VariantTo	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantTo.hpp	/^struct VariantTo<JsonObject> {$/;"	s
VariantTo	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantTo.hpp	/^struct VariantTo<JsonVariant> {$/;"	s
Vertical	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Vertical,          \/**< Vertical orientation *\/$/;"	e	enum:fabgl::uiOrientation
VerticalBlanking	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  static const int VerticalBlanking   = 28;$/;"	m	class:MOS6561	typeref:typename:const int
VideoMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^enum class VideoMode {$/;"	g	namespace:fabgl
Violet	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Violet=0xEE82EE,                \/\/\/< @htmlcolorblock{EE82EE}$/;"	e	enum:CRGB::__anonbcc8608a0c03
VirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^enum VirtualKey {$/;"	g	namespace:fabgl
VirtualKeyDef	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^struct VirtualKeyDef {$/;"	s	namespace:fabgl
VirtualKeyItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^struct VirtualKeyItem {$/;"	s	namespace:fabgl
VirtualKeyToASCII	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.h	/^struct VirtualKeyToASCII {$/;"	s	namespace:fabgl
VisibleArea	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  VisibleArea   \/**< Horizontal line sequence is: VISIBLEAREA -> FRONTPORCH -> SYNC -> BACKPORC/;"	e	enum:fabgl::VGAScanStart
Visitor	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/Visitor.hpp	/^struct Visitor {$/;"	s
WAKE_THRESHOLD	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define WAKE_THRESHOLD /;"	d	file:
WAVETABLE_J	examples/test/lib/JFixLib/src/Event/JWavetable.h	/^#define WAVETABLE_J$/;"	d
WAVE_NOISE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^enum wavetype { WAVE_SQUARE, WAVE_SINE, WAVE_TRIANGLE, WAVE_SAW, WAVE_NOISE };$/;"	e	enum:wavetype
WAVE_NOISE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^enum wavetype { WAVE_SQUARE, WAVE_SINE, WAVE_TRIANGLE, WAVE_SAW, WAVE_NOISE };$/;"	e	enum:wavetype
WAVE_SAW	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^enum wavetype { WAVE_SQUARE, WAVE_SINE, WAVE_TRIANGLE, WAVE_SAW, WAVE_NOISE };$/;"	e	enum:wavetype
WAVE_SAW	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^enum wavetype { WAVE_SQUARE, WAVE_SINE, WAVE_TRIANGLE, WAVE_SAW, WAVE_NOISE };$/;"	e	enum:wavetype
WAVE_SINE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^enum wavetype { WAVE_SQUARE, WAVE_SINE, WAVE_TRIANGLE, WAVE_SAW, WAVE_NOISE };$/;"	e	enum:wavetype
WAVE_SINE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^enum wavetype { WAVE_SQUARE, WAVE_SINE, WAVE_TRIANGLE, WAVE_SAW, WAVE_NOISE };$/;"	e	enum:wavetype
WAVE_SQUARE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^enum wavetype { WAVE_SQUARE, WAVE_SINE, WAVE_TRIANGLE, WAVE_SAW, WAVE_NOISE };$/;"	e	enum:wavetype
WAVE_SQUARE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^enum wavetype { WAVE_SQUARE, WAVE_SINE, WAVE_TRIANGLE, WAVE_SAW, WAVE_NOISE };$/;"	e	enum:wavetype
WAVE_TRIANGLE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^enum wavetype { WAVE_SQUARE, WAVE_SINE, WAVE_TRIANGLE, WAVE_SAW, WAVE_NOISE };$/;"	e	enum:wavetype
WAVE_TRIANGLE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^enum wavetype { WAVE_SQUARE, WAVE_SINE, WAVE_TRIANGLE, WAVE_SAW, WAVE_NOISE };$/;"	e	enum:wavetype
WHITE	examples/test/lib/JFixLib/src/JFixture.h	/^  WHITE$/;"	e	enum:Channel
WM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	#define WM /;"	d
WM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	#define WM /;"	d
WMEM16	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^inline __attribute__((always_inline)) uint16_t i8086::WMEM16(int addr, uint16_t value)$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
WMEM8	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^inline __attribute__((always_inline)) uint8_t i8086::WMEM8(int addr, uint8_t value)$/;"	f	class:fabgl::i8086	typeref:typename:uint8_t
WRITE_BYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define WRITE_BYTE(/;"	d	file:
WRITE_CLK	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define WRITE_CLK(/;"	d	file:
WRITE_DAT	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define WRITE_DAT(/;"	d	file:
WRITE_DAT_R0	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^#define WRITE_DAT_R0(/;"	d	file:
WRITE_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define WRITE_INDIRECT_HL(/;"	d	file:
WRITE_WORD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define WRITE_WORD(/;"	d	file:
WR_BYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define WR_BYTE(/;"	d	file:
WR_WORD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define WR_WORD(/;"	d	file:
WS2801	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2801,   \/\/\/< WS2801 LED chipset$/;"	e	enum:ESPIChipsets
WS2801Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	WS2801Controller() {}$/;"	f	class:WS2801Controller
WS2801Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class WS2801Controller : public CPixelLEDController<RGB_ORDER> {$/;"	c
WS2803	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2803,   \/\/\/< WS2803 LED chipset$/;"	e	enum:ESPIChipsets
WS2803Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class WS2803Controller : public WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_SPEED> {};$/;"	c
WS2811	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2811 : public WS2811Controller800Khz<DATA_P/;"	c
WS2811Controller400Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class WS2811Controller400Khz : public ClocklessController<DATA_PIN, 4 * FMUL, 10 * FMUL, 6 * FMU/;"	c
WS2811Controller400Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class WS2811Controller400Khz : public ClocklessController<DATA_PIN, C_NS(800), C_NS(800), C_NS(9/;"	c
WS2811Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class WS2811Controller800Khz : public ClocklessController<DATA_PIN, 3 * FMUL, 4 * FMUL, 3 * FMUL/;"	c
WS2811Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class WS2811Controller800Khz : public ClocklessController<DATA_PIN, C_NS(320), C_NS(320), C_NS(6/;"	c
WS2811_400	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2811_400 : public WS2811Controller400Khz<DA/;"	c
WS2811_400_PORTA	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2811_400_PORTA,$/;"	e	enum:EBlockChipsets
WS2811_400_PORTB	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2811_400_PORTB,$/;"	e	enum:EBlockChipsets
WS2811_400_PORTC	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2811_400_PORTC,$/;"	e	enum:EBlockChipsets
WS2811_400_PORTD	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2811_400_PORTD,$/;"	e	enum:EBlockChipsets
WS2811_400_PORTDC	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2811_400_PORTDC,$/;"	e	enum:EBlockChipsets
WS2811_PORTA	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2811_PORTA,$/;"	e	enum:EBlockChipsets
WS2811_PORTB	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2811_PORTB,$/;"	e	enum:EBlockChipsets
WS2811_PORTC	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2811_PORTC,$/;"	e	enum:EBlockChipsets
WS2811_PORTD	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2811_PORTD,$/;"	e	enum:EBlockChipsets
WS2811_PORTDC	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2811_PORTDC,$/;"	e	enum:EBlockChipsets
WS2812	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2812 : public WS2812Controller800Khz<DATA_P/;"	c
WS2812B	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2812B : public WS2812Controller800Khz<DATA_/;"	c
WS2812B_PIN	examples/test/lib/JFixLib/src/JWS2812B_status.h	/^#define WS2812B_PIN /;"	d
WS2812B_STATUS_LED	examples/test/lib/JFixLib/src/JJonisk.h	/^#define WS2812B_STATUS_LED$/;"	d
WS2812B_STATUS_LED	examples/test/src/main.cpp	/^#define WS2812B_STATUS_LED$/;"	d	file:
WS2812Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class WS2812Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 5 * FMUL, 3 * FMUL/;"	c
WS2812Controller800Khz	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class WS2812Controller800Khz : public ClocklessController<DATA_PIN, C_NS(250), C_NS(625), C_NS(3/;"	c
WS2812SERIAL	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^enum SWS2812 { WS2812SERIAL };$/;"	e	enum:SWS2812
WS2813	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2813 : public WS2813Controller<DATA_PIN, RG/;"	c
WS2813Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class WS2813Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 4 * FMUL, 3 * FMUL, RGB_/;"	c
WS2813Controller	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^class WS2813Controller : public ClocklessController<DATA_PIN, C_NS(320), C_NS(320), C_NS(640), R/;"	c
WS2813_PORTA	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2813_PORTA,$/;"	e	enum:EBlockChipsets
WS2813_PORTB	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2813_PORTB,$/;"	e	enum:EBlockChipsets
WS2813_PORTC	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2813_PORTC,$/;"	e	enum:EBlockChipsets
WS2813_PORTD	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2813_PORTD,$/;"	e	enum:EBlockChipsets
WS2813_PORTDC	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	WS2813_PORTDC,$/;"	e	enum:EBlockChipsets
WS2852	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2852 : public WS2812Controller800Khz<DATA_P/;"	c
WaitDataAccepted	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    WaitDataAccepted,$/;"	e	enum:IECDrive::LinkState
WaitEndOfEOIAck	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    WaitEndOfEOIAck,$/;"	e	enum:IECDrive::LinkState
WaitReceiverReady	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    WaitReceiverReady,$/;"	e	enum:IECDrive::LinkState
WaitRecvDataInvalid	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    WaitRecvDataInvalid,$/;"	e	enum:IECDrive::LinkState
WaitRecvDataValid	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    WaitRecvDataValid,$/;"	e	enum:IECDrive::LinkState
WarmFluorescent	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^    WarmFluorescent=0xFFF4E5 \/* 0 K, 255, 244, 229 *\/,$/;"	e	enum:__anon4cec7af20203
Warning	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Warning,   \/**< Warning icon *\/$/;"	e	enum:fabgl::uiMessageBoxIcon
WaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  WaveformGenerator() : next(nullptr), m_sampleRate(0), m_volume(100), m_enabled(false), m_durat/;"	f	class:fabgl::WaveformGenerator
WaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^class WaveformGenerator {$/;"	c	namespace:fabgl
What about that name?	examples/test/.pio/libdeps/esp32dev/FastLED/README.md	/^## What about that name?$/;"	s	chapter:FastLED 3.6
Wheat	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Wheat=0xF5DEB3,                 \/\/\/< @htmlcolorblock{F5DEB3}$/;"	e	enum:CRGB::__anonbcc8608a0c03
White	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  White,          \/**< Equivalent to RGB888(128,128,128) *\/$/;"	e	enum:fabgl::Color
White	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        White=0xFFFFFF,                 \/\/\/< @htmlcolorblock{FFFFFF}$/;"	e	enum:CRGB::__anonbcc8608a0c03
WhiteSmoke	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        WhiteSmoke=0xF5F5F5,            \/\/\/< @htmlcolorblock{F5F5F5}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Window	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Window,   \/**< Rectangle coordinates relative to the window itself *\/$/;"	e	enum:fabgl::uiOrigin
Write	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	template<ECont CONT_STATE, EWait WAIT_STATE, ELast LAST_STATE> class Write {$/;"	c	class:ARMHardwareSPIOutput
Write	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	template<ECont CONT_STATE, EWait WAIT_STATE, ELast LAST_STATE> class Write {$/;"	c	class:ARMHardwareSPIOutput
WriteBitToSequence	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void WriteBitToSequence(uint8_t byte, uint16_t * e) {$/;"	f	class:ClocklessController	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
WriteByteCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  typedef void (*WriteByteCallback)(void * context, int addr, int value);$/;"	t	class:fabgl::MOS6502	typeref:typename:void (*)(void * context,int addr,int value)
WriteByteCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  typedef void (*WriteByteCallback)(void * context, int addr, int value);$/;"	t	class:fabgl::Z80	typeref:typename:void (*)(void * context,int addr,int value)
WriteByteCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  typedef void (*WriteByteCallback)(void * context, int addr, int value);$/;"	t	class:fabgl::i8080	typeref:typename:void (*)(void * context,int addr,int value)
WriteIOCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  typedef void (*WriteIOCallback)(void * context, int addr, int value);$/;"	t	class:fabgl::Z80	typeref:typename:void (*)(void * context,int addr,int value)
WriteIOCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  typedef void (*WriteIOCallback)(void * context, int addr, int value);$/;"	t	class:fabgl::i8080	typeref:typename:void (*)(void * context,int addr,int value)
WritePRG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^    WritePRG,$/;"	e	enum:IECDrive::ChannelType
WritePort	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  typedef void (*WritePort)(void * context, int address, uint8_t value);$/;"	t	class:fabgl::i8086	typeref:typename:void (*)(void * context,int address,uint8_t value)
WriteVideoMemory16	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  typedef void (*WriteVideoMemory16)(void * context, int address, uint16_t value);$/;"	t	class:fabgl::i8086	typeref:typename:void (*)(void * context,int address,uint16_t value)
WriteVideoMemory8	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  typedef void (*WriteVideoMemory8)(void * context, int address, uint8_t value);$/;"	t	class:fabgl::i8086	typeref:typename:void (*)(void * context,int address,uint8_t value)
WriteWordCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  typedef void (*WriteWordCallback)(void * context, int addr, int value);$/;"	t	class:fabgl::Z80	typeref:typename:void (*)(void * context,int addr,int value)
WriteWordCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  typedef void (*WriteWordCallback)(void * context, int addr, int value);$/;"	t	class:fabgl::i8080	typeref:typename:void (*)(void * context,int addr,int value)
Writer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writer.hpp	/^  explicit Writer(TDestination& dest) : dest_(&dest) {}$/;"	f	class:Writer
Writer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writer.hpp	/^class Writer {$/;"	c
Writer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp	/^  explicit Writer(::String& str) : destination_(&str) {$/;"	f	class:Writer
Writer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp	/^class Writer<::String, void> {$/;"	c
Writer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/PrintWriter.hpp	/^  explicit Writer(::Print& print) : print_(&print) {}$/;"	f	class:Writer
Writer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/PrintWriter.hpp	/^class Writer<$/;"	c
Writer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStreamWriter.hpp	/^  explicit Writer(std::ostream& os) : os_(&os) {}$/;"	f	class:Writer
Writer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStreamWriter.hpp	/^class Writer<$/;"	c
Writer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStringWriter.hpp	/^  Writer(TDestination& str) : str_(&str) {}$/;"	f	class:Writer
Writer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStringWriter.hpp	/^class Writer<TDestination,$/;"	c
X	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^    double X;$/;"	m	struct:PolygonsTest::DPoint	typeref:typename:double
X	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^    double X;$/;"	m	struct:PolygonsTest::DPoint	typeref:typename:double
X	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^    double X;$/;"	m	struct:PolygonsTest::DPoint	typeref:typename:double
X	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t         X;      \/**< Horizontal glyph coordinate *\/$/;"	m	struct:fabgl::Glyph	typeref:typename:int16_t
X	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t        X;$/;"	m	struct:fabgl::BitmapDrawingInfo	typeref:typename:int16_t
X	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int16_t      X;           \/**< Absolute horizontal mouse position. *\/$/;"	m	struct:fabgl::MouseStatus	typeref:typename:int16_t
X	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int16_t X;    \/**< Horizontal coordinate *\/$/;"	m	struct:fabgl::Point	typeref:typename:int16_t
X1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int16_t X1;   \/**< Horizontal top-left coordinate *\/$/;"	m	struct:fabgl::Rect	typeref:typename:int16_t
X2	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int16_t X2;   \/**< Horizontal bottom-right coordinate *\/$/;"	m	struct:fabgl::Rect	typeref:typename:int16_t
XLT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint16_t XLT;$/;"	m	struct:DiscParameterHeader	typeref:typename:uint16_t
XOR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define XOR(/;"	d	file:
XOR_CONDITION_TABLE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^static const int XOR_CONDITION_TABLE[8] = {$/;"	v	namespace:fabgl	typeref:typename:const int[8]	file:
XOR_INDIRECT_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  XOR_INDIRECT_HL,$/;"	e	enum:fabgl::__anonfeda45510103	file:
XOR_N	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  XOR_N,$/;"	e	enum:fabgl::__anonfeda45510103	file:
XOR_R	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^  XOR_R,$/;"	e	enum:fabgl::__anonfeda45510103	file:
XRA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define XRA(/;"	d	file:
XX_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define XX_ADDR /;"	d	file:
Y	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^    double Y;$/;"	m	struct:PolygonsTest::DPoint	typeref:typename:double
Y	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^    double Y;$/;"	m	struct:PolygonsTest::DPoint	typeref:typename:double
Y	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^    double Y;$/;"	m	struct:PolygonsTest::DPoint	typeref:typename:double
Y	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t         Y;      \/**< Vertical glyph coordinate *\/$/;"	m	struct:fabgl::Glyph	typeref:typename:int16_t
Y	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t        Y;$/;"	m	struct:fabgl::BitmapDrawingInfo	typeref:typename:int16_t
Y	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Y(/;"	d	file:
Y	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int16_t      Y;           \/**< Absolute vertical mouse position. *\/$/;"	m	struct:fabgl::MouseStatus	typeref:typename:int16_t
Y	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int16_t Y;    \/**< Vertical coordinate *\/$/;"	m	struct:fabgl::Point	typeref:typename:int16_t
Y1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int16_t Y1;   \/**< Vertical top-left coordinate *\/$/;"	m	struct:fabgl::Rect	typeref:typename:int16_t
Y2	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int16_t Y2;   \/**< Vertical bottom-right coordinate *\/$/;"	m	struct:fabgl::Rect	typeref:typename:int16_t
YX_FLAGS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define YX_FLAGS /;"	d	file:
Yellow	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Yellow,         \/**< Equivalent to RGB888(128,128,0) *\/$/;"	e	enum:fabgl::Color
Yellow	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        Yellow=0xFFFF00,                \/\/\/< @htmlcolorblock{FFFF00}$/;"	e	enum:CRGB::__anonbcc8608a0c03
YellowGreen	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        YellowGreen=0x9ACD32,           \/\/\/< @htmlcolorblock{9ACD32}$/;"	e	enum:CRGB::__anonbcc8608a0c03
Z	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Z(/;"	d	file:
Z80	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  Z80$/;"	e	enum:CPU
Z80	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^class Z80 {$/;"	c	namespace:fabgl
Z80ASM_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t Z80ASM_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
Z80_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#       define Z80_A /;"	d
Z80_AF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_AF /;"	d
Z80_B	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#       define Z80_B /;"	d
Z80_BC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_BC /;"	d
Z80_C	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#       define Z80_C /;"	d
Z80_CATCH_HALT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^ #define Z80_CATCH_HALT$/;"	d
Z80_C_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_C_FLAG /;"	d
Z80_C_FLAG_SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_C_FLAG_SHIFT /;"	d
Z80_D	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#       define Z80_D /;"	d
Z80_DE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_DE /;"	d
Z80_E	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#       define Z80_E /;"	d
Z80_F	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#       define Z80_F /;"	d
Z80_FETCH_BYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Z80_FETCH_BYTE(/;"	d	file:
Z80_FETCH_WORD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Z80_FETCH_WORD(/;"	d	file:
Z80_H	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#       define Z80_H /;"	d
Z80_HL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_HL /;"	d
Z80_H_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_H_FLAG /;"	d
Z80_H_FLAG_SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_H_FLAG_SHIFT /;"	d
Z80_INPUT_BYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Z80_INPUT_BYTE(/;"	d	file:
Z80_INTERRUPT_MODE_0	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  Z80_INTERRUPT_MODE_0,$/;"	e	enum:fabgl::__anon8d47e6360203
Z80_INTERRUPT_MODE_1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  Z80_INTERRUPT_MODE_1,$/;"	e	enum:fabgl::__anon8d47e6360203
Z80_INTERRUPT_MODE_2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  Z80_INTERRUPT_MODE_2$/;"	e	enum:fabgl::__anon8d47e6360203
Z80_IX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_IX /;"	d
Z80_IXH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#       define Z80_IXH /;"	d
Z80_IXL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#       define Z80_IXL /;"	d
Z80_IY	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_IY /;"	d
Z80_IYH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#       define Z80_IYH /;"	d
Z80_IYL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#       define Z80_IYL /;"	d
Z80_L	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#       define Z80_L /;"	d
Z80_N_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_N_FLAG /;"	d
Z80_N_FLAG_SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_N_FLAG_SHIFT /;"	d
Z80_OUTPUT_BYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Z80_OUTPUT_BYTE(/;"	d	file:
Z80_PV_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_PV_FLAG /;"	d
Z80_PV_FLAG_SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_PV_FLAG_SHIFT /;"	d
Z80_P_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_P_FLAG /;"	d
Z80_P_FLAG_SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_P_FLAG_SHIFT /;"	d
Z80_READ_BYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Z80_READ_BYTE(/;"	d	file:
Z80_READ_WORD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Z80_READ_WORD(/;"	d	file:
Z80_READ_WORD_INTERRUPT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Z80_READ_WORD_INTERRUPT(/;"	d	file:
Z80_SP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_SP /;"	d
Z80_STATE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^struct Z80_STATE {$/;"	s	namespace:fabgl
Z80_STATUS_DI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  Z80_STATUS_DI,$/;"	e	enum:fabgl::__anon8d47e6360103
Z80_STATUS_ED_UNDEFINED	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  Z80_STATUS_ED_UNDEFINED,$/;"	e	enum:fabgl::__anon8d47e6360103
Z80_STATUS_EI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  Z80_STATUS_EI,$/;"	e	enum:fabgl::__anon8d47e6360103
Z80_STATUS_HALT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  Z80_STATUS_HALT = 1,$/;"	e	enum:fabgl::__anon8d47e6360103
Z80_STATUS_PREFIX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  Z80_STATUS_PREFIX$/;"	e	enum:fabgl::__anon8d47e6360103
Z80_STATUS_RETI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  Z80_STATUS_RETI,$/;"	e	enum:fabgl::__anon8d47e6360103
Z80_STATUS_RETN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  Z80_STATUS_RETN,$/;"	e	enum:fabgl::__anon8d47e6360103
Z80_S_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_S_FLAG /;"	d
Z80_S_FLAG_SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_S_FLAG_SHIFT /;"	d
Z80_V_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_V_FLAG /;"	d
Z80_V_FLAG_SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_V_FLAG_SHIFT /;"	d
Z80_WRITE_BYTE	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Z80_WRITE_BYTE(/;"	d	file:
Z80_WRITE_WORD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Z80_WRITE_WORD(/;"	d	file:
Z80_WRITE_WORD_INTERRUPT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^#define Z80_WRITE_WORD_INTERRUPT(/;"	d	file:
Z80_X_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_X_FLAG /;"	d
Z80_X_FLAG_SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_X_FLAG_SHIFT /;"	d
Z80_Y_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_Y_FLAG /;"	d
Z80_Y_FLAG_SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_Y_FLAG_SHIFT /;"	d
Z80_Z_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_Z_FLAG /;"	d
Z80_Z_FLAG_SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^#define Z80_Z_FLAG_SHIFT /;"	d
ZEXALL_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t ZEXALL_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
ZEXDOC_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t ZEXDOC_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
ZF_ADDR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^#define ZF_ADDR /;"	d	file:
ZSID_COM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const uint8_t ZSID_COM[] = {$/;"	v	typeref:typename:const uint8_t[]
Z_FLAG	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^#define Z_FLAG /;"	d	file:
ZeroTerminatedRamString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  ZeroTerminatedRamString(const char* str) : str_(str) {}$/;"	f	class:ZeroTerminatedRamString
ZeroTerminatedRamString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^class ZeroTerminatedRamString {$/;"	c
_ADJD1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _ADJD1(/;"	d
_ARMPIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^template<uint8_t PIN, uint32_t _MASK> class _ARMPIN {$/;"	c
_ARMPIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^template <uint32_t _MASK, typename _PORT, uint8_t _PORT_NUMBER, uint8_t _PIN_NUMBER> class _ARMP/;"	c
_BITS_PER_PIXEL	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    static const uint8_t  _BITS_PER_PIXEL   = (8 + _XTRA0) * 3; \/\/ NOTE: 3 means RGB only...$/;"	m	class:ClocklessController	typeref:typename:const uint8_t
_BLOCK_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    #define _BLOCK_PIN(/;"	d
_Boot__Basic_300_5_F_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/minidisks/basic/basic300_5F_minidisk.h	/^unsigned int _Boot__Basic_300_5_F_dsk_len = 76800;$/;"	v	typeref:typename:unsigned int
_CLC1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _CLC1 /;"	d
_CYCCNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^#define _CYCCNT /;"	d
_D1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define _D1 /;"	d
_D1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _D1(/;"	d
_D2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define _D2(/;"	d
_D2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _D2(/;"	d
_D3	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define _D3(/;"	d
_D3	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _D3(/;"	d
_DEFPIN_ARM_IDENTITY_P0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^#define _DEFPIN_ARM_IDENTITY_P0(/;"	d
_DEFPIN_ARM_IDENTITY_P1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^#define _DEFPIN_ARM_IDENTITY_P1(/;"	d
_ESPPIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^template<uint8_t PIN, uint32_t MASK, bool VALIDPIN> class _ESPPIN {$/;"	c
_ESPPIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^template<uint8_t PIN, uint32_t MASK> class _ESPPIN {$/;"	c
_ESP_ADJ	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^#define _ESP_ADJ /;"	d
_ESP_ADJ2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^#define _ESP_ADJ2 /;"	d
_FASTLED_NRF52_ENABLED_PWM_INSTANCE	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^typedef enum _FASTLED_NRF52_ENABLED_PWM_INSTANCE {$/;"	g
_FASTLED_NS_TO_DWT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^#define _FASTLED_NS_TO_DWT(/;"	d
_FL_BIT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^#define _FL_BIT(/;"	d
_FL_DEFINE_PORT	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^#define _FL_DEFINE_PORT(/;"	d
_FL_DEFINE_PORT3	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^#define _FL_DEFINE_PORT3(/;"	d
_FL_DEFPIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^#define _FL_DEFPIN(/;"	d
_FL_DEFPIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^#define _FL_DEFPIN(/;"	d
_FL_DEFPIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^#define _FL_DEFPIN(/;"	d
_FL_DEFPIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^#define _FL_DEFPIN(/;"	d
_FL_PIN_VALID	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^#define _FL_PIN_VALID(/;"	d
_FL_VALID_PIN_MASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^#define _FL_VALID_PIN_MASK /;"	d
_GPB	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^#define _GPB /;"	d
_GPO	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    volatile uint32_t _GPO;$/;"	m	struct:FASTLED_ESP_IO	typeref:typename:volatile uint32_t
_GPOC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    volatile uint32_t _GPOC;$/;"	m	struct:FASTLED_ESP_IO	typeref:typename:volatile uint32_t
_GPOS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    volatile uint32_t _GPOS;$/;"	m	struct:FASTLED_ESP_IO	typeref:typename:volatile uint32_t
_INITIALIZE_PIN_HIGH	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    static const bool     _INITIALIZE_PIN_HIGH = (_FLIP ? 1 : 0);$/;"	m	class:ClocklessController	typeref:typename:const bool
_MOV1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _MOV1(/;"	d
_MOV_FIX03	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _MOV_FIX03(/;"	d
_MOV_FIX13	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _MOV_FIX13(/;"	d
_MOV_FIX23	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _MOV_FIX23(/;"	d
_NEGD1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _NEGD1(/;"	d
_PIO_ASM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^#define _PIO_ASM_H$/;"	d
_PIO_GEN_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_gen.h	/^#define _PIO_GEN_H$/;"	d
_POLARITY_BIT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    static const uint16_t _POLARITY_BIT        = (_FLIP ? 0 : 0x8000);$/;"	m	class:ClocklessController	typeref:typename:const uint16_t
_PWM_BUFFER_COUNT	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    static const uint16_t _PWM_BUFFER_COUNT = (_BITS_PER_PIXEL * FASTLED_NRF52_MAXIMUM_PIXELS_PE/;"	m	class:ClocklessController	typeref:typename:const uint16_t
_ROR1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _ROR1(/;"	d
_SCALE02	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _SCALE02(/;"	d
_SCALE12	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _SCALE12(/;"	d
_SCALE22	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define _SCALE22(/;"	d
_T0H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    static const uint8_t  _T0H = ((uint16_t)(_T1        ));$/;"	m	class:ClocklessController	typeref:typename:const uint8_t
_T1H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    static const uint8_t  _T1H = ((uint16_t)(_T1+_T2    ));$/;"	m	class:ClocklessController	typeref:typename:const uint8_t
_TOP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    static const uint8_t  _TOP = ((uint16_t)(_T1+_T2+_T3));$/;"	m	class:ClocklessController	typeref:typename:const uint8_t
_Users_fdivitto_Google_Drive_maker_FabGL_examples_Altair8800_fonti_ProtoEmuAltair_disks_BASIC_Disk_Basic_Ver_5_0_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/basic/basic5_dsk.h	/^unsigned int _Users_fdivitto_Google_Drive_maker_FabGL_examples_Altair8800_fonti_ProtoEmuAltair_d/;"	v	typeref:typename:unsigned int
__CM3_REGS	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^#define __CM3_REGS$/;"	d
__DATA_PIN	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	static constexpr int __DATA_PIN() { return DATA_PIN; }$/;"	f	class:ClocklessController	typeref:typename:int
__FASTLED_HAS_FIBCC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^#define __FASTLED_HAS_FIBCC /;"	d
__FASTPIN_ARM_K20_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastpin_arm_k20.h	/^#define __FASTPIN_ARM_K20_H$/;"	d
__FASTPIN_ARM_K66_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastpin_arm_k66.h	/^#define __FASTPIN_ARM_K66_H$/;"	d
__FASTPIN_ARM_KL26_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastpin_arm_kl26.h	/^#define __FASTPIN_ARM_KL26_H$/;"	d
__FASTPIN_ARM_MXRT1062_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastpin_arm_mxrt1062.h	/^#define __FASTPIN_ARM_MXRT1062_H$/;"	d
__FASTPIN_ARM_NRF51_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^#define __FASTPIN_ARM_NRF51_H$/;"	d
__FASTPIN_ARM_NRF52_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^#define __FASTPIN_ARM_NRF52_H$/;"	d
__FASTPIN_ARM_NRF52_VARIANTS_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52_variants.h	/^#define __FASTPIN_ARM_NRF52_VARIANTS_H$/;"	d
__FASTPIN_ARM_NRF52_VARIANT_FOUND	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52_variants.h	/^        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND$/;"	d
__FASTPIN_ARM_RP2040_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/fastpin_arm_rp2040.h	/^#define __FASTPIN_ARM_RP2040_H$/;"	d
__FASTPIN_ARM_STM32_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/fastpin_arm_stm32.h	/^#define __FASTPIN_ARM_STM32_H$/;"	d
__FASTSPI_ARM_NRF52_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^#define __FASTSPI_ARM_NRF52_H$/;"	d
__FIBCC	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^class __FIBCC : public FlexibleInlineBlockClocklessController<NUM_LANES,DATA_PIN,CHIPSET<DATA_PI/;"	c
__FLIP	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	static constexpr bool __FLIP() { return FLIP; }$/;"	f	class:ClocklessController	typeref:typename:bool
__FL_PORT_INFO	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^template<uint8_t port> struct __FL_PORT_INFO {$/;"	s
__FL_T4_MASK	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^#define __FL_T4_MASK /;"	d
__I	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^#define   __I /;"	d
__INC_ARBITER_NRF52	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^#define __INC_ARBITER_NRF52$/;"	d
__INC_BITSWAP_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^#define __INC_BITSWAP_H$/;"	d
__INC_BLOCK_CLOCKLESS_ARM_K20_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^#define __INC_BLOCK_CLOCKLESS_ARM_K20_H$/;"	d
__INC_BLOCK_CLOCKLESS_ARM_K66_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^#define __INC_BLOCK_CLOCKLESS_ARM_K66_H$/;"	d
__INC_BLOCK_CLOCKLESS_ARM_MXRT1062_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^#define __INC_BLOCK_CLOCKLESS_ARM_MXRT1062_H$/;"	d
__INC_BLOCK_CLOCKLESS_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^#define __INC_BLOCK_CLOCKLESS_H$/;"	d
__INC_CHIPSETS_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^#define __INC_CHIPSETS_H$/;"	d
__INC_CLOCKLESS_APOLLO3_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/clockless_apollo3.h	/^#define __INC_CLOCKLESS_APOLLO3_H$/;"	d
__INC_CLOCKLESS_ARM_D21	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/clockless_arm_d21.h	/^#define __INC_CLOCKLESS_ARM_D21$/;"	d
__INC_CLOCKLESS_ARM_D51	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^#define __INC_CLOCKLESS_ARM_D51$/;"	d
__INC_CLOCKLESS_ARM_K20_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^#define __INC_CLOCKLESS_ARM_K20_H$/;"	d
__INC_CLOCKLESS_ARM_K66_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^#define __INC_CLOCKLESS_ARM_K66_H$/;"	d
__INC_CLOCKLESS_ARM_KL26	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/clockless_arm_kl26.h	/^#define __INC_CLOCKLESS_ARM_KL26$/;"	d
__INC_CLOCKLESS_ARM_MXRT1062_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^#define __INC_CLOCKLESS_ARM_MXRT1062_H$/;"	d
__INC_CLOCKLESS_ARM_NRF51	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^#define __INC_CLOCKLESS_ARM_NRF51$/;"	d
__INC_CLOCKLESS_ARM_NRF52	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^#define __INC_CLOCKLESS_ARM_NRF52$/;"	d
__INC_CLOCKLESS_ARM_RP2040	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^#define __INC_CLOCKLESS_ARM_RP2040$/;"	d
__INC_CLOCKLESS_ARM_SAM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^#define __INC_CLOCKLESS_ARM_SAM_H$/;"	d
__INC_CLOCKLESS_ARM_STM32_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^#define __INC_CLOCKLESS_ARM_STM32_H$/;"	d
__INC_CLOCKLESS_BLOCK_ESP8266_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^#define __INC_CLOCKLESS_BLOCK_ESP8266_H$/;"	d
__INC_CLOCKLESS_BLOCK_ESP8266_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^#define __INC_CLOCKLESS_BLOCK_ESP8266_H$/;"	d
__INC_CLOCKLESS_TRINKET_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^#define __INC_CLOCKLESS_TRINKET_H$/;"	d
__INC_COLORPALETTES_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorpalettes.cpp	/^#define __INC_COLORPALETTES_H$/;"	d	file:
__INC_COLORPALETTES_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorpalettes.h	/^#define __INC_COLORPALETTES_H$/;"	d
__INC_COLORUTILS_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^#define __INC_COLORUTILS_H$/;"	d
__INC_COLOR_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^#define __INC_COLOR_H$/;"	d
__INC_CONTROLLER_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^#define __INC_CONTROLLER_H$/;"	d
__INC_CPP_COMPAT_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/cpp_compat.h	/^#define __INC_CPP_COMPAT_H$/;"	d
__INC_DMX_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/dmx.h	/^#define __INC_DMX_H$/;"	d
__INC_FASTLED_APOLLO3_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastled_apollo3.h	/^#define __INC_FASTLED_APOLLO3_H$/;"	d
__INC_FASTLED_ARM_D21_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/fastled_arm_d21.h	/^#define __INC_FASTLED_ARM_D21_H$/;"	d
__INC_FASTLED_ARM_D51_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/fastled_arm_d51.h	/^#define __INC_FASTLED_ARM_D51_H$/;"	d
__INC_FASTLED_ARM_K20_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastled_arm_k20.h	/^#define __INC_FASTLED_ARM_K20_H$/;"	d
__INC_FASTLED_ARM_K66_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastled_arm_k66.h	/^#define __INC_FASTLED_ARM_K66_H$/;"	d
__INC_FASTLED_ARM_KL26_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastled_arm_kl26.h	/^#define __INC_FASTLED_ARM_KL26_H$/;"	d
__INC_FASTLED_ARM_MXRT1062_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastled_arm_mxrt1062.h	/^#define __INC_FASTLED_ARM_MXRT1062_H$/;"	d
__INC_FASTLED_ARM_NRF51_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastled_arm_nrf51.h	/^#define __INC_FASTLED_ARM_NRF51_H$/;"	d
__INC_FASTLED_ARM_NRF52_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastled_arm_nrf52.h	/^#define __INC_FASTLED_ARM_NRF52_H$/;"	d
__INC_FASTLED_ARM_RP2040_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/fastled_arm_rp2040.h	/^#define __INC_FASTLED_ARM_RP2040_H$/;"	d
__INC_FASTLED_ARM_SAM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastled_arm_sam.h	/^#define __INC_FASTLED_ARM_SAM_H$/;"	d
__INC_FASTLED_ARM_SAM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/fastled_arm_stm32.h	/^#define __INC_FASTLED_ARM_SAM_H$/;"	d
__INC_FASTLED_AVR_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastled_avr.h	/^#define __INC_FASTLED_AVR_H$/;"	d
__INC_FASTLED_CONFIG_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_config.h	/^#define __INC_FASTLED_CONFIG_H$/;"	d
__INC_FASTPIN_APOLLO3_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastpin_apollo3.h	/^#define __INC_FASTPIN_APOLLO3_H$/;"	d
__INC_FASTPIN_ARM_D51_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/fastpin_arm_d51.h	/^#define __INC_FASTPIN_ARM_D51_H$/;"	d
__INC_FASTPIN_ARM_SAM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/fastpin_arm_d21.h	/^#define __INC_FASTPIN_ARM_SAM_H$/;"	d
__INC_FASTPIN_ARM_SAM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastpin_arm_sam.h	/^#define __INC_FASTPIN_ARM_SAM_H$/;"	d
__INC_FASTPIN_AVR_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastpin_avr.h	/^#define __INC_FASTPIN_AVR_H$/;"	d
__INC_FASTPIN_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^#define __INC_FASTPIN_H$/;"	d
__INC_FASTSPI_APOLLO3_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^#define __INC_FASTSPI_APOLLO3_H$/;"	d
__INC_FASTSPI_ARDUNIO_CORE_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^#define __INC_FASTSPI_ARDUNIO_CORE_H$/;"	d
__INC_FASTSPI_ARM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^#define __INC_FASTSPI_ARM_H$/;"	d
__INC_FASTSPI_ARM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^#define __INC_FASTSPI_ARM_H$/;"	d
__INC_FASTSPI_ARM_KL26_h	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^#define __INC_FASTSPI_ARM_KL26_h$/;"	d
__INC_FASTSPI_ARM_MXRT1062_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^#define __INC_FASTSPI_ARM_MXRT1062_H$/;"	d
__INC_FASTSPI_ARM_SAM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^#define __INC_FASTSPI_ARM_SAM_H$/;"	d
__INC_FASTSPI_ARM_SAM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^#define __INC_FASTSPI_ARM_SAM_H$/;"	d
__INC_FASTSPI_AVR_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^#define __INC_FASTSPI_AVR_H$/;"	d
__INC_FASTSPI_BITBANG_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^#define __INC_FASTSPI_BITBANG_H$/;"	d
__INC_FASTSPI_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi.h	/^#define __INC_FASTSPI_H$/;"	d
__INC_FASTSPI_LED2_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^#define __INC_FASTSPI_LED2_H$/;"	d
__INC_FASTSPI_NOP_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^#define __INC_FASTSPI_NOP_H$/;"	d
__INC_FASTSPI_NRF_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^#define __INC_FASTSPI_NRF_H$/;"	d
__INC_FASTSPI_TYPES_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^#define __INC_FASTSPI_TYPES_H$/;"	d
__INC_FL_DELAY_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^#define __INC_FL_DELAY_H$/;"	d
__INC_FL_PROGMEM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_progmem.h	/^#define __INC_FL_PROGMEM_H$/;"	d
__INC_HSV2RGB_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.h	/^#define __INC_HSV2RGB_H$/;"	d
__INC_LED_SYSDEFS_APOLLO3_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/led_sysdefs_apollo3.h	/^#define __INC_LED_SYSDEFS_APOLLO3_H$/;"	d
__INC_LED_SYSDEFS_ARM_D21_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/led_sysdefs_arm_d21.h	/^#define __INC_LED_SYSDEFS_ARM_D21_H$/;"	d
__INC_LED_SYSDEFS_ARM_D51_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/led_sysdefs_arm_d51.h	/^#define __INC_LED_SYSDEFS_ARM_D51_H$/;"	d
__INC_LED_SYSDEFS_ARM_K20_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/led_sysdefs_arm_k20.h	/^#define __INC_LED_SYSDEFS_ARM_K20_H$/;"	d
__INC_LED_SYSDEFS_ARM_K66_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/led_sysdefs_arm_k66.h	/^#define __INC_LED_SYSDEFS_ARM_K66_H$/;"	d
__INC_LED_SYSDEFS_ARM_KL26_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/led_sysdefs_arm_kl26.h	/^#define __INC_LED_SYSDEFS_ARM_KL26_H$/;"	d
__INC_LED_SYSDEFS_ARM_MXRT1062_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/led_sysdefs_arm_mxrt1062.h	/^#define __INC_LED_SYSDEFS_ARM_MXRT1062_H$/;"	d
__INC_LED_SYSDEFS_ARM_RP2040_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define __INC_LED_SYSDEFS_ARM_RP2040_H$/;"	d
__INC_LED_SYSDEFS_ARM_SAM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define __INC_LED_SYSDEFS_ARM_SAM_H$/;"	d
__INC_LED_SYSDEFS_ARM_SAM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define __INC_LED_SYSDEFS_ARM_SAM_H$/;"	d
__INC_LED_SYSDEFS_AVR_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/led_sysdefs_avr.h	/^#define __INC_LED_SYSDEFS_AVR_H$/;"	d
__INC_LED_SYSDEFS_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/led_sysdefs.h	/^#define __INC_LED_SYSDEFS_H$/;"	d
__INC_LIB8TION_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define __INC_LIB8TION_H$/;"	d
__INC_LIB8TION_MATH_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^#define __INC_LIB8TION_MATH_H$/;"	d
__INC_LIB8TION_RANDOM_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^#define __INC_LIB8TION_RANDOM_H$/;"	d
__INC_LIB8TION_SCALE_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^#define __INC_LIB8TION_SCALE_H$/;"	d
__INC_LIB8TION_TRIG_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^#define __INC_LIB8TION_TRIG_H$/;"	d
__INC_M0_CLOCKLESS_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^#define __INC_M0_CLOCKLESS_H$/;"	d
__INC_NOISE_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.h	/^#define __INC_NOISE_H$/;"	d
__INC_OCTOWS2811_CONTROLLER_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^#define __INC_OCTOWS2811_CONTROLLER_H$/;"	d
__INC_OCTOWS2811_CONTROLLER_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/octows2811_controller.h	/^#define __INC_OCTOWS2811_CONTROLLER_H$/;"	d
__INC_PIXELSET_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^#define __INC_PIXELSET_H$/;"	d
__INC_PIXELS_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^#define __INC_PIXELS_H$/;"	d
__INC_PLATFORMS_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms.h	/^#define __INC_PLATFORMS_H$/;"	d
__INC_SMARTMATRIX_T3_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/smartmatrix_t3.h	/^#define __INC_SMARTMATRIX_T3_H$/;"	d
__INC_WS2812SERIAL_CONTROLLER_H	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/ws2812serial_controller.h	/^#define __INC_WS2812SERIAL_CONTROLLER_H$/;"	d
__IO	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^#define   __IO /;"	d
__LED_SYSDEFS_ARM_NRF51	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define __LED_SYSDEFS_ARM_NRF51$/;"	d
__LED_SYSDEFS_ARM_NRF52	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^#define __LED_SYSDEFS_ARM_NRF52$/;"	d
__O	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^#define   __O /;"	d
__PROG_TYPES_COMPAT__	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^#define __PROG_TYPES_COMPAT__$/;"	d
__PROG_TYPES_COMPAT__	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^#define __PROG_TYPES_COMPAT__$/;"	d	file:
__RGB_ORDER	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	static constexpr EOrder __RGB_ORDER() { return RGB_ORDER; }$/;"	f	class:ClocklessController	typeref:typename:EOrder
__T1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	static constexpr int __T1() { return T1; }$/;"	f	class:ClocklessController	typeref:typename:int
__T2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	static constexpr int __T2() { return T2; }$/;"	f	class:ClocklessController	typeref:typename:int
__T3	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	static constexpr int __T3() { return T3; }$/;"	f	class:ClocklessController	typeref:typename:int
__WAIT_TIME	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	static constexpr int __WAIT_TIME() { return WAIT_TIME; }$/;"	f	class:ClocklessController	typeref:typename:int
__XTRA0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	static constexpr int __XTRA0() { return XTRA0; }$/;"	f	class:ClocklessController	typeref:typename:int
__am_hal_systick_count	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/clockless_apollo3.h	/^__attribute__ ((always_inline)) inline static uint32_t __am_hal_systick_count() {$/;"	f	typeref:typename:FASTLED_NAMESPACE_BEGIN uint32_t
__anon10984a1e0102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                    [&] (RGB888 const & color) { return RGB888toPaletteIndex(color); },$/;"	f	function:fabgl::CVBS16Controller::setPixelAt	file:
__anon10984a1e0202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                     [&] (RGB888 const & color)                      { return RGB888toPaletteInd/;"	f	function:fabgl::CVBS16Controller::absDrawLine	file:
__anon10984a1e0302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                     [&] (int Y, int X1, int X2, uint8_t colorIndex) { rawFillRow(Y, X1, X2, col/;"	f	function:fabgl::CVBS16Controller::absDrawLine	file:
__anon10984a1e0402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                     [&] (int Y, int X1, int X2)                     { rawInvertRow(Y, X1, X2); /;"	f	function:fabgl::CVBS16Controller::absDrawLine	file:
__anon10984a1e0502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                     [&] (int X, int Y)                              { CVBS16_INVERT_PIXEL(X, Y)/;"	f	function:fabgl::CVBS16Controller::absDrawLine	file:
__anon10984a1e0602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                     [&] (RGB888 const & color)  { return RGB888toPaletteIndex(color); },$/;"	f	function:fabgl::CVBS16Controller::drawEllipse	file:
__anon10984a1e0702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                 [&] (int yA, int yB, int x1, int x2)        { swapRows(yA, yB, x1, x2); },     /;"	f	function:fabgl::CVBS16Controller::VScroll	file:
__anon10984a1e0802	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                 [&] (int yA, int yB)                        { tswap(m_viewPort[yA], m_viewPort[/;"	f	function:fabgl::CVBS16Controller::VScroll	file:
__anon10984a1e0902	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                 [&] (int y, int x1, int x2, RGB888 color)   { rawFillRow(y, x1, x2, color); }  /;"	f	function:fabgl::CVBS16Controller::VScroll	file:
__anon10984a1e0a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                   [&] (RGB888 const & color)                     { return RGB888toPaletteIndex(/;"	f	function:fabgl::CVBS16Controller::drawGlyph	file:
__anon10984a1e0b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                   [&] (int y)                                    { return (uint8_t*) m_viewPort/;"	f	function:fabgl::CVBS16Controller::drawGlyph	file:
__anon10984a1e0c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                    [&] (int Y, int X1, int X2) { rawInvertRow(Y, X1, X2); }$/;"	f	function:fabgl::CVBS16Controller::invertRect	file:
__anon10984a1e0d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                  [&] (RGB888 const & color)                     { return RGB888toPaletteIndex(c/;"	f	function:fabgl::CVBS16Controller::swapFGBG	file:
__anon10984a1e0e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                  [&] (int y)                                    { return (uint8_t*) m_viewPort[/;"	f	function:fabgl::CVBS16Controller::swapFGBG	file:
__anon10984a1e0f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                  [&] (int y)                                    { return (uint8_t*) m_viewPort[/;"	f	function:fabgl::CVBS16Controller::copyRect	file:
__anon10984a1e1002	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                              [&] (int y)                             { return (uint8_t*) m_view/;"	f	function:fabgl::CVBS16Controller::rawDrawBitmap_Native	file:
__anon10984a1e1102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                            [&] (int y)                  { return (uint8_t*) m_viewPort[y]; },  /;"	f	function:fabgl::CVBS16Controller::rawDrawBitmap_Mask	file:
__anon10984a1e1202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                            [&] (uint8_t * row, int x)   { CVBS16_SETPIXELINROW(row, x, foregrou/;"	f	function:fabgl::CVBS16Controller::rawDrawBitmap_Mask	file:
__anon10984a1e1302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                                [&] (int y)                             { return (uint8_t*) m_vi/;"	f	function:fabgl::CVBS16Controller::rawDrawBitmap_RGBA2222	file:
__anon10984a1e1402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                                [&] (uint8_t * row, int x, uint8_t src) { CVBS16_SETPIXELINROW(r/;"	f	function:fabgl::CVBS16Controller::rawDrawBitmap_RGBA2222	file:
__anon10984a1e1502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                                 [&] (int y)                                      { return (uint/;"	f	function:fabgl::CVBS16Controller::rawDrawBitmap_RGBA8888	file:
__anon10984a1e1602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                                 [&] (uint8_t * row, int x)                       { return CVBS1/;"	f	function:fabgl::CVBS16Controller::rawDrawBitmap_RGBA8888	file:
__anon10984a1e1702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^                                 [&] (uint8_t * row, int x, RGBA8888 const & src) { CVBS16_SETPI/;"	f	function:fabgl::CVBS16Controller::rawDrawBitmap_RGBA8888	file:
__anon110b7520010a	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^	typedef union {$/;"	u	class:InlineBlockClocklessController
__anon1168f0c30108	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^static const struct {$/;"	s	file:
__anon131fed600102	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^    app->rootWindow()->onPaint = [&]() {$/;"	f	function:fabgl::InputForm::init	file:
__anon131fed600202	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  mainFrame->onShow = [&]() {$/;"	f	function:fabgl::InputForm::init	file:
__anon131fed600302	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^          splitButton->onSelect = [&, i](int idx) {$/;"	f	function:fabgl::InputForm::init	file:
__anon131fed600402	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^          button->onClick = [&, i]() {$/;"	f	function:fabgl::InputForm::init	file:
__anon131fed600502	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^      mainFrame->onTimer = [&](uiTimerHandle t) {$/;"	f	function:fabgl::InputForm::init	file:
__anon131fed600602	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  edit->onKeyType = [&](uiKeyEventInfo const & key) { defaultEnterHandler(key); defaultEscapeHan/;"	f	function:fabgl::TextInputForm::addControls	file:
__anon131fed600702	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  mainFrame->onKeyUp = [&](uiKeyEventInfo const & key) { defaultEnterHandler(key); defaultEscape/;"	f	function:fabgl::MessageForm::addControls	file:
__anon131fed600802	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^    listBox->onClick = [&]() {$/;"	f	function:fabgl::SelectForm::addControls	file:
__anon131fed600902	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^    listBox->onDblClick = [&]() {$/;"	f	function:fabgl::SelectForm::addControls	file:
__anon131fed600a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  listBox->onKeyType = [&](uiKeyEventInfo const & key) { defaultEnterHandler(key); defaultEscape/;"	f	function:fabgl::SelectForm::addControls	file:
__anon131fed600b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  mainFrame->onKeyUp = [&](uiKeyEventInfo const & key) { defaultEscapeHandler(key); };$/;"	f	function:fabgl::ProgressForm::addControls	file:
__anon131fed600c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  mainFrame->onKeyUp = [&](uiKeyEventInfo const & key) { defaultEscapeHandler(key); };$/;"	f	function:fabgl::FileBrowserForm::addControls	file:
__anon131fed600d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  newFolderButton->onClick = [&]() {$/;"	f	function:fabgl::FileBrowserForm::addControls	file:
__anon131fed600e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^    unique_ptr<char[]> dirname(new char[MAXNAME + 1] { 0 } );$/;"	f	function:fabgl::FileBrowserForm::addControls::__anon131fed600d02	file:
__anon131fed600f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  renameButton->onClick = [&]() {$/;"	f	function:fabgl::FileBrowserForm::addControls	file:
__anon131fed601002	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^      unique_ptr<char[]> filename(new char[MAXNAME + 1] { 0 } );$/;"	f	function:fabgl::FileBrowserForm::addControls::__anon131fed600f02	file:
__anon131fed601102	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  deleteButton->onClick = [&]() {$/;"	f	function:fabgl::FileBrowserForm::addControls	file:
__anon131fed601202	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  copyButton->onClick = [&]() { doCopy(); };$/;"	f	function:fabgl::FileBrowserForm::addControls	file:
__anon131fed601302	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  pasteButton->onClick = [&]() { doPaste(); };$/;"	f	function:fabgl::FileBrowserForm::addControls	file:
__anon131fed601402	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  ib.progressBox("Copying", "Abort", true, app->canvas()->getWidth() * 2 \/ 3, [&](fabgl::Progre/;"	f	function:fabgl::FileBrowserForm::doPaste	file:
__anon131fed601502	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  mainFrame->onKeyUp = [&](uiKeyEventInfo const & key) { defaultEscapeHandler(key); };$/;"	f	function:fabgl::FileSelectorForm::addControls	file:
__anon131fed601602	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  fileBrowser->onChange = [&]() {$/;"	f	function:fabgl::FileSelectorForm::addControls	file:
__anon131fed601702	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  fileBrowser->onDblClick = [&]() {$/;"	f	function:fabgl::FileSelectorForm::addControls	file:
__anon131fed601802	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^  fileBrowser->onKeyType = [&](uiKeyEventInfo const & key) { defaultEnterHandler(key); defaultEs/;"	f	function:fabgl::FileSelectorForm::addControls	file:
__anon1746fbb40102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                    [&] (RGB888 const & color)           { return preparePixel(color); },$/;"	f	function:fabgl::TFTController::setPixelAt	file:
__anon1746fbb40202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                    [&] (int X, int Y, uint16_t pattern) { m_viewPort[Y][X] = pattern; }$/;"	f	function:fabgl::TFTController::setPixelAt	file:
__anon1746fbb40302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                     [&] (RGB888 const & color)                    { return preparePixel(color);/;"	f	function:fabgl::TFTController::absDrawLine	file:
__anon1746fbb40402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                     [&] (int Y, int X1, int X2, uint16_t pattern) { rawFillRow(Y, X1, X2, patte/;"	f	function:fabgl::TFTController::absDrawLine	file:
__anon1746fbb40502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                     [&] (int Y, int X1, int X2)                   { rawInvertRow(Y, X1, X2); },$/;"	f	function:fabgl::TFTController::absDrawLine	file:
__anon1746fbb40602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                     [&] (int X, int Y, uint16_t pattern)          { m_viewPort[Y][X] = pattern;/;"	f	function:fabgl::TFTController::absDrawLine	file:
__anon1746fbb40702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                     [&] (int X, int Y)                            { m_viewPort[Y][X] = ~m_viewP/;"	f	function:fabgl::TFTController::absDrawLine	file:
__anon1746fbb40802	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                     [&] (RGB888 const & color)           { return preparePixel(color); },$/;"	f	function:fabgl::TFTController::drawEllipse	file:
__anon1746fbb40902	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                     [&] (int X, int Y, uint16_t pattern) { m_viewPort[Y][X] = pattern; }$/;"	f	function:fabgl::TFTController::drawEllipse	file:
__anon1746fbb40a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                 [&] (int yA, int yB, int x1, int x2)        { swapRows(yA, yB, x1, x2); },     /;"	f	function:fabgl::TFTController::VScroll	file:
__anon1746fbb40b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                 [&] (int yA, int yB)                        { tswap(m_viewPort[yA], m_viewPort[/;"	f	function:fabgl::TFTController::VScroll	file:
__anon1746fbb40c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                 [&] (int y, int x1, int x2, RGB888 pattern) { rawFillRow(y, x1, x2, pattern); }/;"	f	function:fabgl::TFTController::VScroll	file:
__anon1746fbb40d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                 [&] (RGB888 const & color)               { return preparePixel(color); }, \/\/ /;"	f	function:fabgl::TFTController::HScroll	file:
__anon1746fbb40e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                 [&] (int y)                              { return m_viewPort[y]; },       \/\/ /;"	f	function:fabgl::TFTController::HScroll	file:
__anon1746fbb40f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                 [&] (uint16_t * row, int x)              { return row[x]; },              \/\/ /;"	f	function:fabgl::TFTController::HScroll	file:
__anon1746fbb41002	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                 [&] (uint16_t * row, int x, int pattern) { row[x] = pattern; }            \/\/ /;"	f	function:fabgl::TFTController::HScroll	file:
__anon1746fbb41102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                   [&] (RGB888 const & color) { return preparePixel(color); },$/;"	f	function:fabgl::TFTController::drawGlyph	file:
__anon1746fbb41202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                   [&] (int y)                { return m_viewPort[y]; },$/;"	f	function:fabgl::TFTController::drawGlyph	file:
__anon1746fbb41302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                   [&] (uint16_t * row, int x, uint16_t pattern) { row[x] = pattern; }$/;"	f	function:fabgl::TFTController::drawGlyph	file:
__anon1746fbb41402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                    [&] (int Y, int X1, int X2) { rawInvertRow(Y, X1, X2); }$/;"	f	function:fabgl::TFTController::invertRect	file:
__anon1746fbb41502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                  [&] (RGB888 const & color)                    { return preparePixel(color); },$/;"	f	function:fabgl::TFTController::swapFGBG	file:
__anon1746fbb41602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                  [&] (int y)                                   { return m_viewPort[y]; },$/;"	f	function:fabgl::TFTController::swapFGBG	file:
__anon1746fbb41702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                  [&] (uint16_t * row, int x)                   { return row[x]; },$/;"	f	function:fabgl::TFTController::swapFGBG	file:
__anon1746fbb41802	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                  [&] (uint16_t * row, int x, uint16_t pattern) { row[x] = pattern; }$/;"	f	function:fabgl::TFTController::swapFGBG	file:
__anon1746fbb41902	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                  [&] (int y)                                   { return m_viewPort[y]; },$/;"	f	function:fabgl::TFTController::copyRect	file:
__anon1746fbb41a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                  [&] (uint16_t * row, int x)                   { return row[x]; },$/;"	f	function:fabgl::TFTController::copyRect	file:
__anon1746fbb41b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                  [&] (uint16_t * row, int x, uint16_t pattern) { row[x] = pattern; }$/;"	f	function:fabgl::TFTController::copyRect	file:
__anon1746fbb41c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                                 [&] (int y)                               { return m_viewPort[y/;"	f	function:fabgl::TFTController::rawDrawBitmap_Native	file:
__anon1746fbb41d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                                 [&] (uint16_t * row, int x, uint16_t src) { row[x] = src; }    /;"	f	function:fabgl::TFTController::rawDrawBitmap_Native	file:
__anon1746fbb41e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                            [&] (int y)                 { return m_viewPort[y]; },            \//;"	f	function:fabgl::TFTController::rawDrawBitmap_Mask	file:
__anon1746fbb41f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                            [&] (uint16_t * row, int x) { return row[x]; },                   \//;"	f	function:fabgl::TFTController::rawDrawBitmap_Mask	file:
__anon1746fbb42002	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                            [&] (uint16_t * row, int x) { row[x] = foregroundPattern; }       \//;"	f	function:fabgl::TFTController::rawDrawBitmap_Mask	file:
__anon1746fbb42102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                                [&] (int y)                              { return m_viewPort[y];/;"	f	function:fabgl::TFTController::rawDrawBitmap_RGBA2222	file:
__anon1746fbb42202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                                [&] (uint16_t * row, int x)              { return row[x]; },    /;"	f	function:fabgl::TFTController::rawDrawBitmap_RGBA2222	file:
__anon1746fbb42302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                                [&] (uint16_t * row, int x, uint8_t src) { row[x] = RGBA2222toNa/;"	f	function:fabgl::TFTController::rawDrawBitmap_RGBA2222	file:
__anon1746fbb42402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                                 [&] (int y)                                       { return m_vi/;"	f	function:fabgl::TFTController::rawDrawBitmap_RGBA8888	file:
__anon1746fbb42502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                                 [&] (uint16_t * row, int x)                       { return row[/;"	f	function:fabgl::TFTController::rawDrawBitmap_RGBA8888	file:
__anon1746fbb42602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^                                 [&] (uint16_t * row, int x, RGBA8888 const & src) { row[x] = RG/;"	f	function:fabgl::TFTController::rawDrawBitmap_RGBA8888	file:
__anon2152c22b010a	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^  typedef union {$/;"	u	class:FlexibleInlineBlockClocklessController
__anon259f680a0102	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestPaintBoxFrame.h	/^    paintBox->onPaint = [&](Rect const & r) { onPaintPaintBox(r); };$/;"	f	function:TestPaintBoxFrame::TestPaintBoxFrame	file:
__anon259f680a0202	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestPaintBoxFrame.h	/^    paintBox->onChangeHScrollBar = [&]() { paintBox->repaint(); };$/;"	f	function:TestPaintBoxFrame::TestPaintBoxFrame	file:
__anon26d1ab7c010a	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef union {$/;"	u
__anon26d1ab7c0208	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    struct {$/;"	s	union:__anon26d1ab7c010a
__anon26d1ab7c0308	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    struct {$/;"	s	union:__anon26d1ab7c010a
__anon26d1ab7c0408	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    struct {$/;"	s	union:__anon26d1ab7c010a
__anon2749c531010a	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	typedef union {$/;"	u	class:InlineBlockClocklessController
__anon2749c531020a	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	typedef union {$/;"	u	class:SixteenWayInlineBlockClocklessController
__anon2dcd23670102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                    [&] (RGB888 const & color)          { return preparePixel(color); },$/;"	f	function:fabgl::VGAController::setPixelAt	file:
__anon2dcd23670202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                    [&] (int X, int Y, uint8_t pattern) { VGA_PIXEL(X, Y) = pattern; }$/;"	f	function:fabgl::VGAController::setPixelAt	file:
__anon2dcd23670302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                     [&] (RGB888 const & color)                   { return preparePixel(color); /;"	f	function:fabgl::VGAController::absDrawLine	file:
__anon2dcd23670402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                     [&] (int Y, int X1, int X2, uint8_t pattern) { rawFillRow(Y, X1, X2, patter/;"	f	function:fabgl::VGAController::absDrawLine	file:
__anon2dcd23670502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                     [&] (int Y, int X1, int X2)                  { rawInvertRow(Y, X1, X2); },$/;"	f	function:fabgl::VGAController::absDrawLine	file:
__anon2dcd23670602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                     [&] (int X, int Y, uint8_t pattern)          { VGA_PIXEL(X, Y) = pattern; }/;"	f	function:fabgl::VGAController::absDrawLine	file:
__anon2dcd23670702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                     [&] (int X, int Y)                           { VGA_INVERT_PIXEL(X, Y); }$/;"	f	function:fabgl::VGAController::absDrawLine	file:
__anon2dcd23670802	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                     [&] (RGB888 const & color)          { return preparePixel(color); },$/;"	f	function:fabgl::VGAController::drawEllipse	file:
__anon2dcd23670902	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                     [&] (int X, int Y, uint8_t pattern) { VGA_PIXEL(X, Y) = pattern; }$/;"	f	function:fabgl::VGAController::drawEllipse	file:
__anon2dcd23670a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                 [&] (int yA, int yB, int x1, int x2)        { swapRows(yA, yB, x1, x2); },     /;"	f	function:fabgl::VGAController::VScroll	file:
__anon2dcd23670b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                 [&] (int yA, int yB)                        { tswap(m_viewPort[yA], m_viewPort[/;"	f	function:fabgl::VGAController::VScroll	file:
__anon2dcd23670c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                 [&] (int y, int x1, int x2, RGB888 pattern) { rawFillRow(y, x1, x2, pattern); }/;"	f	function:fabgl::VGAController::VScroll	file:
__anon2dcd23670d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                   [&] (RGB888 const & color) { return preparePixel(color); },$/;"	f	function:fabgl::VGAController::drawGlyph	file:
__anon2dcd23670e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                   [&] (int y)                { return (uint8_t*) m_viewPort[y]; },$/;"	f	function:fabgl::VGAController::drawGlyph	file:
__anon2dcd23670f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                   [&] (uint8_t * row, int x, uint8_t pattern) { VGA_PIXELINROW(row, x) = patter/;"	f	function:fabgl::VGAController::drawGlyph	file:
__anon2dcd23671002	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                    [&] (int Y, int X1, int X2) { rawInvertRow(Y, X1, X2); }$/;"	f	function:fabgl::VGAController::invertRect	file:
__anon2dcd23671102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                  [&] (RGB888 const & color)                  { return preparePixel(color); },$/;"	f	function:fabgl::VGAController::swapFGBG	file:
__anon2dcd23671202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                  [&] (int y)                                 { return (uint8_t*) m_viewPort[y];/;"	f	function:fabgl::VGAController::swapFGBG	file:
__anon2dcd23671302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                  [&] (uint8_t * row, int x)                  { return VGA_PIXELINROW(row, x); }/;"	f	function:fabgl::VGAController::swapFGBG	file:
__anon2dcd23671402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                  [&] (uint8_t * row, int x, uint8_t pattern) { VGA_PIXELINROW(row, x) = pattern/;"	f	function:fabgl::VGAController::swapFGBG	file:
__anon2dcd23671502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                  [&] (int y)                                 { return (uint8_t*) m_viewPort[y];/;"	f	function:fabgl::VGAController::copyRect	file:
__anon2dcd23671602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                  [&] (uint8_t * row, int x)                  { return VGA_PIXELINROW(row, x); }/;"	f	function:fabgl::VGAController::copyRect	file:
__anon2dcd23671702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                  [&] (uint8_t * row, int x, uint8_t pattern) { VGA_PIXELINROW(row, x) = pattern/;"	f	function:fabgl::VGAController::copyRect	file:
__anon2dcd23671802	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                              [&] (int y)                             { return (uint8_t*) m_view/;"	f	function:fabgl::VGAController::rawDrawBitmap_Native	file:
__anon2dcd23671902	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                              [&] (uint8_t * row, int x, uint8_t src) { VGA_PIXELINROW(row, x) =/;"	f	function:fabgl::VGAController::rawDrawBitmap_Native	file:
__anon2dcd23671a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                            [&] (int y)                { return (uint8_t*) m_viewPort[y]; },    /;"	f	function:fabgl::VGAController::rawDrawBitmap_Mask	file:
__anon2dcd23671b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                            [&] (uint8_t * row, int x) { return VGA_PIXELINROW(row, x); },      /;"	f	function:fabgl::VGAController::rawDrawBitmap_Mask	file:
__anon2dcd23671c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                            [&] (uint8_t * row, int x) { VGA_PIXELINROW(row, x) = foregroundPatt/;"	f	function:fabgl::VGAController::rawDrawBitmap_Mask	file:
__anon2dcd23671d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                                [&] (int y)                             { return (uint8_t*) m_vi/;"	f	function:fabgl::VGAController::rawDrawBitmap_RGBA2222	file:
__anon2dcd23671e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                                [&] (uint8_t * row, int x)              { return VGA_PIXELINROW(/;"	f	function:fabgl::VGAController::rawDrawBitmap_RGBA2222	file:
__anon2dcd23671f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                                [&] (uint8_t * row, int x, uint8_t src) { VGA_PIXELINROW(row, x)/;"	f	function:fabgl::VGAController::rawDrawBitmap_RGBA2222	file:
__anon2dcd23672002	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                                 [&] (int y)                                      { return (uint/;"	f	function:fabgl::VGAController::rawDrawBitmap_RGBA8888	file:
__anon2dcd23672102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                                 [&] (uint8_t * row, int x)                       { return VGA_P/;"	f	function:fabgl::VGAController::rawDrawBitmap_RGBA8888	file:
__anon2dcd23672202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^                                 [&] (uint8_t * row, int x, RGBA8888 const & src) { VGA_PIXELINR/;"	f	function:fabgl::VGAController::rawDrawBitmap_RGBA8888	file:
__anon34e980030102	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^    m_termctrl.onRead  = [&](int * c) { onRead(c); };$/;"	f	function:fabgl::LineEditor::beginInput	file:
__anon34e980030202	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^    m_termctrl.onWrite = [&](int c)   { onWrite(c); };$/;"	f	function:fabgl::LineEditor::beginInput	file:
__anon3b11bce90102	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    rootWindow()->onPaint = [&]() { drawInfo(canvas()); };$/;"	f	function:ConfigDialog::init	file:
__anon3b11bce90202	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    mainFrame->onKeyUp = [&](uiKeyEventInfo const & key) {$/;"	f	function:ConfigDialog::init	file:
__anon3b11bce90302	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    browseFD0Button->onClick = [&]() { browseFilename(FD0PathEdit); };$/;"	f	function:ConfigDialog::init	file:
__anon3b11bce90402	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    browseFD1Button->onClick = [&]() { browseFilename(FD1PathEdit); };$/;"	f	function:ConfigDialog::init	file:
__anon3b11bce90502	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    browseHD0Button->onClick = [&]() { browseFilename(HD0PathEdit); };$/;"	f	function:ConfigDialog::init	file:
__anon3b11bce90602	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    browseHD1Button->onClick = [&]() { browseFilename(HD1PathEdit); };$/;"	f	function:ConfigDialog::init	file:
__anon3b11bce90702	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    saveButton->onClick = [&]() {$/;"	f	function:ConfigDialog::init	file:
__anon3b11bce90802	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    cancelButton->onClick = [&]() {$/;"	f	function:ConfigDialog::init	file:
__anon3b11bce90902	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    createImageButton->onClick = [&]() {$/;"	f	function:ConfigDialog::init	file:
__anon3b11bce90a02	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    unique_ptr<char[]> dir(new char[MAXVALUELENGTH + 1] { '\/', 'S', 'D', 0 } );$/;"	f	function:ConfigDialog::browseFilename	file:
__anon3b11bce90b02	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    unique_ptr<char[]> dir(new char[MAXVALUELENGTH + 1]      { '\/', 'S', 'D', 0 } );$/;"	f	function:ConfigDialog::createDiskImage	file:
__anon3b11bce90c02	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    unique_ptr<char[]> filename(new char[MAXVALUELENGTH + 1] { 'n', 'e', 'w', 'i', 'm', 'a', 'g'/;"	f	function:ConfigDialog::createDiskImage	file:
__anon3b11bce90d02	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^      ib.progressBox("", "Abort", true, 380, [&](fabgl::ProgressForm * form) {$/;"	f	function:ConfigDialog::createDiskImage	file:
__anon3b11bce90e08	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  static const struct {$/;"	s	function:createFATFloppyImage	file:
__anon3b11bce90f02	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    ibox->progressBox("", "Abort", true, 380, [&](fabgl::ProgressForm * form) {$/;"	f	function:createFATFloppyImage	file:
__anon3dd53dc60108	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  struct {$/;"	s	union:fabgl::GlyphOptions
__anon3dd53dc60208	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  struct {$/;"	s	struct:fabgl::Sprite
__anon3dd53dc6030a	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  union {$/;"	u	struct:fabgl::Primitive
__anon40aa46de0103	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^  enum {$/;"	g	struct:string_traits
__anon48e99a99010a	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^    union {$/;"	u	function:sin16_avr
__anon48e99a990208	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^        struct {$/;"	s	union:sin16_avr::__anon48e99a99010a
__anon4cec7af20103	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^typedef enum {$/;"	g
__anon4cec7af20203	examples/test/.pio/libdeps/esp32dev/FastLED/src/color.h	/^typedef enum {$/;"	g
__anon529e8bdf0102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                    [&] (RGB888 const & color) { return RGB888toPaletteIndex(color); },$/;"	f	function:fabgl::VGA8Controller::setPixelAt	file:
__anon529e8bdf0202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                     [&] (RGB888 const & color)                      { return RGB888toPaletteInd/;"	f	function:fabgl::VGA8Controller::absDrawLine	file:
__anon529e8bdf0302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                     [&] (int Y, int X1, int X2, uint8_t colorIndex) { rawFillRow(Y, X1, X2, col/;"	f	function:fabgl::VGA8Controller::absDrawLine	file:
__anon529e8bdf0402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                     [&] (int Y, int X1, int X2)                     { rawInvertRow(Y, X1, X2); /;"	f	function:fabgl::VGA8Controller::absDrawLine	file:
__anon529e8bdf0502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                     [&] (int X, int Y)                              { VGA8_INVERT_PIXEL(X, Y); /;"	f	function:fabgl::VGA8Controller::absDrawLine	file:
__anon529e8bdf0602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                     [&] (RGB888 const & color)  { return RGB888toPaletteIndex(color); },$/;"	f	function:fabgl::VGA8Controller::drawEllipse	file:
__anon529e8bdf0702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                 [&] (int yA, int yB, int x1, int x2)        { swapRows(yA, yB, x1, x2); },     /;"	f	function:fabgl::VGA8Controller::VScroll	file:
__anon529e8bdf0802	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                 [&] (int yA, int yB)                        { tswap(m_viewPort[yA], m_viewPort[/;"	f	function:fabgl::VGA8Controller::VScroll	file:
__anon529e8bdf0902	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                 [&] (int y, int x1, int x2, RGB888 color)   { rawFillRow(y, x1, x2, color); }  /;"	f	function:fabgl::VGA8Controller::VScroll	file:
__anon529e8bdf0a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                   [&] (RGB888 const & color)                     { return RGB888toPaletteIndex(/;"	f	function:fabgl::VGA8Controller::drawGlyph	file:
__anon529e8bdf0b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                   [&] (int y)                                    { return (uint8_t*) m_viewPort/;"	f	function:fabgl::VGA8Controller::drawGlyph	file:
__anon529e8bdf0c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                    [&] (int Y, int X1, int X2) { rawInvertRow(Y, X1, X2); }$/;"	f	function:fabgl::VGA8Controller::invertRect	file:
__anon529e8bdf0d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                  [&] (RGB888 const & color)                     { return RGB888toPaletteIndex(c/;"	f	function:fabgl::VGA8Controller::swapFGBG	file:
__anon529e8bdf0e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                  [&] (int y)                                    { return (uint8_t*) m_viewPort[/;"	f	function:fabgl::VGA8Controller::swapFGBG	file:
__anon529e8bdf0f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                  [&] (int y)                                    { return (uint8_t*) m_viewPort[/;"	f	function:fabgl::VGA8Controller::copyRect	file:
__anon529e8bdf1002	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                              [&] (int y)                             { return (uint8_t*) m_view/;"	f	function:fabgl::VGA8Controller::rawDrawBitmap_Native	file:
__anon529e8bdf1102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                            [&] (int y)                  { return (uint8_t*) m_viewPort[y]; },  /;"	f	function:fabgl::VGA8Controller::rawDrawBitmap_Mask	file:
__anon529e8bdf1202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                            [&] (uint8_t * row, int x)   { VGA8_SETPIXELINROW(row, x, foreground/;"	f	function:fabgl::VGA8Controller::rawDrawBitmap_Mask	file:
__anon529e8bdf1302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                                [&] (int y)                             { return (uint8_t*) m_vi/;"	f	function:fabgl::VGA8Controller::rawDrawBitmap_RGBA2222	file:
__anon529e8bdf1402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                                [&] (uint8_t * row, int x, uint8_t src) { VGA8_SETPIXELINROW(row/;"	f	function:fabgl::VGA8Controller::rawDrawBitmap_RGBA2222	file:
__anon529e8bdf1502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                                 [&] (int y)                                      { return (uint/;"	f	function:fabgl::VGA8Controller::rawDrawBitmap_RGBA8888	file:
__anon529e8bdf1602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                                 [&] (uint8_t * row, int x)                       { return VGA8_/;"	f	function:fabgl::VGA8Controller::rawDrawBitmap_RGBA8888	file:
__anon529e8bdf1702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^                                 [&] (uint8_t * row, int x, RGBA8888 const & src) { VGA8_SETPIXE/;"	f	function:fabgl::VGA8Controller::rawDrawBitmap_RGBA8888	file:
__anon5f1c9b840108	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^{$/;"	s
__anon5f1c9b840208	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/cm3_regs.h	/^{$/;"	s
__anon759a1eae0102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                    [&] (RGB888 const & color) { return RGB888toPaletteIndex(color); },$/;"	f	function:fabgl::VGA16Controller::setPixelAt	file:
__anon759a1eae0202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                     [&] (RGB888 const & color)                      { return RGB888toPaletteInd/;"	f	function:fabgl::VGA16Controller::absDrawLine	file:
__anon759a1eae0302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                     [&] (int Y, int X1, int X2, uint8_t colorIndex) { rawFillRow(Y, X1, X2, col/;"	f	function:fabgl::VGA16Controller::absDrawLine	file:
__anon759a1eae0402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                     [&] (int Y, int X1, int X2)                     { rawInvertRow(Y, X1, X2); /;"	f	function:fabgl::VGA16Controller::absDrawLine	file:
__anon759a1eae0502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                     [&] (int X, int Y)                              { VGA16_INVERT_PIXEL(X, Y);/;"	f	function:fabgl::VGA16Controller::absDrawLine	file:
__anon759a1eae0602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                     [&] (RGB888 const & color)  { return RGB888toPaletteIndex(color); },$/;"	f	function:fabgl::VGA16Controller::drawEllipse	file:
__anon759a1eae0702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                 [&] (int yA, int yB, int x1, int x2)        { swapRows(yA, yB, x1, x2); },     /;"	f	function:fabgl::VGA16Controller::VScroll	file:
__anon759a1eae0802	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                 [&] (int yA, int yB)                        { tswap(m_viewPort[yA], m_viewPort[/;"	f	function:fabgl::VGA16Controller::VScroll	file:
__anon759a1eae0902	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                 [&] (int y, int x1, int x2, RGB888 color)   { rawFillRow(y, x1, x2, color); }  /;"	f	function:fabgl::VGA16Controller::VScroll	file:
__anon759a1eae0a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                   [&] (RGB888 const & color)                     { return RGB888toPaletteIndex(/;"	f	function:fabgl::VGA16Controller::drawGlyph	file:
__anon759a1eae0b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                   [&] (int y)                                    { return (uint8_t*) m_viewPort/;"	f	function:fabgl::VGA16Controller::drawGlyph	file:
__anon759a1eae0c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                    [&] (int Y, int X1, int X2) { rawInvertRow(Y, X1, X2); }$/;"	f	function:fabgl::VGA16Controller::invertRect	file:
__anon759a1eae0d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                  [&] (RGB888 const & color)                     { return RGB888toPaletteIndex(c/;"	f	function:fabgl::VGA16Controller::swapFGBG	file:
__anon759a1eae0e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                  [&] (int y)                                    { return (uint8_t*) m_viewPort[/;"	f	function:fabgl::VGA16Controller::swapFGBG	file:
__anon759a1eae0f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                  [&] (int y)                                    { return (uint8_t*) m_viewPort[/;"	f	function:fabgl::VGA16Controller::copyRect	file:
__anon759a1eae1002	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                              [&] (int y)                             { return (uint8_t*) m_view/;"	f	function:fabgl::VGA16Controller::rawDrawBitmap_Native	file:
__anon759a1eae1102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                            [&] (int y)                  { return (uint8_t*) m_viewPort[y]; },  /;"	f	function:fabgl::VGA16Controller::rawDrawBitmap_Mask	file:
__anon759a1eae1202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                            [&] (uint8_t * row, int x)   { VGA16_SETPIXELINROW(row, x, foregroun/;"	f	function:fabgl::VGA16Controller::rawDrawBitmap_Mask	file:
__anon759a1eae1302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                                [&] (int y)                             { return (uint8_t*) m_vi/;"	f	function:fabgl::VGA16Controller::rawDrawBitmap_RGBA2222	file:
__anon759a1eae1402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                                [&] (uint8_t * row, int x, uint8_t src) { VGA16_SETPIXELINROW(ro/;"	f	function:fabgl::VGA16Controller::rawDrawBitmap_RGBA2222	file:
__anon759a1eae1502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                                 [&] (int y)                                      { return (uint/;"	f	function:fabgl::VGA16Controller::rawDrawBitmap_RGBA8888	file:
__anon759a1eae1602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                                 [&] (uint8_t * row, int x)                       { return VGA16/;"	f	function:fabgl::VGA16Controller::rawDrawBitmap_RGBA8888	file:
__anon759a1eae1702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^                                 [&] (uint8_t * row, int x, RGBA8888 const & src) { VGA16_SETPIX/;"	f	function:fabgl::VGA16Controller::rawDrawBitmap_RGBA8888	file:
__anon7b74f8b90102	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^    normalButton->onClick = [&]() { app()->messageBox("", "Button Pressed!", "OK", nullptr, null/;"	f	function:TestControlsFrame::TestControlsFrame	file:
__anon7b74f8b90202	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^    switchButton->onChange = [&]() { switchButton->setText( switchButton->down() ? "Switch Butto/;"	f	function:TestControlsFrame::TestControlsFrame	file:
__anon7b74f8b90302	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^    splitButton1->onSelect = [&](int index) { InputBox(app()).messageFmt(nullptr, nullptr, "OK",/;"	f	function:TestControlsFrame::TestControlsFrame	file:
__anon7b74f8b90402	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^    slider1->onChange = [&]() {$/;"	f	function:TestControlsFrame::TestControlsFrame	file:
__anon7b74f8b90502	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^    slider2->onChange = [&]() {$/;"	f	function:TestControlsFrame::TestControlsFrame	file:
__anon7c3d3698010a	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/alias_cast.hpp	/^  union {$/;"	u	struct:alias_cast_t
__anon7ddb64db0108	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  struct {$/;"	s	struct:fabgl::AltVirtualKeyDef
__anon7de97ea30108	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^typedef struct {                                    \/*!< GPIO Structure                        /;"	s
__anon7ef1f9590102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                    [&] (RGB888 const & color) { return RGB888toPaletteIndex(color); },$/;"	f	function:fabgl::VGA2Controller::setPixelAt	file:
__anon7ef1f9590202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                     [&] (RGB888 const & color)                      { return RGB888toPaletteInd/;"	f	function:fabgl::VGA2Controller::absDrawLine	file:
__anon7ef1f9590302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                     [&] (int Y, int X1, int X2, uint8_t colorIndex) { rawFillRow(Y, X1, X2, col/;"	f	function:fabgl::VGA2Controller::absDrawLine	file:
__anon7ef1f9590402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                     [&] (int Y, int X1, int X2)                     { rawInvertRow(Y, X1, X2); /;"	f	function:fabgl::VGA2Controller::absDrawLine	file:
__anon7ef1f9590502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                     [&] (int X, int Y)                              { VGA2_INVERT_PIXEL(X, Y); /;"	f	function:fabgl::VGA2Controller::absDrawLine	file:
__anon7ef1f9590602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                     [&] (RGB888 const & color)  { return RGB888toPaletteIndex(color); },$/;"	f	function:fabgl::VGA2Controller::drawEllipse	file:
__anon7ef1f9590702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                 [&] (int yA, int yB, int x1, int x2)        { swapRows(yA, yB, x1, x2); },     /;"	f	function:fabgl::VGA2Controller::VScroll	file:
__anon7ef1f9590802	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                 [&] (int yA, int yB)                        { tswap(m_viewPort[yA], m_viewPort[/;"	f	function:fabgl::VGA2Controller::VScroll	file:
__anon7ef1f9590902	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                 [&] (int y, int x1, int x2, RGB888 color)   { rawFillRow(y, x1, x2, color); }  /;"	f	function:fabgl::VGA2Controller::VScroll	file:
__anon7ef1f9590a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                   [&] (RGB888 const & color)                     { return RGB888toPaletteIndex(/;"	f	function:fabgl::VGA2Controller::drawGlyph	file:
__anon7ef1f9590b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                   [&] (int y)                                    { return (uint8_t*) m_viewPort/;"	f	function:fabgl::VGA2Controller::drawGlyph	file:
__anon7ef1f9590c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                    [&] (int Y, int X1, int X2) { rawInvertRow(Y, X1, X2); }$/;"	f	function:fabgl::VGA2Controller::invertRect	file:
__anon7ef1f9590d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                  [&] (RGB888 const & color)                     { return RGB888toPaletteIndex(c/;"	f	function:fabgl::VGA2Controller::swapFGBG	file:
__anon7ef1f9590e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                  [&] (int y)                                    { return (uint8_t*) m_viewPort[/;"	f	function:fabgl::VGA2Controller::swapFGBG	file:
__anon7ef1f9590f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                  [&] (int y)                                    { return (uint8_t*) m_viewPort[/;"	f	function:fabgl::VGA2Controller::copyRect	file:
__anon7ef1f9591002	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                              [&] (int y)                             { return (uint8_t*) m_view/;"	f	function:fabgl::VGA2Controller::rawDrawBitmap_Native	file:
__anon7ef1f9591102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                            [&] (int y)                  { return (uint8_t*) m_viewPort[y]; },  /;"	f	function:fabgl::VGA2Controller::rawDrawBitmap_Mask	file:
__anon7ef1f9591202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                            [&] (uint8_t * row, int x)   { VGA2_SETPIXELINROW(row, x, foreground/;"	f	function:fabgl::VGA2Controller::rawDrawBitmap_Mask	file:
__anon7ef1f9591302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                                [&] (int y)                             { return (uint8_t*) m_vi/;"	f	function:fabgl::VGA2Controller::rawDrawBitmap_RGBA2222	file:
__anon7ef1f9591402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                                [&] (uint8_t * row, int x, uint8_t src) { VGA2_SETPIXELINROW(row/;"	f	function:fabgl::VGA2Controller::rawDrawBitmap_RGBA2222	file:
__anon7ef1f9591502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                                 [&] (int y)                                      { return (uint/;"	f	function:fabgl::VGA2Controller::rawDrawBitmap_RGBA8888	file:
__anon7ef1f9591602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                                 [&] (uint8_t * row, int x)                       { return VGA2_/;"	f	function:fabgl::VGA2Controller::rawDrawBitmap_RGBA8888	file:
__anon7ef1f9591702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^                                 [&] (uint8_t * row, int x, RGBA8888 const & src) { VGA2_SETPIXE/;"	f	function:fabgl::VGA2Controller::rawDrawBitmap_RGBA8888	file:
__anon81886eed010a	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  typedef union {$/;"	u	class:fabgl::i8080
__anon81886eed0208	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    struct {$/;"	s	union:fabgl::i8080::__anon81886eed010a
__anon81886eed0308	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  typedef struct {$/;"	s	class:fabgl::i8080
__anon85fd6edb0102	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/restartdialog.h	/^    button->onClick = [&]() {$/;"	f	function:RebootDialog::RebootDialog	file:
__anon85fd6edb0202	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/restartdialog.h	/^    onTimer = [&](uiTimerHandle tHandle) { countDown(); };$/;"	f	function:RebootDialog::RebootDialog	file:
__anon875718a30103	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef enum {$/;"	g
__anon875718a3020a	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef union {$/;"	u
__anon875718a30308	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    struct {$/;"	s	union:__anon875718a3020a
__anon875718a30403	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^typedef enum {$/;"	g
__anon8cc37bff0111	examples/test/lib/JFixLib/src/ofNoise.h	/^namespace{$/;"	n
__anon8cc37bff0211	examples/test/lib/JFixLib/src/ofNoise.h	/^namespace{$/;"	n
__anon8d47e6360103	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^enum {$/;"	g	namespace:fabgl
__anon8d47e6360203	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^enum {$/;"	g	namespace:fabgl
__anon8d47e636030a	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  union {$/;"	u	struct:fabgl::Z80_STATE
__anon9028346e0102	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^  m_timers.remove_if([&](uiTimerAssoc const & p) { return p.first == dest; });$/;"	f	function:fabgl::uiApp::killEvtHandlerTimers	file:
__anon9028346e0202	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^    button1->onClick = [&]() { mainFrame->exitModal(1); };$/;"	f	function:fabgl::uiApp::messageBox	file:
__anon9028346e0302	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^    button2->onClick = [&]() { mainFrame->exitModal(2); };$/;"	f	function:fabgl::uiApp::messageBox	file:
__anon9028346e0402	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^    button3->onClick = [&]() { mainFrame->exitModal(3); };$/;"	f	function:fabgl::uiApp::messageBox	file:
__anon9028346e0502	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^  mainFrame->onShow = [&]() {$/;"	f	function:fabgl::uiApp::messageBox	file:
__anon9028346e0602	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^  mainFrame->onKeyUp = [&](uiKeyEventInfo const & key) {$/;"	f	function:fabgl::uiApp::inputBox	file:
__anon9028346e0702	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^    button1->onClick = [&]() { mainFrame->exitModal(1); };$/;"	f	function:fabgl::uiApp::inputBox	file:
__anon9028346e0802	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^    button2->onClick = [&]() { mainFrame->exitModal(2); };$/;"	f	function:fabgl::uiApp::inputBox	file:
__anon9028346e0902	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^  mainFrame->onShow = [&]() {$/;"	f	function:fabgl::uiApp::inputBox	file:
__anon9028346e0a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^  mainFrame->onKeyUp = [&](uiKeyEventInfo const & key) {$/;"	f	function:fabgl::uiApp::fileDialog	file:
__anon9028346e0b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^  browser->onChange = [&]() {$/;"	f	function:fabgl::uiApp::fileDialog	file:
__anon9028346e0c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^  browser->onDblClick = [&]() {$/;"	f	function:fabgl::uiApp::fileDialog	file:
__anon9028346e0d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^  buttonCancel->onClick = [&]() { mainFrame->exitModal(0); };$/;"	f	function:fabgl::uiApp::fileDialog	file:
__anon9028346e0e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^  buttonOK->onClick     = [&]() { mainFrame->exitModal(1); };$/;"	f	function:fabgl::uiApp::fileDialog	file:
__anon9028346e0f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^  mainFrame->onShow = [&]() {$/;"	f	function:fabgl::uiApp::fileDialog	file:
__anon9028346e1002	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^      listbox()->onKillFocus = [&]() {$/;"	f	function:fabgl::uiCustomComboBox::processEvent	file:
__anon9028346e1102	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^      listbox()->onChange = [&]() {$/;"	f	function:fabgl::uiCustomComboBox::processEvent	file:
__anon9028346e1202	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^      listbox()->onKeyType = [&](uiKeyEventInfo const & key) {$/;"	f	function:fabgl::uiCustomComboBox::processEvent	file:
__anon9028346e1302	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^  m_button->onMouseDown = [&](uiMouseEventInfo const & ev) {$/;"	f	function:fabgl::uiSplitButton::uiSplitButton	file:
__anon9028346e1402	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^  m_menu->onSelect = [&](int idx) {$/;"	f	function:fabgl::uiSplitButton::uiSplitButton	file:
__anon9bd8dbab0103	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^enum {$/;"	g
__anon9bd8dbab0208	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  struct {$/;"	s	union:VariantContent
__anon9f6a8c150102	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^  m_HAL->onCPUStep = [&]() {$/;"	f	function:BDOS::BDOS	file:
__anon9f6a8c150202	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^  ed.onRead = [&](int * c) {$/;"	f	function:BDOS::BDOS_readConsoleBuffer	file:
__anon9f6a8c150302	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^  ed.onWrite = [&](int c) {$/;"	f	function:BDOS::BDOS_readConsoleBuffer	file:
__anon9f6a8c150402	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^  ed.onChar = [&](int * c) {$/;"	f	function:BDOS::BDOS_readConsoleBuffer	file:
__anon9f6a8c150502	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^  ed.onSpecialChar = [&](LineEditorSpecialChar sc) {$/;"	f	function:BDOS::BDOS_readConsoleBuffer	file:
__anon9f6a8c150602	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^  ed.onCarriageReturn = [&](int * op) {$/;"	f	function:BDOS::BDOS_readConsoleBuffer	file:
__anona735931d0102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                    [&] (RGB888 const & color)          { return preparePixel(color); },$/;"	f	function:fabgl::SSD1306Controller::setPixelAt	file:
__anona735931d0202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                    [&] (int X, int Y, uint8_t pattern) { SSD1306_SETPIXELCOLOR(X, Y, pattern); /;"	f	function:fabgl::SSD1306Controller::setPixelAt	file:
__anona735931d0302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                     [&] (RGB888 const & color)                   { return preparePixel(color); /;"	f	function:fabgl::SSD1306Controller::absDrawLine	file:
__anona735931d0402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                     [&] (int Y, int X1, int X2, uint8_t pattern) { rawFillRow(Y, X1, X2, patter/;"	f	function:fabgl::SSD1306Controller::absDrawLine	file:
__anona735931d0502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                     [&] (int Y, int X1, int X2)                  { rawInvertRow(Y, X1, X2); },$/;"	f	function:fabgl::SSD1306Controller::absDrawLine	file:
__anona735931d0602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                     [&] (int X, int Y, uint8_t pattern)          { SSD1306_SETPIXELCOLOR(X, Y, /;"	f	function:fabgl::SSD1306Controller::absDrawLine	file:
__anona735931d0702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                     [&] (int X, int Y)                           { SSD1306_INVERTPIXEL(X, Y); }$/;"	f	function:fabgl::SSD1306Controller::absDrawLine	file:
__anona735931d0802	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                     [&] (RGB888 const & color)          { return preparePixel(color); },$/;"	f	function:fabgl::SSD1306Controller::drawEllipse	file:
__anona735931d0902	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                     [&] (int X, int Y, uint8_t pattern) { SSD1306_SETPIXELCOLOR(X, Y, pattern);/;"	f	function:fabgl::SSD1306Controller::drawEllipse	file:
__anona735931d0a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                 [&] (int x1, int x2, int srcY, int dstY)  { rawCopyRow(x1, x2, srcY, dstY); }, /;"	f	function:fabgl::SSD1306Controller::VScroll	file:
__anona735931d0b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                 [&] (int y, int x1, int x2, RGB888 color) { rawFillRow(y, x1, x2, color);   }  /;"	f	function:fabgl::SSD1306Controller::VScroll	file:
__anona735931d0c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                 [&] (RGB888 const & color)      { return preparePixel(color); },           \/\//;"	f	function:fabgl::SSD1306Controller::HScroll	file:
__anona735931d0d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                 [&] (int y)                     { return y; },                             \/\//;"	f	function:fabgl::SSD1306Controller::HScroll	file:
__anona735931d0e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                 [&] (int y, int x)              { return SSD1306_GETPIXEL(x, y); },        \/\//;"	f	function:fabgl::SSD1306Controller::HScroll	file:
__anona735931d0f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                 [&] (int y, int x, int pattern) { SSD1306_SETPIXELCOLOR(x, y, pattern); }  \/\//;"	f	function:fabgl::SSD1306Controller::HScroll	file:
__anona735931d1002	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                   [&] (RGB888 const & color)          { return preparePixel(color); },$/;"	f	function:fabgl::SSD1306Controller::drawGlyph	file:
__anona735931d1102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                   [&] (int y)                         { return y; },$/;"	f	function:fabgl::SSD1306Controller::drawGlyph	file:
__anona735931d1202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                   [&] (int y, int x, uint8_t pattern) { SSD1306_SETPIXELCOLOR(x, y, pattern); }$/;"	f	function:fabgl::SSD1306Controller::drawGlyph	file:
__anona735931d1302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                    [&] (int Y, int X1, int X2) { rawInvertRow(Y, X1, X2); }$/;"	f	function:fabgl::SSD1306Controller::invertRect	file:
__anona735931d1402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                  [&] (int y)                         { return y; },$/;"	f	function:fabgl::SSD1306Controller::copyRect	file:
__anona735931d1502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                  [&] (int y, int x)                  { return SSD1306_GETPIXEL(x, y); },$/;"	f	function:fabgl::SSD1306Controller::copyRect	file:
__anona735931d1602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                  [&] (int y, int x, uint8_t pattern) { SSD1306_SETPIXELCOLOR(x, y, pattern); }$/;"	f	function:fabgl::SSD1306Controller::copyRect	file:
__anona735931d1702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                                [&] (int y)                     { return y; },                  /;"	f	function:fabgl::SSD1306Controller::rawDrawBitmap_Native	file:
__anona735931d1802	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                                [&] (int y, int x, uint8_t src) { SSD1306_SETPIXELCOLOR(x, y, sr/;"	f	function:fabgl::SSD1306Controller::rawDrawBitmap_Native	file:
__anona735931d1902	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                            [&] (int y)        { return y; },                                   /;"	f	function:fabgl::SSD1306Controller::rawDrawBitmap_Mask	file:
__anona735931d1a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                            [&] (int y, int x) { return SSD1306_GETPIXEL(x, y); },              /;"	f	function:fabgl::SSD1306Controller::rawDrawBitmap_Mask	file:
__anona735931d1b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                            [&] (int y, int x) { SSD1306_SETPIXELCOLOR(x, y, foregroundColor); }/;"	f	function:fabgl::SSD1306Controller::rawDrawBitmap_Mask	file:
__anona735931d1c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                                [&] (int y)                     { return y; },                  /;"	f	function:fabgl::SSD1306Controller::rawDrawBitmap_RGBA2222	file:
__anona735931d1d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                                [&] (int y, int x)              { return SSD1306_GETPIXEL(x, y);/;"	f	function:fabgl::SSD1306Controller::rawDrawBitmap_RGBA2222	file:
__anona735931d1e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                                [&] (int y, int x, uint8_t src) { SSD1306_SETPIXELCOLOR(x, y, RG/;"	f	function:fabgl::SSD1306Controller::rawDrawBitmap_RGBA2222	file:
__anona735931d1f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                                [&] (int y)                              { return y; },         /;"	f	function:fabgl::SSD1306Controller::rawDrawBitmap_RGBA8888	file:
__anona735931d2002	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                                [&] (int y, int x)                       { return SSD1306_GETPIX/;"	f	function:fabgl::SSD1306Controller::rawDrawBitmap_RGBA8888	file:
__anona735931d2102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^                                [&] (int y, int x, RGBA8888 const & src) { SSD1306_SETPIXELCOLOR/;"	f	function:fabgl::SSD1306Controller::rawDrawBitmap_RGBA8888	file:
__anona800f11d010a	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	typedef union {$/;"	u	class:InlineBlockClocklessController
__anona800f11d020a	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	typedef union {$/;"	u	class:SixteenWayInlineBlockClocklessController
__anonad8cb3ed010a	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^typedef union {$/;"	u
__anonad8cb3ed0208	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  struct {$/;"	s	union:__anonad8cb3ed010a
__anonad8cb3ed0308	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^typedef struct {$/;"	s
__anonad8cb3ed040a	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^typedef union {$/;"	u
__anonad8cb3ed0508	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  struct {$/;"	s	union:__anonad8cb3ed040a
__anonaed698b70102	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestModalDialog.h	/^    button1->onClick = [&]() {$/;"	f	function:TestModalDialog::TestModalDialog	file:
__anonaed698b70202	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestModalDialog.h	/^    button2->onClick = [&]() {$/;"	f	function:TestModalDialog::TestModalDialog	file:
__anonb3081ae60102	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^    m_closure  = [] (void * func, const Params & ...params) -> void { (*(Func *)func)(params...)/;"	f	function:fabgl::Delegate::operator =	typeref:typename:void	file:
__anonb43f0d850108	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^typedef struct {$/;"	s	file:
__anonbb37e5ab0108	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^  static const struct {$/;"	s	function:Machine::autoDetectDriveGeometry	file:
__anonbcc8608a010a	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    union {$/;"	u	struct:CHSV
__anonbcc8608a0208	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        struct {$/;"	s	union:CHSV::__anonbcc8608a010a
__anonbcc8608a030a	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^            union {$/;"	u	struct:CHSV::__anonbcc8608a010a::__anonbcc8608a0208
__anonbcc8608a040a	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^            union {$/;"	u	struct:CHSV::__anonbcc8608a010a::__anonbcc8608a0208
__anonbcc8608a050a	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^            union {$/;"	u	struct:CHSV::__anonbcc8608a010a::__anonbcc8608a0208
__anonbcc8608a0603	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^typedef enum {$/;"	g
__anonbcc8608a070a	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    union {$/;"	u	struct:CRGB
__anonbcc8608a0808	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        struct {$/;"	s	union:CRGB::__anonbcc8608a070a
__anonbcc8608a090a	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^            union {$/;"	u	struct:CRGB::__anonbcc8608a070a::__anonbcc8608a0808
__anonbcc8608a0a0a	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^            union {$/;"	u	struct:CRGB::__anonbcc8608a070a::__anonbcc8608a0808
__anonbcc8608a0b0a	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^            union {$/;"	u	struct:CRGB::__anonbcc8608a070a::__anonbcc8608a0808
__anonbcc8608a0c03	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    typedef enum {$/;"	g	struct:CRGB
__anonc580d4db0102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                    [&] (RGB888 const & color) { return RGB888toPaletteIndex(color); },$/;"	f	function:fabgl::VGA4Controller::setPixelAt	file:
__anonc580d4db0202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                     [&] (RGB888 const & color)                      { return RGB888toPaletteInd/;"	f	function:fabgl::VGA4Controller::absDrawLine	file:
__anonc580d4db0302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                     [&] (int Y, int X1, int X2, uint8_t colorIndex) { rawFillRow(Y, X1, X2, col/;"	f	function:fabgl::VGA4Controller::absDrawLine	file:
__anonc580d4db0402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                     [&] (int Y, int X1, int X2)                     { rawInvertRow(Y, X1, X2); /;"	f	function:fabgl::VGA4Controller::absDrawLine	file:
__anonc580d4db0502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                     [&] (int X, int Y)                              { VGA4_INVERT_PIXEL(X, Y); /;"	f	function:fabgl::VGA4Controller::absDrawLine	file:
__anonc580d4db0602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                     [&] (RGB888 const & color)  { return RGB888toPaletteIndex(color); },$/;"	f	function:fabgl::VGA4Controller::drawEllipse	file:
__anonc580d4db0702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                 [&] (int yA, int yB, int x1, int x2)        { swapRows(yA, yB, x1, x2); },     /;"	f	function:fabgl::VGA4Controller::VScroll	file:
__anonc580d4db0802	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                 [&] (int yA, int yB)                        { tswap(m_viewPort[yA], m_viewPort[/;"	f	function:fabgl::VGA4Controller::VScroll	file:
__anonc580d4db0902	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                 [&] (int y, int x1, int x2, RGB888 color)   { rawFillRow(y, x1, x2, color); }  /;"	f	function:fabgl::VGA4Controller::VScroll	file:
__anonc580d4db0a02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                   [&] (RGB888 const & color)                     { return RGB888toPaletteIndex(/;"	f	function:fabgl::VGA4Controller::drawGlyph	file:
__anonc580d4db0b02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                   [&] (int y)                                    { return (uint8_t*) m_viewPort/;"	f	function:fabgl::VGA4Controller::drawGlyph	file:
__anonc580d4db0c02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                    [&] (int Y, int X1, int X2) { rawInvertRow(Y, X1, X2); }$/;"	f	function:fabgl::VGA4Controller::invertRect	file:
__anonc580d4db0d02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                  [&] (RGB888 const & color)                     { return RGB888toPaletteIndex(c/;"	f	function:fabgl::VGA4Controller::swapFGBG	file:
__anonc580d4db0e02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                  [&] (int y)                                    { return (uint8_t*) m_viewPort[/;"	f	function:fabgl::VGA4Controller::swapFGBG	file:
__anonc580d4db0f02	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                  [&] (int y)                                    { return (uint8_t*) m_viewPort[/;"	f	function:fabgl::VGA4Controller::copyRect	file:
__anonc580d4db1002	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                              [&] (int y)                             { return (uint8_t*) m_view/;"	f	function:fabgl::VGA4Controller::rawDrawBitmap_Native	file:
__anonc580d4db1102	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                            [&] (int y)                  { return (uint8_t*) m_viewPort[y]; },  /;"	f	function:fabgl::VGA4Controller::rawDrawBitmap_Mask	file:
__anonc580d4db1202	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                            [&] (uint8_t * row, int x)   { VGA4_SETPIXELINROW(row, x, foreground/;"	f	function:fabgl::VGA4Controller::rawDrawBitmap_Mask	file:
__anonc580d4db1302	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                                [&] (int y)                             { return (uint8_t*) m_vi/;"	f	function:fabgl::VGA4Controller::rawDrawBitmap_RGBA2222	file:
__anonc580d4db1402	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                                [&] (uint8_t * row, int x, uint8_t src) { VGA4_SETPIXELINROW(row/;"	f	function:fabgl::VGA4Controller::rawDrawBitmap_RGBA2222	file:
__anonc580d4db1502	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                                 [&] (int y)                                      { return (uint/;"	f	function:fabgl::VGA4Controller::rawDrawBitmap_RGBA8888	file:
__anonc580d4db1602	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                                 [&] (uint8_t * row, int x)                       { return VGA4_/;"	f	function:fabgl::VGA4Controller::rawDrawBitmap_RGBA8888	file:
__anonc580d4db1702	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^                                 [&] (uint8_t * row, int x, RGBA8888 const & src) { VGA4_SETPIXE/;"	f	function:fabgl::VGA4Controller::rawDrawBitmap_RGBA8888	file:
__anonc7550b410102	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/progsdialog.h	/^    onKeyUp = [&](uiKeyEventInfo const & key) {$/;"	f	function:ProgsDialog::ProgsDialog	file:
__anonc7550b410202	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/progsdialog.h	/^    progComboBox->onChange = [&]() {$/;"	f	function:ProgsDialog::ProgsDialog	file:
__anonc7550b410302	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/progsdialog.h	/^    installButton->onClick = [&]() {$/;"	f	function:ProgsDialog::ProgsDialog	file:
__anonc7550b410402	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/progsdialog.h	/^    cancelButton->onClick = [&]() {$/;"	f	function:ProgsDialog::ProgsDialog	file:
__anond63e15d90102	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^  m_terminal->onReceive = [&](uint8_t c) {$/;"	f	function:fabgl::SerialPortTerminalConnector::connect	file:
__anond63e15d90202	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^  m_terminal->onReadyToSend = [&](bool * readyToSend) {$/;"	f	function:fabgl::SerialPortTerminalConnector::connect	file:
__anond63e15d90302	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^  m_terminal->onSend = [&](uint8_t c) {$/;"	f	function:fabgl::SerialPortTerminalConnector::connect	file:
__anone64b86db0102	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^    onTimer = [&](uiTimerHandle tHandle) { showFreeMemory(); };$/;"	f	function:MyApp::init	file:
__anone64b86db0202	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^    testControlsButton->onClick = [&]() { showWindow(testControlsFrame, true); setActiveWindow(t/;"	f	function:MyApp::init	file:
__anone64b86db0302	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^    createFrameButton->onClick = [&]() { onCreateFrameButtonClick(); };$/;"	f	function:MyApp::init	file:
__anone64b86db0402	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^    destroyFrameButton->onClick = [&]() { destroyWindow(dynamicFrames.pop()); };$/;"	f	function:MyApp::init	file:
__anone64b86db0502	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^    testModalDialogButton->onClick = [&]() { onTestModalDialogButtonClick(); };$/;"	f	function:MyApp::init	file:
__anone64b86db0602	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^    msgBoxButton->onClick = [&]() {$/;"	f	function:MyApp::init	file:
__anone64b86db0702	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^    testPaintBoxButton->onClick = [&]() { showWindow(paintBoxFrame, true); };$/;"	f	function:MyApp::init	file:
__anone64b86db0802	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^    testTimerButton->onClick = [&]() { showWindow(testTimerFrame, true); };$/;"	f	function:MyApp::init	file:
__anone64b86db0902	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^    testInputBoxButton->onClick = [&]() { onTestInputBox(); };$/;"	f	function:MyApp::init	file:
__anone64b86db0a02	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^    ib.progressBox("Example of Progress Bar", "Abort", true, 200, [&](fabgl::ProgressForm * form/;"	f	function:MyApp::onTestInputBox	file:
__anonedf8fd7e010a	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    typedef union {$/;"	u	class:InlineBlockClocklessController
__anonee77b5e60102	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestTimerFrame.h	/^    paintBox->onPaint = [&](Rect const & r) { onPaintPaintBox(r); };$/;"	f	function:TestTimerFrame::TestTimerFrame	file:
__anonee77b5e60202	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestTimerFrame.h	/^    this->onShow = [&]() {$/;"	f	function:TestTimerFrame::TestTimerFrame	file:
__anonee77b5e60302	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestTimerFrame.h	/^    this->onHide = [&]() {$/;"	f	function:TestTimerFrame::TestTimerFrame	file:
__anonee77b5e60402	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestTimerFrame.h	/^    this->onTimer = [&](uiTimerHandle tHandle) { paintBox->repaint(); };$/;"	f	function:TestTimerFrame::TestTimerFrame	file:
__anonf4de0cf3010a	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^  typedef union {$/;"	u	class:COctoWS2811Controller
__anonf67d7a610108	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^  static const struct {$/;"	s	function:fabgl::GraphicsAdapter::setupEmulation	file:
__anonf80a47c5010a	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^typedef union {$/;"	u
__anonf930aefc0102	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^    frame->onKeyUp = [&](uiKeyEventInfo const & key) {$/;"	f	function:ConfDialogApp::init	file:
__anonf930aefc0202	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^    exitNoSaveButton->onClick = [&]() {$/;"	f	function:ConfDialogApp::init	file:
__anonf930aefc0302	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^    exitSaveButton->onClick = [&]() {$/;"	f	function:ConfDialogApp::init	file:
__anonf930aefc0402	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^    rebootButton->onClick = [&]() {$/;"	f	function:ConfDialogApp::init	file:
__anonf930aefc0502	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^    installButton->onClick = [&]() {$/;"	f	function:ConfDialogApp::init	file:
__anonf930aefc0602	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^    RTSStatus->onClick = [&]() {$/;"	f	function:ConfDialogApp::init	file:
__anonf930aefc0702	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^    frame->onTimer = [&](uiTimerHandle) {$/;"	f	function:ConfDialogApp::init	file:
__anonfd22f8f50103	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^enum { STYLE_NONE, STYLE_FRAME, STYLE_LABEL, STYLE_STATICLABEL, STYLE_LABELHELP, STYLE_LABELHELP/;"	g
__anonfeda45510103	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^enum {$/;"	g	namespace:fabgl	file:
__clock_cycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^__attribute__ ((always_inline)) inline static uint32_t __clock_cycles() {$/;"	f	typeref:typename:uint32_t
__cxa_guard_abort	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^	extern "C" void __cxa_guard_abort (__guard *)$/;"	f	namespace:__cxxabiv1	typeref:typename:void
__cxa_guard_acquire	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^	extern "C" int __cxa_guard_acquire (__guard *g)$/;"	f	namespace:__cxxabiv1	typeref:typename:int
__cxa_guard_release	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^	extern "C" void __cxa_guard_release (__guard *g)$/;"	f	namespace:__cxxabiv1	typeref:typename:void
__cxa_pure_virtual	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^	extern "C" void __cxa_pure_virtual (void) {}$/;"	f	namespace:__cxxabiv1	typeref:typename:void
__cxxabiv1	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^namespace __cxxabiv1$/;"	n	file:
__generated_struct_NRF_P0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^struct __generated_struct_NRF_P0 {$/;"	s
__generated_struct_NRF_P1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^struct __generated_struct_NRF_P1 {$/;"	s
__guard	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^	__extension__ typedef int __guard __attribute__((mode(__DI__)));$/;"	t	namespace:__cxxabiv1	typeref:typename:int	file:
__volatile__	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    __asm__ __volatile__ ("rsr %0,ccount":"=a" (cyc));$/;"	v	typeref:typename:__asm__
__volatile__	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^  __asm__ __volatile__ ("rsr %0,ccount":"=a" (cyc));$/;"	v	typeref:typename:__asm__
_ctar0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	uint32_t _ctar0,_ctar1;$/;"	m	struct:SPIState	typeref:typename:uint32_t
_ctar0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	uint32_t _ctar0,_ctar1;$/;"	m	struct:SPIState	typeref:typename:uint32_t
_ctar1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	uint32_t _ctar0,_ctar1;$/;"	m	struct:SPIState	typeref:typename:uint32_t
_ctar1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	uint32_t _ctar0,_ctar1;$/;"	m	struct:SPIState	typeref:typename:uint32_t
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 0>(FASTLED_REGISTER uint8_t & ) {}$/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 1>(FASTLED_REGISTER uint8_t & ) {asm /;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 2>(FASTLED_REGISTER uint8_t & ) {asm /;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 2>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 3>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 4>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 5>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 6>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 7>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 8>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc< 9>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<-1>(FASTLED_REGISTER uint8_t & ) {}$/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<-2>(FASTLED_REGISTER uint8_t & ) {}$/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<-3>(FASTLED_REGISTER uint8_t & ) {}$/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<-4>(FASTLED_REGISTER uint8_t & ) {}$/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<-5>(FASTLED_REGISTER uint8_t & ) {}$/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<-6>(FASTLED_REGISTER uint8_t & ) {}$/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<10>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<11>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<12>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<13>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<14>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<15>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<16>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<17>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<18>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<19>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<> __attribute__((always_inline)) inline void _dc<20>(FASTLED_REGISTER uint8_t & loopvar/;"	f	typeref:typename:void
_dc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<int CYCLES> __attribute__((always_inline)) inline void _dc(FASTLED_REGISTER uint8_t & l/;"	f	typeref:typename:void
_dc_AVR	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^template<int _LOOP, int PAD> __attribute__((always_inline)) inline void _dc_AVR(FASTLED_REGISTER/;"	f	typeref:typename:void
_delaycycles_AVR	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<int LOOP, int PAD> inline void _delaycycles_AVR() {$/;"	f	typeref:typename:void
_frame_cnt	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^uint32_t _frame_cnt=0;$/;"	v	typeref:typename:uint32_t
_init	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static void _init() { }$/;"	f	class:FastPin	typeref:typename:void
_init	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static void _init() {$/;"	f	class:FastPin	typeref:typename:void
_init	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	void _init() {$/;"	f	class:Pin	typeref:typename:void
_init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^  void _init(int nLeds) {$/;"	f	class:COctoWS2811Controller	typeref:typename:void
_init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/ws2812serial_controller.h	/^    void _init(int nLeds) {$/;"	f	class:CWS2812SerialController	typeref:typename:void
_init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/octows2811_controller.h	/^  void _init(int nLeds) {$/;"	f	class:COctoWS2811Controller	typeref:typename:void
_outlines	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^  } _outlines;$/;"	t	class:FlexibleInlineBlockClocklessController	typeref:union:FlexibleInlineBlockClocklessController::__anon2152c22b010a
_retry_cnt	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^uint32_t _retry_cnt=0;$/;"	v	typeref:typename:uint32_t
_slang_library_noise1	examples/test/lib/JFixLib/src/ofNoise.h	/^inline float _slang_library_noise1 (float x)$/;"	f	typeref:typename:float
_slang_library_noise2	examples/test/lib/JFixLib/src/ofNoise.h	/^inline float _slang_library_noise2 (float x, float y)$/;"	f	typeref:typename:float
_slang_library_noise3	examples/test/lib/JFixLib/src/ofNoise.h	/^inline float _slang_library_noise3 (float x, float y, float z)$/;"	f	typeref:typename:float
a	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^        a = a[2:]$/;"	v
a	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^      a = a[1:]$/;"	v
a	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^    a = a[1:]$/;"	v
a	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^a = sys.argv[1:]$/;"	v
a	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^    sub4 a;  \/\/\/< 32-bit access struct for bit swapping, upper four bytes (word[0] or bytes[0/;"	m	struct:__anonad8cb3ed040a::__anonad8cb3ed0508	typeref:typename:sub4
a	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    unsigned short a, s, r;$/;"	m	class:JEnv	typeref:typename:unsigned short
a0	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a0:1;  \/\/\/< bit 0 (0x01)$/;"	m	struct:__anonad8cb3ed010a::__anonad8cb3ed0208	typeref:typename:uint32_t:1
a0	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a0:1;  \/\/\/< byte 'a', bit 0 (0x00000000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
a1	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a1:1;  \/\/\/< bit 1 (0x02)$/;"	m	struct:__anonad8cb3ed010a::__anonad8cb3ed0208	typeref:typename:uint32_t:1
a1	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a1:1;  \/\/\/< byte 'a', bit 1 (0x00000002)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
a2	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a2:1;  \/\/\/< bit 2 (0x04)$/;"	m	struct:__anonad8cb3ed010a::__anonad8cb3ed0208	typeref:typename:uint32_t:1
a2	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a2:1;  \/\/\/< byte 'a', bit 2 (0x00000004)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
a3	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a3:1;  \/\/\/< bit 3 (0x08)$/;"	m	struct:__anonad8cb3ed010a::__anonad8cb3ed0208	typeref:typename:uint32_t:1
a3	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a3:1;  \/\/\/< byte 'a', bit 3 (0x00000008)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
a4	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a4:1;  \/\/\/< bit 4 (0x10)$/;"	m	struct:__anonad8cb3ed010a::__anonad8cb3ed0208	typeref:typename:uint32_t:1
a4	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a4:1;  \/\/\/< byte 'a', bit 4 (0x00000010)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
a5	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a5:1;  \/\/\/< bit 5 (0x20)$/;"	m	struct:__anonad8cb3ed010a::__anonad8cb3ed0208	typeref:typename:uint32_t:1
a5	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a5:1;  \/\/\/< byte 'a', bit 5 (0x00000020)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
a6	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a6:1;  \/\/\/< bit 6 (0x40)$/;"	m	struct:__anonad8cb3ed010a::__anonad8cb3ed0208	typeref:typename:uint32_t:1
a6	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a6:1;  \/\/\/< byte 'a', bit 6 (0x00000040)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
a7	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a7:1;  \/\/\/< bit 7 (0x80)$/;"	m	struct:__anonad8cb3ed010a::__anonad8cb3ed0208	typeref:typename:uint32_t:1
a7	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t a7:1;  \/\/\/< byte 'a', bit 7 (0x00000080)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
abort	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  void abort(AbortReason reason)    { m_abortReason = reason; }$/;"	f	class:HAL	typeref:typename:void
abortReason	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  AbortReason abortReason()         { return m_abortReason; }$/;"	f	class:HAL	typeref:typename:AbortReason
abortSession	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^void Supervisor::abortSession(int id, AbortReason abortReason)$/;"	f	class:Supervisor	typeref:typename:void
aborting	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  bool aborting()                   { return m_abortReason != AbortReason::NoAbort; }$/;"	f	class:HAL	typeref:typename:bool
abs8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE int8_t abs8( int8_t i)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE int8_t
absClippingRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Rect         absClippingRect; \/\/ actual absolute clipping rectangle (calculated when setting/;"	m	struct:fabgl::PaintState	typeref:typename:Rect
absDrawBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::absDrawBitmap(int destX, int destY, Bitmap const * bi/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
absDrawLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::absDrawLine(int X1, int Y1, int X2, int Y2, RGB888 color)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
absDrawLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::absDrawLine(int X1, int Y1, int X2, int Y2, RGB888 color)$/;"	f	class:fabgl::TFTController	typeref:typename:void
absDrawLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::absDrawLine(int X1, int Y1, int X2, int Y2, RGB888 color)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
absDrawLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::absDrawLine(int X1, int Y1, int X2, int Y2, RGB888 color)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
absDrawLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::absDrawLine(int X1, int Y1, int X2, int Y2, RGB888 color)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
absDrawLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::absDrawLine(int X1, int Y1, int X2, int Y2, RGB888 color)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
absDrawLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::absDrawLine(int X1, int Y1, int X2, int Y2, RGB888 color)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
absDrawLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::absDrawLine(int X1, int Y1, int X2, int Y2, RGB888 color)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
absDrawLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::absDrawLine(int X1, int Y1, int X2, int Y2, RGB888 color)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
absDrawThickLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::absDrawThickLine(int X1, int Y1, int X2, int Y2, int /;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
accelerateAndMove	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    void accelerateAndMove( )$/;"	f	struct:Race::Player	typeref:typename:void
accept	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult accept(TComparer& comparer) {$/;"	f	struct:VariantComparer	typeref:typename:CompareResult
accept	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  typename TVisitor::result_type accept(TVisitor& visitor) const {$/;"	f	class:VariantData	typeref:typename:TVisitor::result_type
accum124	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef uint16_t  accum124;   \/\/\/< no direct ANSI counterpart. 12 bits int, 4 bits fraction$/;"	t	typeref:typename:uint16_t
accum1616	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef uint32_t  accum1616;  \/\/\/< ANSI: signed         _Accum. 16 bits int, 16 bits fraction$/;"	t	typeref:typename:uint32_t
accum88	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef uint16_t  accum88;    \/\/\/< ANSI: unsigned short _Accum. 8 bits int, 8 bits fraction$/;"	t	typeref:typename:uint16_t
ackPendingInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^void PIC8259::ackPendingInterrupt()$/;"	f	class:fabgl::PIC8259	typeref:typename:void
acquire	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void            acquire(FASTLED_NRF52_PWM_INTERRUPT_HA/;"	f	class:PWM_Arbiter	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
activable	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t activable  : 1;  \/**< The window is activable (default for windows)  *\/$/;"	m	struct:fabgl::uiWindowProps	typeref:typename:uint8_t:1
activate	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::activate(TerminalTransition transition)$/;"	f	class:fabgl::Terminal	typeref:typename:void
activateSession	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^void Supervisor::activateSession(int id)$/;"	f	class:Supervisor	typeref:typename:void
active	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  bool active = false;$/;"	m	struct:GameController	typeref:typename:bool
active	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  bool active = false;$/;"	m	struct:GameController	typeref:typename:bool
active	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t active    : 1;  \/**< 0 = inactive, 1 = active    *\/$/;"	m	struct:fabgl::uiWindowState	typeref:typename:uint8_t:1
activeBorderColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888        activeBorderColor  = RGB888(128, 128, 255);                   \/**< Border color/;"	m	struct:fabgl::uiWindowStyle	typeref:typename:RGB888
activeButtonColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              activeButtonColor              = RGB888(255, 255, 255);  \/**< Color used /;"	m	struct:fabgl::uiFrameStyle	typeref:typename:RGB888
activeLook	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t activeLook : 1;  \/**< Maintain active style even when not active *\/$/;"	m	struct:fabgl::uiWindowProps	typeref:typename:uint8_t:1
activeTitleBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              activeTitleBackgroundColor     = RGB888(128, 128, 255);  \/**< Title backg/;"	m	struct:fabgl::uiFrameStyle	typeref:typename:RGB888
activeTitleColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              activeTitleColor               = RGB888(255, 255, 255);  \/**< Title color/;"	m	struct:fabgl::uiFrameStyle	typeref:typename:RGB888
activeWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * activeWindow() { return m_activeWindow; }$/;"	f	class:fabgl::uiApp	typeref:typename:uiWindow *
adapt	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  static AdaptedString adapt(const __FlashStringHelper* s) {$/;"	f	struct:StringAdapter	typeref:typename:AdaptedString
adapt	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  static AdaptedString adapt(const __FlashStringHelper* s, size_t n) {$/;"	f	struct:SizedStringAdapter	typeref:typename:AdaptedString
adapt	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/JsonString.hpp	/^  static AdaptedString adapt(const JsonString& s) {$/;"	f	struct:StringAdapter	typeref:typename:AdaptedString
adapt	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  static AdaptedString adapt(const TChar* p) {$/;"	f	struct:StringAdapter	typeref:typename:AdaptedString
adapt	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  static AdaptedString adapt(const TChar* p, size_t n) {$/;"	f	struct:SizedStringAdapter	typeref:typename:AdaptedString
adapt	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  static AdaptedString adapt(const char* p) {$/;"	f	struct:StringAdapter	typeref:typename:AdaptedString
adapt	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/StringObject.hpp	/^  static AdaptedString adapt(const T& s) {$/;"	f	struct:StringAdapter	typeref:typename:AdaptedString
adaptString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringAdapter.hpp	/^typename SizedStringAdapter<TChar*>::AdaptedString adaptString(TChar* p,$/;"	f	typeref:typename:SizedStringAdapter<TChar * >::AdaptedString
adaptString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringAdapter.hpp	/^typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {$/;"	f	typeref:typename:StringAdapter<TChar * >::AdaptedString
adaptString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringAdapter.hpp	/^typename StringAdapter<TString>::AdaptedString adaptString(const TString& s) {$/;"	f	typeref:typename:StringAdapter<TString>::AdaptedString
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiButtonStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiCheckBoxStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiComboBoxStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiFrameStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiImageStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiLabelStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiListBoxStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiPaintBoxStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiPanelStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiProgressBarStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiScrollableControlStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiSliderStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiStaticLabelStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiTextEditStyle	typeref:typename:void
adaptToDisplayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void adaptToDisplayColors(int displayColors) {$/;"	f	struct:fabgl::uiWindowStyle	typeref:typename:void
add	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE bool add(T* value) const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE bool
add	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE bool add(const T& value) const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE bool
add	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  JsonVariant add() const {$/;"	f	class:JsonArray	typeref:typename:JsonVariant
add	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  FORCE_INLINE JsonVariant add() {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE JsonVariant
add	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  FORCE_INLINE bool add(TChar* value) {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE bool
add	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  FORCE_INLINE bool add(const TValue& value) {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE bool
add	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp	/^inline JsonVariant VariantRefBase<TDerived>::add() const {$/;"	f	class:VariantRefBase	typeref:typename:JsonVariant
add	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE bool add(T* value) const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE bool
add	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE bool add(const T& value) const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE bool
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add    di, 2$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add    di, 8$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add   di, 2$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add   di, 3$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add   di, 78$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add   di, 80$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add   di, [vid_cols-bios_data]$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add   dx, 3    ; dx = line control register$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add  di, 312$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add  di, 320$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add  di, 78$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add  di, 79$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add  di, 80$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add  dx, 2    ; Get Line status Register$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add  dx, 3    ; write Line Control register$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add  dx, 5  ; dx = line status register$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  add  dx, 5$/;"	d
add	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  uint8_t  add;$/;"	m	class:fabgl::i8080	typeref:typename:uint8_t
add	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Point add(Point const & p) const { return Point(X + p.X, Y + p.Y); }$/;"	f	struct:fabgl::Point	typeref:typename:Point
add8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t add8( uint8_t i, uint8_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
add8to16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE uint16_t add8to16( uint8_t i, uint16_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint16_t
addBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^Sprite * Sprite::addBitmap(Bitmap * bitmap)$/;"	f	class:fabgl::Sprite	typeref:typename:Sprite *
addBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^Sprite * Sprite::addBitmap(Bitmap * bitmap[], int count)$/;"	f	class:fabgl::Sprite	typeref:typename:Sprite *
addChild	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::addChild(uiWindow * child)$/;"	f	class:fabgl::uiWindow	typeref:typename:void
addControls	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void FileBrowserForm::addControls()$/;"	f	class:fabgl::FileBrowserForm	typeref:typename:void
addControls	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void FileSelectorForm::addControls()$/;"	f	class:fabgl::FileSelectorForm	typeref:typename:void
addControls	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void MessageForm::addControls()$/;"	f	class:fabgl::MessageForm	typeref:typename:void
addControls	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void ProgressForm::addControls()$/;"	f	class:fabgl::ProgressForm	typeref:typename:void
addControls	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void SelectForm::addControls()$/;"	f	class:fabgl::SelectForm	typeref:typename:void
addControls	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void TextInputForm::addControls()$/;"	f	class:fabgl::TextInputForm	typeref:typename:void
addElement	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline VariantData* CollectionData::addElement(MemoryPool* pool) {$/;"	f	class:CollectionData	typeref:typename:VariantData *
addElement	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  VariantData* addElement(MemoryPool* pool) {$/;"	f	class:VariantData	typeref:typename:VariantData *
addEnv	examples/test/lib/JFixLib/src/Event/Event.cpp	/^void Event::addEnv(char varName, float *dest, unsigned short a,$/;"	f	class:Event	typeref:typename:void
addEnv	examples/test/lib/JFixLib/src/JFixture.h	/^  virtual void addEnv(const uint8_t *data, int data_len){};$/;"	f	class:JFixture	typeref:typename:void
addEnv	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  void addEnv(const uint8_t *data, int data_len) override {$/;"	f	class:JFixtureGraphics	typeref:typename:void
addEvent	examples/test/lib/JFixLib/src/JFixture.h	/^  virtual void addEvent(const uint8_t *data, int data_len){};$/;"	f	class:JFixture	typeref:typename:void
addEvent	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  void addEvent(Event *e) {$/;"	f	class:JFixtureGraphics	typeref:typename:void
addEvent	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  void addEvent(const uint8_t *data, int data_len) override {$/;"	f	class:JFixtureGraphics	typeref:typename:void
addExtraSamples	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^void CVBSGenerator::addExtraSamples(double us, double * aus, int * node)$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:void
addFileToCache	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::addFileToCache(uint16_t FCBaddr, FILE * file)$/;"	f	class:BDOS	typeref:typename:void
addItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^void MachineConf::addItem(MachineConfItem * item)$/;"	f	class:MachineConf	typeref:typename:void
addLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^CLEDController &CFastLED::addLeds(CLEDController *pLed,$/;"	f	class:CFastLED	typeref:typename:CLEDController &
addLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	static CLEDController &addLeds(struct CRGB *data, int nLeds) {$/;"	f	class:CFastLED	typeref:typename:CLEDController &
addLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {$/;"	f	class:CFastLED	typeref:typename:CLEDController &
addLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)$/;"	f	class:CFastLED	typeref:typename:CLEDController &
addLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	template<ESPIChipsets CHIPSET,  uint8_t DATA_PIN, uint8_t CLOCK_PIN > static CLEDController &ad/;"	f	class:CFastLED	typeref:typename:CLEDController &
addLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	template<ESPIChipsets CHIPSET,  uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER > static /;"	f	class:CFastLED	typeref:typename:CLEDController &
addLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	template<ESPIChipsets CHIPSET,  uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER, uint32_t/;"	f	class:CFastLED	typeref:typename:CLEDController &
addLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	template<ESPIChipsets CHIPSET, EOrder RGB_ORDER, uint32_t SPI_DATA_RATE> static CLEDController /;"	f	class:CFastLED	typeref:typename:CLEDController &
addLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	template<ESPIChipsets CHIPSET, EOrder RGB_ORDER> static CLEDController &addLeds(struct CRGB *da/;"	f	class:CFastLED	typeref:typename:CLEDController &
addLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	template<ESPIChipsets CHIPSET> static CLEDController &addLeds(struct CRGB *data, int nLedsOrOff/;"	f	class:CFastLED	typeref:typename:CLEDController &
addLeds	examples/test/lib/JFixLib/src/FastLedContstants.h	/^void addLeds(int pin, CRGB* leds, int numLedsPerString){$/;"	f	typeref:typename:void
addMember	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline VariantData* CollectionData::addMember(TAdaptedString key,$/;"	f	class:CollectionData	typeref:typename:VariantData *
addPadding	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/Alignment.hpp	/^inline T* addPadding(T* p) {$/;"	f	typeref:typename:T *
addPadding	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/Alignment.hpp	/^inline size_t addPadding(size_t bytes) {$/;"	f	typeref:typename:size_t
addPrimitive	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void BitmappedDisplayController::addPrimitive(Primitive & primitive)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
addScore	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^ScoreCard *addScore( const char *initials, int points, int timesec, int crashed, int controler, /;"	f	typeref:typename:ScoreCard *
addSlot	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {$/;"	f	class:CollectionData	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE VariantSlot *
addSprite	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^void CollisionDetector::addSprite(Sprite * sprite)$/;"	f	class:fabgl::CollisionDetector	typeref:typename:void
addSprite	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  void addSprite(Sprite * sprite)    { m_collisionDetector.addSprite(sprite); }$/;"	f	class:fabgl::Scene	typeref:typename:void
addToInputQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool Terminal::addToInputQueue(uint8_t c, bool fromISR)$/;"	f	class:fabgl::Terminal	typeref:typename:bool
addToRGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & addToRGB(uint8_t inc) { for(iterator pixel = begin(), _end = end(); pixe/;"	f	class:CPixelView	typeref:typename:CPixelView &
addToRGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& addToRGB (uint8_t d )$/;"	f	struct:CRGB	typeref:typename:CRGB &
add_clockless_pio_program	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_gen.h	/^static inline int add_clockless_pio_program(PIO pio, int T1, int T2, int T3) {$/;"	f	typeref:typename:int
addline	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void PRGCreator::addline(int linenumber, char const * data)$/;"	f	class:PRGCreator	typeref:typename:void
addline	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void PRGCreator::addline(int linenumber, void const * data, size_t datalen)$/;"	f	class:PRGCreator	typeref:typename:void
addmod8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC uint8_t addmod8( uint8_t a, uint8_t b, uint8_t m)$/;"	f	typeref:typename:LIB8STATIC uint8_t
addr	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^    uint32_t addr : 11;$/;"	m	struct:__anonb43f0d850108	typeref:typename:uint32_t:11	file:
address	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp	/^  const char* address;$/;"	m	struct:pgm_p	typeref:typename:const char *
address	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  uint8_t   address;$/;"	m	struct:fabgl::I2CJobInfo	typeref:typename:uint8_t
adj	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^  uint8_t adj;$/;"	m	struct:M0ClocklessData	typeref:typename:uint8_t
adjust	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^		__attribute__((always_inline)) inline static uint8_t adjust(FASTLED_REGISTER uint8_t data) { r/;"	f	class:LPD8806Controller::LPD8806_ADJUST	typeref:typename:uint8_t
adjust	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^    static __attribute__((always_inline)) inline uint8_t adjust(FASTLED_REGISTER uint8_t data) {/;"	f	class:DATA_NOP	typeref:typename:uint8_t
adjust	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^    static __attribute__((always_inline)) inline uint8_t adjust(FASTLED_REGISTER uint8_t data, F/;"	f	class:DATA_NOP	typeref:typename:uint8_t
adjustMapSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::adjustMapSize(int * columns, int * rows)$/;"	f	class:fabgl::VGATextController	typeref:typename:void
advanceAndLoadAndScale	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadA/;"	f	struct:PixelController	typeref:typename:uint8_t
advanceAndLoadAndScale0	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t advanceAndLoadAndScale0() { return advance/;"	f	struct:PixelController	typeref:typename:uint8_t
advanceAndLoadAndScale0	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t advanceAndLoadAndScale0(int lane) { return/;"	f	struct:PixelController	typeref:typename:uint8_t
advanceAndLoadAndScale0	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t advanceAndLoadAndScale0(int lane, uint8_t /;"	f	struct:PixelController	typeref:typename:uint8_t
advanceBy	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }$/;"	f	struct:PixelController	typeref:typename:int
advanceData	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; --mLenRem/;"	f	struct:PixelController	typeref:typename:void
af	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    reg_pair af, bc, de, hl;$/;"	m	struct:fabgl::i8080::Regs	typeref:typename:reg_pair
al0	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint8_t   al0;  \/\/ Directory allocation bitmap, first byte$/;"	m	struct:DiscParameterBlock	typeref:typename:uint8_t
al1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint8_t   al1;  \/\/ Directory allocation bitmap, second byte$/;"	m	struct:DiscParameterBlock	typeref:typename:uint8_t
alias_cast_t	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/alias_cast.hpp	/^struct alias_cast_t {$/;"	s
aliveBlink	examples/test/lib/JFixLib/src/JFixture.h	/^  void aliveBlink(bool bOverride = false){ \/\/ GPIO_5$/;"	f	class:JFixture	typeref:typename:void
allBlack	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  void allBlack(bool bWrite = false) {$/;"	f	class:JFixtureAddr	typeref:typename:void
alloc	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void * LightMemoryPool::alloc(int size)$/;"	f	class:fabgl::LightMemoryPool	typeref:typename:void *
allocPool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  detail::MemoryPool allocPool(size_t requiredSize) {$/;"	f	class:BasicJsonDocument	typeref:typename:detail::MemoryPool
allocRight	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  T* allocRight() {$/;"	f	class:MemoryPool	typeref:typename:T *
allocRight	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  void* allocRight(size_t bytes) {$/;"	f	class:MemoryPool	typeref:typename:void *
allocScore	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^ScoreCard *allocScore( int points)$/;"	f	typeref:typename:ScoreCard *
allocScreenBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::allocScreenBuffer()$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
allocString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  char* allocString(size_t n) {$/;"	f	class:MemoryPool	typeref:typename:char *
allocVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  VariantSlot* allocVariant() {$/;"	f	class:MemoryPool	typeref:typename:VariantSlot *
allocViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::allocViewPort()$/;"	f	class:fabgl::TFTController	typeref:typename:void
allocate	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  void* allocate(size_t size) {$/;"	f	class:AllocatorOwner	typeref:typename:void *
allocate	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/DynamicJsonDocument.hpp	/^  void* allocate(size_t size) {$/;"	f	struct:DefaultAllocator	typeref:typename:void *
allocate	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void Bitmap::allocate()$/;"	f	class:fabgl::Bitmap	typeref:typename:void
allocateDMABuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static DMABuffer * allocateDMABuffer(int bytes)$/;"	f	class:ClocklessController	typeref:typename:DMABuffer *
allocateViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::allocateViewPort()$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
allocateViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^void CVBSBaseController::allocateViewPort(uint32_t allocCaps, int rowlen)$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
allocateViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^void CVBSPalettedController::allocateViewPort()$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:void
allocateViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::allocateViewPort(uint32_t allocCaps, int rowlen)$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
allocateViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void VGAController::allocateViewPort()$/;"	f	class:fabgl::VGAController	typeref:typename:void
allocateViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::allocateViewPort()$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
allocateViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^void VGAPalettedController::allocateViewPort()$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
allocatedBlocks	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^int HAL::allocatedBlocks()$/;"	f	class:HAL	typeref:typename:int
allocator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  TAllocator& allocator() {$/;"	f	class:AllocatorOwner	typeref:typename:TAllocator &
allocator_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  TAllocator allocator_;$/;"	m	class:AllocatorOwner	typeref:typename:TAllocator
allow	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^  bool allow() const {$/;"	f	class:DeserializationOption::Filter	typeref:typename:bool
allow	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^  bool allow() const {$/;"	f	struct:detail::AllowAllFilter	typeref:typename:bool
allow132ColumnMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         allow132ColumnMode;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
allowArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^  bool allowArray() const {$/;"	f	class:DeserializationOption::Filter	typeref:typename:bool
allowArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^  bool allowArray() const {$/;"	f	struct:detail::AllowAllFilter	typeref:typename:bool
allowDraw	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint8_t allowDraw: 1;$/;"	m	struct:fabgl::Sprite::__anon3dd53dc60208	typeref:typename:uint8_t:1
allowEdit	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t allowEdit    : 1;   \/**< If True the edit box allows edit *\/$/;"	m	struct:fabgl::uiTextEditProps	typeref:typename:uint8_t:1
allowFabGLSequences	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int          allowFabGLSequences;  \/\/ >0 allow, 0 = don't allow$/;"	m	struct:fabgl::EmuState	typeref:typename:int
allowMultiSelect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t allowMultiSelect  : 1;   \/**< If True the listbox allows to select multiple items *\/$/;"	m	struct:fabgl::uiListBoxProps	typeref:typename:uint8_t:1
allowObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^  bool allowObject() const {$/;"	f	class:DeserializationOption::Filter	typeref:typename:bool
allowObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^  bool allowObject() const {$/;"	f	struct:detail::AllowAllFilter	typeref:typename:bool
allowValue	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^  bool allowValue() const {$/;"	f	class:DeserializationOption::Filter	typeref:typename:bool
allowValue	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^  bool allowValue() const {$/;"	f	struct:detail::AllowAllFilter	typeref:typename:bool
altdos2_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/AltairDOS/DOS_2_dsk.h	/^unsigned int altdos2_dsk_len = 337664;$/;"	v	typeref:typename:unsigned int
altdos_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/AltairDOS/DOS_1_dsk.h	/^unsigned int altdos_dsk_len = 337664;$/;"	v	typeref:typename:unsigned int
alternateVK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  AltVirtualKeyDef         alternateVK[73];     \/**< Virtualkeys generated by other virtualkeys/;"	m	struct:fabgl::KeyboardLayout	typeref:typename:AltVirtualKeyDef[73]
alternates	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  unsigned short    alternates[4];$/;"	m	struct:fabgl::Z80_STATE	typeref:typename:unsigned short[4]
anchors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiAnchors & anchors() { return m_anchors; }$/;"	f	class:fabgl::uiWindow	typeref:typename:uiAnchors &
and	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  and  dx, 0x0003$/;"	d
app	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiApp * app() { return m_app; }$/;"	f	class:fabgl::uiEvtHandler	typeref:typename:uiApp *
app	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiApp *          app;$/;"	m	struct:fabgl::InputForm	typeref:typename:uiApp *
appProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiAppProps & appProps() { return m_appProps; }$/;"	f	class:fabgl::uiApp	typeref:typename:uiAppProps &
append	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp	/^  bool append(uint16_t codeunit) {$/;"	f	class:Utf16::Codepoint	typeref:typename:bool
append	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  void append(char c) {$/;"	f	class:StringCopier	typeref:typename:void
append	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  void append(const char* s) {$/;"	f	class:StringCopier	typeref:typename:void
append	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  void append(const char* s, size_t n) {$/;"	f	class:StringCopier	typeref:typename:void
append	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp	/^  void append(char c) {$/;"	f	class:StringMover	typeref:typename:void
append	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int StringList::append(char const * str)$/;"	f	class:fabgl::StringList	typeref:typename:int
append	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void StringList::append(char const * strlist[], int count)$/;"	f	class:fabgl::StringList	typeref:typename:void
appendFmt	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int StringList::appendFmt(const char *format, ...)$/;"	f	class:fabgl::StringList	typeref:typename:int
appendSepList	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void StringList::appendSepList(char const * strlist, char separator)$/;"	f	class:fabgl::StringList	typeref:typename:void
applyGamma_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB applyGamma_video( const CRGB& orig, float gamma)$/;"	f	typeref:typename:CRGB
applyGamma_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB applyGamma_video( const CRGB& orig, float gammaR, float gammaG, float gammaB)$/;"	f	typeref:typename:CRGB
applyGamma_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^uint8_t applyGamma_video( uint8_t brightness, float gamma)$/;"	f	typeref:typename:uint8_t
architectures	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.properties	/^architectures=*$/;"	k
architectures	examples/test/.pio/libdeps/esp32dev/FabGL/library.properties	/^architectures=esp32$/;"	k
architectures	examples/test/.pio/libdeps/esp32dev/FastLED/library.properties	/^architectures=*$/;"	k
arg	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^  void *          arg;$/;"	m	struct:fabgl::esp_intr_alloc_args	typeref:typename:void *	file:
argn	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^argn = len(args)$/;"	v
args	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^args = sys.argv[1:]$/;"	v
arguments	examples/test/lib/JFixLib/src/JModes.h	/^    float arguments[NUM_ARGUMENTS];$/;"	m	class:JMsgArguments	typeref:typename:float[]
arithmeticCompare	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/arithmeticCompare.hpp	/^CompareResult arithmeticCompare($/;"	f	typeref:typename:CompareResult
arithmeticCompare	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/arithmeticCompare.hpp	/^CompareResult arithmeticCompare(const T& lhs, const T& rhs) {$/;"	f	typeref:typename:CompareResult
arithmeticCompareNegateLeft	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/arithmeticCompare.hpp	/^CompareResult arithmeticCompareNegateLeft($/;"	f	typeref:typename:CompareResult
arithmeticCompareNegateRight	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/arithmeticCompare.hpp	/^CompareResult arithmeticCompareNegateRight($/;"	f	typeref:typename:CompareResult
arukanoido_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/arukanoido.h	/^char const * arukanoido_filename = "Arukanoido 24K.PRG";$/;"	v	typeref:typename:char const *
arukanoido_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/arukanoido.h	/^const uint8_t arukanoido_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
as	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  T as() const {$/;"	f	class:JsonDocument	typeref:typename:T
as	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  T as() {$/;"	f	class:JsonDocument	typeref:typename:T
as	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  as() const {$/;"	f	class:JsonVariantConst
as	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^      as() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE typename enable_if<!ConverterNeedsWriteableRef<T>::value,T>::type
as	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  as() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE typename enable_if<ConverterNeedsWriteableRef<T>::value,T>::type
asArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  CollectionData* asArray() {$/;"	f	class:VariantData	typeref:typename:CollectionData *
asArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  const CollectionData* asArray() const {$/;"	f	class:VariantData	typeref:typename:const CollectionData *
asBoolean	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  bool asBoolean;$/;"	m	union:VariantContent	typeref:typename:bool
asBoolean	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp	/^inline bool VariantData::asBoolean() const {$/;"	f	class:VariantData	typeref:typename:bool
asCollection	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  CollectionData asCollection;$/;"	m	union:VariantContent	typeref:typename:CollectionData
asCollection	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  const CollectionData* asCollection() const {$/;"	f	class:VariantData	typeref:typename:const CollectionData *
asFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  JsonFloat asFloat;$/;"	m	union:VariantContent	typeref:typename:JsonFloat
asFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp	/^inline T VariantData::asFloat() const {$/;"	f	class:VariantData	typeref:typename:T
asIntegral	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp	/^inline T VariantData::asIntegral() const {$/;"	f	class:VariantData	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE T
asObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  CollectionData* asObject() {$/;"	f	class:VariantData	typeref:typename:CollectionData *
asObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  const CollectionData* asObject() const {$/;"	f	class:VariantData	typeref:typename:const CollectionData *
asSignedInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  JsonInteger asSignedInteger;$/;"	m	union:VariantContent	typeref:typename:JsonInteger
asString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  } asString;$/;"	m	union:VariantContent	typeref:struct:VariantContent::__anon9bd8dbab0208
asString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp	/^inline JsonString VariantData::asString() const {$/;"	f	class:VariantData	typeref:typename:JsonString
asUnsignedInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  JsonUInt asUnsignedInteger;$/;"	m	union:VariantContent	typeref:typename:JsonUInt
ascent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t  ascent;$/;"	m	struct:fabgl::FontInfo	typeref:typename:uint8_t
asciz	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def asciz(s):$/;"	f
assignPhysicalDevice	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::assignPhysicalDevice(int logicalDevice, int physicalDevice)$/;"	f	class:BIOS	typeref:typename:void
assigned	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  bool assigned()            { return m_serialPort != nullptr; }$/;"	f	class:fabgl::PC8250	typeref:typename:bool
asteroid	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^Bitmap asteroid = Bitmap(8, 8, &asteroid_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
asteroid	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap asteroid = Bitmap(8, 8, &asteroid_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
asteroid	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap asteroid = Bitmap(8, 8, &asteroid_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
asteroid_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^const uint8_t asteroid_data[] = {$/;"	v	typeref:typename:const uint8_t[]
asteroid_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^const uint8_t asteroid_data[] = {$/;"	v	typeref:typename:const uint8_t[]
asteroid_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^const uint8_t asteroid_data[] = {$/;"	v	typeref:typename:const uint8_t[]
astro_panic_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/astro-panic.h	/^char const * astro_panic_filename = "Astro Panic.PRG";$/;"	v	typeref:typename:char const *
astro_panic_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/astro-panic.h	/^const uint8_t astro_panic_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
asyncRunTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::asyncRunTask(void * arg)$/;"	f	class:fabgl::uiApp	typeref:typename:void
atexit	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^extern "C" int atexit(void (* \/*func*\/ )()) { return 0; }$/;"	f	typeref:typename:int
attach	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SoundGenerator::attach(WaveformGenerator * value)$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
attachDevice	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Machine::attachDevice(Device * device)$/;"	f	class:Machine	typeref:typename:void
attachFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Mits88Disk::attachFile(int drive, char const * filename)$/;"	f	class:Mits88Disk	typeref:typename:void
attachFileFromImage	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Mits88Disk::attachFileFromImage(int drive, char const * filename, uint8_t const * data)$/;"	f	class:Mits88Disk	typeref:typename:void
attachRAM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Machine::attachRAM(int RAMSize)$/;"	f	class:Machine	typeref:typename:void
attachReadOnlyBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Mits88Disk::attachReadOnlyBuffer(int drive, uint8_t const * data)$/;"	f	class:Mits88Disk	typeref:typename:void
attachStream	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void SIO::attachStream(Stream * value)$/;"	f	class:SIO	typeref:typename:void
attack	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^  long attack; \/\/ time in millis$/;"	m	struct:playsounddata	typeref:typename:long
attack	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^  long attack; \/\/ time in millis$/;"	m	struct:playsounddata	typeref:typename:long
author	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.properties	/^author=Benoit Blanchon <blog.benoitblanchon.fr>$/;"	k
author	examples/test/.pio/libdeps/esp32dev/FabGL/library.properties	/^author=Fabrizio Di Vittorio <fdivitto2013@gmail.com>$/;"	k
author	examples/test/.pio/libdeps/esp32dev/FastLED/library.properties	/^author=Daniel Garcia$/;"	k
authorLabel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  uiStaticLabel * authorLabel;$/;"	m	class:MyApp	typeref:typename:uiStaticLabel *
authors	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^  "authors": {$/;"	o
authors	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "authors":$/;"	a
authors	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "authors": [$/;"	a
autoDestroy	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  bool autoDestroy() { return m_autoDestroy; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:bool
autoDetach	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  bool autoDetach() { return m_autoDetach; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:bool
autoDetectDriveGeometry	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::autoDetectDriveGeometry(int drive)$/;"	f	class:Machine	typeref:typename:void
autoOK	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              autoOK;$/;"	m	struct:fabgl::InputForm	typeref:typename:int
autoOKLabel	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiLabel *        autoOKLabel;$/;"	m	struct:fabgl::InputForm	typeref:typename:uiLabel *
available	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  bool available() { return m_available; }$/;"	f	class:fabgl::DS3231	typeref:typename:bool
available	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  bool available()     { return m_SPIDevHandle != nullptr; }$/;"	f	class:fabgl::MCP23S17	typeref:typename:bool
available	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  bool available() { return m_screenBuffer != nullptr; }$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:bool
available	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int Terminal::available()$/;"	f	class:fabgl::Terminal	typeref:typename:int
availableForWrite	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int Terminal::availableForWrite(bool fromISR)$/;"	f	class:fabgl::Terminal	typeref:typename:int
availableStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^int Mouse::availableStatus()$/;"	f	class:fabgl::Mouse	typeref:typename:int
avel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^    double  avel;$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:double
avel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^    double  avel;$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:double
avel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^    double  avel;$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:double
avg15	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE int16_t avg15( int16_t i, int16_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE int16_t
avg15_inline_avr_mul	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^static int16_t inline __attribute__((always_inline))  avg15_inline_avr_mul( int16_t i, int16_t j/;"	f	typeref:typename:int16_t	file:
avg16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE uint16_t avg16( uint16_t i, uint16_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint16_t
avg16r	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE uint16_t avg16r( uint16_t i, uint16_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint16_t
avg7	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE int8_t avg7( int8_t i, int8_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE int8_t
avg8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t avg8( uint8_t i, uint8_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
avg8r	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t avg8r( uint8_t i, uint8_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
b	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    } b;$/;"	m	union:fabgl::i8080::__anon81886eed010a	typeref:struct:fabgl::i8080::__anon81886eed010a::__anon81886eed0208
b	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^        b = 0$/;"	v
b	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^    b = 0$/;"	v
b	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^    sub4 b;  \/\/\/< 32-bit access struct for bit swapping, lower four bytes (word[1] or bytes[4/;"	m	struct:__anonad8cb3ed040a::__anonad8cb3ed0508	typeref:typename:sub4
b	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^        uint8_t b;      \/\/\/< CRGB::blue channel value of the color entry$/;"	m	struct:__anon875718a3020a::__anon875718a30308	typeref:typename:uint8_t
b	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^        uint16_t b;$/;"	m	union:sin16_avr::__anon48e99a99010a	typeref:typename:uint16_t
b	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t b;     \/\/\/< Blue channel value$/;"	m	union:CRGB::__anonbcc8608a070a::__anonbcc8608a0808::__anonbcc8608a0b0a	typeref:typename:uint8_t
b0	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t b0:1;  \/\/\/< byte 'b', bit 0 (0x00000100)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
b1	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t b1:1;  \/\/\/< byte 'b', bit 1 (0x00000200)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
b2	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t b2:1;  \/\/\/< byte 'b', bit 2 (0x00000400)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
b3	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t b3:1;  \/\/\/< byte 'b', bit 3 (0x00000800)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
b4	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t b4:1;  \/\/\/< byte 'b', bit 4 (0x00001000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
b5	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t b5:1;  \/\/\/< byte 'b', bit 5 (0x00002000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
b6	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t b6:1;  \/\/\/< byte 'b', bit 6 (0x00004000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
b7	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t b7:1;  \/\/\/< byte 'b', bit 7 (0x00008000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
bActive	examples/test/lib/JFixLib/src/Event/Event.h	/^  bool bActive = false;$/;"	m	class:Event	typeref:typename:bool
bActive	examples/test/lib/JFixLib/src/Event/JOsc.h	/^  bool bActive = false;$/;"	m	class:JOsc	typeref:typename:bool
bActive	examples/test/lib/JFixLib/src/JModes.h	/^    bool bActive = false;$/;"	m	class:JMsgArguments	typeref:typename:bool
bExit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  bool bExit = false;$/;"	m	struct:Score	typeref:typename:bool
bIsDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  bool bIsDown = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bIsDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  bool bIsDown = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bIsLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  bool bIsLeft = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bIsLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  bool bIsLeft = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bIsRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  bool bIsRight = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bIsRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  bool bIsRight = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bIsUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  bool bIsUp = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bIsUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  bool bIsUp = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bKill	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    bool bKill = false;$/;"	m	class:JEnv	typeref:typename:bool
bLagDone	examples/test/lib/JFixLib/src/JLag.h	/^    bool bLagDone = true;$/;"	m	class:JLag	typeref:typename:bool
bLeftButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  bool bLeftButton = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bLeftButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  bool bLeftButton = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bMiddleButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  bool bMiddleButton = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bMiddleButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  bool bMiddleButton = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bRightButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  bool bRightButton = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bRightButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  bool bRightButton = false;$/;"	m	struct:GameControllerMouse	typeref:typename:bool
bWaitForEnv	examples/test/lib/JFixLib/src/Event/Event.h	/^  bool bWaitForEnv = false;$/;"	m	class:Event	typeref:typename:bool
b_m16_interleave	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^const uint8_t b_m16_interleave[] = { 0, 49, 49, 41, 90, 27, 117, 10 };$/;"	v	typeref:typename:const uint8_t[]
backPorch_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          backPorch_us;                   \/\/ back porch duration$/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
backarrowKeyMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         backarrowKeyMode;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  RGB888            backgroundColor;$/;"	m	struct:ConfigDialog	typeref:typename:RGB888	file:
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              backgroundColor                = RGB888(255, 255, 255);  \/**< Frame backg/;"	m	struct:fabgl::uiFrameStyle	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              backgroundColor          = RGB888(128, 128, 128);  \/**< Background color /;"	m	struct:fabgl::uiCheckBoxStyle	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           backgroundColor                = RGB888(128, 128, 128);   \/**< Background co/;"	m	struct:fabgl::uiListBoxStyle	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           backgroundColor            = RGB888(128, 128, 128);     \/**< Background colo/;"	m	struct:fabgl::uiTextEditStyle	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           backgroundColor          = RGB888(128, 128, 128); \/**< Background color *\/$/;"	m	struct:fabgl::uiButtonStyle	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           backgroundColor          = RGB888(255, 255, 255);     \/**< Background color /;"	m	struct:fabgl::uiLabelStyle	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           backgroundColor          = RGB888(255, 255, 255);     \/**< Background color /;"	m	struct:fabgl::uiStaticLabelStyle	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           backgroundColor = RGB888(128, 128, 128);   \/**< Progress bar background colo/;"	m	struct:fabgl::uiProgressBarStyle	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888 backgroundColor    = RGB888(255, 255, 255);    \/**< Slider background color *\/$/;"	m	struct:fabgl::uiSliderStyle	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888 backgroundColor = RGB888(128, 128, 128);    \/**< Panel background color *\/$/;"	m	struct:fabgl::uiPanelStyle	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888 backgroundColor = RGB888(128, 128, 128);   \/**< Paintbox background color *\/$/;"	m	struct:fabgl::uiPaintBoxStyle	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888 backgroundColor = RGB888(255, 255, 255);   \/**< Background color *\/$/;"	m	struct:fabgl::uiImageStyle	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  RGB888 backgroundColor()                        { return m_backgroundColor; }$/;"	f	class:fabgl::InputBox	typeref:typename:RGB888
backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Color        backgroundColor;$/;"	m	struct:fabgl::EmuState	typeref:typename:Color
backgroundPrimitiveTimeoutEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  bool backgroundPrimitiveTimeoutEnabled()          { return m_backgroundPrimitiveTimeoutEnabled/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:bool
ballsCount_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^  int ballsCount_ = 0;$/;"	m	class:BallsTest	typeref:typename:int
ballsCount_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^  int ballsCount_ = 0;$/;"	m	class:BallsTest	typeref:typename:int
ballsCount_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^  int ballsCount_ = 0;$/;"	m	class:BallsTest	typeref:typename:int
balls_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^  } * balls_ = nullptr;$/;"	m	class:BallsTest	typeref:struct:BallsTest::Ball *
balls_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^  } * balls_ = nullptr;$/;"	m	class:BallsTest	typeref:struct:BallsTest::Ball *
balls_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^  } * balls_ = nullptr;$/;"	m	class:BallsTest	typeref:struct:BallsTest::Ball *
base	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp	/^  typedef JsonSerializer<TWriter> base;$/;"	t	class:PrettyJsonSerializer	typeref:typename:JsonSerializer<TWriter>
base_size	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t base_size[] = {  2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2,$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
basic300_5F_minidisk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/minidisks/basic/basic300_5F_minidisk.h	/^const uint8_t basic300_5F_minidisk[] = {$/;"	v	typeref:typename:const uint8_t[]
basic5_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/basic/basic5_dsk.h	/^const uint8_t basic5_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
basic_rom	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/ROM/basic_rom.h	/^const uint8_t basic_rom[] = {$/;"	v	typeref:typename:const uint8_t[]
baud	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint8_t baud;     \/\/ see PHYSICALDEVICE_BAUD_...$/;"	m	struct:PhysicalDevice	typeref:typename:uint8_t
baudRateComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiComboBox *      baudRateComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiComboBox *
baud_rate_div	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^baud_rate_div:$/;"	l
bc	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    reg_pair af, bc, de, hl;$/;"	m	struct:fabgl::i8080::Regs	typeref:typename:reg_pair
beat16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)$/;"	f	typeref:typename:LIB8STATIC uint16_t
beat8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)$/;"	f	typeref:typename:LIB8STATIC uint8_t
beat88	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint16_t beat88( accum88 beats_per_minute_88, uint32_t timebase = 0)$/;"	f	typeref:typename:LIB8STATIC uint16_t
beatsin16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest =/;"	f	typeref:typename:LIB8STATIC uint16_t
beatsin8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint8_t beatsin8( accum88 beats_per_minute, uint8_t lowest = 0, uint8_t highest = 255/;"	f	typeref:typename:LIB8STATIC uint8_t
beatsin88	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highes/;"	f	typeref:typename:LIB8STATIC uint16_t
begin	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE iterator begin() const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE iterator
begin	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  FORCE_INLINE iterator begin() const {$/;"	f	class:JsonArrayConst	typeref:typename:FORCE_INLINE iterator
begin	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE iterator begin() const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE iterator
begin	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  FORCE_INLINE iterator begin() const {$/;"	f	class:JsonObjectConst	typeref:typename:FORCE_INLINE iterator
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^void PS2Controller::begin(PS2Preset preset, KbdMode keyboardMode)$/;"	f	class:fabgl::PS2Controller	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^void PS2Controller::begin(gpio_num_t port0_clkGPIO, gpio_num_t port0_datGPIO, gpio_num_t port1_c/;"	f	class:fabgl::PS2Controller	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^void PS2Device::begin(int PS2Port)$/;"	f	class:fabgl::PS2Device	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^bool I2C::begin(gpio_num_t SDAGPIO, gpio_num_t SCLGPIO)$/;"	f	class:fabgl::I2C	typeref:typename:bool
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^void DS3231::begin(I2C * i2c)$/;"	f	class:fabgl::DS3231	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^bool MCP23S17::begin(int MISO, int MOSI, int CLK, int CS, int CSActiveState, int host)$/;"	f	class:fabgl::MCP23S17	typeref:typename:bool
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^void Keyboard::begin(bool generateVirtualKeys, bool createVKQueue, int PS2Port)$/;"	f	class:fabgl::Keyboard	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^void Keyboard::begin(gpio_num_t clkGPIO, gpio_num_t dataGPIO, bool generateVirtualKeys, bool cre/;"	f	class:fabgl::Keyboard	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^void Mouse::begin(gpio_num_t clkGPIO, gpio_num_t dataGPIO)$/;"	f	class:fabgl::Mouse	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^void Mouse::begin(int PS2Port)$/;"	f	class:fabgl::Mouse	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.cpp	/^void GPIOStream::begin()$/;"	f	class:fabgl::GPIOStream	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.cpp	/^void GPIOStream::begin(bool div1_onGPIO0, gpio_num_t div2, gpio_num_t div4, gpio_num_t div8, gpi/;"	f	class:fabgl::GPIOStream	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::begin()$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::begin(I2C * i2c, int address, gpio_num_t resetGPIO)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::begin()$/;"	f	class:fabgl::TFTController	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::begin(SPIClass * spi, gpio_num_t DC, gpio_num_t RESX, gpio_num_t CS, gpio_nu/;"	f	class:fabgl::TFTController	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::begin(SPIClass * spi, int DC, int RESX, int CS, int BL, int freq)$/;"	f	class:fabgl::TFTController	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::begin(int SCK, int MOSI, int DC, int RESX, int CS, int host, int BL, int fre/;"	f	class:fabgl::TFTController	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^void CVBSBaseController::begin()$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^void CVBSBaseController::begin(gpio_num_t videoGPIO)$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::begin()$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::begin(gpio_num_t red1GPIO, gpio_num_t red0GPIO, gpio_num_t green1GPIO, g/;"	f	class:fabgl::VGABaseController	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::begin(gpio_num_t redGPIO, gpio_num_t greenGPIO, gpio_num_t blueGPIO, gpi/;"	f	class:fabgl::VGABaseController	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::begin()$/;"	f	class:fabgl::VGATextController	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::begin(gpio_num_t red1GPIO, gpio_num_t red0GPIO, gpio_num_t green1GPIO, g/;"	f	class:fabgl::VGATextController	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::begin(gpio_num_t redGPIO, gpio_num_t greenGPIO, gpio_num_t blueGPIO, gpi/;"	f	class:fabgl::VGATextController	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void InputBox::begin(BitmappedDisplayController * displayController)$/;"	f	class:fabgl::InputBox	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void InputBox::begin(char const * modeline, int viewPortWidth, int viewPortHeight, int displayCo/;"	f	class:fabgl::InputBox	typeref:typename:void
begin	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool Terminal::begin(BaseDisplayController * displayController, int maxColumns, int maxRows, Key/;"	f	class:fabgl::Terminal	typeref:typename:bool
begin	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    iterator begin() const { return iterator(leds, dir); }   \/\/\/< Makes an iterator instance /;"	f	class:CPixelView	typeref:typename:iterator
begin	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    iterator begin() { return iterator(leds, dir); }   \/\/\/< Makes an iterator instance for th/;"	f	class:CPixelView	typeref:typename:iterator
beginInput	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::beginInput()$/;"	f	class:fabgl::LineEditor	typeref:typename:void
beginPaint	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::beginPaint(uiEvent * paintEvent, Rect const & clippingRect)$/;"	f	class:fabgl::uiWindow	typeref:typename:void
beginUpdate	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::beginUpdate()$/;"	f	class:fabgl::Canvas	typeref:typename:void
begin_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  char *begin_, *left_, *right_, *end_;$/;"	m	class:MemoryPool	typeref:typename:char *
bestAlignValue	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^static int bestAlignValue(int value)$/;"	f	namespace:fabgl	typeref:typename:int	file:
bg	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint8_t bg[4][8];$/;"	m	union:FlexibleInlineBlockClocklessController::__anon2152c22b010a	typeref:typename:uint8_t[4][8]
bgColorComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiColorComboBox * bgColorComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiColorComboBox *
bhi	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^            uint8_t bhi;$/;"	m	struct:sin16_avr::__anon48e99a99010a::__anon48e99a990208	typeref:typename:uint8_t
bias	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    float bias = 0; \/\/ To do$/;"	m	class:JEnv	typeref:typename:float
biod_data_vid_end	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^biod_data_vid_end:$/;"	l
bios_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^bios_data:$/;"	l
bios_data_vid_start	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^bios_data_vid_start: ; \/\/ offset 0x49$/;"	l
bios_entry	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^bios_entry:$/;"	l
biosrom	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^static const uint8_t biosrom[] = {$/;"	v	typeref:typename:const uint8_t[]	file:
biosstr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^biosstr  db  'Based on 8086tiny plus 2.34!', 0, 0$/;"	d
bitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Bitmap  bitmap;             \/**< Cursor bitmap *\/$/;"	m	struct:fabgl::Cursor	typeref:typename:Bitmap
bitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Bitmap const * bitmap;$/;"	m	struct:fabgl::BitmapDrawingInfo	typeref:typename:Bitmap const *
bitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Bitmap const *   bitmap                   = nullptr;               \/**< Bitmap to display *\/$/;"	m	struct:fabgl::uiButtonStyle	typeref:typename:Bitmap const *
bitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Bitmap const * bitmap() { return m_bitmap; }$/;"	f	class:fabgl::uiImage	typeref:typename:Bitmap const *
bitmapDrawingInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    BitmapDrawingInfo      bitmapDrawingInfo;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:BitmapDrawingInfo
bitmapTextSpace	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t          bitmapTextSpace          = 4;                     \/**< Spaces between image /;"	m	struct:fabgl::uiButtonStyle	typeref:typename:uint8_t
bitmap_car_to_right_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t bitmap_car_to_right_data[] = {$/;"	v	typeref:typename:const uint8_t[]
bitmap_caricon_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t bitmap_caricon_data[] = {$/;"	v	typeref:typename:const uint8_t[]
bitmap_cariconleft_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t bitmap_cariconleft_data[] = {$/;"	v	typeref:typename:const uint8_t[]
bitmap_cariconright	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  Bitmap bitmap_cariconright = Bitmap(8, 8, bitmap_car_to_right_data, PixelFormat::Mask, RGB888(/;"	m	struct:Score	typeref:typename:Bitmap
bitmap_cariconright_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t bitmap_cariconright_data[] = {$/;"	v	typeref:typename:const uint8_t[]
bitmap_classicracer_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t bitmap_classicracer_data[] = {$/;"	v	typeref:typename:const uint8_t[]
bitmap_joystick_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t bitmap_joystick_data[] = {$/;"	v	typeref:typename:const uint8_t[]
bitmap_keyba_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t bitmap_keyba_data[] = {$/;"	v	typeref:typename:const uint8_t[]
bitmap_keybb_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t bitmap_keybb_data[] = {$/;"	v	typeref:typename:const uint8_t[]
bitmap_keybo_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t bitmap_keybo_data[] = {$/;"	v	typeref:typename:const uint8_t[]
bitmap_mouse_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t bitmap_mouse_data[] = {$/;"	v	typeref:typename:const uint8_t[]
bitswap_type	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^} bitswap_type;$/;"	t	typeref:union:__anonad8cb3ed040a
blackLevel	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  uint8_t         blackLevel;                     \/\/ DAC level of black$/;"	m	struct:fabgl::CVBSParams	typeref:typename:uint8_t
blank	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint16_t blank            : 1;  \/**< If enabled the glyph is filled with the background col/;"	m	struct:fabgl::GlyphOptions::__anon3dd53dc60108	typeref:typename:uint16_t:1
blankLines	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  uint8_t         blankLines;                     \/\/ vertical blank after vertical sync to kee/;"	m	struct:fabgl::CVBSParams	typeref:typename:uint8_t
blend	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CHSV blend( const CHSV& p1, const CHSV& p2, fract8 amountOfP2, TGradientDirectionCode directionC/;"	f	typeref:typename:CHSV
blend	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CHSV* blend( const CHSV* src1, const CHSV* src2, CHSV* dest, uint16_t count, fract8 amountOfsrc2/;"	f	typeref:typename:CHSV *
blend	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )$/;"	f	typeref:typename:CRGB
blend	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB* blend( const CRGB* src1, const CRGB* src2, CRGB* dest, uint16_t count, fract8 amountOfsrc2/;"	f	typeref:typename:CRGB *
blend8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC uint8_t blend8( uint8_t a, uint8_t b, uint8_t amountOfB)$/;"	f	typeref:typename:LIB8STATIC uint8_t
blink	examples/test/lib/JFixLib/src/JFixture.h	/^  virtual void blink(char num=1, short dur=100, short delayTime=100, char channel=0){};$/;"	f	class:JFixture	typeref:typename:void
blink	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  void blink(char num = 1, short dur = 100, short delayTime = 100,$/;"	f	class:JFixtureAddr	typeref:typename:void
blink	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^   void blink(char num=1, short dur=100, short delayTime=100, char channel=0) override{$/;"	f	class:JFixtureDimmer	typeref:typename:void
blink	examples/test/lib/JFixLib/src/JTlFix.h	/^    void blink(char num=1, short dur=100, short delayTime=100, char channel=0) override{$/;"	f	class:JTlFix	typeref:typename:void
blinkCaret	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::blinkCaret(bool forceOFF)$/;"	f	class:fabgl::uiApp	typeref:typename:void
blinkCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::blinkCursor()$/;"	f	class:fabgl::Terminal	typeref:typename:void
blinkIndex	examples/test/lib/JFixLib/src/JFixture.h	/^  uint8_t blinkIndex = 0;$/;"	m	class:JFixture	typeref:typename:uint8_t
blinkInterval	examples/test/lib/JFixLib/src/JFixture.h	/^  int blinkInterval[2] = {30, 1500};$/;"	m	class:JFixture	typeref:typename:int[2]
blinkText	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::blinkText()$/;"	f	class:fabgl::Terminal	typeref:typename:void
blinkTimerFunc	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::blinkTimerFunc(TimerHandle_t xTimer)$/;"	f	class:fabgl::Terminal	typeref:typename:void
blm	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint8_t   blm;  \/\/ Block mask. 7 => 1k, 0Fh => 2k, 1Fh => 4k...$/;"	m	struct:DiscParameterBlock	typeref:typename:uint8_t
blo	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^            uint8_t blo;$/;"	m	struct:sin16_avr::__anon48e99a99010a::__anon48e99a990208	typeref:typename:uint8_t
blockingGetVirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^bool Keyboard::blockingGetVirtualKey(VirtualKeyItem * item)$/;"	f	class:fabgl::Keyboard	typeref:typename:bool
blue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t blue;  \/\/\/< @copydoc b$/;"	m	union:CRGB::__anonbcc8608a070a::__anonbcc8608a0808::__anonbcc8608a0b0a	typeref:typename:uint8_t
blue_star_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/blue_star.h	/^const char * blue_star_filename = "Blue Star.PRG";$/;"	v	typeref:typename:const char *
blue_star_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/blue_star.h	/^const uint8_t blue_star_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
blur1d	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void blur1d( CRGB* leds, uint16_t numLeds, fract8 blur_amount)$/;"	f	typeref:typename:void
blur1d	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & blur1d(fract8 blur_amount) {$/;"	f	class:CPixelView	typeref:typename:CPixelView &
blur2d	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void blur2d( CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)$/;"	f	typeref:typename:void
blurColumns	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void blurColumns(CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)$/;"	f	typeref:typename:void
blurRows	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void blurRows( CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)$/;"	f	typeref:typename:void
bmpEnemiesFire	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^Bitmap bmpEnemiesFire[2] = { Bitmap(3, 7, &enemy_fire_data[0], PixelFormat::Mask, RGB888(255, 25/;"	v	typeref:typename:Bitmap[2]
bmpEnemyA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^Bitmap bmpEnemyA[2] = { Bitmap(12, 8, enemyA_data[0], PixelFormat::Mask, RGB888(0, 255, 0)),$/;"	v	typeref:typename:Bitmap[2]
bmpEnemyB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^Bitmap bmpEnemyB[2] = { Bitmap(12, 8, enemyB_data[0], PixelFormat::Mask, RGB888(255, 255, 0)),$/;"	v	typeref:typename:Bitmap[2]
bmpEnemyC	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^Bitmap bmpEnemyC[2] = { Bitmap(12, 8, enemyC_data[0], PixelFormat::Mask, RGB888(255, 0, 0)),$/;"	v	typeref:typename:Bitmap[2]
bmpEnemyD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^Bitmap bmpEnemyD = Bitmap(16, 7, enemyD_data, PixelFormat::Mask, RGB888(255, 255, 255));$/;"	v	typeref:typename:Bitmap
bmpEnemyExplosion	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^Bitmap bmpEnemyExplosion    = Bitmap(12, 8, enemy_explosion_data, PixelFormat::Mask, RGB888(255,/;"	v	typeref:typename:Bitmap
bmpEnemyExplosionRed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^Bitmap bmpEnemyExplosionRed = Bitmap(12, 8, enemy_explosion_data, PixelFormat::Mask, RGB888(255,/;"	v	typeref:typename:Bitmap
bmpPlayer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^Bitmap bmpPlayer = Bitmap(14, 8, player_data, PixelFormat::Mask, RGB888(0, 255, 255));$/;"	v	typeref:typename:Bitmap
bmpPlayerExplosion	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^Bitmap bmpPlayerExplosion[2] = { Bitmap(16, 8, &player_explosion_data[0], PixelFormat::Mask, RGB/;"	v	typeref:typename:Bitmap[2]
bmpPlayerFire	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^Bitmap bmpPlayerFire = Bitmap(1, 6, player_fire_data, PixelFormat::Mask, RGB888(0, 255, 255));$/;"	v	typeref:typename:Bitmap
board	examples/test/platformio.ini	/^board = esp32dev$/;"	k	section:env:esp32dev
bold	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint16_t bold             : 1;  \/**< If enabled produces a bold-like style. *\/$/;"	m	struct:fabgl::GlyphOptions::__anon3dd53dc60108	typeref:typename:uint16_t:1
bool	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def bool(n):$/;"	f
boolean	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^typedef uint8_t boolean;$/;"	t	typeref:typename:uint8_t
boot	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^boot:$/;"	l
bootDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  uint8_t           bootDrive;$/;"	m	struct:MachineConfItem	typeref:typename:uint8_t
bootDriveComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiComboBox      * bootDriveComboBox;$/;"	m	struct:ConfigDialog	typeref:typename:uiComboBox *	file:
boot_device	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^boot_device      db  0$/;"	d
boot_state	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^boot_state           db 0$/;"	d
borderColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888        borderColor        = RGB888(128, 128, 128);                   \/**< Border color/;"	m	struct:fabgl::uiWindowStyle	typeref:typename:RGB888
borderSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t       borderSize         = 3;                                       \/**< Border size /;"	m	struct:fabgl::uiWindowStyle	typeref:typename:uint8_t
bottom	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t bottom : 1;     \/**< Bottom anchor enable\/disable switch *\/$/;"	m	struct:fabgl::uiAnchors	typeref:typename:uint8_t:1
boundariesMode	examples/test/lib/JFixLib/src/Event/Event.h	/^enum boundariesMode { MODE_BOUNCE, MODE_RESET };$/;"	g
breakDetected	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool breakDetected() { auto r = m_breakDetected; m_breakDetected = false; return r; }$/;"	f	class:fabgl::SerialPort	typeref:typename:bool
brighten8_lin	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC uint8_t brighten8_lin( uint8_t x )$/;"	f	typeref:typename:LIB8STATIC uint8_t
brighten8_raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC uint8_t brighten8_raw( uint8_t x)$/;"	f	typeref:typename:LIB8STATIC uint8_t
brighten8_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC uint8_t brighten8_video( uint8_t x)$/;"	f	typeref:typename:LIB8STATIC uint8_t
brightness	examples/test/lib/JFixLib/src/Event/Event.h	/^  float brightness = 1.0;$/;"	m	class:Event	typeref:typename:float
brightness	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    float brightness = 0;$/;"	m	class:JEnv	typeref:typename:float
brightness	examples/test/lib/JFixLib/src/JFixture.h	/^  float brightness = 0.1; \/\/ Use lagger[0]$/;"	m	class:JFixture	typeref:typename:float
brightnessCurve	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  float brightnessCurve[256];$/;"	m	class:JFixtureAddr	typeref:typename:float[256]
brightnessCurve	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  float brightnessCurve[256];$/;"	m	class:JFixtureDimmer	typeref:typename:float[256]
brightnessEnv	examples/test/lib/JFixLib/src/Event/Event.h	/^  JEnv brightnessEnv;$/;"	m	class:Event	typeref:typename:JEnv
brightnessLag	examples/test/lib/JFixLib/src/JFixture.h	/^  JLag* brightnessLag;$/;"	m	class:JFixture	typeref:typename:JLag *
bringAfter	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::bringAfter(uiWindow * insertionPoint)$/;"	f	class:fabgl::uiWindow	typeref:typename:void
bringOnTop	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::bringOnTop()$/;"	f	class:fabgl::uiWindow	typeref:typename:void
browseFD0Button	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiButton        * browseFD0Button;$/;"	m	struct:ConfigDialog	typeref:typename:uiButton *	file:
browseFD1Button	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiButton        * browseFD1Button;$/;"	m	struct:ConfigDialog	typeref:typename:uiButton *	file:
browseFilename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  void browseFilename(uiTextEdit * edit) {$/;"	f	struct:ConfigDialog	typeref:typename:void	file:
browseHD0Button	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiButton        * browseHD0Button;$/;"	m	struct:ConfigDialog	typeref:typename:uiButton *	file:
browseHD1Button	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiButton        * browseHD1Button;$/;"	m	struct:ConfigDialog	typeref:typename:uiButton *	file:
brushColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGB888       brushColor;$/;"	m	struct:fabgl::PaintState	typeref:typename:RGB888
bseconds16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint16_t bseconds16()$/;"	f	typeref:typename:LIB8STATIC uint16_t
bsh	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint8_t   bsh;  \/\/ Block shift. 3 => 1k, 4 => 2k, 5 => 4k....$/;"	m	struct:DiscParameterBlock	typeref:typename:uint8_t
buffer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  void* buffer() {$/;"	f	class:MemoryPool	typeref:typename:void *
buffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  uint8_t * buffer;$/;"	m	struct:fabgl::I2CJobInfo	typeref:typename:uint8_t *
buffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    uint8_t * buffer;$/;"	m	struct:DMABuffer	typeref:typename:uint8_t *
bufferCapacity	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp	/^  static const size_t bufferCapacity = ARDUINOJSON_STRING_BUFFER_SIZE;$/;"	m	class:Writer	typeref:typename:const size_t
buffer_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp	/^  char buffer_[capacity_];$/;"	m	class:StaticJsonDocument	typeref:typename:char[]
buffer_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  char buffer_[64];  \/\/ using a member instead of a local variable because it$/;"	m	class:JsonDeserializer	typeref:typename:char[64]
buffer_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp	/^  char buffer_[bufferCapacity];$/;"	m	class:Writer	typeref:typename:char[]
bufferedFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^FILE * bufferedFile                = nullptr;$/;"	v	typeref:typename:FILE *
bufferedFileChanged	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^bool bufferedFileChanged           = false;$/;"	v	typeref:typename:bool
bufferedFileData	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^uint8_t * bufferedFileData         = nullptr;$/;"	v	typeref:typename:uint8_t *
bufferedFileDataPos	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^int bufferedFileDataPos            = -1; \/\/ position of bufferedFileData related to the actual/;"	v	typeref:typename:int
bufferedFileDataSize	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^constexpr int bufferedFileDataSize = 4388;\/\/4388;$/;"	v	typeref:typename:int
build	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^  "build": {$/;"	o
build	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "build": {$/;"	o
buildDMAChain	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^void CVBSGenerator::buildDMAChain()$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:void
buildDMAChain_subCarrierOnly	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^void CVBSGenerator::buildDMAChain_subCarrierOnly()$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:void
burstAmp	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  int8_t          burstAmp;                       \/\/ DAC amplitude of color burst$/;"	m	struct:fabgl::CVBSParams	typeref:typename:int8_t
burstCycles	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          burstCycles;                    \/\/ number of color burst cycles$/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
burstStart_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          burstStart_us;                  \/\/ (breeze way) time from backPorch_us to co/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
busRead	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^uint8_t Machine::busRead(int addr)$/;"	f	class:Machine	typeref:typename:uint8_t
busRead	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  static int busRead(void * context, int addr)                 { return ((Machine*)context)->bus/;"	f	class:Machine	typeref:typename:int
busReadCharDefs	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^uint8_t Machine::busReadCharDefs(int addr)$/;"	f	class:Machine	typeref:typename:uint8_t
busReadColorP	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^uint8_t const * Machine::busReadColorP(int addr)$/;"	f	class:Machine	typeref:typename:uint8_t const *
busReadVideoP	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^uint8_t const * Machine::busReadVideoP(int addr)$/;"	f	class:Machine	typeref:typename:uint8_t const *
busWrite	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::busWrite(int addr, uint8_t value)$/;"	f	class:Machine	typeref:typename:void
busWrite	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  static void busWrite(void * context, int addr, int value)    { ((Machine*)context)->busWrite(a/;"	f	class:Machine	typeref:typename:void
busiestCore	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static int busiestCore()                 { return s_busiestCore; }$/;"	f	struct:fabgl::CoreUsage	typeref:typename:int
busses	examples/test/lib/JFixLib/src/JFixture.h	/^  float busses[NUM_BUSSES];$/;"	m	class:JFixture	typeref:typename:float[]
button	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/restartdialog.h	/^  uiButton * button;$/;"	m	struct:RebootDialog	typeref:typename:uiButton *
button1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestModalDialog.h	/^  uiButton * button1, * button2;$/;"	m	struct:TestModalDialog	typeref:typename:uiButton *
button2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestModalDialog.h	/^  uiButton * button1, * button2;$/;"	m	struct:TestModalDialog	typeref:typename:uiButton *
buttonA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  VirtualKey up, down, left, right, buttonA, buttonB;$/;"	m	struct:GameControllerKeys	typeref:typename:VirtualKey
buttonA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  VirtualKey up, down, left, right, buttonA, buttonB;$/;"	m	struct:GameControllerKeys	typeref:typename:VirtualKey
buttonB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  VirtualKey up, down, left, right, buttonA, buttonB;$/;"	m	struct:GameControllerKeys	typeref:typename:VirtualKey
buttonB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  VirtualKey up, down, left, right, buttonA, buttonB;$/;"	m	struct:GameControllerKeys	typeref:typename:VirtualKey
buttonBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888 buttonBackgroundColor = RGB888(64, 64, 64);     \/**< Background color of open\/close b/;"	m	struct:fabgl::uiComboBoxStyle	typeref:typename:RGB888
buttonColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              buttonColor                    = RGB888(64, 64, 64);     \/**< Color used /;"	m	struct:fabgl::uiFrameStyle	typeref:typename:RGB888
buttonColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888 buttonColor           = RGB888(128, 128, 128);  \/**< Foreground color of open\/close b/;"	m	struct:fabgl::uiComboBoxStyle	typeref:typename:RGB888
buttonStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiButtonStyle & buttonStyle() { return m_buttonStyle; }$/;"	f	class:fabgl::uiButton	typeref:typename:uiButtonStyle &
buttonSubItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              buttonSubItem;    \/\/ in case of button with subitems, specifies the selecte/;"	m	struct:fabgl::InputForm	typeref:typename:int
buttonSubItems	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char const * buttonSubItems(int index)               { return m_buttonSubItems[index]; }$/;"	f	class:fabgl::InputBox	typeref:typename:char const *
buttonText	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char const * buttonText(int index)                   { return m_buttonText[index]; }$/;"	f	class:fabgl::InputBox	typeref:typename:char const *
buttonWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiCustomComboBox::buttonWidth()$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:int
buttons	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  MouseButtons buttons;            \/**< Mouse buttons status. *\/$/;"	m	struct:fabgl::MouseDelta	typeref:typename:MouseButtons
buttons	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  MouseButtons buttons;     \/**< Mouse buttons status. *\/$/;"	m	struct:fabgl::MouseStatus	typeref:typename:MouseButtons
buttonsSubItemsHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int buttonsSubItemsHeight(int index)                 { return m_buttonSubItemsHeight[index]; }$/;"	f	class:fabgl::InputBox	typeref:typename:int
byte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^    unsigned char   byte[14];$/;"	m	union:fabgl::Z80_STATE::__anon8d47e636030a	typeref:typename:unsigned char[14]
byteToBCD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^inline uint8_t byteToBCD(uint8_t v)$/;"	f	typeref:typename:uint8_t
byteToBCD	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^static uint8_t byteToBCD(uint8_t v)$/;"	f	namespace:fabgl	typeref:typename:uint8_t	file:
bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint8_t bytes[8];  \/\/\/< eight 8-bit values to load for swapping$/;"	m	union:__anonad8cb3ed040a	typeref:typename:uint8_t[8]
bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    uint8_t  bytes[4];  \/\/\/< values as an array$/;"	m	union:__anon875718a3020a	typeref:typename:uint8_t[4]
bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^		uint8_t bytes[12];$/;"	m	union:InlineBlockClocklessController::__anona800f11d010a	typeref:typename:uint8_t[12]
bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^		uint8_t bytes[16];$/;"	m	union:SixteenWayInlineBlockClocklessController::__anona800f11d020a	typeref:typename:uint8_t[16]
bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^    uint8_t bytes[8];$/;"	m	union:COctoWS2811Controller::__anonf4de0cf3010a	typeref:typename:uint8_t[8]
bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^		uint8_t bytes[12];$/;"	m	union:InlineBlockClocklessController::__anon2749c531010a	typeref:typename:uint8_t[12]
bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^		uint8_t bytes[16];$/;"	m	union:SixteenWayInlineBlockClocklessController::__anon2749c531020a	typeref:typename:uint8_t[16]
bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint8_t bytes[32];$/;"	m	union:FlexibleInlineBlockClocklessController::__anon2152c22b010a	typeref:typename:uint8_t[32]
bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^    uint8_t bytes[8];$/;"	m	union:__anonf80a47c5010a	typeref:typename:uint8_t[8]
bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^	uint8_t bytes[8];$/;"	m	union:InlineBlockClocklessController::__anonedf8fd7e010a	typeref:typename:uint8_t[8]
bytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^		uint8_t bytes[8];$/;"	m	union:InlineBlockClocklessController::__anon110b7520010a	typeref:typename:uint8_t[8]
bytesWritten	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  size_t bytesWritten() const {$/;"	f	class:JsonSerializer	typeref:typename:size_t
bytesWritten	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  size_t bytesWritten() const {$/;"	f	class:TextFormatter	typeref:typename:size_t
bytesWritten	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  size_t bytesWritten() const {$/;"	f	class:MsgPackSerializer	typeref:typename:size_t
c	examples/test/.pio/libdeps/esp32dev/FabGL/tools/wav2header/wav2header.py	/^c = 0$/;"	v
c0	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t c0:1;  \/\/\/< byte 'c', bit 0 (0x00010000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
c1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  c1:$/;"	l
c1	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t c1:1;  \/\/\/< byte 'c', bit 1 (0x00020000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
c2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  c2:$/;"	l
c2	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t c2:1;  \/\/\/< byte 'c', bit 2 (0x00040000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
c3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  c3:$/;"	l
c3	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t c3:1;  \/\/\/< byte 'c', bit 3 (0x00080000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
c4	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t c4:1;  \/\/\/< byte 'c', bit 4 (0x00100000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
c5	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t c5:1;  \/\/\/< byte 'c', bit 5 (0x00200000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
c6	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t c6:1;  \/\/\/< byte 'c', bit 6 (0x00400000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
c7	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t c7:1;  \/\/\/< byte 'c', bit 7 (0x00800000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
c_str	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  const char* c_str() const {$/;"	f	class:DeserializationError	typeref:typename:const char *
c_str	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  const char* c_str() const {$/;"	f	class:JsonString	typeref:typename:const char *
calcDayOfWeek	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^void DateTime::calcDayOfWeek()$/;"	f	class:fabgl::DateTime	typeref:typename:void
calcI2STimingParams	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int calcI2STimingParams(int sampleRate, int * outA, int * outB, int * outN, int * outM)$/;"	f	namespace:fabgl	typeref:typename:int
calcParity	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool calcParity(uint8_t v)$/;"	f	namespace:fabgl	typeref:typename:bool
calcRequiredDMABuffersCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^int VGABaseController::calcRequiredDMABuffersCount(int viewPortHeight)$/;"	f	class:fabgl::VGABaseController	typeref:typename:int
calcRequiredSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void FileBrowserForm::calcRequiredSize()$/;"	f	class:fabgl::FileBrowserForm	typeref:typename:void
calcRequiredSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void FileSelectorForm::calcRequiredSize()$/;"	f	class:fabgl::FileSelectorForm	typeref:typename:void
calcRequiredSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void MessageForm::calcRequiredSize()$/;"	f	class:fabgl::MessageForm	typeref:typename:void
calcRequiredSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void ProgressForm::calcRequiredSize()$/;"	f	class:fabgl::ProgressForm	typeref:typename:void
calcRequiredSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void SelectForm::calcRequiredSize()$/;"	f	class:fabgl::SelectForm	typeref:typename:void
calcRequiredSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void TextInputForm::calcRequiredSize()$/;"	f	class:fabgl::TextInputForm	typeref:typename:void
calculateAvailableCyclesForDrawings	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^void CVBSPalettedController::calculateAvailableCyclesForDrawings()$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:void
calculateAvailableCyclesForDrawings	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^void VGAPalettedController::calculateAvailableCyclesForDrawings()$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
calculate_max_brightness_for_power_mW	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)$/;"	f	typeref:typename:uint8_t
calculate_max_brightness_for_power_mW	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^uint8_t calculate_max_brightness_for_power_mW(const CRGB* ledbuffer, uint16_t numLeds, uint8_t t/;"	f	typeref:typename:uint8_t
calculate_max_brightness_for_power_vmA	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^uint8_t calculate_max_brightness_for_power_vmA(const CRGB* ledbuffer, uint16_t numLeds, uint8_t /;"	f	typeref:typename:uint8_t
calculate_unscaled_power_mW	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) \/\/25354$/;"	f	typeref:typename:uint32_t
canAlloc	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  bool canAlloc(size_t bytes) const {$/;"	f	class:MemoryPool	typeref:typename:bool
canBeInNonQuotedString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  static inline bool canBeInNonQuotedString(char c) {$/;"	f	class:JsonDeserializer	typeref:typename:bool
canBeInNumber	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  static inline bool canBeInNumber(char c) {$/;"	f	class:JsonDeserializer	typeref:typename:bool
canConvertFromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^inline bool canConvertFromJson(JsonVariantConst src, const ::String&) {$/;"	f	typeref:typename:bool
canConvertFromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^inline bool canConvertFromJson(JsonVariantConst src, const std::string&) {$/;"	f	typeref:typename:bool
canConvertFromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^inline bool canConvertFromJson(JsonVariantConst src, const std::string_view&) {$/;"	f	typeref:typename:bool
canConvertNumber	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/convertNumber.hpp	/^canConvertNumber(TIn value) {$/;"	f
canConvertNumber	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/convertNumber.hpp	/^canConvertNumber(TIn) {$/;"	f
canConvertNumber	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/convertNumber.hpp	/^canConvertNumber(TIn) {$/;"	f	typeref:typename:enable_if<is_integral<TIn>::value && is_floating_point<TOut>::value,bool>::type
cancelButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiButton        * cancelButton;$/;"	m	struct:ConfigDialog	typeref:typename:uiButton *	file:
canvas	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Canvas * uiWindow::canvas()$/;"	f	class:fabgl::uiWindow	typeref:typename:Canvas *
canvas	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Canvas * canvas()                                { return m_canvas; }$/;"	f	class:fabgl::uiApp	typeref:typename:Canvas *
canvas	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Canvas * canvas() { return m_canvas; }$/;"	f	class:fabgl::Terminal	typeref:typename:Canvas *
capacity	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  size_t capacity() const {$/;"	f	class:JsonDocument	typeref:typename:size_t
capacity	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  size_t capacity() const {$/;"	f	class:MemoryPool	typeref:typename:size_t
capacity_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp	/^  static const size_t capacity_ =$/;"	m	class:StaticJsonDocument	typeref:typename:const size_t
capacity_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  size_t size_, capacity_;$/;"	m	class:StringCopier	typeref:typename:size_t
capacity_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  size_t capacity_;$/;"	m	class:detail::MemoryPoolPrint	typeref:typename:size_t
captureMouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::captureMouse(uiWindow * window)$/;"	f	class:fabgl::uiApp	typeref:typename:void
capturedMouseWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * capturedMouseWindow() { return m_capturedMouseWindow; }$/;"	f	class:fabgl::uiApp	typeref:typename:uiWindow *
carAdvanceSound	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    SawtoothWaveformGenerator carAdvanceSound;$/;"	m	struct:Race::Player	typeref:typename:SawtoothWaveformGenerator
carCrashSound	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    NoiseWaveformGenerator carCrashSound;$/;"	m	struct:Race::Player	typeref:typename:NoiseWaveformGenerator
carEngineSound	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    SawtoothWaveformGenerator carEngineSound;$/;"	m	struct:Race::Player	typeref:typename:SawtoothWaveformGenerator
carWheelSound	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    SawtoothWaveformGenerator carWheelSound;$/;"	m	struct:Race::Player	typeref:typename:SawtoothWaveformGenerator
carbitmap	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Bitmap carbitmap = Bitmap(24, 21, carbitmap_data, PixelFormat::Mask, RGB888(0, 0, 255));$/;"	m	struct:Race	typeref:typename:Bitmap
carbitmap_anim	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Bitmap carbitmap_anim[3] = { Bitmap(24, 21, carbitmap_data_anim0, PixelFormat::Mask, RGB888(25/;"	m	struct:Race	typeref:typename:Bitmap[3]
carbitmap_banim	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Bitmap carbitmap_banim[3] = { Bitmap(24, 21, carbitmap_data_anim0, PixelFormat::Mask, RGB888(0/;"	m	struct:Race	typeref:typename:Bitmap[3]
carbitmap_crash	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Bitmap carbitmap_crash = Bitmap(24, 21, carbitmap_data_crash, PixelFormat::Mask, RGB888(255, 1/;"	m	struct:Race	typeref:typename:Bitmap
carbitmap_crash2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Bitmap carbitmap_crash2 = Bitmap(24, 21, carbitmap_data_crash2, PixelFormat::Mask, RGB888(255,/;"	m	struct:Race	typeref:typename:Bitmap
carbitmap_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t carbitmap_data[] = {$/;"	v	typeref:typename:const uint8_t[]
carbitmap_data_anim0	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t carbitmap_data_anim0[] = {$/;"	v	typeref:typename:const uint8_t[]
carbitmap_data_anim1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t carbitmap_data_anim1[] = {$/;"	v	typeref:typename:const uint8_t[]
carbitmap_data_anim2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t carbitmap_data_anim2[] = {$/;"	v	typeref:typename:const uint8_t[]
carbitmap_data_crash	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t carbitmap_data_crash[] = {$/;"	v	typeref:typename:const uint8_t[]
carbitmap_data_crash2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t carbitmap_data_crash2[] = {$/;"	v	typeref:typename:const uint8_t[]
carbitmap_data_dreta	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t carbitmap_data_dreta[] = {$/;"	v	typeref:typename:const uint8_t[]
carbitmap_data_esquerra	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const uint8_t carbitmap_data_esquerra[] = {$/;"	v	typeref:typename:const uint8_t[]
carbitmap_dreta	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Bitmap carbitmap_dreta = Bitmap(24, 21, carbitmap_data_dreta, PixelFormat::Mask, RGB888(255, 2/;"	m	struct:Race	typeref:typename:Bitmap
carbitmap_esquerra	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Bitmap carbitmap_esquerra = Bitmap(24, 21, carbitmap_data_esquerra, PixelFormat::Mask, RGB888(/;"	m	struct:Race	typeref:typename:Bitmap
carbitmap_prota	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Bitmap carbitmap_prota = Bitmap(24, 21, carbitmap_data, PixelFormat::Mask, RGB888(255, 255, 0)/;"	m	struct:Race	typeref:typename:Bitmap
caretBlinkingTime	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint16_t caretBlinkingTime = 500;   \/**< Caret blinking time (MS) *\/$/;"	m	struct:fabgl::uiAppProps	typeref:typename:uint16_t
cariconl	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Bitmap cariconl = Bitmap(8, 8, bitmap_cariconleft_data, PixelFormat::Mask, RGB888(255, 255, 0)/;"	m	struct:Race	typeref:typename:Bitmap
cariconr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Bitmap cariconr = Bitmap(8, 8, bitmap_cariconright_data, PixelFormat::Mask, RGB888(255, 255, 0/;"	m	struct:Race	typeref:typename:Bitmap
carry	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  uint8_t  carry;$/;"	m	class:fabgl::i8080	typeref:typename:uint8_t
carry_flag	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    uint8_t carry_flag;$/;"	m	struct:fabgl::i8080::__anon81886eed0308	typeref:typename:uint8_t
cars	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int cars;$/;"	m	struct:Race::Player	typeref:typename:int
cary	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  long cary[6];$/;"	m	struct:Race	typeref:typename:long[6]
category	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.properties	/^category=Data Processing$/;"	k
category	examples/test/.pio/libdeps/esp32dev/FabGL/library.properties	/^category=Other$/;"	k
category	examples/test/.pio/libdeps/esp32dev/FastLED/library.properties	/^category=Display$/;"	k
cbegin	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    const_iterator cbegin() const { return const_iterator(leds, dir); }   \/\/\/< Makes a const /;"	f	class:CPixelView	typeref:typename:const_iterator
cend	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    const_iterator cend() const { return const_iterator(end_pos, dir); }  \/\/\/< Makes a const /;"	f	class:CPixelView	typeref:typename:const_iterator
center	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^    DPoint  center;$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:DPoint
center	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^    DPoint  center;$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:DPoint
center	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^    DPoint  center;$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:DPoint
cga_glyphs	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^cga_glyphs:$/;"	l
changeArbState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::changeArbState(ArbState newState)$/;"	f	class:IECDrive	typeref:typename:void
changeDirectory	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFileBrowser::changeDirectory(char const * path)$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:void
changeDirectory	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void FileBrowser::changeDirectory(const char * subdir)$/;"	f	class:fabgl::FileBrowser	typeref:typename:void
changeEndiannesDWord	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline uint32_t changeEndiannesDWord(uint32_t value)$/;"	f	namespace:fabgl	typeref:typename:uint32_t
changeEndiannesWord	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline uint16_t changeEndiannesWord(uint16_t value)$/;"	f	namespace:fabgl	typeref:typename:uint16_t
changeLinkState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::changeLinkState(LinkState newState)$/;"	f	class:IECDrive	typeref:typename:void
changeOut	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.cpp	/^void PIT8253::changeOut(int timer, bool value)$/;"	f	class:fabgl::PIT8253	typeref:typename:void
changedButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t     changedButton;  \/**< Specifies which mouse button has changed 0 = none, 1 = left,/;"	m	struct:fabgl::uiMouseEventInfo	typeref:typename:uint8_t
channels	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  WaveformGenerator * channels() { return m_channels; }$/;"	f	class:fabgl::SoundGenerator	typeref:typename:WaveformGenerator *
channels	examples/test/lib/JFixLib/src/JFixture.h	/^  float* channels = nullptr; \/\/ Colors$/;"	m	class:JFixture	typeref:typename:float *
char	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^class char:$/;"	c
charColumnToWindowX	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiTextEdit::charColumnToWindowX(int col)$/;"	f	class:fabgl::uiTextEdit	typeref:typename:int
char_rom	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/ROM/char_rom.h	/^const uint8_t char_rom[] = {$/;"	v	typeref:typename:const uint8_t[]
characterSet	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  uint8_t                 characterSet[4];$/;"	m	struct:fabgl::TerminalCursorState	typeref:typename:uint8_t[4]
characterSet	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  uint8_t      characterSet[4];$/;"	m	struct:fabgl::EmuState	typeref:typename:uint8_t[4]
characterSetIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  uint8_t                 characterSetIndex;$/;"	m	struct:fabgl::TerminalCursorState	typeref:typename:uint8_t
characterSetIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  uint8_t      characterSetIndex;$/;"	m	struct:fabgl::EmuState	typeref:typename:uint8_t
charsConsumerTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::charsConsumerTask(void * pvParameters)$/;"	f	class:fabgl::Terminal	typeref:typename:void
charset	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint16_t charset;$/;"	m	struct:fabgl::FontInfo	typeref:typename:uint16_t
checkAddressed	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  bool checkAddressed(const uint8_t *data) {$/;"	f	class:JEspnowDevice	typeref:typename:bool
checkAllocatedSpace	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiTextEdit::checkAllocatedSpace(int requiredLength)$/;"	f	class:fabgl::uiTextEdit	typeref:typename:void
checkAllocatedSpace	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void StringList::checkAllocatedSpace(int requiredItems)$/;"	f	class:fabgl::StringList	typeref:typename:void
checkBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiCheckBox * checkBox;$/;"	m	struct:TestControlsFrame	typeref:typename:uiCheckBox *
checkBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiCheckBoxStyle & checkBoxStyle() { return m_checkBoxStyle; }$/;"	f	class:fabgl::uiCheckBox	typeref:typename:uiCheckBoxStyle &
checkBreakDetected	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::checkBreakDetected()$/;"	f	class:fabgl::PC8250	typeref:typename:void
checkByteReceived	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::checkByteReceived()$/;"	f	class:fabgl::PC8250	typeref:typename:void
checkCTSChanged	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::checkCTSChanged()$/;"	f	class:fabgl::PC8250	typeref:typename:void
checkDCDChanged	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::checkDCDChanged()$/;"	f	class:fabgl::PC8250	typeref:typename:void
checkDSRChanged	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::checkDSRChanged()$/;"	f	class:fabgl::PC8250	typeref:typename:void
checkDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::checkDrive(int drive, int errfunc)$/;"	f	class:BDOS	typeref:typename:bool
checkDriveMediaType	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^bool BIOS::checkDriveMediaType(int drive)$/;"	f	class:BIOS	typeref:typename:bool
checkDuplicateID	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  bool checkDuplicateID(Event *e) {$/;"	f	class:JFixtureGraphics	typeref:typename:bool
checkExit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  bool checkExit()$/;"	f	struct:Score	typeref:typename:bool
checkFramingError	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::checkFramingError()$/;"	f	class:fabgl::PC8250	typeref:typename:void
checkInvariants	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  void checkInvariants() {$/;"	f	class:MemoryPool	typeref:typename:void
checkJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  static bool checkJson(JsonVariant src) {$/;"	f	struct:Converter	typeref:typename:bool
checkJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  static bool checkJson(JsonVariantConst) {$/;"	f	struct:Converter	typeref:typename:bool
checkJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  static bool checkJson(JsonVariantConst src) {$/;"	f	struct:Converter	typeref:typename:bool
checkJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  static bool checkJson(JsonVariant src) {$/;"	f	struct:Converter	typeref:typename:bool
checkJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  static bool checkJson(JsonVariantConst) {$/;"	f	struct:Converter	typeref:typename:bool
checkJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  static bool checkJson(JsonVariantConst src) {$/;"	f	struct:Converter	typeref:typename:bool
checkJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static bool checkJson(JsonVariantConst src) {$/;"	f	struct:Converter	typeref:typename:bool
checkJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  static bool checkJson(JsonVariant src) {$/;"	f	struct:Converter	typeref:typename:bool
checkJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  static bool checkJson(JsonVariantConst src) {$/;"	f	struct:Converter	typeref:typename:bool
checkJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  static bool checkJson(JsonVariantConst) {$/;"	f	struct:Converter	typeref:typename:bool
checkLifeTime	examples/test/lib/JFixLib/src/Event/Event.cpp	/^bool Event::checkLifeTime() {$/;"	f	class:Event	typeref:typename:bool
checkMaskCollision	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^bool QuadTree::checkMaskCollision(QuadTreeObject * objectA, QuadTreeObject * objectB, Point * co/;"	f	class:fabgl::QuadTree	typeref:typename:bool
checkMem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^bool HAL::checkMem(uint16_t addr)$/;"	f	class:HAL	typeref:typename:bool
checkOneShots	examples/test/lib/JFixLib/src/JFixture.h	/^  void checkOneShots(){$/;"	f	class:JFixture	typeref:typename:void
checkOtaServer	examples/test/lib/JFixLib/src/JOtaServer.h	/^  bool checkOtaServer(){$/;"	f	class:JOtaServer	typeref:typename:bool
checkOverflowError	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::checkOverflowError()$/;"	f	class:fabgl::PC8250	typeref:typename:void
checkParityError	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::checkParityError()$/;"	f	class:fabgl::PC8250	typeref:typename:void
checkRIChangeLow	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::checkRIChangeLow()$/;"	f	class:fabgl::PC8250	typeref:typename:void
checkSysReq	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^void i8042::checkSysReq(int scode2)$/;"	f	class:fabgl::i8042	typeref:typename:void
checkVersion	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static void checkVersion() {$/;"	f	struct:ConfDialogApp	typeref:typename:void
checkViewPortSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::checkViewPortSize()$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
checkViewPortSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  virtual void checkViewPortSize() { };$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
checkViewPortSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^void CVBSPalettedController::checkViewPortSize()$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:void
checkViewPortSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  virtual void checkViewPortSize() { };$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
checkViewPortSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^void VGAPalettedController::checkViewPortSize()$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
checkX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    void checkX( )$/;"	f	struct:Race::Player	typeref:typename:void
checked	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  bool checked()                    { return m_checked; }$/;"	f	class:fabgl::uiCheckBox	typeref:typename:bool
checkedBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              checkedBackgroundColor   = RGB888(128, 128, 128);  \/**< Background color /;"	m	struct:fabgl::uiCheckBoxStyle	typeref:typename:RGB888
checkered	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^void checkered(int x, int y, int w, int h, int cw, int ch )$/;"	f	typeref:typename:void
choose_largest	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/parseNumber.hpp	/^struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};$/;"	s
chptr	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint32_t const * chptr;  \/\/ used only for variable width fonts (FONTINFOFLAGS_VARWIDTH = 1)$/;"	m	struct:fabgl::FontInfo	typeref:typename:uint32_t const *
chrtbl	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^const PhysicalDevice chrtbl[CHRTBL_DEVICES + 1] = {$/;"	v	typeref:typename:const PhysicalDevice[]
civil_from_days	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void DateTime::civil_from_days(int32_t z, int * ret_y, int * ret_m, int * ret_d)$/;"	f	class:DateTime	typeref:typename:void
cks	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint16_t  cks;  \/\/ Checksum vector size, 0 or 8000h for a fixed disc. No. directory entries\//;"	m	struct:DiscParameterBlock	typeref:typename:uint16_t
cleanUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^void MachineConf::cleanUp()$/;"	f	class:MachineConf	typeref:typename:void
cleanUp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  void cleanUp() {$/;"	f	struct:fabgl::Delegate	typeref:typename:void
cleanWindowReferences	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::cleanWindowReferences(uiWindow * window)$/;"	f	class:fabgl::uiApp	typeref:typename:void
cleanupFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void GraphicsAdapter::cleanupFont()$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
cleanup_R1	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC_ALWAYS_INLINE void cleanup_R1()$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE void
clear	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  void clear() const {$/;"	f	class:JsonArray	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline void CollectionData::clear() {$/;"	f	class:CollectionData	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  void clear() {$/;"	f	class:JsonDocument	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Latch.hpp	/^  void clear() {$/;"	f	class:Latch	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  void clear() {$/;"	f	class:MemoryPool	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  void clear() const {$/;"	f	class:JsonObject	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE void clear() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE void
clear	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  void clear() {$/;"	f	class:VariantSlot	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::clear()$/;"	f	class:fabgl::Canvas	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SoundGenerator::clear()$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::clear(Rect & updateRect)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::clear(Rect & updateRect)$/;"	f	class:fabgl::TFTController	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::clear(Rect & updateRect)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::clear(Rect & updateRect)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::clear(Rect & updateRect)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::clear(Rect & updateRect)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::clear(Rect & updateRect)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::clear(Rect & updateRect)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::clear(Rect & updateRect)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void FileBrowser::clear()$/;"	f	class:fabgl::FileBrowser	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void StringList::clear()$/;"	f	class:fabgl::StringList	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::clear(bool moveCursor)$/;"	f	class:fabgl::Terminal	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::clear()$/;"	f	class:fabgl::TerminalController	typeref:typename:void
clear	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^void CFastLED::clear(bool writeData) {$/;"	f	class:CFastLED	typeref:typename:void
clearBitmaps	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void Sprite::clearBitmaps()$/;"	f	class:fabgl::Sprite	typeref:typename:void
clearData	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^void CFastLED::clearData() {$/;"	f	class:CFastLED	typeref:typename:void
clearLedData	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    void clearLedData() {$/;"	f	class:CLEDController	typeref:typename:void
clearLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }$/;"	f	class:CLEDController	typeref:typename:void
clearMap	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::clearMap(uint32_t * map)$/;"	f	class:fabgl::Terminal	typeref:typename:void
clearSavedCursorStates	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::clearSavedCursorStates()$/;"	f	class:fabgl::Terminal	typeref:typename:void
clear_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_done:$/;"	l
clear_gfx	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  clear_gfx:$/;"	l
clear_gfx2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  clear_gfx2:$/;"	l
clear_screen	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_screen:$/;"	l
clear_window	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_window:$/;"	l
clear_window_1_row	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_window_1_row:$/;"	l
clear_window_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_window_done:$/;"	l
clear_window_gfx320	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_window_gfx320:$/;"	l
clear_window_gfx320_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_window_gfx320_loop:$/;"	l
clear_window_gfx640	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_window_gfx640:$/;"	l
clear_window_gfx640_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_window_gfx640_loop:$/;"	l
clear_window_mode11	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_window_mode11:$/;"	l
clear_window_mode11_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_window_mode11_loop:$/;"	l
clear_window_mode13	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_window_mode13:$/;"	l
clear_window_mode13_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clear_window_mode13_loop:$/;"	l
cli	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/led_sysdefs_apollo3.h	/^#define cli(/;"	d
cli	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/led_sysdefs_arm_d21.h	/^#define cli(/;"	d
cli	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/led_sysdefs_arm_d51.h	/^#define cli(/;"	d
cli	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define cli(/;"	d
cli	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^#define cli(/;"	d
cli	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define cli(/;"	d
cli	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define cli(/;"	d
cli	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define cli(/;"	d
client	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantAttorney.hpp	/^    static TClient& client;$/;"	m	struct:VariantAttorney::ResultOfGetData	typeref:typename:TClient &
clientPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Point uiWindow::clientPos()$/;"	f	class:fabgl::uiWindow	typeref:typename:Point
clientRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Rect uiFrame::clientRect(uiOrigin origin)$/;"	f	class:fabgl::uiFrame	typeref:typename:Rect
clientRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Rect uiScrollableControl::clientRect(uiOrigin origin)$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:Rect
clientRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Rect uiWindow::clientRect(uiOrigin origin)$/;"	f	class:fabgl::uiWindow	typeref:typename:Rect
clientSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Size uiWindow::clientSize()$/;"	f	class:fabgl::uiWindow	typeref:typename:Size
clientWaitForChar	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^static int clientWaitForChar(WiFiClient & client)$/;"	f	typeref:typename:int	file:
clipLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool clipLine(int & x1, int & y1, int & x2, int & y2, Rect const & clipRect, bool checkOnly)$/;"	f	namespace:fabgl	typeref:typename:bool
clipLine_code	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^static int clipLine_code(int x, int y, Rect const & clipRect)$/;"	f	namespace:fabgl	typeref:typename:int	file:
clippingRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Rect         clippingRect;    \/\/ relative clipping rectangle$/;"	m	struct:fabgl::PaintState	typeref:typename:Rect
clk_dtimer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clk_dtimer:$/;"	l
clk_dtimer_hi	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clk_dtimer_hi    dw  0   ; 0x6e$/;"	d
clk_dtimer_lo	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clk_dtimer_lo    dw  0   ; 0x6c$/;"	d
clk_rollover	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^clk_rollover     db  0   ; 0x70$/;"	d
clockEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^void DS3231::clockEnabled(bool value)$/;"	f	class:fabgl::DS3231	typeref:typename:void
clock_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	typedef typename FastPin<CLOCK_PIN>::port_ptr_t clock_ptr_t;$/;"	t	class:AVRSoftwareSPIOutput	typeref:typename:FastPin<CLOCK_PIN>::port_ptr_t
clock_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;$/;"	t	class:AVRSoftwareSPIOutput	typeref:typename:FastPin<CLOCK_PIN>::port_t
clockless_dma_complete_handler	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^static inline void __isr clockless_dma_complete_handler() {$/;"	f	typeref:typename:void __isr
clockless_isr_installed	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^static bool clockless_isr_installed = false;$/;"	v	typeref:typename:bool
clockless_pio_program_get_default_config	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_gen.h	/^static inline pio_sm_config clockless_pio_program_get_default_config(uint offset) {$/;"	f	typeref:typename:pio_sm_config
closeAllFiles	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::closeAllFiles()$/;"	f	class:BDOS	typeref:typename:void
closeDMAChain	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^void CVBSGenerator::closeDMAChain(int index)$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:void
closeFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::closeFile(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:void
closeListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomComboBox::closeListBox()$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:void
cmd	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transdisk.py	/^cmd        = sys.argv[2].lower()     # from\/to$/;"	v
cmd	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transfile.py	/^cmd        = sys.argv[2].lower()     # from\/to$/;"	v
cmd	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  PrimitiveCmd cmd;$/;"	m	struct:fabgl::Primitive	typeref:typename:PrimitiveCmd
cmd_CD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_CD(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_COPY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_COPY(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_DINFO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_DINFO(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_DIR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_DIR(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_EMU	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_EMU(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_ERASE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_ERASE(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_EXIT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_EXIT(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_FORMAT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_FORMAT(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_HELP	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_HELP(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_INFO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_INFO(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_KEYB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_KEYB(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_LS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_LS(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_MKDIR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_MKDIR(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_PATH	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_PATH(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_PING	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_PING(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_REBOOT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_REBOOT(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_RENAME	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_RENAME(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_RMDIR	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_RMDIR(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_TELNET	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_TELNET(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_TERM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_TERM(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_TYPE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_TYPE(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_WIFI	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_WIFI(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
cmd_WIFISCAN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::cmd_WIFISCAN(uint16_t paramsAddr)$/;"	f	class:CCP	typeref:typename:bool
code	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  Code code() const {$/;"	f	class:DeserializationError	typeref:typename:Code
code_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  Code code_;$/;"	m	class:DeserializationError	typeref:typename:Code
codepage	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.h	/^  uint16_t                  codepage;$/;"	m	struct:fabgl::CodePage	typeref:typename:uint16_t
codepage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint16_t codepage;$/;"	m	struct:fabgl::FontInfo	typeref:typename:uint16_t
codepoint_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp	/^  uint32_t codepoint_;$/;"	m	class:Utf16::Codepoint	typeref:typename:uint32_t
collectionToVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionData.hpp	/^inline VariantData* collectionToVariant(CollectionData* collection) {$/;"	f	typeref:typename:VariantData *
collectionToVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionData.hpp	/^inline const VariantData* collectionToVariant($/;"	f	typeref:typename:const VariantData *
collisionDetected	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^  void collisionDetected(Sprite *spriteA, Sprite *spriteB, Point collisionPoint  ) {}$/;"	f	struct:Menu	typeref:typename:void
collisionDetected	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  void collisionDetected(Sprite * spriteA, Sprite * spriteB, Point collisionPoint)$/;"	f	struct:Race	typeref:typename:void
collisionDetected	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  void collisionDetected(Sprite *spriteA, Sprite *spriteB, Point collisionPoint  ) {}$/;"	f	struct:Score	typeref:typename:void
collisionDetectionCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.cpp	/^void collisionDetectionCallback(void * callbackObj, Sprite * spriteA, Sprite * spriteB, Point co/;"	f	namespace:fabgl	typeref:typename:void
collisionDetectorObject	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  QuadTreeObject *   collisionDetectorObject;$/;"	m	struct:fabgl::Sprite	typeref:typename:QuadTreeObject *
color	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^    Color  color;$/;"	m	struct:BallsTest::Ball	typeref:typename:Color
color	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^    Color   color;$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:Color
color	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^    Color  color;$/;"	m	struct:BallsTest::Ball	typeref:typename:Color
color	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^    Color   color;$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:Color
color	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^    Color  color;$/;"	m	struct:BallsTest::Ball	typeref:typename:Color
color	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^    Color   color;$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:Color
color	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    RGB888                 color;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:RGB888
color	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGB888 color;$/;"	m	struct:fabgl::PixelDesc	typeref:typename:RGB888
color	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Color color() { return m_color; }$/;"	f	class:fabgl::uiColorBox	typeref:typename:Color
colorsCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  virtual int colorsCount()             { return 2; }$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:int
colorsCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  virtual int colorsCount()             { return 1 << 16; }$/;"	f	class:fabgl::TFTController	typeref:typename:int
colorsCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  virtual int colorsCount()      { return getPaletteSize(); }$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:int
colorsCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  virtual int colorsCount()                       { return 1 << (3 * m_bitsPerChannel); }$/;"	f	class:fabgl::VGABaseController	typeref:typename:int
colorsCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  virtual int colorsCount()      { return getPaletteSize(); }$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:int
colorsCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  int colorsCount()                        { return 16; }$/;"	f	class:fabgl::VGATextController	typeref:typename:int
columns	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t         columns;$/;"	m	struct:fabgl::GlyphsBuffer	typeref:typename:int16_t
columnsComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiComboBox *      columnsComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiComboBox *
com1_timeout	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^com1_timeout     db  27  ; 40:7c  500 ms$/;"	d
com1addr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^com1addr         dw  0x03F8              ; 40:00h$/;"	d
com2_timeout	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^com2_timeout     db  27  ; 40:7d  500 ms$/;"	d
com2addr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^com2addr         dw  0x02F8$/;"	d
com3_timeout	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^com3_timeout     db  27  ; 40:7e  500 ms$/;"	d
com3addr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^com3addr         dw  0x0000$/;"	d
com4_timeout	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^com4_timeout     db  27  ; 40:7f  500 ms$/;"	d
com4addr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^com4addr         dw  0x0000$/;"	d
combineMouseMoveEvents	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void combineMouseMoveEvents(bool value) { m_combineMouseMoveEvents = value; }$/;"	f	class:fabgl::uiApp	typeref:typename:void
comboBox1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiComboBox * comboBox1, * comboBox2;$/;"	m	struct:TestControlsFrame	typeref:typename:uiComboBox *
comboBox2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiComboBox * comboBox1, * comboBox2;$/;"	m	struct:TestControlsFrame	typeref:typename:uiComboBox *
comboBoxProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiComboBoxProps & comboBoxProps() { return m_comboBoxProps; }$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:uiComboBoxProps &
comboBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiComboBoxStyle & comboBoxStyle() { return m_comboBoxStyle; }$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:uiComboBoxStyle &
commTaskFunc	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^void I2C::commTaskFunc(void * pvParameters)$/;"	f	class:fabgl::I2C	typeref:typename:void
commit	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^void MC146818::commit()$/;"	f	class:fabgl::MC146818	typeref:typename:void
commonDiscParameterBlock	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^const DiscParameterBlock commonDiscParameterBlock = {$/;"	v	typeref:typename:const DiscParameterBlock
compare	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^CompareResult compare(ArduinoJson::JsonVariantConst lhs, const T& rhs) {$/;"	f	typeref:typename:CompareResult
compareMem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^int HAL::compareMem(uint16_t s1, void const * s2, size_t size)$/;"	f	class:HAL	typeref:typename:int
computeAdjustment	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    static CRGB computeAdjustment(uint8_t scale, const CRGB & colorCorrection, const CRGB & colo/;"	f	class:CLEDController	typeref:typename:CRGB
conditional	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/conditional.hpp	/^struct conditional {$/;"	s
conditional	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/conditional.hpp	/^struct conditional<false, TrueType, FalseType> {$/;"	s
confDataTable	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^confDataTable:$/;"	l
config	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t config; \/\/ mode & bit order$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
configureGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::configureGPIO(int gpio, MCPDir dir, bool pullup, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:void
configureGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void configureGPIO(gpio_num_t gpio, gpio_mode_t mode)$/;"	f	namespace:fabgl	typeref:typename:void
conformanceLevel	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int          conformanceLevel;$/;"	m	struct:fabgl::EmuState	typeref:typename:int
connect	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPortTerminalConnector::connect(SerialPort * serialPort, Terminal * terminal)$/;"	f	class:fabgl::SerialPortTerminalConnector	typeref:typename:void
connectKeyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::connectKeyboard()$/;"	f	class:fabgl::Terminal	typeref:typename:void
connectLocally	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::connectLocally()$/;"	f	class:fabgl::Terminal	typeref:typename:void
consoleIn	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^uint8_t BDOS::consoleIn()$/;"	f	class:BDOS	typeref:typename:uint8_t
consoleOut	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^void CCP::consoleOut(char const * str, size_t maxChars)$/;"	f	class:CCP	typeref:typename:void
consoleOut	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^void CCP::consoleOut(uint16_t str, size_t maxChars)$/;"	f	class:CCP	typeref:typename:void
consoleOutChar	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::consoleOutChar(uint8_t c)$/;"	f	class:BDOS	typeref:typename:void
consoleOutChar	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^void CCP::consoleOutChar(char c)$/;"	f	class:CCP	typeref:typename:void
consoleOutFmt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::consoleOutFmt(const char * format, ...)$/;"	f	class:BDOS	typeref:typename:void
consoleOutFmt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^void CCP::consoleOutFmt(const char * format, ...)$/;"	f	class:CCP	typeref:typename:void
consoleOutStr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::consoleOutStr(char const * str, char delimiter)$/;"	f	class:BDOS	typeref:typename:void
consoleOutStr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::consoleOutStr(uint16_t addr, char delimiter)$/;"	f	class:BDOS	typeref:typename:void
const_iterator	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    typedef pixelset_iterator_base<const PIXEL_TYPE> const_iterator;  \/\/\/< Const iterator hel/;"	t	class:CPixelView	typeref:typename:pixelset_iterator_base<const PIXEL_TYPE>
constexpr	examples/test/.pio/libdeps/esp32dev/FastLED/src/cpp_compat.h	/^#define constexpr /;"	d
consumeCSI	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::consumeCSI()$/;"	f	class:fabgl::Terminal	typeref:typename:void
consumeCSIQUOT	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::consumeCSIQUOT(int * params, int paramsCount)$/;"	f	class:fabgl::Terminal	typeref:typename:void
consumeCSISPC	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::consumeCSISPC(int * params, int paramsCount)$/;"	f	class:fabgl::Terminal	typeref:typename:void
consumeDCS	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::consumeDCS()$/;"	f	class:fabgl::Terminal	typeref:typename:void
consumeDECPrivateModes	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::consumeDECPrivateModes(int const * params, int paramsCount, uint8_t c)$/;"	f	class:fabgl::Terminal	typeref:typename:void
consumeESC	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::consumeESC()$/;"	f	class:fabgl::Terminal	typeref:typename:void
consumeESCVT52	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::consumeESCVT52()$/;"	f	class:fabgl::Terminal	typeref:typename:void
consumeFabGLGraphicsSeq	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::consumeFabGLGraphicsSeq()$/;"	f	class:fabgl::Terminal	typeref:typename:void
consumeFabGLSeq	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::consumeFabGLSeq()$/;"	f	class:fabgl::Terminal	typeref:typename:void
consumeInputQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::consumeInputQueue()$/;"	f	class:fabgl::Terminal	typeref:typename:void
consumeOSC	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::consumeOSC()$/;"	f	class:fabgl::Terminal	typeref:typename:void
consumeParamsAndGetCode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^uint8_t Terminal::consumeParamsAndGetCode(int * params, int * paramsCount, bool * questionMarkFo/;"	f	class:fabgl::Terminal	typeref:typename:uint8_t
contains	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool contains(Point const & point) const       { return point.X >= X1 && point.Y >= Y1 && poin/;"	f	struct:fabgl::Rect	typeref:typename:bool
contains	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool contains(Rect const & rect) const         { return (rect.X1 >= X1) && (rect.Y1 >= Y1) && /;"	f	struct:fabgl::Rect	typeref:typename:bool
contains	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool contains(int x, int y) const              { return x >= X1 && y >= Y1 && x <= X2 && y <= /;"	f	struct:fabgl::Rect	typeref:typename:bool
containsKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline bool CollectionData::containsKey(const TAdaptedString& key) const {$/;"	f	class:CollectionData	typeref:typename:bool
containsKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  bool containsKey(TChar* key) const {$/;"	f	class:JsonDocument	typeref:typename:bool
containsKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  bool containsKey(const TString& key) const {$/;"	f	class:JsonDocument	typeref:typename:bool
containsKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^      containsKey(TChar* key) const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TChar * >::value,bool>::type
containsKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^      containsKey(const TString& key) const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TString>::value,bool>::type
containsKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  FORCE_INLINE bool containsKey(TChar* key) const {$/;"	f	class:JsonObjectConst	typeref:typename:FORCE_INLINE bool
containsKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  FORCE_INLINE bool containsKey(const TString& key) const {$/;"	f	class:JsonObjectConst	typeref:typename:FORCE_INLINE bool
containsKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectImpl.hpp	/^VariantRefBase<TDerived>::containsKey(TChar* key) const {$/;"	f	class:VariantRefBase	typeref:typename:enable_if<IsString<TChar * >::value,bool>::type
containsKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectImpl.hpp	/^VariantRefBase<TDerived>::containsKey(const TString& key) const {$/;"	f	class:VariantRefBase	typeref:typename:enable_if<IsString<TString>::value,bool>::type
containsKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^      containsKey(TChar* key) const {$/;"	f	class:JsonVariantConst	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TChar * >::value,bool>::type
containsKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^      containsKey(const TString& key) const {$/;"	f	class:JsonVariantConst	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TString>::value,bool>::type
content	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  FileBrowser & content() { return m_dir; }$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:FileBrowser &
content_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  VariantContent content_;  \/\/ must be first to allow cast from array to variant$/;"	m	class:VariantData	typeref:typename:VariantContent
content_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  VariantContent content_;$/;"	m	class:VariantSlot	typeref:typename:VariantContent
controlToFocus	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiWindow *       controlToFocus;$/;"	m	struct:fabgl::InputForm	typeref:typename:uiWindow *
controler	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  int controler;    \/\/ 0 - mouse, 1 - Key arrows, 2 - Keys astf, 3 - Joystick$/;"	m	struct:ScoreCard	typeref:typename:int
controller	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    GameController *controller;$/;"	m	struct:Race::Player	typeref:typename:GameController *
controllerType	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    DisplayControllerType controllerType() { return DisplayControllerType::Textual; }$/;"	f	class:fabgl::TextualDisplayController	typeref:typename:DisplayControllerType
controllerType	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  DisplayControllerType controllerType() { return DisplayControllerType::Bitmapped; }$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:DisplayControllerType
convCtrl	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  ConvCtrl     convCtrl[5];    \/\/ output video action (will be converted to ANSI control code)/;"	m	struct:fabgl::TermInfoVideoConv	typeref:typename:ConvCtrl[5]
convHandleTranslation	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::convHandleTranslation(uint8_t c, bool fromISR)$/;"	f	class:fabgl::Terminal	typeref:typename:void
convKeypadScancodeToNum	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^int convKeypadScancodeToNum(uint8_t scancode)$/;"	f	typeref:typename:int
convKeypadVKToNum	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^int Keyboard::convKeypadVKToNum(VirtualKey vk)$/;"	f	class:fabgl::Keyboard	typeref:typename:int
convQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::convQueue(const char * str, bool fromISR)$/;"	f	class:fabgl::Terminal	typeref:typename:void
convScancodeSet2To1	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^uint8_t Keyboard::convScancodeSet2To1(uint8_t code)$/;"	f	class:fabgl::Keyboard	typeref:typename:uint8_t
convSendCtrl	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::convSendCtrl(ConvCtrl ctrl, bool fromISR)$/;"	f	class:fabgl::Terminal	typeref:typename:void
convTable	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.h	/^  const VirtualKeyToASCII * convTable;  \/\/ last item has vk = VK_NONE (ending marker)$/;"	m	struct:fabgl::CodePage	typeref:typename:const VirtualKeyToASCII *
convertAllPixelData	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    void convertAllPixelData(PixelController<RGB_ORDER> & pixels)$/;"	f	class:ClocklessController	typeref:typename:void
convertByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^void ESP32RMTController::convertByte(uint32_t byteval)$/;"	f	class:ESP32RMTController	typeref:typename:void
convertFromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^inline void convertFromJson(JsonVariantConst src, ::String& dst) {$/;"	f	typeref:typename:void
convertFromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^inline void convertFromJson(JsonVariantConst src, std::string& dst) {$/;"	f	typeref:typename:void
convertFromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^inline void convertFromJson(JsonVariantConst src, std::string_view& dst) {$/;"	f	typeref:typename:void
convertModelineToTimings	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^bool VGABaseController::convertModelineToTimings(char const * modeline, VGATimings * timings)$/;"	f	class:fabgl::VGABaseController	typeref:typename:bool
convertScancode2to1	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^void Keyboard::convertScancode2to1(VirtualKeyItem * item)$/;"	f	class:fabgl::Keyboard	typeref:typename:void
convertToJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^inline void convertToJson(const JsonDocument& src, JsonVariant dst) {$/;"	f	typeref:typename:void
convertToJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^convertToJson(const T& src, JsonVariant dst) {$/;"	f	typeref:typename:detail::enable_if<detail::IsString<T>::value,bool>::type
convertToJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^inline void convertToJson(const ::Printable& src, JsonVariant dst) {$/;"	f	typeref:typename:void
convertToJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp	/^inline void convertToJson(const VariantRefBase<TDerived>& src,$/;"	f	typeref:typename:void
copyArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp	/^copyArray(JsonVariantConst src, T& dst) {$/;"	f	typeref:typename:detail::enable_if<!detail::is_array<T>::value,size_t>::type
copyArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp	/^copyArray(T (&src)[N], const TDestination& dst) {$/;"	f	typeref:typename:detail::enable_if<!detail::is_base_of<JsonDocument,TDestination>::value,bool>::type
copyArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp	/^copyArray(const T& src, JsonVariant dst) {$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE typename detail::enable_if<!detail::is_array<T>::value,bool>::type
copyArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp	/^copyArray(const T* src, size_t len, const TDestination& dst) {$/;"	f	typeref:typename:detail::enable_if<!detail::is_base_of<JsonDocument,TDestination>::value,bool>::type
copyArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp	/^copyArray(const TSource& src, T& dst) {$/;"	f	typeref:typename:detail::enable_if<detail::is_array<T>::value && detail::is_base_of<JsonDocument,TSource>::value,size_t>::type
copyArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp	/^inline bool copyArray(const T& src, JsonDocument& dst) {$/;"	f	typeref:typename:bool
copyArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp	/^inline bool copyArray(const T* src, size_t len, JsonDocument& dst) {$/;"	f	typeref:typename:bool
copyArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp	/^inline bool copyArray(const char* src, size_t, const TDestination& dst) {$/;"	f	typeref:typename:bool
copyArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp	/^inline size_t copyArray(JsonArrayConst src, T (&dst)[N]) {$/;"	f	typeref:typename:size_t
copyArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp	/^inline size_t copyArray(JsonArrayConst src, T* dst, size_t len) {$/;"	f	typeref:typename:size_t
copyArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp	/^inline size_t copyArray(JsonVariantConst src, char (&dst)[N]) {$/;"	f	typeref:typename:size_t
copyAssignFrom	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  void copyAssignFrom(const JsonDocument& src) {$/;"	f	class:BasicJsonDocument	typeref:typename:void
copyButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiButton *      copyButton;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:uiButton *
copyFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::copyFile(FILE * src, FILE * dst)$/;"	f	class:BDOS	typeref:typename:void
copyFrom	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline bool CollectionData::copyFrom(const CollectionData& src,$/;"	f	class:CollectionData	typeref:typename:bool
copyFrom	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp	/^inline bool VariantData::copyFrom(const VariantData& src, MemoryPool* pool) {$/;"	f	class:VariantData	typeref:typename:bool
copyFrom	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void Bitmap::copyFrom(void const * srcData)$/;"	f	class:fabgl::Bitmap	typeref:typename:void
copyFrom	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void StringList::copyFrom(StringList const & src)$/;"	f	class:fabgl::StringList	typeref:typename:void
copyMem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::copyMem(uint16_t destAddr, uint16_t srcAddr, size_t size)$/;"	f	class:HAL	typeref:typename:void
copyMem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::copyMem(uint16_t destAddr, void const * src, size_t size)$/;"	f	class:HAL	typeref:typename:void
copyMem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::copyMem(void * dst, uint16_t srcAddr, size_t size)$/;"	f	class:HAL	typeref:typename:void
copyRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::copyRect(int sourceX, int sourceY, int destX, int destY, int width, int height)$/;"	f	class:fabgl::Canvas	typeref:typename:void
copyRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::copyRect(Rect const & source, Rect & updateRect)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
copyRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::copyRect(Rect const & source, Rect & updateRect)$/;"	f	class:fabgl::TFTController	typeref:typename:void
copyRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::copyRect(Rect const & source, Rect & updateRect)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
copyRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::copyRect(Rect const & source, Rect & updateRect)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
copyRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::copyRect(Rect const & source, Rect & updateRect)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
copyRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::copyRect(Rect const & source, Rect & updateRect)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
copyRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::copyRect(Rect const & source, Rect & updateRect)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
copyRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::copyRect(Rect const & source, Rect & updateRect)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
copyRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::copyRect(Rect const & source, Rect & updateRect)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
copySelectionMapFrom	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void StringList::copySelectionMapFrom(StringList const & src)$/;"	f	class:fabgl::StringList	typeref:typename:void
copyStr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::copyStr(char * dst, uint16_t srcAddr)$/;"	f	class:HAL	typeref:typename:void
copyStr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::copyStr(uint16_t dstAddr, char const * src)$/;"	f	class:HAL	typeref:typename:void
copyStr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::copyStr(uint16_t dstAddr, uint16_t srcAddr)$/;"	f	class:HAL	typeref:typename:void
cos16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^LIB8STATIC int16_t cos16( uint16_t theta)$/;"	f	typeref:typename:LIB8STATIC int16_t
cos8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^LIB8STATIC uint8_t cos8( uint8_t theta)$/;"	f	typeref:typename:LIB8STATIC uint8_t
count	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/CountingDecorator.hpp	/^  size_t count() const {$/;"	f	class:CountingDecorator	typeref:typename:size_t
count	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestPaintBoxFrame.h	/^  static constexpr int count = 1000;$/;"	m	struct:TestPaintBoxFrame	typeref:typename:int
count	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.h	/^  static int count() { return 2; }$/;"	f	struct:fabgl::CodePages	typeref:typename:int
count	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  static int count()               { return LAYOUTSCOUNT; }$/;"	f	struct:fabgl::SupportedLayouts	typeref:typename:int
count	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^    int32_t count;        \/\/ Current timer counter$/;"	m	struct:fabgl::PIT8253::TimerInfo	typeref:typename:int32_t
count	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int count()              { return m_dir.count(); }$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:int
count	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int count()                 { return m_count; }$/;"	f	class:fabgl::StringList	typeref:typename:int
count	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int count() { return m_count; }$/;"	f	class:fabgl::FileBrowser	typeref:typename:int
count	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int count() {$/;"	f	class:fabgl::Stack	typeref:typename:int
count	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  static int count()            { return (int)ANSILegacy - (int)ANSI_VT + 1; }$/;"	f	struct:fabgl::SupportedTerminals	typeref:typename:int
count	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^int CFastLED::count() {$/;"	f	class:CFastLED	typeref:typename:int
countDirEntries	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int FileBrowser::countDirEntries(int * namesLength)$/;"	f	class:fabgl::FileBrowser	typeref:typename:int
countDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/restartdialog.h	/^  void countDown() {$/;"	f	struct:RebootDialog	typeref:typename:void
countFPS	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^void CFastLED::countFPS(int nFrames) {$/;"	f	class:CFastLED	typeref:typename:void
countItems	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^int SelectForm::countItems(size_t * maxLength)$/;"	f	class:fabgl::SelectForm	typeref:typename:int
count_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/CountingDecorator.hpp	/^  size_t count_;$/;"	m	class:CountingDecorator	typeref:typename:size_t
counter	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/restartdialog.h	/^  int        counter;$/;"	m	struct:RebootDialog	typeref:typename:int
counter_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^  int counter_ = 0;$/;"	m	class:BallsTest	typeref:typename:int
counter_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  int counter_ = 0;$/;"	m	class:PolygonsTest	typeref:typename:int
counter_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  int counter_ = 0;$/;"	m	class:SpritesTest	typeref:typename:int
counter_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^  int counter_ = 0;$/;"	m	class:BallsTest	typeref:typename:int
counter_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  int counter_ = 0;$/;"	m	class:PolygonsTest	typeref:typename:int
counter_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  int counter_ = 0;$/;"	m	class:SpritesTest	typeref:typename:int
counter_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^  int counter_ = 0;$/;"	m	class:BallsTest	typeref:typename:int
counter_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  int counter_ = 0;$/;"	m	class:PolygonsTest	typeref:typename:int
counter_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  int counter_ = 0;$/;"	m	class:SpritesTest	typeref:typename:int
cpm141_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM14/cpm141_dsk.h	/^const uint8_t cpm141_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
cpm22_disk1_minidsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/minidisks/CPM22/cpm22_disk1_minidsk.h	/^const uint8_t cpm22_disk1_minidsk[] = {$/;"	v	typeref:typename:const uint8_t[]
cpm22_disk2_minidsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/minidisks/CPM22/cpm22_disk2_minidsk.h	/^const uint8_t cpm22_disk2_minidsk[] = {$/;"	v	typeref:typename:const uint8_t[]
cpm22_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/cpm22_dsk.h	/^const uint8_t cpm22_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
cpm22_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/cpm22_dsk.h	/^unsigned int cpm22_dsk_len = 337568;$/;"	v	typeref:typename:unsigned int
cpm3_build_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM3/cpm3_build_dsk.h	/^const uint8_t cpm3_build_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
cpm3_disk1_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM3/cpm3_disk1_dsk.h	/^const uint8_t cpm3_disk1_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
cpm3_disk2_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM3/cpm3_disk2_dsk.h	/^const uint8_t cpm3_disk2_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
cpm3_v1_0_56K_build_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM3/cpm3_build_dsk.h	/^unsigned int cpm3_v1_0_56K_build_dsk_len = 337664;$/;"	v	typeref:typename:unsigned int
cpm3_v1_0_56K_disk1_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM3/cpm3_disk1_dsk.h	/^unsigned int cpm3_v1_0_56K_disk1_dsk_len = 337664;$/;"	v	typeref:typename:unsigned int
cpm3_v1_0_56K_disk2_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM3/cpm3_disk2_dsk.h	/^unsigned int cpm3_v1_0_56K_disk2_dsk_len = 337664;$/;"	v	typeref:typename:unsigned int
cport	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static port_ptr_t cport()     { return &((reinterpret_cast<NR/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE port_ptr_t
cport	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static port_ptr_t cport() __attribute__ ((always_inline)) {$/;"	f	class:_ESPPIN	typeref:typename:port_ptr_t
cport	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static port_ptr_t cport() __attribute__ ((always_inline)) { return &_GPB._GPOC; }$/;"	f	class:_ESPPIN	typeref:typename:port_ptr_t
cpu	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^cpu 8086$/;"	l
cpu	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  Regs     cpu;$/;"	m	class:fabgl::i8080	typeref:typename:Regs
crashTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    long crashTime;$/;"	m	struct:Race::Player	typeref:typename:long
crashed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    bool crashed;$/;"	m	struct:Race::Player	typeref:typename:bool
crashed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  int crashed;    $/;"	m	struct:ScoreCard	typeref:typename:int
crashedTimeout	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    void crashedTimeout()$/;"	f	struct:Race::Player	typeref:typename:void
createAbsolutePath	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^char * BDOS::createAbsolutePath(uint16_t pathAddr, bool insertMountPath, int * drive)$/;"	f	class:BDOS	typeref:typename:char *
createBlankRawPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  uint8_t createBlankRawPixel()                  { return m_HVSync; }$/;"	f	class:fabgl::VGABaseController	typeref:typename:uint8_t
createDir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::createDir(uint16_t FCBaddr, int errFunc, int * err)$/;"	f	class:BDOS	typeref:typename:void
createDiskImage	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  void createDiskImage() {$/;"	f	struct:ConfigDialog	typeref:typename:void	file:
createFATFloppyImage	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^bool createFATFloppyImage(InputBox * ibox, int diskType, char const * directory, char const * fi/;"	f	typeref:typename:bool
createFrameButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  uiButton * createFrameButton, * destroyFrameButton, * testModalDialogButton, * msgBoxButton;$/;"	m	class:MyApp	typeref:typename:uiButton *
createImageButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiButton        * createImageButton;$/;"	m	struct:ConfigDialog	typeref:typename:uiButton *	file:
createNestedArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE JsonArray createNestedArray() const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE JsonArray
createNestedArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayImpl.hpp	/^inline JsonArray VariantRefBase<TDerived>::createNestedArray() const {$/;"	f	class:VariantRefBase	typeref:typename:ARDUINOJSON_END_PUBLIC_NAMESPACE ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE JsonArray
createNestedArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  JsonArray createNestedArray() {$/;"	f	class:JsonDocument	typeref:typename:JsonArray
createNestedArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  JsonArray createNestedArray(TChar* key) {$/;"	f	class:JsonDocument	typeref:typename:JsonArray
createNestedArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  JsonArray createNestedArray(const TString& key) {$/;"	f	class:JsonDocument	typeref:typename:JsonArray
createNestedArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectImpl.hpp	/^inline JsonArray JsonObject::createNestedArray(TChar* key) const {$/;"	f	class:JsonObject	typeref:typename:JsonArray
createNestedArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectImpl.hpp	/^inline JsonArray JsonObject::createNestedArray(const TString& key) const {$/;"	f	class:JsonObject	typeref:typename:ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE JsonArray
createNestedArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectImpl.hpp	/^inline JsonArray VariantRefBase<TDerived>::createNestedArray($/;"	f	class:VariantRefBase	typeref:typename:ARDUINOJSON_END_PUBLIC_NAMESPACE ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE JsonArray
createNestedArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectImpl.hpp	/^inline JsonArray VariantRefBase<TDerived>::createNestedArray(TChar* key) const {$/;"	f	class:VariantRefBase	typeref:typename:JsonArray
createNestedObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayImpl.hpp	/^inline JsonObject JsonArray::createNestedObject() const {$/;"	f	class:JsonArray	typeref:typename:ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE JsonObject
createNestedObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayImpl.hpp	/^inline JsonObject VariantRefBase<TDerived>::createNestedObject() const {$/;"	f	class:VariantRefBase	typeref:typename:JsonObject
createNestedObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  JsonObject createNestedObject() {$/;"	f	class:JsonDocument	typeref:typename:JsonObject
createNestedObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  JsonObject createNestedObject(TChar* key) {$/;"	f	class:JsonDocument	typeref:typename:JsonObject
createNestedObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  JsonObject createNestedObject(const TString& key) {$/;"	f	class:JsonDocument	typeref:typename:JsonObject
createNestedObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  JsonObject createNestedObject(TChar* key) const {$/;"	f	class:JsonObject	typeref:typename:JsonObject
createNestedObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  JsonObject createNestedObject(const TString& key) const {$/;"	f	class:JsonObject	typeref:typename:JsonObject
createNestedObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectImpl.hpp	/^inline JsonObject VariantRefBase<TDerived>::createNestedObject($/;"	f	class:VariantRefBase	typeref:typename:JsonObject
createOrAccessDate	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  DateTime  createOrAccessDate;$/;"	m	struct:FileSearchState	typeref:typename:DateTime
createQuadrant	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^void QuadTree::createQuadrant(QuadTreeQuadrant quadrant)$/;"	f	class:fabgl::QuadTree	typeref:typename:void
createRawPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  uint8_t createRawPixel(RGB222 rgb)             { return preparePixel(rgb); }$/;"	f	class:fabgl::VGABaseController	typeref:typename:uint8_t
createTempFilename	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^char * FileBrowser::createTempFilename()$/;"	f	class:fabgl::FileBrowser	typeref:typename:char *
createTerminal	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^Terminal * Supervisor::createTerminal()$/;"	f	class:Supervisor	typeref:typename:Terminal *
cross1_9x9	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t cross1_9x9[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
cross2_11x11	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t cross2_11x11[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
crt_curpos_x	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^crt_curpos_x     db  0$/;"	d
crt_curpos_y	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^crt_curpos_y     db  0$/;"	d
crtport	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^crtport          dw  0x3d4$/;"	d
csn_duration	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t csn_duration; \/\/ IFTIMING.CSNDUR$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
csn_pin	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t csn_pin;$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
csn_polarity	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t csn_polarity; \/\/ CSNPOL$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
ctrl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^    uint8_t ctrl     : 1;   \/**< CTRL needs to be down. *\/$/;"	m	struct:fabgl::AltVirtualKeyDef::__anon7ddb64db0108	typeref:typename:uint8_t:1
ctrlBits	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int          ctrlBits;$/;"	m	struct:fabgl::EmuState	typeref:typename:int
ctrlSet	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^    bool    ctrlSet;      \/\/ control word set$/;"	m	struct:fabgl::PIT8253::TimerInfo	typeref:typename:bool
ctrl_break	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^ctrl_break       db  0$/;"	d
cubicwave8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint8_t cubicwave8(uint8_t in)$/;"	f	typeref:typename:LIB8STATIC uint8_t
cur_not_visible	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^cur_not_visible:$/;"	l
cur_v_end	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^cur_v_end        db  0x07$/;"	d
cur_v_start	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^cur_v_start      db  0x06$/;"	d
cur_vischk_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^cur_vischk_done:$/;"	l
cur_visible	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^cur_visible:$/;"	l
curpos_to_offset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^curpos_to_offset:$/;"	l
curpos_x	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^curpos_x         db  0$/;"	d
curpos_y	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^curpos_y         db  0$/;"	d
current	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  char current() {$/;"	f	class:JsonDeserializer	typeref:typename:char
current	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Latch.hpp	/^  FORCE_INLINE char current() {$/;"	f	class:Latch	typeref:typename:FORCE_INLINE char
currentFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t            currentFrame;$/;"	m	struct:fabgl::Sprite	typeref:typename:int16_t
currentStart	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  int currentStart = 0;$/;"	m	struct:Score	typeref:typename:int
currentTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  long currentTime = 0;$/;"	m	struct:Race	typeref:typename:long
current_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Latch.hpp	/^  char current_;  \/\/ NOLINT(clang-analyzer-optin.cplusplus.UninitializedObject)$/;"	m	class:Latch	typeref:typename:char
cursorBlinkingEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         cursorBlinkingEnabled;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
cursorEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         cursorEnabled;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
cursorEnd	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^    uint8_t              cursorEnd;            \/\/ valid when text = true$/;"	m	struct:fabgl::GraphicsAdapter::setupEmulation::__anonf67d7a610108	typeref:typename:uint8_t	file:
cursorKeysMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         cursorKeysMode;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
cursorLeft	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::cursorLeft(int count)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
cursorPastLastCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool                    cursorPastLastCol;$/;"	m	struct:fabgl::TerminalCursorState	typeref:typename:bool
cursorPastLastCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         cursorPastLastCol;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
cursorRight	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::cursorRight(int count)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
cursorStart	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^    uint8_t              cursorStart;          \/\/ valid when text = true$/;"	m	struct:fabgl::GraphicsAdapter::setupEmulation::__anonf67d7a610108	typeref:typename:uint8_t	file:
cursorStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int          cursorStyle;$/;"	m	struct:fabgl::EmuState	typeref:typename:int
cursorX	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int          cursorX;$/;"	m	struct:fabgl::EmuState	typeref:typename:int
cursorX	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int16_t                 cursorX;$/;"	m	struct:fabgl::TerminalCursorState	typeref:typename:int16_t
cursorY	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int          cursorY;$/;"	m	struct:fabgl::EmuState	typeref:typename:int
cursorY	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int16_t                 cursorY;$/;"	m	struct:fabgl::TerminalCursorState	typeref:typename:int16_t
cursor_pos	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^cursor_pos:$/;"	l
cyc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    uint32_t cyc;$/;"	v	typeref:typename:uint32_t
cyc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^  uint32_t cyc;$/;"	v	typeref:typename:uint32_t
cylinders	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  uint16_t          cylinders[DISKCOUNT];$/;"	m	struct:MachineConfItem	typeref:typename:uint16_t[]
d	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        uint8_t d[3];            \/\/\/< values for the scaled dither signal @see init_binary_di/;"	m	struct:PixelController	typeref:typename:uint8_t[3]
d	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^  uint8_t d[3];$/;"	m	struct:M0ClocklessData	typeref:typename:uint8_t[3]
d0	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t d0:1;  \/\/\/< byte 'd', bit 0 (0x01000000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
d1	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t d1:1;  \/\/\/< byte 'd', bit 1 (0x02000000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
d2	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t d2:1;  \/\/\/< byte 'd', bit 2 (0x04000000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
d3	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t d3:1;  \/\/\/< byte 'd', bit 3 (0x08000000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
d4	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t d4:1;  \/\/\/< byte 'd', bit 4 (0x10000000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
d5	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t d5:1;  \/\/\/< byte 'd', bit 5 (0x20000000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
d6	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t d6:1;  \/\/\/< byte 'd', bit 6 (0x40000000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
d7	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t d7:1;  \/\/\/< byte 'd', bit 7 (0x80000000)$/;"	m	struct:__anonad8cb3ed0308	typeref:typename:uint32_t:1
dac_init	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SoundGenerator::dac_init()$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^  TChar* data() const {$/;"	f	class:SerializedValue	typeref:typename:TChar *
data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^  const char* data() const {$/;"	f	class:SerializedValue	typeref:typename:const char *
data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/alias_cast.hpp	/^    T data;$/;"	m	union:alias_cast_t::__anon7c3d3698010a	typeref:typename:T
data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  const char* data() const {$/;"	f	class:SizedRamString	typeref:typename:const char *
data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  const char* data() const {$/;"	f	class:ZeroTerminatedRamString	typeref:typename:const char *
data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^    const char* data;$/;"	m	struct:VariantContent::__anon9bd8dbab0208	typeref:typename:const char *
data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  const char* data;$/;"	m	struct:RawData	typeref:typename:const char *
data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  VariantData* data() {$/;"	f	class:VariantSlot	typeref:typename:VariantData *
data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  const VariantData* data() const {$/;"	f	class:VariantSlot	typeref:typename:const VariantData *
data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^  uint8_t const * data;$/;"	m	struct:Program	typeref:typename:uint8_t const *
data	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  uint8_t data[4];$/;"	m	struct:fabgl::MousePacket	typeref:typename:uint8_t[4]
data	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t *       data;            \/**< Bitmap binary data *\/$/;"	m	struct:fabgl::Bitmap	typeref:typename:uint8_t *
data	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t const * data;   \/**< Byte aligned binary data of the glyph. A 0 represents background/;"	m	struct:fabgl::Glyph	typeref:typename:uint8_t const *
data	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t const *  data;$/;"	m	struct:fabgl::FontInfo	typeref:typename:uint8_t const *
data	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^data = fp.read()$/;"	v
data	examples/test/lib/JFixLib/src/Event/JWavetable.h	/^  float* data;$/;"	m	class:JWavetable	typeref:typename:float *
data	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  uint8_t data[MAX_MSG_LEN];$/;"	m	class:JEspnowMsg	typeref:typename:uint8_t[]
dataAllocated	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  bool            dataAllocated;   \/**< If true data is released when bitmap is destroyed *\/$/;"	m	struct:fabgl::Bitmap	typeref:typename:bool
dataAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^bool PS2Controller::dataAvailable(int PS2Port)$/;"	f	class:fabgl::PS2Controller	typeref:typename:bool
dataAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^int PS2Device::dataAvailable()$/;"	f	class:fabgl::PS2Device	typeref:typename:int
data_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  detail::CollectionData* data_;$/;"	m	class:JsonArray	typeref:typename:detail::CollectionData *
data_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  const detail::CollectionData* data_;$/;"	m	class:JsonArrayConst	typeref:typename:const detail::CollectionData *
data_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  detail::VariantData data_;$/;"	m	class:JsonDocument	typeref:typename:detail::VariantData
data_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^  TChar* data_;$/;"	m	class:SerializedValue	typeref:typename:TChar *
data_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  detail::CollectionData* data_;$/;"	m	class:JsonObject	typeref:typename:detail::CollectionData *
data_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  const detail::CollectionData* data_;$/;"	m	class:JsonObjectConst	typeref:typename:const detail::CollectionData *
data_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  const char* data_;$/;"	m	class:JsonString	typeref:typename:const char *
data_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  detail::VariantData* data_;$/;"	m	class:JsonVariant	typeref:typename:detail::VariantData *
data_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  const detail::VariantData* data_;$/;"	m	class:JsonVariantConst	typeref:typename:const detail::VariantData *
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:AVRSoftwareSPIOutput	typeref:typename:FastPin<DATA_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/clockless_apollo3.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/clockless_arm_d21.h	/^    typedef typename FastPinBB<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController	typeref:typename:FastPinBB<DATA_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:InlineBlockClocklessController	typeref:typename:FastPin<FIRST_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	typedef typename FastPin<PORTC_FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:SixteenWayInlineBlockClocklessController	typeref:typename:FastPin<PORTC_FIRST_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:InlineBlockClocklessController	typeref:typename:FastPin<FIRST_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	typedef typename FastPin<PORTC_FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:SixteenWayInlineBlockClocklessController	typeref:typename:FastPin<PORTC_FIRST_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/clockless_arm_kl26.h	/^  typedef typename FastPinBB<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController	typeref:typename:FastPinBB<DATA_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^    typedef typename FastPinBB<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController	typeref:typename:FastPinBB<DATA_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^	typedef typename FastPinBB<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController	typeref:typename:FastPinBB<DATA_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^	typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:InlineBlockClocklessController	typeref:typename:FastPin<FIRST_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^    typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:InlineBlockClocklessController	typeref:typename:FastPin<FIRST_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^	typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:InlineBlockClocklessController	typeref:typename:FastPin<FIRST_PIN>::port_ptr_t
data_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_ptr_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:AVRSoftwareSPIOutput	typeref:typename:FastPin<DATA_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/clockless_apollo3.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/clockless_arm_d21.h	/^    typedef typename FastPinBB<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController	typeref:typename:FastPinBB<DATA_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	typedef typename FastPin<FIRST_PIN>::port_t data_t;$/;"	t	class:InlineBlockClocklessController	typeref:typename:FastPin<FIRST_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	typedef typename FastPin<PORTC_FIRST_PIN>::port_t data_t;$/;"	t	class:SixteenWayInlineBlockClocklessController	typeref:typename:FastPin<PORTC_FIRST_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	typedef typename FastPin<FIRST_PIN>::port_t data_t;$/;"	t	class:InlineBlockClocklessController	typeref:typename:FastPin<FIRST_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	typedef typename FastPin<PORTC_FIRST_PIN>::port_t data_t;$/;"	t	class:SixteenWayInlineBlockClocklessController	typeref:typename:FastPin<PORTC_FIRST_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/clockless_arm_kl26.h	/^  typedef typename FastPinBB<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController	typeref:typename:FastPinBB<DATA_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^    typedef typename FastPinBB<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController	typeref:typename:FastPinBB<DATA_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^	typedef typename FastPinBB<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController	typeref:typename:FastPinBB<DATA_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^	typedef typename FastPin<FIRST_PIN>::port_t data_t;$/;"	t	class:InlineBlockClocklessController	typeref:typename:FastPin<FIRST_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^    typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    typedef typename FastPin<FIRST_PIN>::port_t data_t;$/;"	t	class:InlineBlockClocklessController	typeref:typename:FastPin<FIRST_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^	typedef typename FastPin<FIRST_PIN>::port_t data_t;$/;"	t	class:InlineBlockClocklessController	typeref:typename:FastPin<FIRST_PIN>::port_t
data_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^	typedef typename FastPin<DATA_PIN>::port_t data_t;$/;"	t	class:ClocklessController	typeref:typename:FastPin<DATA_PIN>::port_t
datalenComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiComboBox *      datalenComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiComboBox *
dateTimeValid	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  bool dateTimeValid() { return m_dateTimeValid; }$/;"	f	class:fabgl::DS3231	typeref:typename:bool
datetime	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^DateTime const & DS3231::datetime()$/;"	f	class:fabgl::DS3231	typeref:typename:DateTime const &
dayOfMonth	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  int8_t  dayOfMonth;   \/**< 1..31             *\/$/;"	m	struct:fabgl::DateTime	typeref:typename:int8_t
dayOfWeek	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  int8_t  dayOfWeek;    \/**< 1..7 (1 = sunday) *\/$/;"	m	struct:fabgl::DateTime	typeref:typename:int8_t
days_from_civil	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^int32_t DateTime::days_from_civil(int32_t y, uint32_t m, uint32_t d)$/;"	f	class:DateTime	typeref:typename:int32_t
days_since1978	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^  uint16_t days_since1978;$/;"	m	struct:DateTime	typeref:typename:uint16_t
dbaseii_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/dbaseii_dsk.h	/^const uint8_t dbaseii_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
dbaseii_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/dbaseii_dsk.h	/^unsigned int dbaseii_dsk_len = 337568;$/;"	v	typeref:typename:unsigned int
dcrashx	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int dcrashx;$/;"	m	struct:Race::Player	typeref:typename:int
dcx_config	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t dcx_config;   \/\/ DCXCNT$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
dcx_pin	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t dcx_pin;      \/\/ PSELDCX$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
dd_register_table	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  void              * dd_register_table[16];$/;"	m	struct:fabgl::Z80_STATE	typeref:typename:void * [16]
de	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    reg_pair af, bc, de, hl;$/;"	m	struct:fabgl::i8080::Regs	typeref:typename:reg_pair
deactivate	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::deactivate()$/;"	f	class:fabgl::Terminal	typeref:typename:void
deadKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  VirtualKey   deadKey;         \/**< Currently pressed dead key *\/$/;"	m	struct:fabgl::DeadKeyVirtualKeyDef	typeref:typename:VirtualKey
deadKeysVK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  VirtualKey               deadKeysVK[8];       \/**< Dead keys identifiers. *\/$/;"	m	struct:fabgl::KeyboardLayout	typeref:typename:VirtualKey[8]
deadkeysToVK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  DeadKeyVirtualKeyDef     deadkeysToVK[60];    \/**< Translation dead key + virtual key = repla/;"	m	struct:fabgl::KeyboardLayout	typeref:typename:DeadKeyVirtualKeyDef[60]
deallocate	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  void deallocate(void* ptr) {$/;"	f	class:AllocatorOwner	typeref:typename:void
deallocate	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/DynamicJsonDocument.hpp	/^  void deallocate(void* ptr) {$/;"	f	struct:DefaultAllocator	typeref:typename:void
debugMsg	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^    char const * debugMsg;$/;"	m	union:fabgl::uiEvent::uiEventParams	typeref:typename:char const *
dec	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  dec    dh$/;"	d
dec	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  dec    dl$/;"	d
dec	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  dec    dx$/;"	d
dec	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  dec   dx    ; LSB of divisor latch$/;"	d
decDuration	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  void decDuration() { --m_duration; if (m_duration == 0) m_enabled = false; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:void
decay	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^  long decay; \/\/ time in millis $/;"	m	struct:playsounddata	typeref:typename:long
decay	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^  long decay; \/\/ time in millis $/;"	m	struct:playsounddata	typeref:typename:long
decimal	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatParts.hpp	/^  uint32_t decimal;$/;"	m	struct:FloatParts	typeref:typename:uint32_t
decimalPlaces	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatParts.hpp	/^  int8_t decimalPlaces;$/;"	m	struct:FloatParts	typeref:typename:int8_t
decodeHex	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  static inline uint8_t decodeHex(char c) {$/;"	f	class:JsonDeserializer	typeref:typename:uint8_t
decodeMousePacket	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^bool Mouse::decodeMousePacket(MousePacket * mousePacket, MouseDelta * delta)$/;"	f	class:fabgl::Mouse	typeref:typename:bool
decrement	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/NestingLimit.hpp	/^  NestingLimit decrement() const {$/;"	f	class:DeserializationOption::NestingLimit	typeref:typename:NestingLimit
defaultCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  CursorName    defaultCursor      = CursorName::CursorPointerSimpleReduced;  \/**< Default wind/;"	m	struct:fabgl::uiWindowStyle	typeref:typename:CursorName
defaultEnterHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void InputForm::defaultEnterHandler(uiKeyEventInfo const & key)$/;"	f	class:fabgl::InputForm	typeref:typename:void
defaultEscapeHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void InputForm::defaultEscapeHandler(uiKeyEventInfo const & key)$/;"	f	class:fabgl::InputForm	typeref:typename:void
defaultVisibleLines	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  uint16_t        defaultVisibleLines;            \/\/ default vertical visible lines (per field/;"	m	struct:fabgl::CVBSParams	typeref:typename:uint16_t
defaultVisibleSamples	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  uint16_t        defaultVisibleSamples;          \/\/ default horizontal visible samples$/;"	m	struct:fabgl::CVBSParams	typeref:typename:uint16_t
delConfigDialog	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^void delConfigDialog(InputBox * ibox, MachineConf * mconf, int idx)$/;"	f	typeref:typename:void
delay	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^void CFastLED::delay(unsigned long ms) {$/;"	f	class:CFastLED	typeref:typename:void
delayTime	examples/test/lib/JFixLib/src/Event/expRandLines.h	/^    unsigned short delayTime = 10;$/;"	m	class:expRandLines	typeref:typename:unsigned short
delay_at_max_brightness_for_power	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^void delay_at_max_brightness_for_power( uint16_t ms)$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-10>() {}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-5>() {}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-6>() {}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-7>() {}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-8>() {}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<-9>() {}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<0>() {}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<> __attribute__((always_inline)) inline void delaycycles<5>() {FL_NOP2;FL_NOP2;FL_NOP;}$/;"	f	typeref:typename:void
delaycycles	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<int CYCLES> __attribute__((always_inline)) inline void delaycycles() {$/;"	f	typeref:typename:void
delaycycles_min1	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^template<int CYCLES> inline void delaycycles_min1() {$/;"	f	typeref:typename:void
deleteAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::deleteAt(int column, int row, int count)$/;"	f	class:fabgl::Terminal	typeref:typename:void
deleteButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiButton *      deleteButton;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:uiButton *
deleteEvents	examples/test/lib/JFixLib/src/JFixture.h	/^  virtual void deleteEvents(){};$/;"	f	class:JFixture	typeref:typename:void
deleteEvents	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  void deleteEvents() {$/;"	f	class:JFixtureGraphics	typeref:typename:void
deleteItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^bool MachineConf::deleteItem(int index)$/;"	f	class:MachineConf	typeref:typename:bool
deltaAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^bool Mouse::deltaAvailable()$/;"	f	class:fabgl::Mouse	typeref:typename:bool
deltaX	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  int16_t      deltaX;             \/**< Horizontal movement since last report. Moving to the ri/;"	m	struct:fabgl::MouseDelta	typeref:typename:int16_t
deltaY	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  int16_t      deltaY;             \/**< Vertical movement since last report. Upward movement ge/;"	m	struct:fabgl::MouseDelta	typeref:typename:int16_t
deltaZ	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  int8_t       deltaZ;             \/**< Scroll wheel movement since last report. Downward movem/;"	m	struct:fabgl::MouseDelta	typeref:typename:int8_t
demo_bah_bah_final_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/demo_bah_bah_final.h	/^char const * demo_bah_bah_final_filename = "Demo Bah.PRG";$/;"	v	typeref:typename:char const *
demo_bah_bah_final_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/demo_bah_bah_final.h	/^const uint8_t demo_bah_bah_final_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
demo_birthday_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/demo_birthday.h	/^char const * demo_birthday_filename = "Demo Birthday 16K.PRG";$/;"	v	typeref:typename:char const *
demo_birthday_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/demo_birthday.h	/^const uint8_t demo_birthday_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
demo_digit_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/demo_digit.h	/^char const * demo_digit_filename = "Demo Digit.PRG";$/;"	v	typeref:typename:char const *
demo_digit_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/demo_digit.h	/^const uint8_t demo_digit_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
derived	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  TDerived& derived() {$/;"	f	class:VariantRefBase	typeref:typename:TDerived &
derived	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  const TDerived& derived() const {$/;"	f	class:VariantRefBase	typeref:typename:const TDerived &
desc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^  char const * desc;$/;"	m	struct:__anon1168f0c30108	typeref:typename:char const *	file:
desc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  char            * desc;$/;"	m	struct:MachineConfItem	typeref:typename:char *
desc	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  char const *    desc;$/;"	m	struct:fabgl::CVBSParams	typeref:typename:char const *
desc	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  const char *             desc;                \/**< Layout description. *\/$/;"	m	struct:fabgl::KeyboardLayout	typeref:typename:const char *
descEdit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiTextEdit      * descEdit;$/;"	m	struct:ConfigDialog	typeref:typename:uiTextEdit *	file:
description	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^  "description": "A simple and efficient JSON library for embedded C++. ArduinoJson supports ✔/;"	s
description	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "description": "ESP32 VGA Controller, Composite PAL\/NTSC Controller, PS\/2 Mouse and Keyboard/;"	s
description	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "description": "FastLED is a library for programming addressable rgb led strips (APA102\/Dot/;"	s
descriptor	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    lldesc_t descriptor;$/;"	m	struct:DMABuffer	typeref:typename:lldesc_t
deselectAll	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomListBox::deselectAll()$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:void
deselectAll	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void StringList::deselectAll()$/;"	f	class:fabgl::StringList	typeref:typename:void
deserialize	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/deserialize.hpp	/^DeserializationError deserialize(JsonDocument& doc, TChar* input,$/;"	f	typeref:typename:DeserializationError
deserialize	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/deserialize.hpp	/^DeserializationError deserialize(JsonDocument& doc, TStream&& input,$/;"	f	typeref:typename:DeserializationError
deserializeJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^DeserializationError deserializeJson(JsonDocument& doc, Args&&... args) {$/;"	f	typeref:typename:ARDUINOJSON_END_PRIVATE_NAMESPACE ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE DeserializationError
deserializeJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^DeserializationError deserializeJson(JsonDocument& doc, TChar* input,$/;"	f	typeref:typename:DeserializationError
deserializeMsgPack	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^DeserializationError deserializeMsgPack(JsonDocument& doc, Args&&... args) {$/;"	f	typeref:typename:ARDUINOJSON_END_PRIVATE_NAMESPACE ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE DeserializationError
deserializeMsgPack	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^DeserializationError deserializeMsgPack(JsonDocument& doc, TChar* input,$/;"	f	typeref:typename:DeserializationError
dest	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiEvtHandler * dest;$/;"	m	struct:fabgl::uiEvent	typeref:typename:uiEvtHandler *
dest_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writer.hpp	/^  TDestination* dest_;$/;"	m	class:Writer	typeref:typename:TDestination *
destroyFrameButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  uiButton * createFrameButton, * destroyFrameButton, * testModalDialogButton, * msgBoxButton;$/;"	m	class:MyApp	typeref:typename:uiButton *
destroyWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::destroyWindow(uiWindow * window)$/;"	f	class:fabgl::uiApp	typeref:typename:void
detach	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Mits88Disk::detach(int drive)$/;"	f	class:Mits88Disk	typeref:typename:void
detach	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SoundGenerator::detach(WaveformGenerator * value)$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
detachAll	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Mits88Disk::detachAll()$/;"	f	class:Mits88Disk	typeref:typename:void
detachFromParent	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^void QuadTree::detachFromParent()$/;"	f	class:fabgl::QuadTree	typeref:typename:void
detachNoSuspend	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SoundGenerator::detachNoSuspend(WaveformGenerator * value)$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
detail	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^namespace detail {$/;"	n
detail	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^namespace detail {$/;"	n
detectCollision	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^QuadTreeObject * QuadTree::detectCollision(QuadTreeObject * object, CollisionDetectionCallback c/;"	f	class:fabgl::QuadTree	typeref:typename:QuadTreeObject *
detectCollision	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^Sprite * CollisionDetector::detectCollision(Sprite * sprite, bool removeCollidingSprites)$/;"	f	class:fabgl::CollisionDetector	typeref:typename:Sprite *
detectCollision	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^void CollisionDetector::detectCollision(Sprite * sprite, CollisionDetectionCallback callbackFunc/;"	f	class:fabgl::CollisionDetector	typeref:typename:void
devIn	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^uint8_t BIOS::devIn(int device)$/;"	f	class:BIOS	typeref:typename:uint8_t
devIn	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^uint8_t HAL::devIn(int device)$/;"	f	class:HAL	typeref:typename:uint8_t
devInAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^bool BIOS::devInAvailable(int device)$/;"	f	class:BIOS	typeref:typename:bool
devInAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^bool HAL::devInAvailable(int device)$/;"	f	class:HAL	typeref:typename:bool
devOut	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::devOut(int device, uint8_t c)$/;"	f	class:BIOS	typeref:typename:void
devOut	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::devOut(int device, uint8_t c)$/;"	f	class:HAL	typeref:typename:void
devOutAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^bool BIOS::devOutAvailable(int device)$/;"	f	class:BIOS	typeref:typename:bool
devOutAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^bool HAL::devOutAvailable(int device)$/;"	f	class:HAL	typeref:typename:bool
deviceID	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  uint16_t deviceID()    { return m_deviceID; }$/;"	f	class:fabgl::PS2Device	typeref:typename:uint16_t
dialogStyle	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^} dialogStyle;$/;"	v	typeref:struct:DialogStyle
digit2hex	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline char digit2hex(int digit)$/;"	f	namespace:fabgl	typeref:typename:char
digitalWriteBuiltinLed	examples/test/lib/JFixLib/src/JFixture.h	/^  static void digitalWriteBuiltinLed(char pin, char status){$/;"	f	class:JFixture	typeref:typename:void
digitalWriteBuiltinLedAddr	examples/test/lib/JFixLib/src/JWS2812B_status.h	/^  static void digitalWriteBuiltinLedAddr(char pin, char status){$/;"	f	class:JWS2812B_status	typeref:typename:void
dim8_lin	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC uint8_t dim8_lin( uint8_t x )$/;"	f	typeref:typename:LIB8STATIC uint8_t
dim8_raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC uint8_t dim8_raw( uint8_t x)$/;"	f	typeref:typename:LIB8STATIC uint8_t
dim8_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC uint8_t dim8_video( uint8_t x)$/;"	f	typeref:typename:LIB8STATIC uint8_t
dir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^    double dir; \/\/ radians$/;"	m	struct:BallsTest::Ball	typeref:typename:double
dir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  double dir; \/\/ radians$/;"	m	struct:MySprite	typeref:typename:double
dir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^    double dir; \/\/ radians$/;"	m	struct:BallsTest::Ball	typeref:typename:double
dir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  double dir; \/\/ radians$/;"	m	struct:MySprite	typeref:typename:double
dir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^    double dir; \/\/ radians$/;"	m	struct:BallsTest::Ball	typeref:typename:double
dir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  double dir; \/\/ radians$/;"	m	struct:MySprite	typeref:typename:double
dir	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^        const int8_t dir;  \/\/\/< direction of LED array, for incrementing the pointer$/;"	m	class:CPixelView::pixelset_iterator_base	typeref:typename:const int8_t
dir	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    const int8_t dir;             \/\/\/< direction of the LED data, either 1 or -1. Determines /;"	m	class:CPixelView	typeref:typename:const int8_t
dirLabelFlags	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  uint8_t   dirLabelFlags;$/;"	m	struct:FileSearchState	typeref:typename:uint8_t
directSetPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::directSetPixel(int x, int y, int value)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
directory	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  char const * directory() { return m_dir.directory(); }$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:char const *
directory	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  char const * directory() { return m_dir; }$/;"	f	class:fabgl::FileBrowser	typeref:typename:char const *
directory	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char const *    directory;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:char const *
disableConfig	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	void disableConfig() { m_SPI->SPI_WPMR |= SPI_WPMR_WPEN; }$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
disableFabGLSequences	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::disableFabGLSequences()$/;"	f	class:fabgl::TerminalController	typeref:typename:void
disableInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::disableInterrupt(int gpio, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:void
disableRX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^void PS2Controller::disableRX(int PS2Port)$/;"	f	class:fabgl::PS2Controller	typeref:typename:void
disableSPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	void disableSPI() { m_SPI->SPI_CR = SPI_CR_SPIDIS; }$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
disableSerialPortRX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  void disableSerialPortRX(bool value)         { m_serialPortRXEnabled = !value; }$/;"	f	class:fabgl::SerialPortTerminalConnector	typeref:typename:void
disable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	inline void disable_pins(void) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
disable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	inline void disable_pins(void) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
disable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  static inline void disable_pins(void) __attribute((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
disable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void disable_pins() { }$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
disable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void disable_pins() { }$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
disable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void disable_pins() { }$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
disable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void disable_pins() {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
discParameterHeader	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^const DiscParameterHeader discParameterHeader = {$/;"	v	typeref:typename:const DiscParameterHeader
disconnectLocally	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::disconnectLocally()$/;"	f	class:fabgl::Terminal	typeref:typename:void
disk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  FILE * disk(int index)               { return m_disk[index]; }$/;"	f	class:Machine	typeref:typename:FILE *
disk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  char            * disk[DISKCOUNT];        \/\/ path relative to mounting path$/;"	m	struct:MachineConfItem	typeref:typename:char * []
diskChanged	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  bool diskChanged(int drive)                  { return m_diskChanged[drive]; }$/;"	f	class:Machine	typeref:typename:bool
diskCylinders	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint16_t diskCylinders(int index)    { return m_diskCylinders[index]; }$/;"	f	class:Machine	typeref:typename:uint16_t
diskFilename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  char const * diskFilename(int index) { return m_diskFilename[index]; }$/;"	f	class:Machine	typeref:typename:char const *
diskFlush	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void diskFlush(FILE * file = nullptr)$/;"	f	typeref:typename:void
diskFormat	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  DiskFormat diskFormat()    { return m_diskFormat; }$/;"	f	class:Mits88Disk	typeref:typename:DiskFormat
diskHandlerEntry	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::diskHandlerEntry()$/;"	f	class:BIOS	typeref:typename:void
diskHandler_HD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::diskHandler_HD()$/;"	f	class:BIOS	typeref:typename:void
diskHandler_HDExit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::diskHandler_HDExit(uint8_t err, bool setErrStat)$/;"	f	class:BIOS	typeref:typename:void
diskHandler_calcAbsAddr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^bool BIOS::diskHandler_calcAbsAddr(int drive, uint32_t * pos, uint32_t * dest, uint32_t * count)$/;"	f	class:BIOS	typeref:typename:bool
diskHandler_floppy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::diskHandler_floppy()$/;"	f	class:BIOS	typeref:typename:void
diskHandler_floppyExit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::diskHandler_floppyExit(uint8_t err, bool setErrStat)$/;"	f	class:BIOS	typeref:typename:void
diskHeads	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t diskHeads(int index)         { return m_diskHeads[index]; }$/;"	f	class:Machine	typeref:typename:uint8_t
diskRead	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void diskRead(int position, void * buffer, int size, FILE * file)$/;"	f	typeref:typename:void
diskSectors	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t diskSectors(int index)       { return m_diskSectors[index]; }$/;"	f	class:Machine	typeref:typename:uint8_t
diskSectorsPerTrack	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static const int diskSectorsPerTrack          = 32;    \/\/ number of sectors per track (Disk_/;"	m	class:Mits88Disk	typeref:typename:const int
diskSize	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  size_t diskSize()          { return tracksCount() * sectorsPerTrack() * SECTOR_SIZE; }$/;"	f	class:Mits88Disk	typeref:typename:size_t
diskSize	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint64_t diskSize(int index)         { return m_diskSize[index]; }$/;"	f	class:Machine	typeref:typename:uint64_t
diskTracksCount	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static const int diskTracksCount              = 77;    \/\/ number of tracks (Disk_338K)$/;"	m	class:Mits88Disk	typeref:typename:const int
diskWrite	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void diskWrite(int position, void * buffer, int size, FILE * file)$/;"	f	typeref:typename:void
disk_laststatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^disk_laststatus  db  0                  ; 40:41h$/;"	d
diskmotor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^diskmotor        db  0                  ; 40:3fh$/;"	d
disp_page	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^disp_page        db  0$/;"	d
displayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int displayColors()                              { return m_displayColors; }$/;"	f	class:fabgl::uiApp	typeref:typename:int
displayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  BitmappedDisplayController * displayController() { return m_displayController; }$/;"	f	class:fabgl::uiApp	typeref:typename:BitmappedDisplayController *
dither	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelCon/;"	f	struct:PixelController	typeref:typename:uint8_t
dithering	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^    dithering = True$/;"	v
dithering	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^dithering = False$/;"	v
div1024_32_16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint16_t div1024_32_16( uint32_t in32)$/;"	f	typeref:typename:LIB8STATIC uint16_t
dmaBuffers	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static DMABuffer * dmaBuffers[NUM_DMA_BUFFERS];$/;"	v	typeref:typename:DMABuffer * []
dma_buf	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    void *dma_buf = nullptr;$/;"	m	class:ClocklessController	typeref:typename:void *
dma_buf_size	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    size_t dma_buf_size = 0;$/;"	m	class:ClocklessController	typeref:typename:size_t
dma_chan_waits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^static CMinWait<0> *dma_chan_waits[NUM_DMA_CHANNELS] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};$/;"	v	typeref:typename:FASTLED_NAMESPACE_BEGIN CMinWait<0> * []
dma_channel	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    int dma_channel = -1;$/;"	m	class:ClocklessController	typeref:typename:int
doCopy	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void FileBrowserForm::doCopy()$/;"	f	class:fabgl::FileBrowserForm	typeref:typename:void
doError	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::doError(uint8_t A, uint8_t H, const char * format, ...)$/;"	f	class:BDOS	typeref:typename:void
doExit	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void InputForm::doExit(int value)$/;"	f	class:fabgl::InputForm	typeref:typename:void
doPaste	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void FileBrowserForm::doPaste()$/;"	f	class:fabgl::FileBrowserForm	typeref:typename:void
doScore	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    void doScore()$/;"	f	struct:Race::Player	typeref:typename:void
doScore	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  void doScore( int player)$/;"	f	struct:Race	typeref:typename:void
doSerialize	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/serialize.hpp	/^size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE size_t
do_dma_transfer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    static void do_dma_transfer(int channel, const void *addr, uint count) {$/;"	f	class:ClocklessController	typeref:typename:void
do_single_reloc	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^static esp_err_t do_single_reloc(ulp_insn_t* program, uint32_t load_addr,$/;"	f	typeref:typename:esp_err_t	file:
dodirtable	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^  def dodirtable(rsrc, off, rtype, gotoffset=gotoffset):$/;"	f	function:pefon	file:
dofnt	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def dofnt(fnt):$/;"	f
dofon	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def dofon(fon):$/;"	f
doneOnChannel	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^void IRAM_ATTR ESP32RMTController::doneOnChannel(rmt_channel_t channel, void * arg)$/;"	f	class:ESP32RMTController	typeref:typename:void IRAM_ATTR
doubleClickTime	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint16_t doubleClickTime   = 250;   \/**< Maximum delay required for two consecutive clicks to/;"	m	struct:fabgl::uiAppProps	typeref:typename:uint16_t
doubleToFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/ieee754.hpp	/^inline void doubleToFloat(const uint8_t d[8], uint8_t f[4]) {$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE void
doubleWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint16_t doubleWidth      : 2;  \/**< If enabled the glyph is doubled. To implement characte/;"	m	struct:fabgl::GlyphOptions::__anon3dd53dc60108	typeref:typename:uint16_t:2
down	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  VirtualKey up, down, left, right, buttonA, buttonB;$/;"	m	struct:GameControllerKeys	typeref:typename:VirtualKey
down	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  VirtualKey up, down, left, right, buttonA, buttonB;$/;"	m	struct:GameControllerKeys	typeref:typename:VirtualKey
down	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  bool down() { return m_down; }$/;"	f	class:fabgl::uiButton	typeref:typename:bool
down	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t    down;            \/**< 0 = up, 1 = down *\/$/;"	m	struct:fabgl::VirtualKeyItem	typeref:typename:uint8_t
downBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           downBackgroundColor      = RGB888(0, 255, 0);     \/**< Background color when/;"	m	struct:fabgl::uiButtonStyle	typeref:typename:RGB888
downBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Bitmap const *   downBitmap               = nullptr;               \/**< Bitmap to display whe/;"	m	struct:fabgl::uiButtonStyle	typeref:typename:Bitmap const *
downTextColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           downTextColor            = RGB888(0, 0, 0);       \/**< Down text color *\/$/;"	m	struct:fabgl::uiButtonStyle	typeref:typename:RGB888
downarrow_9x11	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t downarrow_9x11[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
dpoints	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^    DPoint  dpoints[MAXPOINTS];$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:DPoint[]
dpoints	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^    DPoint  dpoints[MAXPOINTS];$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:DPoint[]
dpoints	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^    DPoint  dpoints[MAXPOINTS];$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:DPoint[]
dragonwing_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/dragonwing.h	/^char const * dragonwing_filename = "Dragonwing.PRG";$/;"	v	typeref:typename:char const *
dragonwing_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/dragonwing.h	/^const uint8_t dragonwing_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
draw	examples/test/lib/JFixLib/src/Event/Event.h	/^  virtual void draw(){};$/;"	f	class:Event	typeref:typename:void
draw	examples/test/lib/JFixLib/src/Event/Event.h	/^  virtual void draw(CRGB **leds, int numLedsPerString, char numStrings,$/;"	f	class:Event	typeref:typename:void
draw	examples/test/lib/JFixLib/src/Event/JEvent_Perlin.h	/^    void draw(CRGB** leds, int numLedsPerString, char numStrings, int horizontalPixelDistance) o/;"	f	class:JEvent_Perlin	typeref:typename:void
draw	examples/test/lib/JFixLib/src/Event/JOsc.cpp	/^void JOsc::draw(CRGB **leds, int numLedsPerString, char numStrings,$/;"	f	class:JOsc	typeref:typename:void
draw	examples/test/lib/JFixLib/src/Event/JRect.cpp	/^void JRect::draw(CRGB **leds, int numLedsPerString, char numStrings,$/;"	f	class:JRect	typeref:typename:void
draw	examples/test/lib/JFixLib/src/Event/expRandLines.cpp	/^void expRandLines::draw(){$/;"	f	class:expRandLines	typeref:typename:void
drawBackground	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  void drawBackground()$/;"	f	struct:Race	typeref:typename:void
drawBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::drawBitmap(int X, int Y, Bitmap const * bitmap)$/;"	f	class:fabgl::Canvas	typeref:typename:void
drawBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::drawBitmap(BitmapDrawingInfo const & bitmapDrawingInf/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
drawChar	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^void drawChar( int x, int y, char c)$/;"	f	typeref:typename:void
drawChar	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::drawChar(int X, int Y, char c)$/;"	f	class:fabgl::Canvas	typeref:typename:void
drawCrashedCars	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    void drawCrashedCars()$/;"	f	struct:Race::Player	typeref:typename:void
drawEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::drawEllipse(int X, int Y, int width, int height)$/;"	f	class:fabgl::Canvas	typeref:typename:void
drawEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::drawEllipse(Size const & size, Rect & updateRect)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
drawEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::drawEllipse(Size const & size, Rect & updateRect)$/;"	f	class:fabgl::TFTController	typeref:typename:void
drawEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::drawEllipse(Size const & size, Rect & updateRect)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
drawEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::drawEllipse(Size const & size, Rect & updateRect)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
drawEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::drawEllipse(Size const & size, Rect & updateRect)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
drawEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::drawEllipse(Size const & size, Rect & updateRect)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
drawEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::drawEllipse(Size const & size, Rect & updateRect)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
drawEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::drawEllipse(Size const & size, Rect & updateRect)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
drawEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::drawEllipse(Size const & size, Rect & updateRect)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
drawGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::drawGlyph(int X, int Y, int width, int height, uint8_t const * data, int index)$/;"	f	class:fabgl::Canvas	typeref:typename:void
drawGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::drawGlyph(Glyph const & glyph, GlyphOptions glyphOptions, RGB888 penColo/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
drawGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::drawGlyph(Glyph const & glyph, GlyphOptions glyphOptions, RGB888 penColor, R/;"	f	class:fabgl::TFTController	typeref:typename:void
drawGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::drawGlyph(Glyph const & glyph, GlyphOptions glyphOptions, RGB888 penColor/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
drawGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::drawGlyph(Glyph const & glyph, GlyphOptions glyphOptions, RGB888 penColor,/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
drawGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::drawGlyph(Glyph const & glyph, GlyphOptions glyphOptions, RGB888 penColor, /;"	f	class:fabgl::VGA2Controller	typeref:typename:void
drawGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::drawGlyph(Glyph const & glyph, GlyphOptions glyphOptions, RGB888 penColor, /;"	f	class:fabgl::VGA4Controller	typeref:typename:void
drawGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::drawGlyph(Glyph const & glyph, GlyphOptions glyphOptions, RGB888 penColor, /;"	f	class:fabgl::VGA8Controller	typeref:typename:void
drawGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::drawGlyph(Glyph const & glyph, GlyphOptions glyphOptions, RGB888 p/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
drawGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::drawGlyph(Glyph const & glyph, GlyphOptions glyphOptions, RGB888 penCo/;"	f	class:fabgl::VGADirectController	typeref:typename:void
drawInfo	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^void drawInfo(Canvas * canvas)$/;"	f	typeref:typename:void
drawInt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^void drawInt( int x, int y, int value, RGB888 const & color, char *prefix = NULL, char *sufix = /;"	f	typeref:typename:void
drawLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::drawLine(int X1, int Y1, int X2, int Y2)$/;"	f	class:fabgl::Canvas	typeref:typename:void
drawMode	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  JDrawMode drawMode = LIVE;$/;"	m	class:JFixtureAddr	typeref:typename:JDrawMode
drawNextPixels	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.cpp	/^void MOS6561::drawNextPixels()$/;"	f	class:MOS6561	typeref:typename:void
drawPath	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::drawPath(Point const * points, int pointsCount)$/;"	f	class:fabgl::Canvas	typeref:typename:void
drawPath	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::drawPath(Path const & path, Rect & updateRect)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
drawPoints	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  void drawPoints( )$/;"	f	struct:Race	typeref:typename:void
drawRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::drawRect(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
drawRectangle	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::drawRectangle(Rect const & rect)$/;"	f	class:fabgl::Canvas	typeref:typename:void
drawRectangle	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::drawRectangle(int X1, int Y1, int X2, int Y2)$/;"	f	class:fabgl::Canvas	typeref:typename:void
drawReshapingBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFrame::drawReshapingBox(Rect boxRect)$/;"	f	class:fabgl::uiFrame	typeref:typename:void
drawScanlineX1	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void IRAM_ATTR CVBS16Controller::drawScanlineX1(void * arg, uint16_t * dest, int destSample, int/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void IRAM_ATTR
drawScanlineX2	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void IRAM_ATTR CVBS16Controller::drawScanlineX2(void * arg, uint16_t * dest, int destSample, int/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void IRAM_ATTR
drawScanlineX3	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void IRAM_ATTR CVBS16Controller::drawScanlineX3(void * arg, uint16_t * dest, int destSample, int/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void IRAM_ATTR
drawScanline_PC_Graphics_320x200_4Colors	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void IRAM_ATTR GraphicsAdapter::drawScanline_PC_Graphics_320x200_4Colors(void * arg, uint8_t * d/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void IRAM_ATTR
drawScanline_PC_Graphics_640x200_2Colors	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void IRAM_ATTR GraphicsAdapter::drawScanline_PC_Graphics_640x200_2Colors(void * arg, uint8_t * d/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void IRAM_ATTR
drawScanline_PC_Graphics_HGC_720x348	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void IRAM_ATTR GraphicsAdapter::drawScanline_PC_Graphics_HGC_720x348(void * arg, uint8_t * dest,/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void IRAM_ATTR
drawScanline_PC_Text_40x25_16Colors	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void IRAM_ATTR GraphicsAdapter::drawScanline_PC_Text_40x25_16Colors(void * arg, uint8_t * dest, /;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void IRAM_ATTR
drawScanline_PC_Text_80x25_16Colors	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void IRAM_ATTR GraphicsAdapter::drawScanline_PC_Text_80x25_16Colors(void * arg, uint8_t * dest, /;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void IRAM_ATTR
drawScores	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  void drawScores()$/;"	f	struct:Score	typeref:typename:void
drawText	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::drawText(FontInfo const * fontInfo, int X, int Y, char const * text, bool wrap)$/;"	f	class:fabgl::Canvas	typeref:typename:void
drawText	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::drawText(int X, int Y, char const * text, bool wrap)$/;"	f	class:fabgl::Canvas	typeref:typename:void
drawTextFmt	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::drawTextFmt(int X, int Y, const char *format, ...)$/;"	f	class:fabgl::Canvas	typeref:typename:void
drawTextWithEllipsis	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::drawTextWithEllipsis(FontInfo const * fontInfo, int X, int Y, char const * text, in/;"	f	class:fabgl::Canvas	typeref:typename:void
drawTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  void drawTime()$/;"	f	struct:Race	typeref:typename:void
drawbuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^  uint8_t *drawbuffer,*framebuffer;$/;"	m	class:COctoWS2811Controller	typeref:typename:uint8_t *
drawbuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/ws2812serial_controller.h	/^    uint8_t *drawbuffer,*framebuffer;$/;"	m	class:CWS2812SerialController	typeref:typename:uint8_t *
drawbuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/octows2811_controller.h	/^  uint8_t *drawbuffer,*framebuffer;$/;"	m	class:COctoWS2811Controller	typeref:typename:uint8_t *
drive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  int  drive() { return m_drive; }$/;"	f	class:Mits88Disk	typeref:typename:int
driveIndexToStr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  static char const * driveIndexToStr(int index) {$/;"	f	struct:MachineConfItem	typeref:typename:char const *
drivecal	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^drivecal         db  0b00000011         ; 40:3eh$/;"	d
drm	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint16_t  drm;  \/\/ (no. of directory entries)-1$/;"	m	struct:DiscParameterBlock	typeref:typename:uint16_t
dsm	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint16_t  dsm;  \/\/ (no. of blocks on the disc)-1$/;"	m	struct:DiscParameterBlock	typeref:typename:uint16_t
dummy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint8_t  dummy[9];$/;"	m	struct:DiscParameterHeader	typeref:typename:uint8_t[9]
dump	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    void dump() const {$/;"	f	class:CPixelView	typeref:typename:void
dumpEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void dumpEvent(uiEvent * event)$/;"	f	namespace:fabgl	typeref:typename:void
dumpInfo	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::dumpInfo(char const * filename)$/;"	f	class:Machine	typeref:typename:void
dumpMemory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::dumpMemory(char const * filename)$/;"	f	class:Machine	typeref:typename:void
duration	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint32_t duration() { return m_duration; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:uint32_t
duration	examples/test/.pio/libdeps/esp32dev/FabGL/tools/wav2header/wav2header.py	/^duration = float(old_audio.shape[0]) \/ old_samplerate$/;"	v
duration	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    unsigned short duration = 0;$/;"	m	class:JEnv	typeref:typename:unsigned short
durationms	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^  int durationms;$/;"	m	struct:playsounddata	typeref:typename:int
durationms	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^  int durationms;$/;"	m	struct:playsounddata	typeref:typename:int
dword	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    uint32_t dword;     \/\/\/< values as a packed 32-bit double word$/;"	m	union:__anon875718a3020a	typeref:typename:uint32_t
dx	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  int dx = 0;$/;"	m	struct:GameControllerMouse	typeref:typename:int
dx	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  int dx = 0;$/;"	m	struct:GameControllerMouse	typeref:typename:int
dy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  int dy = 0;$/;"	m	struct:GameControllerMouse	typeref:typename:int
dy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  int dy = 0;$/;"	m	struct:GameControllerMouse	typeref:typename:int
dynamicFrames	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  fabgl::Stack<uiFrame*> dynamicFrames;$/;"	m	class:MyApp	typeref:typename:fabgl::Stack<uiFrame * >
e	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        uint8_t e[3];            \/\/\/< values for the scaled dither signal @see init_binary_di/;"	m	struct:PixelController	typeref:typename:uint8_t[3]
e	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^  uint8_t e[3];$/;"	m	struct:M0ClocklessData	typeref:typename:uint8_t[3]
e	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^JEspnowDevice *e = nullptr;$/;"	v	typeref:typename:JEspnowDevice *
ease16InOutQuad	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint16_t ease16InOutQuad( uint16_t i)$/;"	f	typeref:typename:LIB8STATIC uint16_t
ease8InOutApprox	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC fract8 ease8InOutApprox( fract8 i)$/;"	f	typeref:typename:LIB8STATIC fract8
ease8InOutApprox	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint8_t ease8InOutApprox( fract8 i)$/;"	f	typeref:typename:LIB8STATIC uint8_t
ease8InOutCubic	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC fract8 ease8InOutCubic( fract8 i)$/;"	f	typeref:typename:LIB8STATIC fract8
ease8InOutQuad	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint8_t ease8InOutQuad( uint8_t i)$/;"	f	typeref:typename:LIB8STATIC uint8_t
ease8InOutQuad	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint8_t ease8InOutQuad(uint8_t val) {$/;"	f	typeref:typename:LIB8STATIC uint8_t
eat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  bool eat(char charToSkip) {$/;"	f	class:JsonDeserializer	typeref:typename:bool
eda	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^eda              db 1        ; size in K$/;"	d
eda_drive_offset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^eda_drive_offset dw 0000$/;"	d
eda_drive_seg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^eda_drive_seg    dw 0000$/;"	d
edit	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiTextEdit *     edit;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:uiTextEdit *
edit	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiTextEdit *     edit;$/;"	m	struct:fabgl::TextInputForm	typeref:typename:uiTextEdit *
edit	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^char const * LineEditor::edit(int maxLength)$/;"	f	class:fabgl::LineEditor	typeref:typename:char const *
editConfigDialog	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^void editConfigDialog(InputBox * ibox, MachineConf * mconf, int idx)$/;"	f	typeref:typename:void
editExtent	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              editExtent;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:int
editExtent	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              editExtent;$/;"	m	struct:fabgl::TextInputForm	typeref:typename:int
editInitial	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  int editInitial = 0; \/\/ 0 to 3$/;"	m	struct:Score	typeref:typename:int
editItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  int editItem = -1; \/\/ item number to edit$/;"	m	struct:Score	typeref:typename:int
editcontrol	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiControl * editcontrol()    { return m_button; }$/;"	f	class:fabgl::uiSplitButton	typeref:typename:uiControl *
editcontrol	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiControl * editcontrol()    { return m_colorBox; }$/;"	f	class:fabgl::uiColorComboBox	typeref:typename:uiControl *
editcontrol	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiControl * editcontrol()    { return m_textEdit; }$/;"	f	class:fabgl::uiComboBox	typeref:typename:uiControl *
email	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^      "email": "fdivitto2013@gmail.com",$/;"	s	object:authors.0
empty	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static void empty( uint32_t *buf)$/;"	f	class:ClocklessController	typeref:typename:void
emptyKbdBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::emptyKbdBuffer()$/;"	f	class:BIOS	typeref:typename:void
emptyQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^void Mouse::emptyQueue()$/;"	f	class:fabgl::Mouse	typeref:typename:void
emptyVirtualKeyQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^void Keyboard::emptyVirtualKeyQueue()$/;"	f	class:fabgl::Keyboard	typeref:typename:void
emulation	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  Emulation emulation()                                    { return m_emulation; }$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:Emulation
enable	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  void enable(bool value) { m_enabled = value; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:void
enable	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^        uint32_t enable;$/;"	m	struct:NRF51SPIOutput::saveData	typeref:typename:uint32_t
enableAudio	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  void enableAudio(bool value) { m_soundGen.play(value); }$/;"	f	class:MOS6561	typeref:typename:void
enableBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void BitmappedDisplayController::enableBackgroundPrimitiveExecution(bool value)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
enableBackgroundPrimitiveTimeout	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void enableBackgroundPrimitiveTimeout(bool value) { m_backgroundPrimitiveTimeoutEnabled = valu/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
enableBlinkingText	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool Terminal::enableBlinkingText(bool value)$/;"	f	class:fabgl::Terminal	typeref:typename:bool
enableConfig	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	void enableConfig() { m_SPI->SPI_WPMR &= ~SPI_WPMR_WPEN; }$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
enableCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  void enableCursor(bool value)            { m_cursorEnabled = value; }$/;"	f	class:fabgl::VGATextController	typeref:typename:void
enableCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::enableCursor(bool value)$/;"	f	class:fabgl::Terminal	typeref:typename:void
enableCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::enableCursor(bool value)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
enableFabGLSequences	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::enableFabGLSequences(bool value)$/;"	f	class:fabgl::Terminal	typeref:typename:void
enableINTMirroring	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::enableINTMirroring(bool value, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:void
enableINTOpenDrain	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::enableINTOpenDrain(bool value, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:void
enableInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::enableInterrupt(int gpio, MCPIntTrigger trigger, bool defaultValue, uint8_t hwAdd/;"	f	class:fabgl::MCP23S17	typeref:typename:void
enableKeyboardAndMouseEvents	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::enableKeyboardAndMouseEvents(bool value)$/;"	f	class:fabgl::uiApp	typeref:typename:void
enableMouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^void i8042::enableMouse(bool value)$/;"	f	class:fabgl::i8042	typeref:typename:void
enablePortPullUp	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  void enablePortPullUp(int port, uint8_t value, uint8_t hwAddr = 0)     { writeReg(MCP_GPPU + p/;"	f	class:fabgl::MCP23S17	typeref:typename:void
enableRAMBlock	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::enableRAMBlock(int block, bool enabled)$/;"	f	class:Machine	typeref:typename:void
enableRX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^void PS2Controller::enableRX(int PS2Port)$/;"	f	class:fabgl::PS2Controller	typeref:typename:void
enableSPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	void enableSPI() { m_SPI->SPI_CR = SPI_CR_SPIEN; }$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
enableTimers	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^void MC146818::enableTimers()$/;"	f	class:fabgl::MC146818	typeref:typename:void
enableVideo	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^bool GraphicsAdapter::enableVideo(bool value)$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:bool
enableVirtualKeys	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^void Keyboard::enableVirtualKeys(bool generateVirtualKeys, bool createVKQueue)$/;"	f	class:fabgl::Keyboard	typeref:typename:void
enable_dithering	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        void enable_dithering(EDitherMode dither) {$/;"	f	struct:PixelController	typeref:typename:void
enable_if	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/enable_if.hpp	/^struct enable_if {};$/;"	s
enable_if	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/enable_if.hpp	/^struct enable_if<true, T> {$/;"	s
enable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	inline void enable_pins(void) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
enable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	inline void enable_pins(void) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
enable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  static inline void enable_pins(void) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
enable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void enable_pins() { }$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
enable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void enable_pins() { }$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
enable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void enable_pins() { }$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
enable_pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void enable_pins() {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
enabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  bool enabled() { return m_enabled; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:bool
encodeCodepoint	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Utf8.hpp	/^inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {$/;"	f	namespace:Utf8	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE iterator end() const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE iterator
end	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  FORCE_INLINE iterator end() const {$/;"	f	class:JsonArrayConst	typeref:typename:FORCE_INLINE iterator
end	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE iterator end() const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE iterator
end	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  FORCE_INLINE iterator end() const {$/;"	f	class:JsonObjectConst	typeref:typename:FORCE_INLINE iterator
end	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StaticStringWriter.hpp	/^  char* end;$/;"	m	class:StaticStringWriter	typeref:typename:char *
end	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^void PS2Controller::end()$/;"	f	class:fabgl::PS2Controller	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^void I2C::end()$/;"	f	class:fabgl::I2C	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::end()$/;"	f	class:fabgl::MCP23S17	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.cpp	/^void GPIOStream::end()$/;"	f	class:fabgl::GPIOStream	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::end()$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::end()$/;"	f	class:fabgl::TFTController	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^void CVBSBaseController::end()$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^void CVBSPalettedController::end()$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::end()$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^void VGAPalettedController::end()$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void InputBox::end()$/;"	f	class:fabgl::InputBox	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::end()$/;"	f	class:fabgl::Terminal	typeref:typename:void
end	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    iterator end() const { return iterator(end_pos, dir); }  \/\/\/< Makes an iterator instance /;"	f	class:CPixelView	typeref:typename:iterator
end	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    iterator end() { return iterator(end_pos, dir); }  \/\/\/< Makes an iterator instance for th/;"	f	class:CPixelView	typeref:typename:iterator
endBoundary	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	void endBoundary(int nLeds) { int nDWords = (nLeds\/32); do { mSPI.writeByte(0xFF); mSPI.writeB/;"	f	class:APA102Controller	typeref:typename:void
endBoundary	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	void endBoundary(int nLeds) { int nDWords = (nLeds\/32); do { mSPI.writeByte(0xFF); mSPI.writeB/;"	f	class:LPD6803Controller	typeref:typename:void
endBoundary	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	void endBoundary(int nLeds) { int nLongWords = (nLeds\/32); do { mSPI.writeByte(0x00); mSPI.wri/;"	f	class:SK9822Controller	typeref:typename:void
endFieldEqualizingPulseCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  int8_t          endFieldEqualizingPulseCount;   \/\/ verticao sync, number of short pulses at /;"	m	struct:fabgl::CVBSParams	typeref:typename:int8_t
endInput	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::endInput()$/;"	f	class:fabgl::LineEditor	typeref:typename:void
endModalWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiApp::endModalWindow(ModalWindowState * state)$/;"	f	class:fabgl::uiApp	typeref:typename:int
endTime	examples/test/lib/JFixLib/src/Event/Event.h	/^  unsigned long endTime = 0;$/;"	m	class:Event	typeref:typename:unsigned long
endUpdate	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::endUpdate()$/;"	f	class:fabgl::Canvas	typeref:typename:void
endUpdateIntTimerFunc	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^void MC146818::endUpdateIntTimerFunc(void * args)$/;"	f	class:fabgl::MC146818	typeref:typename:void
endVal	examples/test/lib/JFixLib/src/JLag.h	/^    float endVal = 0; \/\/ Perhaps call this 'targetVal'$/;"	m	class:JLag	typeref:typename:float
end_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp	/^  const char* end_;$/;"	m	struct:BoundedReader	typeref:typename:const char *
end_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp	/^  TIterator ptr_, end_;$/;"	m	class:IteratorReader	typeref:typename:TIterator
end_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  char *begin_, *left_, *right_, *end_;$/;"	m	class:MemoryPool	typeref:typename:char *
end_pos	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    PIXEL_TYPE * const end_pos;   \/\/\/< pointer to the end position of the LED data$/;"	m	class:CPixelView	typeref:typename:PIXEL_TYPE * const
ended_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Latch.hpp	/^  bool ended_;$/;"	m	class:Latch	typeref:typename:bool
ending	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^ending:$/;"	l
enemyA_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^const uint8_t enemyA_data[][16] = {$/;"	v	typeref:typename:const uint8_t[][16]
enemyB_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^const uint8_t enemyB_data[][16] = {$/;"	v	typeref:typename:const uint8_t[][16]
enemyC_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^const uint8_t enemyC_data[][16] = {$/;"	v	typeref:typename:const uint8_t[][16]
enemyD_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^const uint8_t enemyD_data[] = {$/;"	v	typeref:typename:const uint8_t[]
enemy_explosion_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^const uint8_t enemy_explosion_data[] = {$/;"	v	typeref:typename:const uint8_t[]
enemy_fire_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^const uint8_t enemy_fire_data[][7] = {$/;"	v	typeref:typename:const uint8_t[][7]
enterSubDir	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFileBrowser::enterSubDir()$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:void
entries	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSV entries[16];  \/\/\/< the color entries that make up the palette$/;"	m	class:CHSVPalette16	typeref:typename:CHSV[16]
entries	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSV entries[256];  \/\/\/< @copydoc CHSVPalette16::entries$/;"	m	class:CHSVPalette256	typeref:typename:CHSV[256]
entries	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSV entries[32];  \/\/\/< @copydoc CHSVPalette16::entries$/;"	m	class:CHSVPalette32	typeref:typename:CHSV[32]
entries	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGB entries[16];  \/\/\/< @copydoc CHSVPalette16::entries$/;"	m	class:CRGBPalette16	typeref:typename:CRGB[16]
entries	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGB entries[256];  \/\/\/< @copydoc CHSVPalette16::entries$/;"	m	class:CRGBPalette256	typeref:typename:CRGB[256]
entries	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGB entries[32];  \/\/\/< @copydoc CHSVPalette16::entries$/;"	m	class:CRGBPalette32	typeref:typename:CRGB[32]
env:esp32dev	examples/test/platformio.ini	/^[env:esp32dev]$/;"	s
envelopes	examples/test/lib/JFixLib/src/Event/Event.h	/^  JEnv *envelopes[MAX_ENV] = {nullptr};$/;"	m	class:Event	typeref:typename:JEnv * []
equip	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^equip            dw  0b0001010001100101  ; 40:10h$/;"	d
erase	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::erase(int X1, int Y1, int X2, int Y2, uint8_t c, bool maintainDoubleWidth, bool s/;"	f	class:fabgl::Terminal	typeref:typename:void
errCode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  int32_t   errCode;$/;"	m	struct:FileSearchState	typeref:typename:int32_t
errorBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/bitmaps.h	/^const Bitmap errorBitmap = Bitmap(16, 16, &errorBitmap_data[0], PixelFormat::RGBA2222);$/;"	v	namespace:fabgl	typeref:typename:const Bitmap
errorBitmap_data	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/bitmaps.h	/^const uint8_t errorBitmap_data[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
escapeChar	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/EscapeSequence.hpp	/^  static char escapeChar(char c) {$/;"	f	class:EscapeSequence	typeref:typename:char
escapeTable	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/EscapeSequence.hpp	/^  static const char* escapeTable(bool excludeSolidus) {$/;"	f	class:EscapeSequence	typeref:typename:const char *
esp_intr_alloc_args	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^struct esp_intr_alloc_args {$/;"	s	namespace:fabgl	file:
esp_intr_alloc_pinnedToCore	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void esp_intr_alloc_pinnedToCore(int source, int flags, intr_handler_t handler, void * arg, intr/;"	f	namespace:fabgl	typeref:typename:void
esp_intr_alloc_pinnedToCore_call	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void esp_intr_alloc_pinnedToCore_call(void * arg)$/;"	f	namespace:fabgl	typeref:typename:void
esyscode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^    uint16_t esyscode;$/;"	m	struct:BIOS::getKeyFromBuffer::Ext2XT	typeref:typename:uint16_t	file:
events	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  Event *events[MAX_EVENTS];$/;"	m	class:JFixtureGraphics	typeref:typename:Event * []
exScancodeToVK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  VirtualKeyDef            exScancodeToVK[22];  \/**< Direct extended-scancode->virtualkey assoc/;"	m	struct:fabgl::KeyboardLayout	typeref:typename:VirtualKeyDef[22]
ex_data	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t ex_data[] = {  0,  0,  0,  0,  0,  0,  8,  8,  1,  1,  1,  1,  1,  1,  9, 36,$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
exclude	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^  "exclude": [$/;"	a
exclude	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^        "exclude": [$/;"	a	object:export
exec	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void InputBox::exec(InputForm * form)$/;"	f	class:fabgl::InputBox	typeref:typename:void
execCommand	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^void i8042::execCommand()$/;"	f	class:fabgl::i8042	typeref:typename:void
execCtrlCode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::execCtrlCode(uint8_t c)$/;"	f	class:fabgl::Terminal	typeref:typename:void
execFunc	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  Delegate<ProgressForm*> execFunc;$/;"	m	struct:fabgl::ProgressForm	typeref:typename:Delegate<ProgressForm * >
execLoadedProgram	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::execLoadedProgram(size_t size)$/;"	f	class:BDOS	typeref:typename:void
execPrimitive	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::execPrimitive(Primitive const & prim, Rect & updateRe/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
execProgram	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::execProgram(int drive, char const * filename, uint16_t parameters)$/;"	f	class:BDOS	typeref:typename:bool
execSGRParameters	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::execSGRParameters(int const * params, int paramsCount)$/;"	f	class:fabgl::Terminal	typeref:typename:void
exec_AUXIN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_AUXIN()$/;"	f	class:BIOS	typeref:typename:void
exec_AUXIST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_AUXIST()$/;"	f	class:BIOS	typeref:typename:void
exec_AUXOST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_AUXOST()$/;"	f	class:BIOS	typeref:typename:void
exec_AUXOUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_AUXOUT()$/;"	f	class:BIOS	typeref:typename:void
exec_BOOT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_BOOT()$/;"	f	class:BIOS	typeref:typename:void
exec_CONIN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_CONIN()$/;"	f	class:BIOS	typeref:typename:void
exec_CONOST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_CONOST()$/;"	f	class:BIOS	typeref:typename:void
exec_CONOUT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_CONOUT()$/;"	f	class:BIOS	typeref:typename:void
exec_CONST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_CONST()$/;"	f	class:BIOS	typeref:typename:void
exec_DEVINI	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_DEVINI()$/;"	f	class:BIOS	typeref:typename:void
exec_DEVTBL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_DEVTBL()$/;"	f	class:BIOS	typeref:typename:void
exec_LIST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_LIST()$/;"	f	class:BIOS	typeref:typename:void
exec_LISTST	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_LISTST()$/;"	f	class:BIOS	typeref:typename:void
exec_SELDSK	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_SELDSK()$/;"	f	class:BIOS	typeref:typename:void
exec_TIME	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_TIME()$/;"	f	class:BIOS	typeref:typename:void
exec_WBOOT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::exec_WBOOT()$/;"	f	class:BIOS	typeref:typename:void
exists	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::exists(char const * name, bool caseSensitive)$/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
exitCode	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^    int exitCode;$/;"	m	union:fabgl::uiEvent::uiEventParams	typeref:typename:int
exitModal	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::exitModal(int modalResult)$/;"	f	class:fabgl::uiWindow	typeref:typename:void
exitRace	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  void exitRace( int value )$/;"	f	struct:Race	typeref:typename:void
exitValue	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^  int exitValue = -1;$/;"	m	struct:Menu	typeref:typename:int
exitValue	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  int exitValue = -1;$/;"	m	struct:Race	typeref:typename:int
exitValue	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  int exitValue = 0;$/;"	m	struct:Score	typeref:typename:int
exleading	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t  exleading;$/;"	m	struct:fabgl::FontInfo	typeref:typename:uint8_t
exm	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint8_t   exm;  \/\/ Extent mask, see later$/;"	m	struct:DiscParameterBlock	typeref:typename:uint8_t
expRandLines	examples/test/lib/JFixLib/src/Event/expRandLines.cpp	/^expRandLines::expRandLines(unsigned char x, unsigned char y, unsigned short width, unsigned shor/;"	f	class:expRandLines
expRandLines	examples/test/lib/JFixLib/src/Event/expRandLines.h	/^class expRandLines: public Event{$/;"	c
exp_	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^        uint32_t exp_  :  8;  \/\/\/< @todo Doc: what is this for?$/;"	m	struct:__anon26d1ab7c010a::__anon26d1ab7c0308	typeref:typename:uint32_t:8
expandFilename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^char const * BDOS::expandFilename(char const * filename, char * expandedFilename, bool isDir)$/;"	f	class:BDOS	typeref:typename:char const *
expired	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool TimeOut::expired(int valueMS)$/;"	f	class:fabgl::TimeOut	typeref:typename:bool
expl1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^Bitmap expl1 = Bitmap(16, 16, &expl1_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap expl1 = Bitmap(16, 16, &expl1_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap expl1 = Bitmap(16, 16, &expl1_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl1_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^const uint8_t expl1_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl1_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^const uint8_t expl1_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl1_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^const uint8_t expl1_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^Bitmap expl2 = Bitmap(16, 16, &expl2_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap expl2 = Bitmap(16, 16, &expl2_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap expl2 = Bitmap(16, 16, &expl2_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl2_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^const uint8_t expl2_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl2_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^const uint8_t expl2_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl2_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^const uint8_t expl2_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^Bitmap expl3 = Bitmap(16, 16, &expl3_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap expl3 = Bitmap(16, 16, &expl3_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap expl3 = Bitmap(16, 16, &expl3_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl3_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^const uint8_t expl3_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl3_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^const uint8_t expl3_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl3_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^const uint8_t expl3_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl4	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^Bitmap expl4 = Bitmap(16, 16, &expl4_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl4	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap expl4 = Bitmap(16, 16, &expl4_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl4	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap expl4 = Bitmap(16, 16, &expl4_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl4_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^const uint8_t expl4_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl4_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^const uint8_t expl4_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl4_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^const uint8_t expl4_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl5	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^Bitmap expl5 = Bitmap(16, 16, &expl5_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl5	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap expl5 = Bitmap(16, 16, &expl5_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl5	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap expl5 = Bitmap(16, 16, &expl5_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl5_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^const uint8_t expl5_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl5_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^const uint8_t expl5_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl5_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^const uint8_t expl5_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl6	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^Bitmap expl6 = Bitmap(16, 16, &expl6_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl6	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap expl6 = Bitmap(16, 16, &expl6_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl6	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap expl6 = Bitmap(16, 16, &expl6_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl6_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^const uint8_t expl6_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl6_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^const uint8_t expl6_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl6_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^const uint8_t expl6_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl7	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^Bitmap expl7 = Bitmap(16, 16, &expl7_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl7	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap expl7 = Bitmap(16, 16, &expl7_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl7	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap expl7 = Bitmap(16, 16, &expl7_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl7_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^const uint8_t expl7_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl7_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^const uint8_t expl7_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl7_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^const uint8_t expl7_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl8	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^Bitmap expl8 = Bitmap(16, 16, &expl8_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl8	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap expl8 = Bitmap(16, 16, &expl8_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl8	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap expl8 = Bitmap(16, 16, &expl8_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
expl8_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^const uint8_t expl8_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl8_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^const uint8_t expl8_data[] = {$/;"	v	typeref:typename:const uint8_t[]
expl8_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^const uint8_t expl8_data[] = {$/;"	v	typeref:typename:const uint8_t[]
explosion	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^Bitmap * explosion[] = { &expl1, &expl2, &expl3, &expl4, &expl5, &expl6, &expl7, &expl8 };$/;"	v	typeref:typename:Bitmap * []
explosion	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap * explosion[] = { &expl1, &expl2, &expl3, &expl4, &expl5, &expl6, &expl7, &expl8 };$/;"	v	typeref:typename:Bitmap * []
explosion	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap * explosion[] = { &expl1, &expl2, &expl3, &expl4, &expl5, &expl6, &expl7, &expl8 };$/;"	v	typeref:typename:Bitmap * []
explosionSoundSamples	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sounds.h	/^const int8_t explosionSoundSamples[] = {$/;"	v	typeref:typename:const int8_t[]
exponent	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatParts.hpp	/^  int16_t exponent;$/;"	m	struct:FloatParts	typeref:typename:int16_t
exponent	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^        uint32_t exponent:  8;  \/\/\/< 8-bit exponent$/;"	m	struct:__anon26d1ab7c010a::__anon26d1ab7c0208	typeref:typename:uint32_t:8
exponent_max	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static const exponent_type exponent_max = 308;$/;"	m	struct:FloatTraits	typeref:typename:const exponent_type
exponent_max	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static const exponent_type exponent_max = 38;$/;"	m	struct:FloatTraits	typeref:typename:const exponent_type
exponent_t	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/parseNumber.hpp	/^  typedef traits::exponent_type exponent_t;$/;"	t	function:parseNumber	typeref:typename:traits::exponent_type
exponent_type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  typedef int16_t exponent_type;$/;"	t	struct:FloatTraits	typeref:typename:int16_t
exponent_type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  typedef int8_t exponent_type;$/;"	t	struct:FloatTraits	typeref:typename:int8_t
export	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "export": {$/;"	o
extGetByteParam	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^uint8_t Terminal::extGetByteParam()$/;"	f	class:fabgl::Terminal	typeref:typename:uint8_t
extGetCmdParam	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::extGetCmdParam(char * cmd)$/;"	f	class:fabgl::Terminal	typeref:typename:void
extGetIntParam	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int Terminal::extGetIntParam()$/;"	f	class:fabgl::Terminal	typeref:typename:int
extIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  int16_t   extIndex;$/;"	m	struct:FileSearchState	typeref:typename:int16_t
extra	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t    * regs8, i_mod_size, i_d, i_w, raw_opcode_id, xlat_opcode_id, extra, rep_mode,/;"	v	namespace:fabgl	typeref:typename:uint8_t	file:
f	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    flag_reg f;$/;"	m	struct:fabgl::i8080::Regs	typeref:typename:flag_reg
f	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    T f:F;  \/\/\/< Fractional value of number$/;"	m	class:q	typeref:typename:T
f	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    float    f;  \/\/\/< raw value, as a float$/;"	m	union:__anon26d1ab7c010a	typeref:typename:float
f_str	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  const __FlashStringHelper* f_str() const {$/;"	f	class:DeserializationError	typeref:typename:const __FlashStringHelper *
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.cpp	/^ namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabfonts.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabfonts.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_10x20.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_4x6.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_5x7.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_5x8.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_6x10.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_6x12.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_6x13.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_6x8.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_6x9.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_7x13.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_7x14.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_8x13.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_8x14.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_8x16.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_8x19.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_8x8.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_8x9.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_9x15.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_9x16.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_9x18.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_bigserif_8x14.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_bigserif_8x16.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_block_8x14.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_broadway_8x14.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_computer_8x14.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_courier_8x14.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_lcd_8x14.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_oldengl_8x16.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_sanserif_8x14.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_sanserif_8x16.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_slant_8x14.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_12.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_14.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_15.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_16.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_17.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_18.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_22.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_std_24.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fonts/font_wiggly_8x16.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/bitmaps.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^namespace fabgl {$/;"	n
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^namespace fabgl {$/;"	n	file:
fabgl	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^namespace fabgl {$/;"	n
fadeLightBy	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fadeLightBy(CRGB* leds, uint16_t num_leds, uint8_t fadeBy)$/;"	f	typeref:typename:void
fadeLightBy	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & fadeLightBy(uint8_t fadefactor) { return nscale8_video(255 - fadefactor)/;"	f	class:CPixelView	typeref:typename:CPixelView &
fadeLightBy	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& fadeLightBy (uint8_t fadefactor )$/;"	f	struct:CRGB	typeref:typename:CRGB &
fadeToBlackBy	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fadeToBlackBy( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)$/;"	f	typeref:typename:void
fadeToBlackBy	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & fadeToBlackBy(uint8_t fade) { return nscale8(255 - fade); }$/;"	f	class:CPixelView	typeref:typename:CPixelView &
fadeToBlackBy	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& fadeToBlackBy (uint8_t fadefactor )$/;"	f	struct:CRGB	typeref:typename:CRGB &
fadeUsingColor	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fadeUsingColor( CRGB* leds, uint16_t numLeds, const CRGB& colormask)$/;"	f	typeref:typename:void
fade_raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)$/;"	f	typeref:typename:void
fade_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fade_video(CRGB* leds, uint16_t num_leds, uint8_t fadeBy)$/;"	f	typeref:typename:void
false_type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/integral_constant.hpp	/^typedef integral_constant<bool, false> false_type;$/;"	t	typeref:typename:integral_constant<bool,false>
fastest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^int fastest;$/;"	v	typeref:typename:int
fastset	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void fastset(FASTLED_REGISTER port_ptr_t port, FASTLED_REGISTER port_t val) __att/;"	f	class:FastPin	typeref:typename:void
fastset	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline void fastset(FASTLED_REGISTER port_ptr_t port, FASTLED_REGISTER port_t val) __attribute_/;"	f	class:Pin	typeref:typename:void
fastset	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static void fastset(FASTLED_REGISTER port_ptr_t port, FASTLED_REGISTER port_t val) __/;"	f	class:_ARMPIN	typeref:typename:void
fastset	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void fastset(FASTLED_REGISTER port_ptr_t port, FASTLED/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
fastset	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static void fastset(FASTLED_REGISTER port_ptr_t port, FASTLED_REGISTER port_t val) __at/;"	f	class:_ESPPIN	typeref:typename:void
fastset	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static void fastset(FASTLED_REGISTER port_ptr_t port, FASTLED_REGISTER port_t val) __/;"	f	class:_ESPPIN	typeref:typename:void
fat1size	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    uint8_t fat1size;  \/\/ in 512 blocks$/;"	m	struct:createFATFloppyImage::__anon3b11bce90e08	typeref:typename:uint8_t	file:
fat2size	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    uint8_t fat2size;  \/\/ in 512 blocks$/;"	m	struct:createFATFloppyImage::__anon3b11bce90e08	typeref:typename:uint8_t	file:
fd_register_table	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  void              * fd_register_table[16];$/;"	m	struct:fabgl::Z80_STATE	typeref:typename:void * [16]
fetchFileData	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void fetchFileData(FILE * file, int position, int size)$/;"	f	typeref:typename:void
fetchNextByteToSend	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::fetchNextByteToSend()$/;"	f	class:IECDrive	typeref:typename:void
fgColorComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiColorComboBox * fgColorComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiColorComboBox *
field	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static int field()                                          { return s_field; }$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:int
fieldLines	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          fieldLines;                     \/\/ number of lines in a field$/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
fieldStartingLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  uint8_t         fieldStartingLine[2];           \/\/ starting line of each field ([0]=first fi/;"	m	struct:fabgl::CVBSParams	typeref:typename:uint8_t[2]
fields	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  uint8_t         fields;                         \/\/ number of fields (max 2)$/;"	m	struct:fabgl::CVBSParams	typeref:typename:uint8_t
file	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  FILE *   file;          \/\/ nullptr = free item$/;"	m	struct:OpenFileCache	typeref:typename:FILE *
fileAccessDate	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::fileAccessDate(char const * name, int * year, int * month, int * day, int * ho/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
fileBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  FileBrowser * fileBrowser()       { return &m_fileBrowser; }$/;"	f	class:Machine	typeref:typename:FileBrowser *
fileBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiFileBrowser *  fileBrowser;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:uiFileBrowser *
fileBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiFileBrowser * fileBrowser;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:uiFileBrowser *
fileCreationDate	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::fileCreationDate(char const * name, int * year, int * month, int * day, int * /;"	f	class:fabgl::FileBrowser	typeref:typename:bool
fileDialog	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiMessageBoxResult uiApp::fileDialog(char const * title, char * inOutDirectory, int maxDirNameSi/;"	f	class:fabgl::uiApp	typeref:typename:uiMessageBoxResult
fileMatchWithWildCards	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::fileMatchWithWildCards(char const * searchingName, char const * testingName)$/;"	f	class:BDOS	typeref:typename:bool
filePathExists	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::filePathExists(char const * filepath)$/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
fileSelector	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^InputResult InputBox::fileSelector(char const * titleText, char const * messageText, char * inOu/;"	f	class:fabgl::InputBox	typeref:typename:InputResult
fileSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^size_t FileBrowser::fileSize(char const * name)$/;"	f	class:fabgl::FileBrowser	typeref:typename:size_t
fileUpdateDate	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::fileUpdateDate(char const * name, int * year, int * month, int * day, int * ho/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transdisk.py	/^filename   = sys.argv[1]$/;"	v
filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transfile.py	/^filename   = sys.argv[1]$/;"	v
filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  char     filename[12];$/;"	m	struct:OpenFileCache	typeref:typename:char[12]
filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^  char const *    filename;$/;"	m	struct:Program	typeref:typename:char const *
filename	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^char const * uiFileBrowser::filename()$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:char const *
filename	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^filename = sys.argv[1]$/;"	v
filename	examples/test/.pio/libdeps/esp32dev/FabGL/tools/wav2header/wav2header.py	/^filename = sys.argv[1]$/;"	v
filenameHash	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^uint32_t BDOS::filenameHash(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:uint32_t
filenameHash	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  uint32_t filenameHash;$/;"	m	struct:OpenFileCache	typeref:typename:uint32_t
filenameToFCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^uint16_t BDOS::filenameToFCB(uint16_t filename, uint16_t FCB, uint16_t * passwordAddr, uint8_t */;"	f	class:BDOS	typeref:typename:uint16_t
fill	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^int VGABaseController::fill(uint8_t volatile * buffer, int startPos, int length, uint8_t red, ui/;"	f	class:fabgl::VGABaseController	typeref:typename:int
fillBackground	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint16_t fillBackground   : 1;  \/**< If enabled glyph background is filled with current bac/;"	m	struct:fabgl::GlyphOptions::__anon3dd53dc60108	typeref:typename:uint16_t:1
fillBackground	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t fillBackground    : 1; \/**< Frame has filled background *\/$/;"	m	struct:fabgl::uiFrameProps	typeref:typename:uint8_t:1
fillBuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static void fillBuffer()$/;"	f	class:ClocklessController	typeref:typename:void
fillDMABuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::fillDMABuffers()$/;"	f	class:fabgl::VGATextController	typeref:typename:void
fillEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::fillEllipse(int X, int Y, int width, int height)$/;"	f	class:fabgl::Canvas	typeref:typename:void
fillEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::fillEllipse(int centerX, int centerY, Size const & si/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
fillHorizBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::fillHorizBuffers(int offsetX)$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
fillMem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::fillMem(uint16_t addr, uint8_t value, size_t size)$/;"	f	class:HAL	typeref:typename:void
fillNext	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^void IRAM_ATTR ESP32RMTController::fillNext(bool check_time)$/;"	f	class:ESP32RMTController	typeref:typename:void IRAM_ATTR
fillPath	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::fillPath(Point const * points, int pointsCount)$/;"	f	class:fabgl::Canvas	typeref:typename:void
fillPath	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::fillPath(Path const & path, RGB888 const & color, Rec/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
fillRect	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^void fillRect( int x, int y, int w, int h, fabgl::RGB888 const &overcolor)$/;"	f	typeref:typename:void
fillRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::fillRect(Rect const & rect, RGB888 const & color, Rec/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
fillRectangle	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::fillRectangle(Rect const & rect)$/;"	f	class:fabgl::Canvas	typeref:typename:void
fillRectangle	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::fillRectangle(int X1, int Y1, int X2, int Y2)$/;"	f	class:fabgl::Canvas	typeref:typename:void
fillSineNorm	examples/test/lib/JFixLib/src/Event/JWavetable.cpp	/^void JWavetable::fillSineNorm(float power){$/;"	f	class:JWavetable	typeref:typename:void
fillVertBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::fillVertBuffers(int offsetY)$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
fill_2dnoise16	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^void fill_2dnoise16(CRGB *leds, int width, int height, bool serpentine,$/;"	f	typeref:typename:void
fill_2dnoise8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^void fill_2dnoise8(CRGB *leds, int width, int height, bool serpentine,$/;"	f	typeref:typename:void
fill_gradient	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^void fill_gradient( T* targetArray, uint16_t numLeds, const CHSV& c1, const CHSV& c2,$/;"	f	typeref:typename:void
fill_gradient	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^void fill_gradient( T* targetArray, uint16_t numLeds,$/;"	f	typeref:typename:void
fill_gradient	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^void fill_gradient( T* targetArray,$/;"	f	typeref:typename:void
fill_gradient	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & fill_gradient(const CHSV & c1, const CHSV & c2, const CHSV &  c3, TGradi/;"	f	class:CPixelView	typeref:typename:CPixelView &
fill_gradient	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & fill_gradient(const CHSV & c1, const CHSV & c2, const CHSV & c3, const C/;"	f	class:CPixelView	typeref:typename:CPixelView &
fill_gradient	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & fill_gradient(const CHSV & startcolor, const CHSV & endcolor, TGradientD/;"	f	class:CPixelView	typeref:typename:CPixelView &
fill_gradient_HSV	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^#define fill_gradient_HSV /;"	d
fill_gradient_RGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fill_gradient_RGB( CRGB* leds, uint16_t numLeds, const CRGB& c1, const CRGB& c2)$/;"	f	typeref:typename:void
fill_gradient_RGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fill_gradient_RGB( CRGB* leds, uint16_t numLeds, const CRGB& c1, const CRGB& c2, const CRGB/;"	f	typeref:typename:void
fill_gradient_RGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fill_gradient_RGB( CRGB* leds,$/;"	f	typeref:typename:void
fill_gradient_RGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & fill_gradient_RGB(const PIXEL_TYPE & c1, const PIXEL_TYPE & c2, const PI/;"	f	class:CPixelView	typeref:typename:CPixelView &
fill_gradient_RGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & fill_gradient_RGB(const PIXEL_TYPE & startcolor, const PIXEL_TYPE & endc/;"	f	class:CPixelView	typeref:typename:CPixelView &
fill_noise16	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^void fill_noise16(CRGB *leds, int num_leds,$/;"	f	typeref:typename:void
fill_noise8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^void fill_noise8(CRGB *leds, int num_leds,$/;"	f	typeref:typename:void
fill_palette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,$/;"	f	typeref:typename:void
fill_palette_circular	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^void fill_palette_circular(CRGB* L, uint16_t N, uint8_t startIndex,$/;"	f	typeref:typename:void
fill_rainbow	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fill_rainbow( struct CHSV * targetArray, int numToFill,$/;"	f	typeref:typename:void
fill_rainbow	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fill_rainbow( struct CRGB * targetArray, int numToFill,$/;"	f	typeref:typename:void
fill_rainbow	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & fill_rainbow(uint8_t initialhue, uint8_t deltahue=5) {$/;"	f	class:CPixelView	typeref:typename:CPixelView &
fill_rainbow_circular	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fill_rainbow_circular(struct CHSV* targetArray, int numToFill, uint8_t initialhue, bool rev/;"	f	typeref:typename:void
fill_rainbow_circular	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fill_rainbow_circular(struct CRGB* targetArray, int numToFill, uint8_t initialhue, bool rev/;"	f	typeref:typename:void
fill_raw_2dnoise16	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^void fill_raw_2dnoise16(uint16_t *pData, int width, int height, uint8_t octaves, q88 freq88, fra/;"	f	typeref:typename:void
fill_raw_2dnoise16into8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^void fill_raw_2dnoise16into8(uint8_t *pData, int width, int height, uint8_t octaves, q44 freq44,/;"	f	typeref:typename:void
fill_raw_2dnoise16into8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^void fill_raw_2dnoise16into8(uint8_t *pData, int width, int height, uint8_t octaves, uint32_t x,/;"	f	typeref:typename:void
fill_raw_2dnoise8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^void fill_raw_2dnoise8(uint8_t *pData, int width, int height, uint8_t octaves, q44 freq44, fract/;"	f	typeref:typename:void
fill_raw_2dnoise8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^void fill_raw_2dnoise8(uint8_t *pData, int width, int height, uint8_t octaves, uint16_t x, int s/;"	f	typeref:typename:void
fill_raw_noise16into8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^void fill_raw_noise16into8(uint8_t *pData, uint8_t num_points, uint8_t octaves, uint32_t x, int /;"	f	typeref:typename:void
fill_raw_noise8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^void fill_raw_noise8(uint8_t *pData, uint8_t num_points, uint8_t octaves, uint16_t x, int scale,/;"	f	typeref:typename:void
fill_solid	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fill_solid( struct CHSV * targetArray, int numToFill,$/;"	f	typeref:typename:void
fill_solid	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void fill_solid( struct CRGB * targetArray, int numToFill,$/;"	f	typeref:typename:FASTLED_NAMESPACE_BEGIN void
fill_solid	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & fill_solid(const CHSV & color) { if(dir>0) { *this = color; return *this/;"	f	class:CPixelView	typeref:typename:CPixelView &
fill_solid	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & fill_solid(const PIXEL_TYPE & color) { *this = color; return *this; }$/;"	f	class:CPixelView	typeref:typename:CPixelView &
filter	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationOptions.hpp	/^  TFilter filter;$/;"	m	struct:DeserializationOptions	typeref:typename:TFilter
filterModalEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::filterModalEvent(uiEvent * event)$/;"	f	class:fabgl::uiApp	typeref:typename:void
finalize	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void FileBrowserForm::finalize()$/;"	f	class:fabgl::FileBrowserForm	typeref:typename:void
finalize	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void FileSelectorForm::finalize()$/;"	f	class:fabgl::FileSelectorForm	typeref:typename:void
finalize	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void MessageForm::finalize()$/;"	f	class:fabgl::MessageForm	typeref:typename:void
finalize	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void SelectForm::finalize()$/;"	f	class:fabgl::SelectForm	typeref:typename:void
finalize	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void TextInputForm::finalize()$/;"	f	class:fabgl::TextInputForm	typeref:typename:void
finalize	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  virtual void finalize()         { }$/;"	f	struct:fabgl::InputForm	typeref:typename:void
finalizeDirectoryRead	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::finalizeDirectoryRead()$/;"	f	class:IECDrive	typeref:typename:void
findChar	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^uint16_t HAL::findChar(uint16_t addr, uint8_t c)$/;"	f	class:HAL	typeref:typename:uint16_t
findChildWithFocusIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiWindow * uiWindow::findChildWithFocusIndex(int focusIndex, int * maxIndex)$/;"	f	class:fabgl::uiWindow	typeref:typename:uiWindow *
findString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  const char* findString(const TAdaptedString& str) const {$/;"	f	class:MemoryPool	typeref:typename:const char *
fireSoundSamples	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sounds.h	/^const int8_t fireSoundSamples[] = {$/;"	v	typeref:typename:const int8_t[]
firstChild	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * firstChild() { return m_firstChild; }$/;"	f	class:fabgl::uiWindow	typeref:typename:uiWindow *
firstSelectedItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiCustomListBox::firstSelectedItem()$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:int
firstVisibleSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static int firstVisibleSample()                             { return s_firstVisibleSample; }  /;"	f	class:fabgl::CVBSGenerator	typeref:typename:int
first_or_void	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/deserialize.hpp	/^struct first_or_void {$/;"	s
first_or_void	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/deserialize.hpp	/^struct first_or_void<T, Rest...> {$/;"	s
fixEndianess	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/endianess.hpp	/^inline void fixEndianess(T& value) {$/;"	f	typeref:typename:void
fixEndianess	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/endianess.hpp	/^inline void fixEndianess(uint8_t* p, integral_constant<size_t, 2>) {$/;"	f	typeref:typename:void
fixEndianess	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/endianess.hpp	/^inline void fixEndianess(uint8_t* p, integral_constant<size_t, 4>) {$/;"	f	typeref:typename:void
fixEndianess	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/endianess.hpp	/^inline void fixEndianess(uint8_t* p, integral_constant<size_t, 8>) {$/;"	f	typeref:typename:void
fixEndianess	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/endianess.hpp	/^inline void fixEndianess(uint8_t*, integral_constant<size_t, 1>) {}$/;"	f	typeref:typename:void
flagAF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^bool i8086::flagAF()$/;"	f	class:fabgl::i8086	typeref:typename:bool
flagCF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^bool i8086::flagCF()$/;"	f	class:fabgl::i8086	typeref:typename:bool
flagDF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^bool i8086::flagDF()$/;"	f	class:fabgl::i8086	typeref:typename:bool
flagIF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^bool i8086::flagIF()$/;"	f	class:fabgl::i8086	typeref:typename:bool
flagOF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^bool i8086::flagOF()$/;"	f	class:fabgl::i8086	typeref:typename:bool
flagPF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^bool i8086::flagPF()$/;"	f	class:fabgl::i8086	typeref:typename:bool
flagSF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^bool i8086::flagSF()$/;"	f	class:fabgl::i8086	typeref:typename:bool
flagTF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^bool i8086::flagTF()$/;"	f	class:fabgl::i8086	typeref:typename:bool
flagZF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^bool i8086::flagZF()$/;"	f	class:fabgl::i8086	typeref:typename:bool
flag_reg	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  } flag_reg;$/;"	t	class:fabgl::i8080	typeref:struct:fabgl::i8080::__anon81886eed0308
flags	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint8_t flags;    \/\/ see PHYSICALDEVICE_FLAG_...$/;"	m	struct:PhysicalDevice	typeref:typename:uint8_t
flags	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t    flags[10];$/;"	v	namespace:fabgl	typeref:typename:uint8_t[10]	file:
flags	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^  int             flags;$/;"	m	struct:fabgl::esp_intr_alloc_args	typeref:typename:int	file:
flags	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t  flags;$/;"	m	struct:fabgl::FontInfo	typeref:typename:uint8_t
flags_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  uint8_t flags_;$/;"	m	class:VariantData	typeref:typename:uint8_t
flags_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  uint8_t flags_;$/;"	m	class:VariantSlot	typeref:typename:uint8_t
floatToFraction	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void floatToFraction(double value, int maxDen, int * num, int * den)$/;"	f	namespace:fabgl	typeref:typename:void
floatToSfract15	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC sfract15 floatToSfract15( float f)$/;"	f	typeref:typename:LIB8STATIC sfract15
floppy160KB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  floppy160KB,$/;"	e	enum:MediaType
floppy180KB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  floppy180KB,$/;"	e	enum:MediaType
floppy1M2K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  floppy1M2K,$/;"	e	enum:MediaType
floppy1M44K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  floppy1M44K,$/;"	e	enum:MediaType
floppy2M88K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  floppy2M88K,$/;"	e	enum:MediaType
floppy320KB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  floppy320KB,$/;"	e	enum:MediaType
floppy360KB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  floppy360KB,$/;"	e	enum:MediaType
floppy720KB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  floppy720KB,$/;"	e	enum:MediaType
flowControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPort::flowControl(bool enableRX)$/;"	f	class:fabgl::SerialPort	typeref:typename:void
flowCtrlComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiComboBox *      flowCtrlComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiComboBox *
flush	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp	/^  size_t flush() {$/;"	f	class:Writer	typeref:typename:size_t
flush	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Mits88Disk::flush()$/;"	f	class:Mits88Disk	typeref:typename:void
flush	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::flush()$/;"	f	class:fabgl::Terminal	typeref:typename:void
flush	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::flush(bool waitVSync)$/;"	f	class:fabgl::Terminal	typeref:typename:void
fname	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^      fname = os.path.splitext(outfile)[0] + "%02d"%i + os.path.splitext(outfile)[1]$/;"	v
fname	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^    fname = prefix + "%02d"%i + outext$/;"	v
focusIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int focusIndex()                       { return m_focusIndex; }$/;"	f	class:fabgl::uiWindow	typeref:typename:int
focusInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^    uiFocusInfo focusInfo;$/;"	m	union:fabgl::uiEvent::uiEventParams	typeref:typename:uiFocusInfo
focusable	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t focusable  : 1;  \/**< The window is focusable (default for controls) *\/$/;"	m	struct:fabgl::uiWindowProps	typeref:typename:uint8_t:1
focusedBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           focusedBackgroundColor         = RGB888(255, 255, 255);   \/**< Background co/;"	m	struct:fabgl::uiListBoxStyle	typeref:typename:RGB888
focusedBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           focusedBackgroundColor     = RGB888(255, 255, 255);     \/**< Background colo/;"	m	struct:fabgl::uiTextEditStyle	typeref:typename:RGB888
focusedBorderColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888        focusedBorderColor = RGB888(0, 0, 255);                       \/**< Border color/;"	m	struct:fabgl::uiWindowStyle	typeref:typename:RGB888
focusedBorderSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t       focusedBorderSize  = 1;                                       \/**< Border size /;"	m	struct:fabgl::uiWindowStyle	typeref:typename:uint8_t
focusedSelectedBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           focusedSelectedBackgroundColor = RGB888(0, 0, 255);       \/**< Background co/;"	m	struct:fabgl::uiListBoxStyle	typeref:typename:RGB888
focusedWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * focusedWindow() { return m_focusedWindow; }$/;"	f	class:fabgl::uiApp	typeref:typename:uiWindow *
folderBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^InputResult InputBox::folderBrowser(char const * titleText, char const * directory, char const */;"	f	class:fabgl::InputBox	typeref:typename:InputResult
font	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^    FontInfo const *     font;                 \/\/ valid when text = true$/;"	m	struct:fabgl::GraphicsAdapter::setupEmulation::__anonf67d7a610108	typeref:typename:FontInfo const *	file:
font	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  FontInfo const * font;$/;"	m	struct:fabgl::InputForm	typeref:typename:FontInfo const *
font	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^class font:$/;"	c
font	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^font = ImageFont.truetype(font = input_file, size = font_size)$/;"	v
fontComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiComboBox *      fontComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiComboBox *
font_size	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^font_size  = int(args[1])$/;"	v
fonts	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^  fonts = dofon(data)$/;"	v
foregroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGB888          foregroundColor; \/**< Foreground color when format is PixelFormat::Mask *\/$/;"	m	struct:fabgl::Bitmap	typeref:typename:RGB888
foregroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              foregroundColor          = RGB888(0, 0, 0);        \/**< Foreground color /;"	m	struct:fabgl::uiCheckBoxStyle	typeref:typename:RGB888
foregroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           foregroundColor = RGB888(64, 128, 64);     \/**< Progress bar foreground colo/;"	m	struct:fabgl::uiProgressBarStyle	typeref:typename:RGB888
foregroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Color        foregroundColor;$/;"	m	struct:fabgl::EmuState	typeref:typename:Color
forge	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static T forge(uint32_t bits) {$/;"	f	struct:FloatTraits	typeref:typename:T
forge	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static T forge(uint64_t bits) {$/;"	f	struct:FloatTraits	typeref:typename:T
form	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  InputForm * form;$/;"	m	struct:fabgl::InputApp	typeref:typename:InputForm *
format	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  PixelFormat     format;          \/**< Bitmap pixel format *\/$/;"	m	struct:fabgl::Bitmap	typeref:typename:PixelFormat
format	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::format(DriveType driveType, int drive)$/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
format	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^    format = 0$/;"	v
format	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^    format = 1$/;"	v
format	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^    format = 2$/;"	v
format	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^format = 0  # RGBA2222$/;"	v
formatstr	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  formatstr = "PixelFormat::Mask"$/;"	v
formatstr	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  formatstr = "PixelFormat::RGBA2222"$/;"	v
formatstr	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  formatstr = "PixelFormat::RGBA8888"$/;"	v
formatter_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  TextFormatter<TWriter> formatter_;$/;"	m	class:JsonSerializer	typeref:typename:TextFormatter<TWriter>
forward	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/utility.hpp	/^T&& forward(typename remove_reference<T>::type& t) noexcept {$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE T &&
foundSomething_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  bool foundSomething_;$/;"	m	class:JsonDeserializer	typeref:typename:bool
foundSomething_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  bool foundSomething_;$/;"	m	class:MsgPackDeserializer	typeref:typename:bool
fp	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^  fp = open(fname, "w")$/;"	v
fp	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^fp = open(infile, "rb")$/;"	v
fp	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^fp = open(out_file, "w")$/;"	v
fract16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef uint16_t  fract16;$/;"	t	typeref:typename:uint16_t
fract8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef uint8_t   fract8;$/;"	t	typeref:typename:uint8_t
frame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiFrame *         frame;$/;"	m	struct:ConfDialogApp	typeref:typename:uiFrame *
frame	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static int frame()                                          { return s_frame; }$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:int
frameBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t * frameBuffer()              { return m_frameBuffer; }$/;"	f	class:Machine	typeref:typename:uint8_t *
frameGroupCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  uint8_t         frameGroupCount;                \/\/ number of frames for each DMA chain. Cont/;"	m	struct:fabgl::CVBSParams	typeref:typename:uint8_t
frameLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static int frameLine()                                      { return s_frameLine; }$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:int
frameProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiFrameProps & frameProps() { return m_frameProps; }$/;"	f	class:fabgl::uiFrame	typeref:typename:uiFrameProps &
frameRect	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  Rect              frameRect;$/;"	m	struct:ConfDialogApp	typeref:typename:Rect
frameState	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiFrameState frameState() { return m_frameState; }$/;"	f	class:fabgl::uiFrame	typeref:typename:uiFrameState
frameStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiFrameStyle & frameStyle() { return m_frameStyle; }$/;"	f	class:fabgl::uiFrame	typeref:typename:uiFrameStyle &
framebuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^  uint8_t *drawbuffer,*framebuffer;$/;"	m	class:COctoWS2811Controller	typeref:typename:uint8_t *
framebuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/ws2812serial_controller.h	/^    uint8_t *drawbuffer,*framebuffer;$/;"	m	class:CWS2812SerialController	typeref:typename:uint8_t *
framebuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/octows2811_controller.h	/^  uint8_t *drawbuffer,*framebuffer;$/;"	m	class:COctoWS2811Controller	typeref:typename:uint8_t *
frames	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Bitmap * *         frames;  \/\/ array of pointer to Bitmap$/;"	m	struct:fabgl::Sprite	typeref:typename:Bitmap **
framesCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t            framesCount;$/;"	m	struct:fabgl::Sprite	typeref:typename:int16_t
framework	examples/test/platformio.ini	/^framework = arduino$/;"	k	section:env:esp32dev
frameworks	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^  "frameworks": "*",$/;"	s
frameworks	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "frameworks": ["espidf", "arduino"],$/;"	a
frameworks	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "frameworks": "arduino",$/;"	s
framingError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool framingError()  { auto r = m_framingError; m_framingError = false; return r; }$/;"	f	class:fabgl::SerialPort	typeref:typename:bool
free	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  void free(void * mem) { if (mem) markFree((uint8_t*)mem - m_mem - 2); }$/;"	f	class:fabgl::LightMemoryPool	typeref:typename:void
free32	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void free32(void * ptr)$/;"	f	namespace:fabgl	typeref:typename:void
freeBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::freeBuffers()$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
freeBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::freeBuffers()$/;"	f	class:fabgl::VGATextController	typeref:typename:void
freeChildren	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::freeChildren()$/;"	f	class:fabgl::uiWindow	typeref:typename:void
freeFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::freeFont()$/;"	f	class:fabgl::Terminal	typeref:typename:void
freeGlyphsMap	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::freeGlyphsMap()$/;"	f	class:fabgl::Terminal	typeref:typename:void
freeLUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void GraphicsAdapter::freeLUT()$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
freeMemLabel1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  uiLabel * freeMemLabel1, * freeMemLabel2;$/;"	m	class:MyApp	typeref:typename:uiLabel *
freeMemLabel2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  uiLabel * freeMemLabel1, * freeMemLabel2;$/;"	m	class:MyApp	typeref:typename:uiLabel *
freePoints	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  bool          freePoints; \/\/ deallocate points after drawing$/;"	m	struct:fabgl::Path	typeref:typename:bool
freePool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  void freePool() {$/;"	f	class:BasicJsonDocument	typeref:typename:void
freeSprites	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::freeSprites()$/;"	f	class:fabgl::Terminal	typeref:typename:void
freeTabStops	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::freeTabStops()$/;"	f	class:fabgl::Terminal	typeref:typename:void
freeViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::freeViewPort()$/;"	f	class:fabgl::TFTController	typeref:typename:void
freeViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^void CVBSBaseController::freeViewPort()$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
freeViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^void CVBSPalettedController::freeViewPort()$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:void
freeViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::freeViewPort()$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
freeViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::freeViewPort()$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
freeViewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^void VGAPalettedController::freeViewPort()$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
freq	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^        uint32_t freq;$/;"	m	struct:NRF51SPIOutput::saveData	typeref:typename:uint32_t
freq_end	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^  int freq_end;$/;"	m	struct:playsounddata	typeref:typename:int
freq_end	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^  int freq_end;$/;"	m	struct:playsounddata	typeref:typename:int
freq_start	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^  int freq_start;$/;"	m	struct:playsounddata	typeref:typename:int
freq_start	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^  int freq_start;$/;"	m	struct:playsounddata	typeref:typename:int
frequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  int32_t   frequency;$/;"	m	struct:fabgl::I2CJobInfo	typeref:typename:int32_t
frequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t frequency() { return m_frequency; }$/;"	f	class:fabgl::VICNoiseGenerator	typeref:typename:uint16_t
frequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int           frequency;       \/**< Pixel frequency (in Hz) *\/$/;"	m	struct:fabgl::VGATimings	typeref:typename:int
frequency	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t frequency;$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
frequency	examples/test/lib/JFixLib/src/Event/JOsc.h	/^  float frequency = 0.1;$/;"	m	class:JOsc	typeref:typename:float
frogger07_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/frogger07.h	/^char const * frogger07_filename = "Frogget07 16K.PRG";$/;"	v	typeref:typename:char const *
frogger07_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/frogger07.h	/^const uint8_t frogger07_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
froggie_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/froggie.h	/^char const * froggie_filename = "Froggie.PRG";$/;"	v	typeref:typename:char const *
froggie_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/froggie.h	/^const uint8_t froggie_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
fromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  static JsonArray fromJson(JsonVariant src) {$/;"	f	struct:Converter	typeref:typename:JsonArray
fromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  static JsonArrayConst fromJson(JsonVariantConst src) {$/;"	f	struct:Converter	typeref:typename:JsonArrayConst
fromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  static JsonObject fromJson(JsonVariant src) {$/;"	f	struct:Converter	typeref:typename:JsonObject
fromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  static JsonObjectConst fromJson(JsonVariantConst src) {$/;"	f	struct:Converter	typeref:typename:JsonObjectConst
fromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static JsonString fromJson(JsonVariantConst src) {$/;"	f	struct:Converter	typeref:typename:JsonString
fromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static T fromJson(JsonVariantConst src) {$/;"	f	struct:Converter	typeref:typename:T
fromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static bool fromJson(JsonVariantConst src) {$/;"	f	struct:Converter	typeref:typename:bool
fromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static const char* fromJson(JsonVariantConst src) {$/;"	f	struct:Converter	typeref:typename:const char *
fromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static decltype(nullptr) fromJson(JsonVariantConst) {$/;"	f	struct:Converter	typeref:typename:decltype(nullptr)
fromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  static JsonVariant fromJson(JsonVariant src) {$/;"	f	struct:Converter	typeref:typename:JsonVariant
fromJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  static JsonVariantConst fromJson(JsonVariantConst src) {$/;"	f	struct:Converter	typeref:typename:JsonVariantConst
from_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_convertible.hpp	/^  static From& from_;$/;"	m	struct:is_convertible	typeref:typename:From &
frombyte	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def frombyte(s):$/;"	f
fromdword	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def fromdword(s):$/;"	f
fromword	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def fromword(s):$/;"	f
frontPorch_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          frontPorch_us;                  \/\/ front porch duration$/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
fuckit	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^volatile uint32_t fuckit;$/;"	v	typeref:typename:volatile uint32_t
fx	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  double fx;$/;"	m	struct:MySprite	typeref:typename:double
fx	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  double fx;$/;"	m	struct:MySprite	typeref:typename:double
fx	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  double fx;$/;"	m	struct:MySprite	typeref:typename:double
fy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  double fy;$/;"	m	struct:MySprite	typeref:typename:double
fy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  double fy;$/;"	m	struct:MySprite	typeref:typename:double
fy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  double fy;$/;"	m	struct:MySprite	typeref:typename:double
g	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^        uint8_t g;      \/\/\/< CRGB::green channel value of the color entry$/;"	m	struct:__anon875718a3020a::__anon875718a30308	typeref:typename:uint8_t
g	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t g;      \/\/\/< Green channel value$/;"	m	union:CRGB::__anonbcc8608a070a::__anonbcc8608a0808::__anonbcc8608a0a0a	typeref:typename:uint8_t
gBlue_mW	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^static const uint8_t gBlue_mW  = 15 * 5; \/\/\/< 15mA @ 5v = 75mW$/;"	v	typeref:typename:const uint8_t	file:
gControllers	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static CLEDController * gControllers[FASTLED_I2S_MAX_CONTROLLERS];$/;"	v	typeref:typename:CLEDController * []
gControllers	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^static ESP32RMTController * gControllers[FASTLED_RMT_MAX_CONTROLLERS];$/;"	v	typeref:typename:ESP32RMTController * []	file:
gCurBuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static int gCurBuffer = 0;$/;"	v	typeref:typename:int
gDark_mW	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^static const uint8_t gDark_mW  =  1 * 5; \/\/\/<  1mA @ 5v =  5mW$/;"	v	typeref:typename:const uint8_t	file:
gDoneFilling	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static bool gDoneFilling = false;$/;"	v	typeref:typename:bool
gGreen_mW	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^static const uint8_t gGreen_mW = 11 * 5; \/\/\/< 11mA @ 5v = 55mW$/;"	v	typeref:typename:const uint8_t	file:
gI2S_intr_handle	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static intr_handle_t gI2S_intr_handle = NULL;$/;"	v	typeref:typename:intr_handle_t
gInitialized	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static bool gInitialized = false;$/;"	v	typeref:typename:bool
gInitialized	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^static bool gInitialized = false;$/;"	v	typeref:typename:bool	file:
gMCU_mW	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^static const uint8_t gMCU_mW  =  25 * 5; \/\/ 25mA @ 5v = 125 mW$/;"	v	typeref:typename:const uint8_t	file:
gMaxChannel	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^int ESP32RMTController::gMaxChannel;$/;"	m	class:ESP32RMTController	typeref:typename:int
gMaxChannel	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    static int     gMaxChannel;$/;"	m	class:ESP32RMTController	typeref:typename:int
gMaxPowerIndicatorLEDPinNumber	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; \/\/ default = Arduino onboard LED pin.  set/;"	v	typeref:typename:uint8_t	file:
gMemBlocks	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^int ESP32RMTController::gMemBlocks;$/;"	m	class:ESP32RMTController	typeref:typename:int
gMemBlocks	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    static int     gMemBlocks;$/;"	m	class:ESP32RMTController	typeref:typename:int
gNext	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^static int gNext = 0;$/;"	v	typeref:typename:int	file:
gNumControllers	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static int gNumControllers = 0;$/;"	v	typeref:typename:int
gNumControllers	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^static int gNumControllers = 0;$/;"	v	typeref:typename:int	file:
gNumDone	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^static int gNumDone = 0;$/;"	v	typeref:typename:int	file:
gNumStarted	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static int gNumStarted = 0;$/;"	v	typeref:typename:int
gNumStarted	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^static int gNumStarted = 0;$/;"	v	typeref:typename:int	file:
gOnChannel	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^static ESP32RMTController * gOnChannel[FASTLED_RMT_MAX_CHANNELS];$/;"	v	typeref:typename:ESP32RMTController * []	file:
gOneBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static uint32_t gOneBit[40]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,/;"	v	typeref:typename:uint32_t[40]
gPixelBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static uint8_t gPixelBits[NUM_COLOR_CHANNELS][8][4];$/;"	v	typeref:typename:uint8_t[][8][4]
gPixelRow	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static uint8_t gPixelRow[NUM_COLOR_CHANNELS][32];$/;"	v	typeref:typename:uint8_t[][32]
gPulsesPerBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static int      gPulsesPerBit = 0;$/;"	v	typeref:typename:int
gRMT_intr_handle	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^static intr_handle_t gRMT_intr_handle = NULL;$/;"	v	typeref:typename:intr_handle_t	file:
gRed_mW	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^static const uint8_t gRed_mW   = 16 * 5; \/\/\/< 16mA @ 5v = 80mW$/;"	v	typeref:typename:FASTLED_NAMESPACE_BEGIN const uint8_t	file:
gState	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	SPIState gState;$/;"	m	class:ARMHardwareSPIOutput	typeref:typename:SPIState
gState	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	SPIState gState;$/;"	m	class:ARMHardwareSPIOutput	typeref:typename:SPIState
gTX_sem	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static xSemaphoreHandle gTX_sem = NULL;$/;"	v	typeref:typename:xSemaphoreHandle
gTX_sem	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^static xSemaphoreHandle gTX_sem = NULL;$/;"	v	typeref:typename:xSemaphoreHandle	file:
gTimeErrorAccum256ths	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^static uint8_t gTimeErrorAccum256ths;$/;"	v	typeref:typename:uint8_t
gWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^CMinWait<50>   gWait;$/;"	v	typeref:typename:CMinWait<50>
gZeroBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static uint32_t gZeroBit[40] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,/;"	v	typeref:typename:uint32_t[40]
galaxy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^Bitmap galaxy = Bitmap(32, 32, &galaxy_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
galaxy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap galaxy = Bitmap(32, 32, &galaxy_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
galaxy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap galaxy = Bitmap(32, 32, &galaxy_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
galaxy_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^const uint8_t galaxy_data[] = {$/;"	v	typeref:typename:const uint8_t[]
galaxy_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^const uint8_t galaxy_data[] = {$/;"	v	typeref:typename:const uint8_t[]
galaxy_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^const uint8_t galaxy_data[] = {$/;"	v	typeref:typename:const uint8_t[]
gameplayers	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  int gameplayers;  \/\/ 1 o 2$/;"	m	struct:ScoreCard	typeref:typename:int
games_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/games_dsk.h	/^const uint8_t games_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
games_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/games_dsk.h	/^unsigned int games_dsk_len = 337568;$/;"	v	typeref:typename:unsigned int
garbageCollect	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  bool garbageCollect() {$/;"	f	class:BasicJsonDocument	typeref:typename:bool
garbageCollect	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp	/^  void garbageCollect() {$/;"	f	class:StaticJsonDocument	typeref:typename:void
gate	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^    bool    gate;         \/\/ date (1 = timer running)$/;"	m	struct:fabgl::PIT8253::TimerInfo	typeref:typename:bool
gcmode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^enum gcmode { MODE_DIRECTIONAL, MODE_ABSOLUTEPOS, MODE_RELATIVEPOS, MODE_NONE };$/;"	g
gcmode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^enum gcmode { MODE_DIRECTIONAL, MODE_ABSOLUTEPOS, MODE_RELATIVEPOS, MODE_NONE };$/;"	g
generatePaintEvents	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::generatePaintEvents(Rect const & paintRect)$/;"	f	class:fabgl::uiWindow	typeref:typename:void
genericAbsDrawLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericAbsDrawLine(int X1, int Y1, int X2, int Y2, RGB888 const & color, TPreparePixel pr/;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericCopyRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericCopyRect(Rect const & source, Rect & updateRect, TRawGetRow rawGetRow, TRawGetPixe/;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericDrawEllipse	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericDrawEllipse(Size const & size, Rect & updateRect, TPreparePixel preparePixel, TRaw/;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericDrawGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericDrawGlyph(Glyph const & glyph, GlyphOptions glyphOptions, RGB888 penColor, RGB888 /;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericDrawGlyph_full	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericDrawGlyph_full(Glyph const & glyph, GlyphOptions glyphOptions, RGB888 penColor, RG/;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericDrawGlyph_light	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericDrawGlyph_light(Glyph const & glyph, GlyphOptions glyphOptions, RGB888 penColor, R/;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericHScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericHScroll(int scroll, Rect & updateRect,$/;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericInvertRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericInvertRect(Rect const & rect, Rect & updateRect, TRawInvertRow rawInvertRow)$/;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericRawDrawBitmap_Mask	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericRawDrawBitmap_Mask(int destX, int destY, Bitmap const * bitmap, TBackground * save/;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericRawDrawBitmap_Native	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericRawDrawBitmap_Native(int destX, int destY, TDataType * data, int width, int X1, in/;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericRawDrawBitmap_RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericRawDrawBitmap_RGBA2222(int destX, int destY, Bitmap const * bitmap, TBackground * /;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericRawDrawBitmap_RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericRawDrawBitmap_RGBA8888(int destX, int destY, Bitmap const * bitmap, TBackground * /;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericSetPixelAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericSetPixelAt(PixelDesc const & pixelDesc, Rect & updateRect, TPreparePixel preparePi/;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericSwapFGBG	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericSwapFGBG(Rect const & rect, Rect & updateRect, TPreparePixel preparePixel, TRawGet/;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
genericVScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void genericVScroll(int scroll, Rect & updateRect,$/;"	f	class:fabgl::GenericBitmappedDisplayController	typeref:typename:void
get	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void DateTime::get(int * year, int * month, int * day, int * hour, int * minutes, int * seconds)$/;"	f	class:DateTime	typeref:typename:void
get	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint8_t const * get() { return m_prg; }$/;"	f	class:PRGCreator	typeref:typename:uint8_t const *
get	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.h	/^  static CodePage const * get(uint16_t codepage, CodePage const * defaultValue = &CodePage437) {$/;"	f	struct:fabgl::CodePages	typeref:typename:CodePage const *
get	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  DirItem const * get(int index) { return m_items + index; }$/;"	f	class:fabgl::FileBrowser	typeref:typename:DirItem const *
get	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  char const * get(int index) { return m_items[index]; }$/;"	f	class:fabgl::StringList	typeref:typename:char const *
get	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static VideoMode get()           { return s_videoMode; }$/;"	f	struct:fabgl::CurrentVideoMode	typeref:typename:VideoMode
get	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  char const * get() { return m_text; }$/;"	f	class:fabgl::LineEditor	typeref:typename:char const *
getAbsolutePosFCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^size_t BDOS::getAbsolutePosFCB(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:size_t
getAbsoluteRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int Terminal::getAbsoluteRow(int Y)$/;"	f	class:fabgl::Terminal	typeref:typename:int
getActualBrushColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^RGB888 IRAM_ATTR BitmappedDisplayController::getActualBrushColor()$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:RGB888 IRAM_ATTR
getActualPenColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^RGB888 IRAM_ATTR BitmappedDisplayController::getActualPenColor()$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:RGB888 IRAM_ATTR
getAdjustment	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CRGB getAdjustment(uint8_t scale) {$/;"	f	class:CLEDController	typeref:typename:CRGB
getAllExtents	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool      getAllExtents;$/;"	m	struct:FileSearchState	typeref:typename:bool
getAllFiles	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool      getAllFiles;$/;"	m	struct:FileSearchState	typeref:typename:bool
getAlpha	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^int Bitmap::getAlpha(int x, int y)$/;"	f	class:fabgl::Bitmap	typeref:typename:int
getApbFrequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^uint32_t getApbFrequency()$/;"	f	namespace:fabgl	typeref:typename:uint32_t
getAverageLight	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline uint8_t getAverageLight( )  const {$/;"	f	struct:CRGB	typeref:typename:uint8_t
getBGColor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static Color getBGColor() {$/;"	f	struct:ConfDialogApp	typeref:typename:Color
getBaudRateIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static int getBaudRateIndex() {$/;"	f	struct:ConfDialogApp	typeref:typename:int
getBitmapSavePixelSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  int getBitmapSavePixelSize() { return 1; }$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:int
getBitmapSavePixelSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int getBitmapSavePixelSize() { return 2; }$/;"	f	class:fabgl::TFTController	typeref:typename:int
getBitmapSavePixelSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.h	/^  int getBitmapSavePixelSize() { return 1; }$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:int
getBitmapSavePixelSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.h	/^  int getBitmapSavePixelSize() { return 1; }$/;"	f	class:fabgl::VGA16Controller	typeref:typename:int
getBitmapSavePixelSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.h	/^  int getBitmapSavePixelSize() { return 1; }$/;"	f	class:fabgl::VGA2Controller	typeref:typename:int
getBitmapSavePixelSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.h	/^  int getBitmapSavePixelSize() { return 1; }$/;"	f	class:fabgl::VGA4Controller	typeref:typename:int
getBitmapSavePixelSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.h	/^  int getBitmapSavePixelSize() { return 1; }$/;"	f	class:fabgl::VGA8Controller	typeref:typename:int
getBitmapSavePixelSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.h	/^  int getBitmapSavePixelSize() { return 1; }$/;"	f	class:fabgl::VGAController	typeref:typename:int
getBitmapSavePixelSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  int getBitmapSavePixelSize() { return 1; }$/;"	f	class:fabgl::VGADirectController	typeref:typename:int
getBitsPerChannel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  uint8_t getBitsPerChannel()                     { return m_bitsPerChannel; }$/;"	f	class:fabgl::VGABaseController	typeref:typename:uint8_t
getBootInfo	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static int getBootInfo() {$/;"	f	struct:ConfDialogApp	typeref:typename:int
getBrightness	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	uint8_t getBrightness() { return m_Scale; }$/;"	f	class:CFastLED	typeref:typename:uint8_t
getBrightness	examples/test/lib/JFixLib/src/JFixture.h	/^  float getBrightness(){$/;"	f	class:JFixture	typeref:typename:float
getBtnRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Rect uiFrame::getBtnRect(int buttonIndex)$/;"	f	class:fabgl::uiFrame	typeref:typename:Rect
getButtonRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Rect uiCustomComboBox::getButtonRect()$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:Rect
getCPUFrequencyMHz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^uint32_t getCPUFrequencyMHz()$/;"	f	namespace:fabgl	typeref:typename:uint32_t
getCharInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uint8_t const * uiTextEdit::getCharInfo(char ch, int * width)$/;"	f	class:fabgl::uiTextEdit	typeref:typename:uint8_t const *
getCharWidthAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int Terminal::getCharWidthAt(int row)$/;"	f	class:fabgl::Terminal	typeref:typename:int
getChipPackage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^ChipPackage getChipPackage()$/;"	f	namespace:fabgl	typeref:typename:ChipPackage
getClippingRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^Rect Canvas::getClippingRect()$/;"	f	class:fabgl::Canvas	typeref:typename:Rect
getColFromMouseX	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiTextEdit::getColFromMouseX(int mouseX)$/;"	f	class:fabgl::uiTextEdit	typeref:typename:int
getColorBurst	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  double getColorBurst(bool oddLine, double phase) const {$/;"	f	struct:fabgl::CVBS_I_NTSC_M	typeref:typename:double	file:
getColorBurst	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  double getColorBurst(bool oddLine, double phase) const {$/;"	f	struct:fabgl::CVBS_I_PAL_B	typeref:typename:double	file:
getColumns	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  int getColumns()                         { return s_columns; }$/;"	f	class:fabgl::VGATextController	typeref:typename:int
getColumns	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int getColumns() { return m_columns; }$/;"	f	class:fabgl::Terminal	typeref:typename:int
getColumnsAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int Terminal::getColumnsAt(int row)$/;"	f	class:fabgl::Terminal	typeref:typename:int
getColumnsIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static int getColumnsIndex() {$/;"	f	struct:ConfDialogApp	typeref:typename:int
getComposite	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  double getComposite(bool oddLine, double phase, double red, double green, double blue, double /;"	f	struct:fabgl::CVBS_I_NTSC_M	typeref:typename:double	file:
getComposite	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  double getComposite(bool oddLine, double phase, double red, double green, double blue, double /;"	f	struct:fabgl::CVBS_I_PAL_B	typeref:typename:double	file:
getCorrection	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CRGB getCorrection() { return m_ColorCorrection; }$/;"	f	class:CLEDController	typeref:typename:CRGB
getCurrentDir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^char const * BDOS::getCurrentDir()$/;"	f	class:BDOS	typeref:typename:char const *
getCurrentDir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^char const * BDOS::getCurrentDir(int drive)$/;"	f	class:BDOS	typeref:typename:char const *
getCurrentDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::getCurrentDrive()$/;"	f	class:BDOS	typeref:typename:int
getCurrentDriveType	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^DriveType FileBrowser::getCurrentDriveType()$/;"	f	class:fabgl::FileBrowser	typeref:typename:DriveType
getCurrentUser	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::getCurrentUser()$/;"	f	class:BDOS	typeref:typename:int
getCursorCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int TerminalController::getCursorCol()$/;"	f	class:fabgl::TerminalController	typeref:typename:int
getCursorPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::getCursorPos(int * col, int * row)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
getCursorRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int TerminalController::getCursorRow()$/;"	f	class:fabgl::TerminalController	typeref:typename:int
getCycleCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline __attribute__((always_inline)) uint32_t getCycleCount() {$/;"	f	namespace:fabgl	typeref:typename:uint32_t
getDMABuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void volatile * VGABaseController::getDMABuffer(int index, int * length)$/;"	f	class:fabgl::VGABaseController	typeref:typename:void volatile *
getDX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  int getDX() { int v = dx; dx = 0; return v;  }$/;"	f	struct:GameControllerMouse	typeref:typename:int
getDX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual int  getDX()      { return 0;  }$/;"	f	struct:GameController	typeref:typename:int
getDX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  int getDX() { int v = dx; dx = 0; return v;  }$/;"	f	struct:GameControllerMouse	typeref:typename:int
getDX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual int  getDX()      { return 0;  }$/;"	f	struct:GameController	typeref:typename:int
getDY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  int getDY() { int v = dy; dy = 0; return v;  }$/;"	f	struct:GameControllerMouse	typeref:typename:int
getDY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual int  getDY()      { return 0;  }$/;"	f	struct:GameController	typeref:typename:int
getDY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  int getDY() { int v = dy; dy = 0; return v;  }$/;"	f	struct:GameControllerMouse	typeref:typename:int
getDY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual int  getDY()      { return 0;  }$/;"	f	struct:GameController	typeref:typename:int
getData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp	/^  FORCE_INLINE VariantData* getData() const {$/;"	f	class:ElementProxy	typeref:typename:FORCE_INLINE VariantData *
getData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  detail::VariantData* getData() const {$/;"	f	class:JsonArray	typeref:typename:detail::VariantData *
getData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  const detail::VariantData* getData() const {$/;"	f	class:JsonArrayConst	typeref:typename:const detail::VariantData *
getData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  const detail::VariantData* getData() const {$/;"	f	class:JsonDocument	typeref:typename:const detail::VariantData *
getData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  detail::VariantData* getData() {$/;"	f	class:JsonDocument	typeref:typename:detail::VariantData *
getData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  detail::VariantData* getData() const {$/;"	f	class:JsonObject	typeref:typename:detail::VariantData *
getData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  const detail::VariantData* getData() const {$/;"	f	class:JsonObjectConst	typeref:typename:const detail::VariantData *
getData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp	/^  FORCE_INLINE VariantData* getData() const {$/;"	f	class:MemberProxy	typeref:typename:FORCE_INLINE VariantData *
getData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  FORCE_INLINE detail::VariantData* getData() const {$/;"	f	class:JsonVariant	typeref:typename:FORCE_INLINE detail::VariantData *
getData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  const detail::VariantData* getData() const {$/;"	f	class:JsonVariantConst	typeref:typename:const detail::VariantData *
getData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantAttorney.hpp	/^  FORCE_INLINE static typename ResultOfGetData<TClient>::type getData($/;"	f	class:VariantAttorney	typeref:typename:FORCE_INLINE typename ResultOfGetData<TClient>::type
getData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE VariantData* getData() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE VariantData *
getData	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^int PS2Controller::getData(int PS2Port, int timeOutMS)$/;"	f	class:fabgl::PS2Controller	typeref:typename:int
getData	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^int PS2Device::getData(int timeOutMS)$/;"	f	class:fabgl::PS2Device	typeref:typename:int
getDataLenIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static int getDataLenIndex() {$/;"	f	struct:ConfDialogApp	typeref:typename:int
getDateTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::getDateTime(int * year, int * month, int * day, int * hour, int * minutes, int * secon/;"	f	class:HAL	typeref:typename:void
getDefaultScanlineBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^uint8_t volatile * VGADirectController::getDefaultScanlineBuffer(int scanline)$/;"	f	class:fabgl::VGADirectController	typeref:typename:uint8_t volatile *
getDirectoryLabelFlags	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^uint8_t BDOS::getDirectoryLabelFlags(int drive)$/;"	f	class:BDOS	typeref:typename:uint8_t
getDisplayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  BitmappedDisplayController * getDisplayController()                        { return m_dispCtrl/;"	f	class:fabgl::InputBox	typeref:typename:BitmappedDisplayController *
getDither	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    inline uint8_t getDither() { return m_DitherMode; }$/;"	f	class:CLEDController	typeref:typename:uint8_t
getDriveFromFCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::getDriveFromFCB(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:int
getDriveMediaTableAddr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^uint32_t BIOS::getDriveMediaTableAddr(int drive)$/;"	f	class:BIOS	typeref:typename:uint32_t
getDriveMountPath	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  char const * getDriveMountPath(int drive)      { return drive < MAXDRIVERS ? m_mounts[drive] :/;"	f	class:HAL	typeref:typename:char const *
getDriveType	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^DriveType FileBrowser::getDriveType(char const * path)$/;"	f	class:fabgl::FileBrowser	typeref:typename:DriveType
getEditControlSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Size uiCustomComboBox::getEditControlSize()$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:Size
getEditRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Rect uiTextEdit::getEditRect()$/;"	f	class:fabgl::uiTextEdit	typeref:typename:Rect
getElapsed	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    TIMETYPE getElapsed() { return getTime() - mPrevTrigger; }$/;"	f	class:CEveryNTime	typeref:typename:TIMETYPE
getElapsed	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    timeType getElapsed() { return getTime() - mPrevTrigger; }$/;"	f	class:CEveryNTimePeriods	typeref:typename:timeType
getElement	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline VariantData* CollectionData::getElement(size_t index) const {$/;"	f	class:CollectionData	typeref:typename:VariantData *
getElement	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  VariantData* getElement(size_t index) const {$/;"	f	class:VariantData	typeref:typename:VariantData *
getEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^bool uiApp::getEvent(uiEvent * event, int timeOutMS)$/;"	f	class:fabgl::uiApp	typeref:typename:bool
getEventByID	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  Event *getEventByID(int id) {$/;"	f	class:JFixtureGraphics	typeref:typename:Event *
getFGColor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static Color getFGColor() {$/;"	f	struct:ConfDialogApp	typeref:typename:Color
getFPS	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	uint16_t getFPS() { return m_nFPS; }$/;"	f	class:CFastLED	typeref:typename:uint16_t
getFSInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::getFSInfo(DriveType driveType, int drive, int64_t * total, int64_t * used)$/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
getFileFromCache	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^FILE * BDOS::getFileFromCache(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:FILE *
getFilenameFromFCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::getFilenameFromFCB(uint16_t FCBaddr, char * filename)$/;"	f	class:BDOS	typeref:typename:void
getFirstFreeSprite	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  int getFirstFreeSprite()$/;"	f	struct:Race	typeref:typename:int
getFirstItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  MachineConfItem * getFirstItem()     { return m_itemsList; }$/;"	f	class:MachineConf	typeref:typename:MachineConfItem *
getFirstSelected	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int StringList::getFirstSelected()$/;"	f	class:fabgl::StringList	typeref:typename:int
getFixedWidthFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabfonts.cpp	/^FontInfo const * getFixedWidthFont(int index)$/;"	f	namespace:fabgl	typeref:typename:FontInfo const *
getFixedWidthFontCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabfonts.cpp	/^int getFixedWidthFontCount()$/;"	f	namespace:fabgl	typeref:typename:int
getFlowCtrl	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static FlowControl getFlowCtrl() {$/;"	f	struct:ConfDialogApp	typeref:typename:FlowControl
getFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  FontInfo const * getFont()               { return m_font; }$/;"	f	class:fabgl::VGATextController	typeref:typename:FontInfo const *
getFontIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static int getFontIndex() {$/;"	f	struct:ConfDialogApp	typeref:typename:int
getFontInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.h	/^  FontInfo const * getFontInfo() { return m_fontInfo; }$/;"	f	class:fabgl::Canvas	typeref:typename:FontInfo const *
getFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Bitmap * getFrame() { return frames ? frames[currentFrame] : nullptr; }$/;"	f	struct:fabgl::Sprite	typeref:typename:Bitmap *
getFrameIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int getFrameIndex() { return currentFrame; }$/;"	f	struct:fabgl::Sprite	typeref:typename:int
getFrameItemAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiFrameItem uiFrame::getFrameItemAt(int x, int y)$/;"	f	class:fabgl::uiFrame	typeref:typename:uiFrameItem
getFreeZone	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  void getFreeZone(char** zoneStart, size_t* zoneSize) const {$/;"	f	class:MemoryPool	typeref:typename:void
getFullPath	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int FileBrowser::getFullPath(char const * name, char * outPath, int maxlen)$/;"	f	class:fabgl::FileBrowser	typeref:typename:int
getGate	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^  bool getGate(int timerIndex) { return m_timer[timerIndex].gate; }$/;"	f	class:fabgl::PIT8253	typeref:typename:bool
getGlyphOptionsAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^GlyphOptions Terminal::getGlyphOptionsAt(int X, int Y)$/;"	f	class:fabgl::Terminal	typeref:typename:GlyphOptions
getGraphHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  int getGraphHeight()                                     { return m_VGADCtrl.getViewPortHeight/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:int
getGraphWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  int getGraphWidth()                                      { return m_VGADCtrl.getViewPortWidth(/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:int
getGripRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Rect uiSlider::getGripRect()$/;"	f	class:fabgl::uiSlider	typeref:typename:Rect
getHScrollBarRects	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Rect uiScrollableControl::getHScrollBarRects(Rect * leftButton, Rect * rightButton, Rect * bar)$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:Rect
getHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.h	/^  int getHeight() { return m_displayController->getViewPortHeight(); }$/;"	f	class:fabgl::Canvas	typeref:typename:int
getHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int getHeight() { return frames[currentFrame]->height; }$/;"	f	struct:fabgl::Sprite	typeref:typename:int
getHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  int getHeight() { return m_height; }$/;"	f	class:fabgl::Scene	typeref:typename:int
getHighestPriorityBitNum	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^int PIC8259::getHighestPriorityBitNum(uint8_t value)$/;"	f	class:fabgl::PIC8259	typeref:typename:int
getI8042	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  i8042 * getI8042()                   { return &m_i8042; }$/;"	f	class:Machine	typeref:typename:i8042 *
getIFF1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  int getIFF1()                               { return state.iff1; }$/;"	f	class:fabgl::Z80	typeref:typename:int
getIFF2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  int getIFF2()                               { return state.iff2; }$/;"	f	class:fabgl::Z80	typeref:typename:int
getIM	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  int getIM()                                 { return state.im; }$/;"	f	class:fabgl::Z80	typeref:typename:int
getINTActiveHigh	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  bool getINTActiveHigh(uint8_t hwAddr = 0)                              { return readReg(MCP_IO/;"	f	class:fabgl::MCP23S17	typeref:typename:bool
getIRQn	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static IRQn_Type       getIRQn() { return s_PWM_IRQ; }$/;"	f	class:PWM_Arbiter	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE IRQn_Type
getItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^MachineConfItem * MachineConf::getItem(int index)$/;"	f	class:MachineConf	typeref:typename:MachineConfItem *
getItemAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiScrollBarItem uiScrollableControl::getItemAt(int x, int y)$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:uiScrollBarItem
getItemAtMousePos	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiCustomListBox::getItemAtMousePos(int mouseX, int mouseY)$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:int
getKbdLayoutIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static int getKbdLayoutIndex() {$/;"	f	struct:ConfDialogApp	typeref:typename:int
getKeyFromBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::getKeyFromBuffer()$/;"	f	class:BIOS	typeref:typename:void
getKeyFromKeyboard	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::getKeyFromKeyboard()$/;"	f	class:BIOS	typeref:typename:void
getKeyStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  bool getKeyStatus( VirtualKey key )$/;"	f	struct:GameControllerKeys	typeref:typename:bool
getKeyStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  bool getKeyStatus( VirtualKey key )$/;"	f	struct:GameControllerKeys	typeref:typename:bool
getKeyboardFlags	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::getKeyboardFlags()$/;"	f	class:BIOS	typeref:typename:void
getLEDs	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^void Keyboard::getLEDs(bool * numLock, bool * capsLock, bool * scrollLock)$/;"	f	class:fabgl::Keyboard	typeref:typename:void
getLastResult	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  InputResult getLastResult()                          { return m_lastResult; }$/;"	f	class:fabgl::InputBox	typeref:typename:InputResult
getLastTriggerTime	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    TIMETYPE getLastTriggerTime() { return mPrevTrigger; }$/;"	f	class:CEveryNTime	typeref:typename:TIMETYPE
getLastTriggerTime	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    timeType getLastTriggerTime() { return mPrevTrigger; }$/;"	f	class:CEveryNTimePeriods	typeref:typename:timeType
getLayout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  KeyboardLayout const * getLayout() { return m_layout; }$/;"	f	class:fabgl::Keyboard	typeref:typename:KeyboardLayout const *
getListBoxParent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * getListBoxParent() { return m_listBoxParent; }$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:uiWindow *
getLuma	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline uint8_t getLuma ( )  const {$/;"	f	struct:CRGB	typeref:typename:uint8_t
getMC146818	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  MC146818 * getMC146818()             { return &m_MC146818; }$/;"	f	class:Machine	typeref:typename:MC146818 *
getMaxBufferLength	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  int getMaxBufferLength() { return 128; }$/;"	f	class:fabgl::I2C	typeref:typename:int
getMaxCyclesPerFill	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    uint32_t IRAM_ATTR getMaxCyclesPerFill() const { return mMaxCyclesPerFill; }$/;"	f	class:ESP32RMTController	typeref:typename:uint32_t IRAM_ATTR
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    virtual uint16_t getMaxRefreshRate() const { return 0; }$/;"	f	class:CLEDController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/clockless_apollo3.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/clockless_arm_d21.h	/^    virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:InlineBlockClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:InlineBlockClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/clockless_arm_kl26.h	/^  virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:FlexibleInlineBlockClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    virtual uint16_t getMaxRefreshRate() const { return 800; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^    virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:InlineBlockClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^    virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:InlineBlockClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:InlineBlockClocklessController	typeref:typename:uint16_t
getMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^	virtual uint16_t getMaxRefreshRate() const { return 400; }$/;"	f	class:ClocklessController	typeref:typename:uint16_t
getMember	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline VariantData* CollectionData::getMember(TAdaptedString key) const {$/;"	f	class:CollectionData	typeref:typename:VariantData *
getMember	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  inline detail::VariantData* getMember(TAdaptedString key) const {$/;"	f	class:JsonObject	typeref:typename:detail::VariantData *
getMember	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  const detail::VariantData* getMember(TAdaptedString key) const {$/;"	f	class:JsonObjectConst	typeref:typename:const detail::VariantData *
getMember	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  VariantData* getMember(TAdaptedString key) const {$/;"	f	class:VariantData	typeref:typename:VariantData *
getNextCode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^uint8_t Terminal::getNextCode(bool processCtrlCodes)$/;"	f	class:fabgl::Terminal	typeref:typename:uint8_t
getNextDelta	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^bool Mouse::getNextDelta(MouseDelta * delta, int timeOutMS, bool requestResendOnTimeOut)$/;"	f	class:fabgl::Mouse	typeref:typename:bool
getNextFreeFocusIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int getNextFreeFocusIndex() { return m_nextFreeFocusIndex++; }$/;"	f	class:fabgl::uiFrame	typeref:typename:int
getNextHistoryItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^char const * BDOS::getNextHistoryItem()$/;"	f	class:BDOS	typeref:typename:char const *
getNextPacket	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^bool Mouse::getNextPacket(MousePacket * packet, int timeOutMS, bool requestResendOnTimeOut)$/;"	f	class:fabgl::Mouse	typeref:typename:bool
getNextScancode	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^int Keyboard::getNextScancode(int timeOutMS, bool requestResendOnTimeOut)$/;"	f	class:fabgl::Keyboard	typeref:typename:int
getNextStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^MouseStatus Mouse::getNextStatus(int timeOutMS)$/;"	f	class:fabgl::Mouse	typeref:typename:MouseStatus
getNextVirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^VirtualKey Keyboard::getNextVirtualKey(bool * keyDown, int timeOutMS)$/;"	f	class:fabgl::Keyboard	typeref:typename:VirtualKey
getNextVirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^bool Keyboard::getNextVirtualKey(VirtualKeyItem * item, int timeOutMS)$/;"	f	class:fabgl::Keyboard	typeref:typename:bool
getOpenFilesCount	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^int BDOS::getOpenFilesCount()$/;"	f	class:BDOS	typeref:typename:int
getOpenSessions	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^int Supervisor::getOpenSessions()$/;"	f	class:Supervisor	typeref:typename:int
getOrAddElement	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline VariantData* CollectionData::getOrAddElement(size_t index,$/;"	f	class:CollectionData	typeref:typename:VariantData *
getOrAddElement	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  VariantData* getOrAddElement(size_t index, MemoryPool* pool) {$/;"	f	class:VariantData	typeref:typename:VariantData *
getOrAddMember	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline VariantData* CollectionData::getOrAddMember(TAdaptedString key,$/;"	f	class:CollectionData	typeref:typename:VariantData *
getOrAddMember	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  VariantData* getOrAddMember(TAdaptedString key, MemoryPool* pool) {$/;"	f	class:VariantData	typeref:typename:VariantData *
getOrCreateData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp	/^  FORCE_INLINE VariantData* getOrCreateData() const {$/;"	f	class:ElementProxy	typeref:typename:FORCE_INLINE VariantData *
getOrCreateData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  detail::VariantData* getOrCreateData() const {$/;"	f	class:JsonArray	typeref:typename:detail::VariantData *
getOrCreateData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  detail::VariantData* getOrCreateData() {$/;"	f	class:JsonDocument	typeref:typename:detail::VariantData *
getOrCreateData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  detail::VariantData* getOrCreateData() const {$/;"	f	class:JsonObject	typeref:typename:detail::VariantData *
getOrCreateData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp	/^  FORCE_INLINE VariantData* getOrCreateData() const {$/;"	f	class:MemberProxy	typeref:typename:FORCE_INLINE VariantData *
getOrCreateData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  FORCE_INLINE detail::VariantData* getOrCreateData() const {$/;"	f	class:JsonVariant	typeref:typename:FORCE_INLINE detail::VariantData *
getOrCreateData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantAttorney.hpp	/^  FORCE_INLINE static VariantData* getOrCreateData(TClient& client) {$/;"	f	class:VariantAttorney	typeref:typename:FORCE_INLINE VariantData *
getOrCreateData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE VariantData* getOrCreateData() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE VariantData *
getOrCreateVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp	/^inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {$/;"	f	class:VariantRefBase	typeref:typename:JsonVariant
getOrigin	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.h	/^  Point getOrigin() { return m_origin; }$/;"	f	class:fabgl::Canvas	typeref:typename:Point
getOut	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^  bool getOut(int timerIndex)  { return m_timer[timerIndex].out; }$/;"	f	class:fabgl::PIT8253	typeref:typename:bool
getOut1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^bool PC8250::getOut1()$/;"	f	class:fabgl::PC8250	typeref:typename:bool
getOut2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^bool PC8250::getOut2()$/;"	f	class:fabgl::PC8250	typeref:typename:bool
getPC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  uint16_t getPC()          { return m_PC; }$/;"	f	class:fabgl::MOS6502	typeref:typename:uint16_t
getPC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  uint16_t getPC()                            { return state.pc; }$/;"	f	class:fabgl::Z80	typeref:typename:uint16_t
getPC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int getPC()           { return cpu.pc.w; }$/;"	f	class:fabgl::i8080	typeref:typename:int
getPWM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static NRF_PWM_Type *  getPWM() {$/;"	f	class:PWM_Arbiter	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE NRF_PWM_Type *
getPacketSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^int Mouse::getPacketSize()$/;"	f	class:fabgl::Mouse	typeref:typename:int
getPaletteSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^int CVBSPalettedController::getPaletteSize()$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:int
getPaletteSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^int VGAPalettedController::getPaletteSize()$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:int
getParamsFromDesc	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^CVBSParams const * CVBSGenerator::getParamsFromDesc(char const * desc)$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:CVBSParams const *
getParity	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^int getParity(int val)$/;"	f	namespace:fabgl	typeref:typename:int
getParity	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline uint8_t getParity()$/;"	f	struct:CRGB	typeref:typename:uint8_t
getParityIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static int getParityIndex() {$/;"	f	struct:ConfDialogApp	typeref:typename:int
getPeriod	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    TIMETYPE getPeriod() { return mPeriod; };$/;"	f	class:CEveryNTime	typeref:typename:TIMETYPE
getPeriod	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    timeType getPeriod() { return mPeriod; };$/;"	f	class:CEveryNTimePeriods	typeref:typename:timeType
getPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^RGB888 Canvas::getPixel(int X, int Y)$/;"	f	class:fabgl::Canvas	typeref:typename:RGB888
getPixelBuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^uint8_t * ESP32RMTController::getPixelBuffer(int size_in_bytes)$/;"	f	class:ESP32RMTController	typeref:typename:uint8_t *
getPool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp	/^  FORCE_INLINE MemoryPool* getPool() const {$/;"	f	class:ElementProxy	typeref:typename:FORCE_INLINE MemoryPool *
getPool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  detail::MemoryPool* getPool() const {$/;"	f	class:JsonArray	typeref:typename:detail::MemoryPool *
getPool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  detail::MemoryPool* getPool() {$/;"	f	class:JsonDocument	typeref:typename:detail::MemoryPool *
getPool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  detail::MemoryPool* getPool() const {$/;"	f	class:JsonObject	typeref:typename:detail::MemoryPool *
getPool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp	/^  FORCE_INLINE MemoryPool* getPool() const {$/;"	f	class:MemberProxy	typeref:typename:FORCE_INLINE MemoryPool *
getPool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  FORCE_INLINE detail::MemoryPool* getPool() const {$/;"	f	class:JsonVariant	typeref:typename:FORCE_INLINE detail::MemoryPool *
getPool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantAttorney.hpp	/^  FORCE_INLINE static MemoryPool* getPool(TClient& client) {$/;"	f	class:VariantAttorney	typeref:typename:FORCE_INLINE MemoryPool *
getPool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE MemoryPool* getPool() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE MemoryPool *
getPortDir	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  uint8_t getPortDir(int port, uint8_t hwAddr = 0)                       { return readReg(MCP_IO/;"	f	class:fabgl::MCP23S17	typeref:typename:uint8_t
getPortIntCaptured	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  uint8_t getPortIntCaptured(int port, uint8_t hwAddr = 0)               { return readReg(MCP_IN/;"	f	class:fabgl::MCP23S17	typeref:typename:uint8_t
getPortIntFlags	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  uint8_t getPortIntFlags(int port, uint8_t hwAddr = 0)                  { return readReg(MCP_IN/;"	f	class:fabgl::MCP23S17	typeref:typename:uint8_t
getPortPullUp	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  uint8_t getPortPullUp(int port, uint8_t hwAddr = 0)                    { return readReg(MCP_GP/;"	f	class:fabgl::MCP23S17	typeref:typename:uint8_t
getPosFCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^size_t BDOS::getPosFCB(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:size_t
getPresetFixedFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabfonts.cpp	/^FontInfo const * getPresetFixedFont(int width, int height)$/;"	f	namespace:fabgl	typeref:typename:FontInfo const *
getPresetFontInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabfonts.cpp	/^FontInfo const * getPresetFontInfo(int viewPortWidth, int viewPortHeight, int columns, int rows)$/;"	f	namespace:fabgl	typeref:typename:FontInfo const *
getPresetFontInfoFromHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabfonts.cpp	/^FontInfo const * getPresetFontInfoFromHeight(int height, bool fixedWidth)$/;"	f	namespace:fabgl	typeref:typename:FontInfo const *
getPrevHistoryItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^char const * BDOS::getPrevHistoryItem()$/;"	f	class:BDOS	typeref:typename:char const *
getPreviousSlot	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline VariantSlot* CollectionData::getPreviousSlot(VariantSlot* target) const {$/;"	f	class:CollectionData	typeref:typename:VariantSlot *
getPrimitive	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^bool BitmappedDisplayController::getPrimitive(Primitive * primitive, int timeOutMS)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:bool
getPrimitiveISR	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^bool IRAM_ATTR BitmappedDisplayController::getPrimitiveISR(Primitive * primitive)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:bool IRAM_ATTR
getQuadrant	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^QuadTreeQuadrant QuadTree::getQuadrant(QuadTreeObject * object)$/;"	f	class:fabgl::QuadTree	typeref:typename:QuadTreeQuadrant
getRemaining	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    TIMETYPE getRemaining() { return mPeriod - getElapsed(); }$/;"	f	class:CEveryNTime	typeref:typename:TIMETYPE
getRemaining	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    timeType getRemaining() { return mPeriod - getElapsed(); }$/;"	f	class:CEveryNTimePeriods	typeref:typename:timeType
getResolutionIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static int getResolutionIndex() {$/;"	f	struct:ConfDialogApp	typeref:typename:int
getResolutionTimings	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  VGATimings * getResolutionTimings()             { return &m_timings; }$/;"	f	class:fabgl::VGABaseController	typeref:typename:VGATimings *
getRows	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  int getRows()                            { return s_rows; }$/;"	f	class:fabgl::VGATextController	typeref:typename:int
getRows	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int getRows()    { return m_rows; }$/;"	f	class:fabgl::Terminal	typeref:typename:int
getRowsIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static int getRowsIndex() {$/;"	f	struct:ConfDialogApp	typeref:typename:int
getSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^int IRAM_ATTR SoundGenerator::getSample()$/;"	f	class:fabgl::SoundGenerator	typeref:typename:int IRAM_ATTR
getSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^int NoiseWaveformGenerator::getSample()$/;"	f	class:fabgl::NoiseWaveformGenerator	typeref:typename:int
getSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^int SamplesGenerator::getSample() {$/;"	f	class:fabgl::SamplesGenerator	typeref:typename:int
getSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^int SawtoothWaveformGenerator::getSample() {$/;"	f	class:fabgl::SawtoothWaveformGenerator	typeref:typename:int
getSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^int SineWaveformGenerator::getSample() {$/;"	f	class:fabgl::SineWaveformGenerator	typeref:typename:int
getSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^int SquareWaveformGenerator::getSample() {$/;"	f	class:fabgl::SquareWaveformGenerator	typeref:typename:int
getSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^int TriangleWaveformGenerator::getSample() {$/;"	f	class:fabgl::TriangleWaveformGenerator	typeref:typename:int
getSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^int VICNoiseGenerator::getSample()$/;"	f	class:fabgl::VICNoiseGenerator	typeref:typename:int
getScalars	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^template <int VAL> void getScalars(uint32_t & preScalar, uint32_t & scalar, uint32_t & dbl) {$/;"	f	typeref:typename:void
getScalars	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^template <int VAL> void getScalars(uint32_t & preScalar, uint32_t & scalar, uint32_t & dbl) {$/;"	f	typeref:typename:void
getScalars	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^template <int VAL> void getScalars(uint8_t & sppr, uint8_t & spr) {$/;"	f	typeref:typename:FASTLED_NAMESPACE_BEGIN void
getScale0	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t getScale0() { return getscale<0>(*this); }/;"	f	struct:PixelController	typeref:typename:uint8_t
getScale1	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t getScale1() { return getscale<1>(*this); }/;"	f	struct:PixelController	typeref:typename:uint8_t
getScale2	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t getScale2() { return getscale<2>(*this); }/;"	f	struct:PixelController	typeref:typename:uint8_t
getScanline	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  uint8_t * getScanline(int y)                     { return (uint8_t*) m_viewPort[y]; }$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:uint8_t *
getScanline	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  uint8_t * getScanline(int y)                    { return (uint8_t*) m_viewPort[y]; }$/;"	f	class:fabgl::VGABaseController	typeref:typename:uint8_t *
getScanlineBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^uint8_t volatile * VGADirectController::getScanlineBuffer(int scanline)$/;"	f	class:fabgl::VGADirectController	typeref:typename:uint8_t volatile *
getScoreIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^int getScoreIndex( ScoreCard *psc )$/;"	f	typeref:typename:int
getScorePosition	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^int getScorePosition(  int points )$/;"	f	typeref:typename:int
getScreenHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int getScreenHeight()                        { return m_screenHeight; }$/;"	f	class:fabgl::BaseDisplayController	typeref:typename:int
getScreenWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int getScreenWidth()                         { return m_screenWidth; }$/;"	f	class:fabgl::BaseDisplayController	typeref:typename:int
getSearchPath	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^char const * BDOS::getSearchPath()$/;"	f	class:BDOS	typeref:typename:char const *
getSerParamStr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static char const * getSerParamStr() {$/;"	f	struct:ConfDialogApp	typeref:typename:char const *
getSessionIDByTaskHandle	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^int Supervisor::getSessionIDByTaskHandle(TaskHandle_t taskHandle)$/;"	f	class:Supervisor	typeref:typename:int
getSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int16_t LightMemoryPool::getSize(int pos)$/;"	f	class:fabgl::LightMemoryPool	typeref:typename:int16_t
getSlot	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {$/;"	f	class:CollectionData	typeref:typename:VariantSlot *
getSlot	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline VariantSlot* CollectionData::getSlot(size_t index) const {$/;"	f	class:CollectionData	typeref:typename:VariantSlot *
getSprite	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^Sprite * IRAM_ATTR BitmappedDisplayController::getSprite(int index)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:Sprite * IRAM_ATTR
getStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  int getStatus()                             { return state.status; }$/;"	f	class:fabgl::Z80	typeref:typename:int
getStopBitsIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static int getStopBitsIndex() {$/;"	f	struct:ConfDialogApp	typeref:typename:int
getTPASize	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^uint16_t BDOS::getTPASize()$/;"	f	class:BDOS	typeref:typename:uint16_t
getTPATop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^uint16_t BDOS::getTPATop()$/;"	f	class:BDOS	typeref:typename:uint16_t
getTempResolutionIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static int getTempResolutionIndex() {$/;"	f	struct:ConfDialogApp	typeref:typename:int
getTemperature	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CRGB getTemperature() { return m_ColorTemperature; }$/;"	f	class:CLEDController	typeref:typename:CRGB
getTermType	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static TermType getTermType() {$/;"	f	struct:ConfDialogApp	typeref:typename:TermType
getTerminalColumns	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  int getTerminalColumns()                        { return m_terminal->getColumns(); }$/;"	f	class:HAL	typeref:typename:int
getTerminalCursorPos	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  void getTerminalCursorPos(int * col, int * row) { m_termCtrl.getCursorPos(col, row); }$/;"	f	class:HAL	typeref:typename:void
getTerminalRows	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  int getTerminalRows()                           { return m_terminal->getRows(); }$/;"	f	class:HAL	typeref:typename:int
getTextColumns	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  int getTextColumns()                                     { return m_columns; }$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:int
getTextRows	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  int getTextRows()                                        { return m_rows; }$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:int
getTime	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    TIMETYPE getTime() { return (TIMETYPE)(TIMEGETTER()); };$/;"	f	class:CEveryNTime	typeref:typename:TIMETYPE
getTime	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    timeType getTime() { return (timeType)(timeGetter()); };$/;"	f	class:CEveryNTimePeriods	typeref:typename:timeType
getUARTPortIndex	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static int getUARTPortIndex() {$/;"	f	struct:ConfDialogApp	typeref:typename:int
getVScrollBarRects	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Rect uiScrollableControl::getVScrollBarRects(Rect * topButton, Rect * bottomButton, Rect * bar)$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:Rect
getValue	examples/test/lib/JFixLib/src/Event/JWavetable.cpp	/^float JWavetable::getValue(float pct){$/;"	f	class:JWavetable	typeref:typename:float
getVarWidthFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabfonts.cpp	/^FontInfo const * getVarWidthFont(int index)$/;"	f	namespace:fabgl	typeref:typename:FontInfo const *
getVarWidthFontCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabfonts.cpp	/^int getVarWidthFontCount()$/;"	f	namespace:fabgl	typeref:typename:int
getVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  JsonVariant getVariant() {$/;"	f	class:JsonDocument	typeref:typename:JsonVariant
getVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  JsonVariantConst getVariant() const {$/;"	f	class:JsonDocument	typeref:typename:JsonVariantConst
getVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp	/^inline JsonVariant VariantRefBase<TDerived>::getVariant() const {$/;"	f	class:VariantRefBase	typeref:typename:JsonVariant
getVariantConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE ArduinoJson::JsonVariantConst getVariantConst() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE ArduinoJson::JsonVariantConst
getViewPortCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int getViewPortCol()                             { return m_viewPortCol; }$/;"	f	class:fabgl::VGABaseController	typeref:typename:int
getViewPortHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int getViewPortHeight()                      { return m_viewPortHeight; }$/;"	f	class:fabgl::BaseDisplayController	typeref:typename:int
getViewPortRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int getViewPortRow()                             { return m_viewPortRow; }$/;"	f	class:fabgl::VGABaseController	typeref:typename:int
getViewPortWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int getViewPortWidth()                       { return m_viewPortWidth; }$/;"	f	class:fabgl::BaseDisplayController	typeref:typename:int
getWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.h	/^  int getWidth() { return m_displayController->getViewPortWidth(); }$/;"	f	class:fabgl::Canvas	typeref:typename:int
getWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int getWidth()  { return frames[currentFrame]->width; }$/;"	f	struct:fabgl::Sprite	typeref:typename:int
getWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  int getWidth()  { return m_width; }$/;"	f	class:fabgl::Scene	typeref:typename:int
getWordPosAtLeft	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiTextEdit::getWordPosAtLeft()$/;"	f	class:fabgl::uiTextEdit	typeref:typename:int
getWordPosAtRight	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiTextEdit::getWordPosAtRight()$/;"	f	class:fabgl::uiTextEdit	typeref:typename:int
get_data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/StringObject.hpp	/^  get_data(const U& s) {$/;"	f	struct:StringAdapter	typeref:typename:enable_if<!string_traits<U>::has_data,const char * >::type
get_data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/StringObject.hpp	/^  get_data(const U& s) {$/;"	f	struct:StringAdapter	typeref:typename:enable_if<string_traits<U>::has_data,const char * >::type
get_size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/StringObject.hpp	/^  static typename enable_if<!string_traits<U>::has_size, size_t>::type get_size($/;"	f	struct:StringAdapter	typeref:typename:enable_if<!string_traits<U>::has_size,size_t>::type
get_size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/StringObject.hpp	/^  static typename enable_if<string_traits<U>::has_size, size_t>::type get_size($/;"	f	struct:StringAdapter	typeref:typename:enable_if<string_traits<U>::has_size,size_t>::type
getc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transfile.py	/^def getc(size, timeout=1):$/;"	f
getd	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelContr/;"	f	struct:PixelController	typeref:typename:uint8_t
getscale	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelC/;"	f	struct:PixelController	typeref:typename:uint8_t
glyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    Glyph                  glyph;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:Glyph
glyphMapItem_getBGColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline Color glyphMapItem_getBGColor(uint32_t const & mapItem)          { return (Color)(mapItem/;"	f	namespace:fabgl	typeref:typename:Color
glyphMapItem_getBGColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline Color glyphMapItem_getBGColor(uint32_t const volatile * mapItem) { return (Color)(*mapIte/;"	f	namespace:fabgl	typeref:typename:Color
glyphMapItem_getFGColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline Color glyphMapItem_getFGColor(uint32_t const & mapItem)          { return (Color)(mapItem/;"	f	namespace:fabgl	typeref:typename:Color
glyphMapItem_getFGColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline Color glyphMapItem_getFGColor(uint32_t const volatile * mapItem) { return (Color)(*mapIte/;"	f	namespace:fabgl	typeref:typename:Color
glyphMapItem_getIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline uint8_t glyphMapItem_getIndex(uint32_t const & mapItem)          { return mapItem >> GLYP/;"	f	namespace:fabgl	typeref:typename:uint8_t
glyphMapItem_getIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline uint8_t glyphMapItem_getIndex(uint32_t const volatile * mapItem) { return *mapItem >> GLY/;"	f	namespace:fabgl	typeref:typename:uint8_t
glyphMapItem_getOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline GlyphOptions glyphMapItem_getOptions(uint32_t const & mapItem)          { return (GlyphOp/;"	f	namespace:fabgl	typeref:typename:GlyphOptions
glyphMapItem_getOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline GlyphOptions glyphMapItem_getOptions(uint32_t const volatile * mapItem) { return (GlyphOp/;"	f	namespace:fabgl	typeref:typename:GlyphOptions
glyphMapItem_setOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline void glyphMapItem_setOptions(uint32_t volatile * mapItem, GlyphOptions const & options) {/;"	f	namespace:fabgl	typeref:typename:void
glyphOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    GlyphOptions           glyphOptions;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:GlyphOptions
glyphOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  GlyphOptions glyphOptions;$/;"	m	struct:fabgl::PaintState	typeref:typename:GlyphOptions
glyphOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  GlyphOptions            glyphOptions;$/;"	m	struct:fabgl::TerminalCursorState	typeref:typename:GlyphOptions
glyphs8x8	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^glyphs8x8:$/;"	l
glyphsBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  GlyphsBuffer const * glyphsBuffer;$/;"	m	struct:fabgl::GlyphsBufferRenderInfo	typeref:typename:GlyphsBuffer const *
glyphsBufferRenderInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    GlyphsBufferRenderInfo glyphsBufferRenderInfo;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:GlyphsBufferRenderInfo
glyphsData	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t const * glyphsData;$/;"	m	struct:fabgl::GlyphsBuffer	typeref:typename:uint8_t const *
glyphsHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t         glyphsHeight;$/;"	m	struct:fabgl::GlyphsBuffer	typeref:typename:int16_t
glyphsWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t         glyphsWidth;$/;"	m	struct:fabgl::GlyphsBuffer	typeref:typename:int16_t
gotoffset	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^  def gotoffset(off,dirtables=dirtables,dataentries=dataentries):$/;"	f	function:pefon	file:
grad1	examples/test/lib/JFixLib/src/ofNoise.h	/^inline float  grad1( int hash, float x ) {$/;"	f	typeref:typename:float
grad16	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^static int16_t inline __attribute__((always_inline))  grad16(uint8_t hash, int16_t x, int16_t y,/;"	f	typeref:typename:int16_t	file:
grad16	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^static int16_t inline __attribute__((always_inline)) grad16(uint8_t hash, int16_t x) {$/;"	f	typeref:typename:int16_t	file:
grad16	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^static int16_t inline __attribute__((always_inline)) grad16(uint8_t hash, int16_t x, int16_t y) /;"	f	typeref:typename:int16_t	file:
grad2	examples/test/lib/JFixLib/src/ofNoise.h	/^inline float  grad2( int hash, float x, float y ) {$/;"	f	typeref:typename:float
grad3	examples/test/lib/JFixLib/src/ofNoise.h	/^inline float  grad3( int hash, float x, float y , float z ) {$/;"	f	typeref:typename:float
grad4	examples/test/lib/JFixLib/src/ofNoise.h	/^inline float  grad4( int hash, float x, float y, float z, float t ) {$/;"	f	typeref:typename:float
grad8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^static int8_t  inline __attribute__((always_inline)) grad8(uint8_t hash, int8_t x, int8_t y, int/;"	f	typeref:typename:int8_t	file:
grad8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^static int8_t inline __attribute__((always_inline)) grad8(uint8_t hash, int8_t x)$/;"	f	typeref:typename:int8_t	file:
grad8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^static int8_t inline __attribute__((always_inline)) grad8(uint8_t hash, int8_t x, int8_t y)$/;"	f	typeref:typename:int8_t	file:
graph_posn	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^graph_posn:$/;"	l
graphicsAdapter	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  GraphicsAdapter * graphicsAdapter()  { return &m_graphicsAdapter; }$/;"	f	class:Machine	typeref:typename:GraphicsAdapter *
green	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t green;  \/\/\/< @copydoc g$/;"	m	union:CRGB::__anonbcc8608a070a::__anonbcc8608a0808::__anonbcc8608a0a0a	typeref:typename:uint8_t
gripColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888 gripColor          = RGB888(0, 0, 255);        \/**< Color of slider grip *\/$/;"	m	struct:fabgl::uiSliderStyle	typeref:typename:RGB888
groupIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int groupIndex()                  { return m_groupIndex; }$/;"	f	class:fabgl::uiCheckBox	typeref:typename:int
h	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^      uint8_t l, h;$/;"	m	struct:fabgl::i8080::__anon81886eed010a::__anon81886eed0208	typeref:typename:uint8_t
h	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t h;  \/\/\/< @copydoc hue$/;"	m	union:CHSV::__anonbcc8608a010a::__anonbcc8608a0208::__anonbcc8608a030a	typeref:typename:uint8_t
h	examples/test/lib/JFixLib/src/Event/expRandLines.h	/^    unsigned short h = 200;$/;"	m	class:expRandLines	typeref:typename:unsigned short
h2bfin	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  h2bfin:$/;"	l
h2bloop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^h2bloop:$/;"	l
hShrink	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Rect hShrink(int value) const                  { return Rect(X1 + value, Y1, X2 - value, Y2); /;"	f	struct:fabgl::Rect	typeref:typename:Rect
hal	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^  HAL *                         hal;$/;"	m	struct:Session	typeref:typename:HAL *
half_carry_flag	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    uint8_t half_carry_flag;$/;"	m	struct:fabgl::i8080::__anon81886eed0308	typeref:typename:uint8_t
half_carry_table	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^static const int half_carry_table[]     = { 0, 0, 1, 0, 1, 0, 1, 1 };$/;"	v	namespace:fabgl	typeref:typename:const int[]	file:
halted	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static bool halted()                                    { return s_halted; }$/;"	f	class:fabgl::i8086	typeref:typename:bool
handleButtonsClick	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFrame::handleButtonsClick(int x, int y, bool doubleClick)$/;"	f	class:fabgl::uiFrame	typeref:typename:void
handleButtonsScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiScrollableControl::handleButtonsScroll()$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:void
handleCapturedMouseMove	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiScrollableControl::handleCapturedMouseMove(int mouseX, int mouseY)$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:void
handleCharInjecting	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::handleCharInjecting()$/;"	f	class:Machine	typeref:typename:void
handleFreeMouseMove	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiScrollableControl::handleFreeMouseMove(int mouseX, int mouseY)$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:void
handleKeyDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomListBox::handleKeyDown(uiKeyEventInfo key)$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:void
handleKeyDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiSlider::handleKeyDown(uiKeyEventInfo key)$/;"	f	class:fabgl::uiSlider	typeref:typename:void
handleKeyDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiTextEdit::handleKeyDown(uiKeyEventInfo const & key)$/;"	f	class:fabgl::uiTextEdit	typeref:typename:void
handleMouse	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::handleMouse()$/;"	f	class:Machine	typeref:typename:void
handleOtaServer	examples/test/lib/JFixLib/src/JOtaServer.h	/^  void handleOtaServer(){$/;"	f	class:JOtaServer	typeref:typename:void
handlePageScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiScrollableControl::handlePageScroll()$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:void
handler	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^  intr_handler_t  handler;$/;"	m	struct:fabgl::esp_intr_alloc_args	typeref:typename:intr_handler_t	file:
hardReset	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::hardReset()$/;"	f	class:fabgl::TFTController	typeref:typename:void
has	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline bool has(int n) {$/;"	f	struct:PixelController	typeref:typename:bool
hasCaret	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t hasCaret     : 1;   \/**< If True the edit box has a blinking caret *\/$/;"	m	struct:fabgl::uiTextEditProps	typeref:typename:uint8_t:1
hasChildren	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  bool hasChildren() { return m_firstChild != nullptr; }$/;"	f	class:fabgl::uiWindow	typeref:typename:bool
hasCloseButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t hasCloseButton    : 1; \/**< Frame has close button. Make sure the window has a title /;"	m	struct:fabgl::uiFrameProps	typeref:typename:uint8_t:1
hasDirLabel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool      hasDirLabel;$/;"	m	struct:FileSearchState	typeref:typename:bool
hasExt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::hasExt(char const * filename, char const * ext)$/;"	f	class:BDOS	typeref:typename:bool
hasExt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::hasExt(uint16_t FCBaddr, char const * ext)$/;"	f	class:BDOS	typeref:typename:bool
hasFocus	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^bool uiWindow::hasFocus()$/;"	f	class:fabgl::uiWindow	typeref:typename:bool
hasMaximizeButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t hasMaximizeButton : 1; \/**< Frame has maximize button. Make sure the window has a tit/;"	m	struct:fabgl::uiFrameProps	typeref:typename:uint8_t:1
hasMinimizeButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t hasMinimizeButton : 1; \/**< Frame has minimize button. Make sure the window has a tit/;"	m	struct:fabgl::uiFrameProps	typeref:typename:uint8_t:1
hasPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static bool hasPort() { return 0; }$/;"	f	struct:__FL_PORT_INFO	typeref:typename:bool
hasProgressBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  bool                    hasProgressBar;$/;"	m	struct:fabgl::ProgressForm	typeref:typename:bool
has_cstr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^    has_cstr = string_traits_impl::has_cstr<T>::value,$/;"	e	enum:string_traits::__anon40aa46de0103
has_cstr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^struct has_cstr : false_type {};$/;"	s	namespace:string_traits_impl
has_cstr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^struct has_cstr<T,$/;"	s	namespace:string_traits_impl
has_data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^    has_data = string_traits_impl::has_data<T>::value,$/;"	e	enum:string_traits::__anon40aa46de0103
has_data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^struct has_data : false_type {};$/;"	s	namespace:string_traits_impl
has_data	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^struct has_data<T,$/;"	s	namespace:string_traits_impl
has_length	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^    has_length = string_traits_impl::has_length<T>::value,$/;"	e	enum:string_traits::__anon40aa46de0103
has_length	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^struct has_length : false_type {};$/;"	s	namespace:string_traits_impl
has_length	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^struct has_length<$/;"	s	namespace:string_traits_impl
has_size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^    has_size = string_traits_impl::has_size<T>::value$/;"	e	enum:string_traits::__anon40aa46de0103
has_size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^struct has_size : false_type {};$/;"	s	namespace:string_traits_impl
has_size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^struct has_size<$/;"	s	namespace:string_traits_impl
hblank_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          hblank_us;                      \/\/ horizontal blank after back porch to keep/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
head	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionData.hpp	/^  VariantSlot* head() const {$/;"	f	class:CollectionData	typeref:typename:VariantSlot *
head	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    static CLEDController *head() { return m_pHead; }$/;"	f	class:CLEDController	typeref:typename:CLEDController *
head_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionData.hpp	/^  VariantSlot* head_;$/;"	m	class:CollectionData	typeref:typename:VariantSlot *
headers	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "headers": "fabgl.h",$/;"	s
headers	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "headers": "FastLED.h",$/;"	s
heads	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^    uint8_t  heads;$/;"	m	struct:Machine::autoDetectDriveGeometry::__anonbb37e5ab0108	typeref:typename:uint8_t	file:
heads	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  uint16_t          heads[DISKCOUNT];$/;"	m	struct:MachineConfItem	typeref:typename:uint16_t[]
height	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t         height;          \/**< Bitmap vertical size *\/$/;"	m	struct:fabgl::Bitmap	typeref:typename:int16_t
height	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t         height; \/**< Glyph vertical size *\/$/;"	m	struct:fabgl::Glyph	typeref:typename:uint8_t
height	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int height() const                             { return Y2 - Y1 + 1; }$/;"	f	struct:fabgl::Rect	typeref:typename:int
height	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int16_t height;  \/**< Vertical size *\/$/;"	m	struct:fabgl::Size	typeref:typename:int16_t
height	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t  height;$/;"	m	struct:fabgl::FontInfo	typeref:typename:uint8_t
helpLabel1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/progsdialog.h	/^  uiStaticLabel *   helpLabel1;$/;"	m	struct:ProgsDialog	typeref:typename:uiStaticLabel *
helpLabel2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/progsdialog.h	/^  uiStaticLabel *   helpLabel2;$/;"	m	struct:ProgsDialog	typeref:typename:uiStaticLabel *
helpersEntry	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::helpersEntry()$/;"	f	class:BIOS	typeref:typename:void
hex2digit	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline int hex2digit(char hex)$/;"	f	namespace:fabgl	typeref:typename:int
hex_to_bcd	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^hex_to_bcd:$/;"	l
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }$/;"	f	class:FastPin	typeref:typename:void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void hi() __attribute__ ((always_inline)) { }$/;"	f	class:FastPin	typeref:typename:void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void hi(FASTLED_REGISTER port_ptr_t port) __attribute__ ((always_inline)) { *port/;"	f	class:FastPin	typeref:typename:void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void hi(FASTLED_REGISTER port_ptr_t port) __attribute__ ((always_inline)) { }$/;"	f	class:FastPin	typeref:typename:void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }$/;"	f	class:Pin	typeref:typename:void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline void hi(FASTLED_REGISTER port_ptr_t port) __attribute__ ((always_inline)) { *port |= mPi/;"	f	class:Pin	typeref:typename:void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static void hi() __attribute__ ((always_inline)) { FL_NRF_GPIO->OUTSET = _MASK; }$/;"	f	class:_ARMPIN	typeref:typename:void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static void hi(FASTLED_REGISTER port_ptr_t port) __attribute__ ((always_inline)) { hi/;"	f	class:_ARMPIN	typeref:typename:void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void       hi()        { (reinterpret_cast<NRF_GPIO_Ty/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void hi (FASTLED_REGISTER port_ptr_t port) { hi();    /;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static void hi() __attribute__ ((always_inline)) {$/;"	f	class:_ESPPIN	typeref:typename:void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static void hi(FASTLED_REGISTER port_ptr_t port) __attribute__ ((always_inline)) { hi()/;"	f	class:_ESPPIN	typeref:typename:void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static void hi() __attribute__ ((always_inline)) { if(PIN < 16) { _GPB._GPOS = MASK; /;"	f	class:_ESPPIN	typeref:typename:void
hi	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static void hi(FASTLED_REGISTER port_ptr_t port) __attribute__ ((always_inline)) { hi/;"	f	class:_ESPPIN	typeref:typename:void
hideSprites	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::hideSprites(Rect & updateRect)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
highScore	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^int highScore;$/;"	v	typeref:typename:int
highSurrogate_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp	/^  uint16_t highSurrogate_;$/;"	m	class:Utf16::Codepoint	typeref:typename:uint16_t
highest	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static T highest() {$/;"	f	struct:FloatTraits	typeref:typename:T
highest	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/limits.hpp	/^  static T highest() {$/;"	f	struct:numeric_limits	typeref:typename:T
highestBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static int highestBit() __attribute__((always_inline)) { return (VAL & 1 << BIT) ? BIT : BitWor/;"	f	class:BitWork	typeref:typename:int
highestBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static int highestBit() __attribute__((always_inline)) { return 0; }$/;"	f	class:BitWork	typeref:typename:int
highestBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static int highestBit() __attribute__((always_inline)) { return (VAL & 1 << BIT) ? BIT : BitWor/;"	f	class:BitWork	typeref:typename:int
highestBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static int highestBit() __attribute__((always_inline)) { return 0; }$/;"	f	class:BitWork	typeref:typename:int
highest_for	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static T highest_for($/;"	f	struct:FloatTraits	typeref:typename:T
hival	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	port_t hival() __attribute__ ((always_inline)) { return *mPort | mPinMask;  }$/;"	f	class:Pin	typeref:typename:port_t
hival	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static port_t hival() __attribute__ ((always_inline)) { return *sPort | sPinMask;  }$/;"	f	class:FastPin	typeref:typename:port_t
hival	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static port_t hival() __attribute__ ((always_inline)) { return 0; }$/;"	f	class:FastPin	typeref:typename:port_t
hival	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static port_t hival() __attribute__ ((always_inline)) { return FL_NRF_GPIO->OUT | _MA/;"	f	class:_ARMPIN	typeref:typename:port_t
hival	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static port_t     hival()     { return (reinterpret_cast<NRF_/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE port_t
hival	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static port_t hival() __attribute__ ((always_inline)) {$/;"	f	class:_ESPPIN	typeref:typename:port_t
hival	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static port_t hival() __attribute__ ((always_inline)) { if (PIN<16) { return GPO | MA/;"	f	class:_ESPPIN	typeref:typename:port_t
hl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    reg_pair af, bc, de, hl;$/;"	m	struct:fabgl::i8080::Regs	typeref:typename:reg_pair
hline_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          hline_us;                       \/\/ half line duration (vsync and equalizatio/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
homepage	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^  "homepage": "https:\/\/arduinojson.org\/?utm_source=meta&utm_medium=library.json",$/;"	s
homepage	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "homepage": "http:\/\/www.fabglib.org",$/;"	s
homepage	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "homepage": "http:\/\/fastled.io",$/;"	s
horizontalPixelDistance	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  int horizontalPixelDistance = 10; \/\/ Beams are 10 pixels from eachother$/;"	m	class:JFixtureAddr	typeref:typename:int
horizontalRate	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  int horizontalRate()                            { return m_horizontalRate; }$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:int
horizontalSpacing	examples/test/lib/JFixLib/src/Event/Event.h	/^  int horizontalSpacing = 0;$/;"	m	class:Event	typeref:typename:int
hostIP	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.h	/^  IPAddress const& hostIP() { return m_destIP; }$/;"	f	class:fabgl::ICMP	typeref:typename:IPAddress const &
hotspotX	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t hotspotX;           \/**< Cursor horizontal hotspot (0 = left bitmap side) *\/$/;"	m	struct:fabgl::Cursor	typeref:typename:int16_t
hotspotY	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t hotspotY;           \/**< Cursor vertical hotspot (0 = upper bitmap side) *\/$/;"	m	struct:fabgl::Cursor	typeref:typename:int16_t
hour_BCD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^  uint8_t  hour_BCD;$/;"	m	struct:DateTime	typeref:typename:uint8_t
hours	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  int8_t  hours;        \/**< 0..23             *\/$/;"	m	struct:fabgl::DateTime	typeref:typename:int8_t
hours8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint8_t hours8()$/;"	f	typeref:typename:LIB8STATIC uint8_t
hsv2rgb_rainbow	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)$/;"	f	typeref:typename:void
hsv2rgb_rainbow	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^void hsv2rgb_rainbow( const struct CHSV* phsv, struct CRGB * prgb, int numLeds) {$/;"	f	typeref:typename:void
hsv2rgb_raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^void hsv2rgb_raw(const struct CHSV & hsv, struct CRGB & rgb)$/;"	f	typeref:typename:void
hsv2rgb_raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^void hsv2rgb_raw(const struct CHSV * phsv, struct CRGB * prgb, int numLeds) {$/;"	f	typeref:typename:void
hsv2rgb_raw_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^void hsv2rgb_raw_C (const struct CHSV & hsv, struct CRGB & rgb)$/;"	f	typeref:typename:void
hsv2rgb_raw_avr	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^void hsv2rgb_raw_avr(const struct CHSV & hsv, struct CRGB & rgb)$/;"	f	typeref:typename:void
hsv2rgb_spectrum	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^void hsv2rgb_spectrum( const struct CHSV& hsv, CRGB& rgb)$/;"	f	typeref:typename:void
hsv2rgb_spectrum	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^void hsv2rgb_spectrum( const struct CHSV* phsv, struct CRGB * prgb, int numLeds) {$/;"	f	typeref:typename:void
hsyncEdge_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          hsyncEdge_us;                   \/\/ line sync falling and rising edges durati/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
hsync_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          hsync_us;                       \/\/ horizontal sync pulse duration$/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
hue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t hue;$/;"	m	union:CHSV::__anonbcc8608a010a::__anonbcc8608a0208::__anonbcc8608a030a	typeref:typename:uint8_t
i	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  int               i, r, pc, iff1, iff2, im;$/;"	m	struct:fabgl::Z80_STATE	typeref:typename:int
i	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^i = 2$/;"	v
i	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    T i:I;  \/\/\/< Integer value of number$/;"	m	class:q	typeref:typename:T
i	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    uint32_t i;  \/\/\/< raw value, as an integer$/;"	m	union:__anon26d1ab7c010a	typeref:typename:uint32_t
i2cGetFrequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^static int i2cGetFrequency(uint8_t i2c_num)$/;"	f	namespace:fabgl	typeref:typename:int	file:
i2cSetFrequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^static void i2cSetFrequency(uint8_t i2c_num, int freq)$/;"	f	namespace:fabgl	typeref:typename:void	file:
i2s	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static i2s_dev_t * i2s;$/;"	v	typeref:typename:i2s_dev_t *
i2sInit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static void i2sInit()$/;"	f	class:ClocklessController	typeref:typename:void
i2sReset	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static void i2sReset()$/;"	f	class:ClocklessController	typeref:typename:void
i2sReset_DMA	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static void i2sReset_DMA()$/;"	f	class:ClocklessController	typeref:typename:void
i2sReset_FIFO	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static void i2sReset_FIFO()$/;"	f	class:ClocklessController	typeref:typename:void
i2sStart	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static void i2sStart()$/;"	f	class:ClocklessController	typeref:typename:void
i2sStop	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static void i2sStop()$/;"	f	class:ClocklessController	typeref:typename:void
i2s_base_pin_index	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static int i2s_base_pin_index;$/;"	v	typeref:typename:int
i8042	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^i8042::i8042()$/;"	f	class:fabgl::i8042
i8042	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^class i8042 {$/;"	c	namespace:fabgl
i8080	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  i8080,$/;"	e	enum:CPU
i8080	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^class i8080 {$/;"	c	namespace:fabgl
i8086	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^class i8086 {$/;"	c	namespace:fabgl
i8_end	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^i8_end:$/;"	l
iPlaySound	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^void iPlaySound( void *pvParameters )$/;"	f	typeref:typename:void
iPlaySound	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^void iPlaySound( void *pvParameters )$/;"	f	typeref:typename:void
i_d	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t    * regs8, i_mod_size, i_d, i_w, raw_opcode_id, xlat_opcode_id, extra, rep_mode,/;"	v	namespace:fabgl	typeref:typename:uint8_t	file:
i_mod_adder	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t i_mod_adder[] = {  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
i_mod_size	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t    * regs8, i_mod_size, i_d, i_w, raw_opcode_id, xlat_opcode_id, extra, rep_mode,/;"	v	namespace:fabgl	typeref:typename:uint8_t	file:
i_w	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t    * regs8, i_mod_size, i_d, i_w, raw_opcode_id, xlat_opcode_id, extra, rep_mode,/;"	v	namespace:fabgl	typeref:typename:uint8_t	file:
i_w_adder	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t i_w_adder[] = {  0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
iclamp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^constexpr auto iclamp = tclamp<int>;$/;"	v	namespace:fabgl	typeref:typename:auto
id	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  int id = 0;     \/\/ device number assigned by client$/;"	m	struct:GameController	typeref:typename:int
id	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  int id = 0;     \/\/ device number assigned by client$/;"	m	struct:GameController	typeref:typename:int
id	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^  int                           id;$/;"	m	struct:Session	typeref:typename:int
id	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^    uint8_t id;$/;"	m	struct:createFATFloppyImage::__anon3b11bce90e08	typeref:typename:uint8_t	file:
id	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiEventID      id;$/;"	m	struct:fabgl::uiEvent	typeref:typename:uiEventID
id	examples/test/lib/JFixLib/src/Event/Event.h	/^  int id = -1;$/;"	m	class:Event	typeref:typename:int
id	examples/test/lib/JFixLib/src/JFixture.h	/^  int id = -1;$/;"	m	class:JFixture	typeref:typename:int
identify	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  PS2DeviceType identify() { PS2DeviceType result; send_cmdIdentify(&result); return result; };$/;"	f	class:fabgl::PS2Device	typeref:typename:PS2DeviceType
iff	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    uint16_t iff;$/;"	m	struct:fabgl::i8080::Regs	typeref:typename:uint16_t
iff1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  int               i, r, pc, iff1, iff2, im;$/;"	m	struct:fabgl::Z80_STATE	typeref:typename:int
iff2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  int               i, r, pc, iff1, iff2, im;$/;"	m	struct:fabgl::Z80_STATE	typeref:typename:int
ifirst	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^    ifirst = int(args[pidx + 1])$/;"	v
ifirst	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^ifirst   = 0$/;"	v
ilast	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^    ilast  = int(args[pidx + 2])$/;"	v
ilast	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^ilast    = 255$/;"	v
im	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  int               i, r, pc, iff1, iff2, im;$/;"	m	struct:fabgl::Z80_STATE	typeref:typename:int
im	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  im = im.convert("RGB").quantize(64, palette = pal64image).convert("RGB")$/;"	v
im	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  im = im.resize(newSize)$/;"	v
im	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^im = Image.open(filename).convert("RGBA")$/;"	v
imageStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiImageStyle & imageStyle() { return m_imageStyle; }$/;"	f	class:fabgl::uiImage	typeref:typename:uiImageStyle &
imax	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^constexpr auto imax = tmax<int>;$/;"	v	namespace:fabgl	typeref:typename:auto
imin	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^constexpr auto imin = tmin<int>;$/;"	v	namespace:fabgl	typeref:typename:auto
inOutDirectory	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char *           inOutDirectory;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:char *
inOutFilename	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char *           inOutFilename;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:char *
inOutString	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char *           inOutString;$/;"	m	struct:fabgl::TextInputForm	typeref:typename:char *
inc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  inc  dx    ; get Modem Status Register$/;"	d
inc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  inc  dx  ; dx = modem status register$/;"	d
inc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  inc  dx$/;"	d
includeDir	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "includeDir": "src"$/;"	s
includes	examples/test/.pio/libdeps/esp32dev/FabGL/library.properties	/^includes=fabgl.h$/;"	k
includes	examples/test/.pio/libdeps/esp32dev/FastLED/library.properties	/^includes=FastLED.h$/;"	k
indent	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp	/^  void indent() {$/;"	f	class:PrettyJsonSerializer	typeref:typename:void
index	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  int16_t   index;$/;"	m	struct:FileSearchState	typeref:typename:int16_t
index	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int      index;$/;"	m	class:fabgl::i8080	typeref:typename:int
index	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^        uint8_t index;  \/\/\/< index of the color entry in the gradient $/;"	m	struct:__anon875718a3020a::__anon875718a30308	typeref:typename:uint8_t
index_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp	/^  size_t index_;$/;"	m	class:ElementProxy	typeref:typename:size_t
inf	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static T inf() {$/;"	f	struct:FloatTraits	typeref:typename:T
infile	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^    infile = a[0]$/;"	v
infile	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^infile = None$/;"	v
infoBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/bitmaps.h	/^const Bitmap infoBitmap = Bitmap(16, 16, &infoBitmap_data[0], PixelFormat::RGBA2222);$/;"	v	namespace:fabgl	typeref:typename:const Bitmap
infoBitmap_data	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/bitmaps.h	/^const uint8_t infoBitmap_data[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
infoCheckBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiCheckBox *      infoCheckBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiCheckBox *
inherited	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  KeyboardLayout const *   inherited;           \/**< Inherited layout. Useful to avoid to repea/;"	m	struct:fabgl::KeyboardLayout	typeref:typename:KeyboardLayout const *
init	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  void init() {$/;"	f	struct:ConfDialogApp	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/restartdialog.h	/^  void init() {$/;"	f	class:RebootDialogApp	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^  void init()  $/;"	f	struct:Menu	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    void init( int num_, Sprite *sprite_, int minx_, int maxx_)$/;"	f	struct:Race::Player	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  void init()$/;"	f	struct:Race	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  void init()$/;"	f	struct:Score	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  void init() {$/;"	f	class:MyApp	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::init(Machine * machine)$/;"	f	class:BIOS	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::init()$/;"	f	class:Machine	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  void init() {$/;"	f	struct:ConfigDialog	typeref:typename:void	file:
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SoundGenerator::init()$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^void CVBSBaseController::init()$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^void CVBSPalettedController::init()$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::init()$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void VGAController::init()$/;"	f	class:fabgl::VGAController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::init()$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^void VGAPalettedController::init()$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::init(gpio_num_t VSyncGPIO)$/;"	f	class:fabgl::VGATextController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^void MC146818::init(char const * NVSNameSpace)$/;"	f	class:fabgl::MC146818	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^void i8042::init()$/;"	f	class:fabgl::i8042	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::init()$/;"	f	class:fabgl::uiApp	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void InputForm::init(uiApp * app_, bool modalDialog_)$/;"	f	class:fabgl::InputForm	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  virtual void init()              { form->init(this, false); }$/;"	f	struct:fabgl::InputApp	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void init() {$/;"	f	class:APA102Controller	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void init() {$/;"	f	class:LPD6803Controller	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void init() {$/;"	f	class:LPD8806Controller	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void init() {$/;"	f	class:P9813Controller	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void init() {$/;"	f	class:PixieController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void init() {$/;"	f	class:SK9822Controller	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void init() {$/;"	f	class:SM16716Controller	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void init() {$/;"	f	class:WS2801Controller	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/dmx.h	/^	virtual void init() { DMXSerial.init(DMXController); }$/;"	f	class:DMXSerialController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/dmx.h	/^	virtual void init() { DmxSimple.usePin(DATA_PIN); }$/;"	f	class:DMXSimpleController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	void init() {$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	void init() { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	void init() { \/* TODO *\/ }$/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/clockless_apollo3.h	/^	virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	void init() {$/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/clockless_arm_d21.h	/^    virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^	virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^	virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	virtual void init() {$/;"	f	class:InlineBlockClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	virtual void init() {$/;"	f	class:SixteenWayInlineBlockClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	void init() {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^  virtual void init() { \/* do nothing yet *\/ }$/;"	f	class:COctoWS2811Controller	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/smartmatrix_t3.h	/^    virtual void init() {$/;"	f	class:CSmartMatrixController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/ws2812serial_controller.h	/^    virtual void init() { \/* do nothing yet *\/ }$/;"	f	class:CWS2812SerialController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^	virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	virtual void init() {$/;"	f	class:InlineBlockClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	virtual void init() {$/;"	f	class:SixteenWayInlineBlockClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	void init() {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/clockless_arm_kl26.h	/^  virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  void init() {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    virtual void init() {$/;"	f	class:FlexibleInlineBlockClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	void init() { _SPIObject.begin(); }$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/octows2811_controller.h	/^  virtual void init() { \/* do nothing yet *\/ }$/;"	f	class:COctoWS2811Controller	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^    virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    void init() {$/;"	f	class:NRF51SPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        void init() {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^	virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^	virtual void init() {$/;"	f	class:InlineBlockClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	void init() {$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^    virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^	virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void init() {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void init() {$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void init() {$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    virtual void init() {$/;"	f	class:InlineBlockClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    void init()$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^void ESP32RMTController::init(gpio_num_t pin)$/;"	f	class:ESP32RMTController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    void init()$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	void init() {$/;"	f	class:ESP32SPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^	virtual void init() {$/;"	f	class:InlineBlockClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^	virtual void init() {$/;"	f	class:ClocklessController	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	void init() {$/;"	f	class:ESP8266SPIOutput	typeref:typename:void
init	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	void init() { _SPIObject.begin(); }$/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
initBitPatterns	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static void initBitPatterns()$/;"	f	class:ClocklessController	typeref:typename:void
initCurve	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  void initCurve() { \/\/ 0.0 -- 1.0$/;"	f	class:JFixtureAddr	typeref:typename:void
initCurve	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  void initCurve(){ \/\/ 0.0 -- 1.0$/;"	f	class:JFixtureDimmer	typeref:typename:void
initDevice	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^bool MCP23S17::initDevice(uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:bool
initEmptyQuadTree	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^QuadTree * CollisionDetector::initEmptyQuadTree(QuadTree * parent, QuadTreeQuadrant quadrant, in/;"	f	class:fabgl::CollisionDetector	typeref:typename:QuadTree *
initEspnow	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  void initEspnow(String networkName) {$/;"	f	class:JEspnowDevice	typeref:typename:void
initModalWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^ModalWindowState * uiApp::initModalWindow(uiWindow * window)$/;"	f	class:fabgl::uiApp	typeref:typename:ModalWindowState *
initNumbers	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^void initNumbers( void )$/;"	f	typeref:typename:void
initOffsets	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        void initOffsets(int len) {$/;"	f	struct:PixelController	typeref:typename:void
initPin	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    template<int PIN> static void initPin() {$/;"	f	class:InlineBlockClocklessController	typeref:typename:void
initPin	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^	template<int PIN> static void initPin() {$/;"	f	class:InlineBlockClocklessController	typeref:typename:void
initPulseBuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^void ESP32RMTController::initPulseBuffer(int size_in_bytes)$/;"	f	class:ESP32RMTController	typeref:typename:void
initString	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  char const *              initString;$/;"	m	struct:fabgl::TermInfo	typeref:typename:char const *
init_binary_dithering	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        void init_binary_dithering() {$/;"	f	struct:PixelController	typeref:typename:void
init_crtc_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^init_crtc_loop:$/;"	l
initialized	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static bool initialized() { return s_initDone; }$/;"	f	class:fabgl::PS2Controller	typeref:typename:bool
initialized	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool initialized()                   { return m_initialized; }$/;"	f	class:fabgl::SerialPort	typeref:typename:bool
initials	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  char initials[4];$/;"	m	struct:ScoreCard	typeref:typename:char[4]
injectVirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^void Keyboard::injectVirtualKey(VirtualKey virtualKey, bool keyDown, bool insert)$/;"	f	class:fabgl::Keyboard	typeref:typename:void
injectVirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^void Keyboard::injectVirtualKey(VirtualKeyItem const & item, bool insert)$/;"	f	class:fabgl::Keyboard	typeref:typename:void
inleading	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t  inleading;$/;"	m	struct:fabgl::FontInfo	typeref:typename:uint8_t
inoise16	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^uint16_t inoise16(uint32_t x) {$/;"	f	typeref:typename:uint16_t
inoise16	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^uint16_t inoise16(uint32_t x, uint32_t y) {$/;"	f	typeref:typename:uint16_t
inoise16	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^uint16_t inoise16(uint32_t x, uint32_t y, uint32_t z) {$/;"	f	typeref:typename:uint16_t
inoise16_raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^int16_t inoise16_raw(uint32_t x)$/;"	f	typeref:typename:int16_t
inoise16_raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^int16_t inoise16_raw(uint32_t x, uint32_t y)$/;"	f	typeref:typename:int16_t
inoise16_raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^int16_t inoise16_raw(uint32_t x, uint32_t y, uint32_t z)$/;"	f	typeref:typename:int16_t
inoise8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^uint8_t inoise8(uint16_t x) {$/;"	f	typeref:typename:uint8_t
inoise8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^uint8_t inoise8(uint16_t x, uint16_t y) {$/;"	f	typeref:typename:uint8_t
inoise8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^uint8_t inoise8(uint16_t x, uint16_t y, uint16_t z) {$/;"	f	typeref:typename:uint8_t
inoise8_raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^int8_t inoise8_raw(uint16_t x)$/;"	f	typeref:typename:int8_t
inoise8_raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^int8_t inoise8_raw(uint16_t x, uint16_t y)$/;"	f	typeref:typename:int8_t
inoise8_raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^int8_t inoise8_raw(uint16_t x, uint16_t y, uint16_t z)$/;"	f	typeref:typename:int8_t
inputBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiMessageBoxResult uiApp::inputBox(char const * title, char const * text, char * inOutString, in/;"	f	class:fabgl::uiApp	typeref:typename:uiMessageBoxResult
inputBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  InputBox *       inputBox;$/;"	m	struct:fabgl::InputForm	typeref:typename:InputBox *
inputConsumerTaskStackSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int Terminal::inputConsumerTaskStackSize = FABGLIB_DEFAULT_TERMINAL_INPUT_CONSUMER_TASK_STACK_SI/;"	m	class:fabgl::Terminal	typeref:typename:int
inputConsumerTaskStackSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  static int inputConsumerTaskStackSize;$/;"	m	class:fabgl::Terminal	typeref:typename:int
inputQueueSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int Terminal::inputQueueSize = FABGLIB_DEFAULT_TERMINAL_INPUT_QUEUE_SIZE;$/;"	m	class:fabgl::Terminal	typeref:typename:int
inputQueueSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  static int inputQueueSize;$/;"	m	class:fabgl::Terminal	typeref:typename:int
input_file	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^input_file = args[0]$/;"	v
insert	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^void QuadTree::insert(QuadTreeObject * object)$/;"	f	class:fabgl::QuadTree	typeref:typename:void
insert	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiTextEdit::insert(char c)$/;"	f	class:fabgl::uiTextEdit	typeref:typename:void
insert	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void StringList::insert(int index, char const * str)$/;"	f	class:fabgl::StringList	typeref:typename:void
insertAfter	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::insertAfter(uiWindow * child, uiWindow * underlyingChild)$/;"	f	class:fabgl::uiWindow	typeref:typename:void
insertAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::insertAt(int column, int row, int count)$/;"	f	class:fabgl::Terminal	typeref:typename:void
insertEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^bool uiApp::insertEvent(uiEvent const * event)$/;"	f	class:fabgl::uiApp	typeref:typename:bool
insertItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^void MachineConf::insertItem(int insertingPoint, MachineConfItem * item)$/;"	f	class:MachineConf	typeref:typename:void
insertMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         insertMode;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
insertToInputQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool Terminal::insertToInputQueue(uint8_t c, bool fromISR)$/;"	f	class:fabgl::Terminal	typeref:typename:bool
installProgram	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^void installProgram(int progIndex)$/;"	f	typeref:typename:void
instance	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^  static Supervisor * instance() { return s_singleton; }$/;"	f	class:Supervisor	typeref:typename:Supervisor *
instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static PS2Controller * instance()           { return s_instance; }$/;"	f	class:fabgl::PS2Controller	typeref:typename:PS2Controller *
instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.h	/^  static CVBS16Controller * instance()                      { return s_instance; }$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:CVBS16Controller *
instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.h	/^  static VGA16Controller * instance() { return s_instance; }$/;"	f	class:fabgl::VGA16Controller	typeref:typename:VGA16Controller *
instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.h	/^  static VGA2Controller * instance() { return s_instance; }$/;"	f	class:fabgl::VGA2Controller	typeref:typename:VGA2Controller *
instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.h	/^  static VGA4Controller * instance() { return s_instance; }$/;"	f	class:fabgl::VGA4Controller	typeref:typename:VGA4Controller *
instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.h	/^  static VGA8Controller * instance() { return s_instance; }$/;"	f	class:fabgl::VGA8Controller	typeref:typename:VGA8Controller *
instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.h	/^  static VGAController * instance() { return s_instance; }$/;"	f	class:fabgl::VGAController	typeref:typename:VGAController *
instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  static VGADirectController * instance() { return s_instance; }$/;"	f	class:fabgl::VGADirectController	typeref:typename:VGADirectController *
instance_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/SlotFunctions.hpp	/^  VariantSlot* instance_;$/;"	m	struct:SlotKeySetter	typeref:typename:VariantSlot *
instance_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^    VariantData* instance_;$/;"	m	struct:VariantData::VariantStringSetter	typeref:typename:VariantData *
instr_table_lookup	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t * instr_table_lookup[] = {    rm_mode12_reg1,    \/\/ 0$/;"	v	namespace:fabgl	typeref:typename:uint8_t * []	file:
int0	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int0:$/;"	l
int09_bios_redirect	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int09_bios_redirect:$/;"	l
int09_redirect_end	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int09_redirect_end:$/;"	l
int09_redirect_start	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int09_redirect_start:$/;"	l
int1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1:$/;"	l
int10	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10:$/;"	l
int10_charatcur	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur:$/;"	l
int10_charatcur_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_done:$/;"	l
int10_charatcur_graph	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_graph:$/;"	l
int10_charatcur_graph_320x200	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_graph_320x200:$/;"	l
int10_charatcur_graph_320x200_read	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_graph_320x200_read:$/;"	l
int10_charatcur_graph_320x200_read_1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_graph_320x200_read_1:$/;"	l
int10_charatcur_graph_320x200_read_2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_graph_320x200_read_2:$/;"	l
int10_charatcur_graph_320x200_rep1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_graph_320x200_rep1:$/;"	l
int10_charatcur_graph_640x200	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_graph_640x200:$/;"	l
int10_charatcur_graph_endsearch	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_graph_endsearch:$/;"	l
int10_charatcur_graph_find	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_graph_find:$/;"	l
int10_charatcur_graph_find_1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_graph_find_1:$/;"	l
int10_charatcur_graph_find_2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_graph_find_2:$/;"	l
int10_charatcur_page_ok	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_page_ok:$/;"	l
int10_charatcur_t40	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_t40:$/;"	l
int10_charatcur_t80	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_charatcur_t80:$/;"	l
int10_get_cursor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_get_cursor:$/;"	l
int10_get_cursor_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_get_cursor_done:$/;"	l
int10_get_font_info	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_get_font_info:$/;"	l
int10_get_font_info_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_get_font_info_done:$/;"	l
int10_get_font_info_int1f_vector	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_get_font_info_int1f_vector:$/;"	l
int10_get_state_info	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_get_state_info:$/;"	l
int10_get_state_info_pages_4	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_get_state_info_pages_4:$/;"	l
int10_get_state_info_pages_8	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_get_state_info_pages_8:$/;"	l
int10_get_state_info_pages_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_get_state_info_pages_done:$/;"	l
int10_get_vm	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_get_vm:$/;"	l
int10_palette	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_palette:$/;"	l
int10_palette_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_palette_done:$/;"	l
int10_palette_get1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_palette_get1:$/;"	l
int10_palette_getblock	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_palette_getblock:$/;"	l
int10_palette_getblock_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_palette_getblock_done:$/;"	l
int10_palette_getblock_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_palette_getblock_loop:$/;"	l
int10_palette_set1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_palette_set1:$/;"	l
int10_palette_setblock	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_palette_setblock:$/;"	l
int10_palette_setblock_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_palette_setblock_done:$/;"	l
int10_palette_setblock_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_palette_setblock_loop:$/;"	l
int10_scroll_down_window	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_scroll_down_window:$/;"	l
int10_scroll_up_window	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_scroll_up_window:$/;"	l
int10_scrolldown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_scrolldown:$/;"	l
int10_scrolldown_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_scrolldown_done:$/;"	l
int10_scrollup	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_scrollup:$/;"	l
int10_scrollup_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_scrollup_done:$/;"	l
int10_set_colour	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_colour:$/;"	l
int10_set_colour_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_colour_done:$/;"	l
int10_set_cshape	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_cshape:$/;"	l
int10_set_cursor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_cursor:$/;"	l
int10_set_cursor_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_cursor_done:$/;"	l
int10_set_disp_page	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_disp_page:$/;"	l
int10_set_disp_page_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_disp_page_done:$/;"	l
int10_set_disp_page_t40	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_disp_page_t40:$/;"	l
int10_set_disp_page_t80	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_disp_page_t80:$/;"	l
int10_set_disp_page_upd	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_disp_page_upd:$/;"	l
int10_set_int43_8x8dd	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_int43_8x8dd:$/;"	l
int10_set_palette	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_palette:$/;"	l
int10_set_palette1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_palette1:$/;"	l
int10_set_palette_update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_palette_update:$/;"	l
int10_set_vm	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm:$/;"	l
int10_set_vm_0	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_0:$/;"	l
int10_set_vm_1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_1:$/;"	l
int10_set_vm_11	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_11:$/;"	l
int10_set_vm_13	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_13:$/;"	l
int10_set_vm_2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_2:$/;"	l
int10_set_vm_3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_3:$/;"	l
int10_set_vm_4	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_4:$/;"	l
int10_set_vm_5	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_5:$/;"	l
int10_set_vm_6	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_6:$/;"	l
int10_set_vm_cls	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_cls:$/;"	l
int10_set_vm_nocls	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_nocls:$/;"	l
int10_set_vm_upd	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_upd:$/;"	l
int10_set_vm_write	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_set_vm_write:$/;"	l
int10_vid_combination	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_vid_combination:$/;"	l
int10_vid_combination_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  int10_vid_combination_done:$/;"	l
int10_video_subsystem_cfg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_video_subsystem_cfg:$/;"	l
int10_write_char	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char:$/;"	l
int10_write_char_attrib	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_attrib:$/;"	l
int10_write_char_attrib_cga320	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_attrib_cga320:$/;"	l
int10_write_char_attrib_cga640	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_attrib_cga640:$/;"	l
int10_write_char_attrib_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_attrib_done:$/;"	l
int10_write_char_attrib_mode11	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_attrib_mode11:$/;"	l
int10_write_char_attrib_mode13	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_attrib_mode13:$/;"	l
int10_write_char_attrib_next	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_attrib_next:$/;"	l
int10_write_char_attrib_page_ok	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_attrib_page_ok:$/;"	l
int10_write_char_attrib_repeat	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_attrib_repeat:$/;"	l
int10_write_char_attrib_t40	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_attrib_t40:$/;"	l
int10_write_char_attrib_t80	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_attrib_t80:$/;"	l
int10_write_char_attrib_text	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_attrib_text:$/;"	l
int10_write_char_cga320	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_cga320:$/;"	l
int10_write_char_cga640	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_cga640:$/;"	l
int10_write_char_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_done:$/;"	l
int10_write_char_mode11	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_mode11:$/;"	l
int10_write_char_mode13	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_mode13:$/;"	l
int10_write_char_next	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_next:$/;"	l
int10_write_char_page_ok	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_page_ok:$/;"	l
int10_write_char_repeat	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_repeat:$/;"	l
int10_write_char_t40	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_t40:$/;"	l
int10_write_char_t80	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_t80:$/;"	l
int10_write_char_text	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_text:$/;"	l
int10_write_char_tty	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty:$/;"	l
int10_write_char_tty_1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_1:$/;"	l
int10_write_char_tty_bs	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_bs:$/;"	l
int10_write_char_tty_cga320	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_cga320:$/;"	l
int10_write_char_tty_cga640	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_cga640:$/;"	l
int10_write_char_tty_cr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_cr:$/;"	l
int10_write_char_tty_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_done:$/;"	l
int10_write_char_tty_mode11	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_mode11:$/;"	l
int10_write_char_tty_mode13	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_mode13:$/;"	l
int10_write_char_tty_nl	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_nl:$/;"	l
int10_write_char_tty_page_ok	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_page_ok:$/;"	l
int10_write_char_tty_printable	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_printable:$/;"	l
int10_write_char_tty_set_crtc_cursor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_set_crtc_cursor:$/;"	l
int10_write_char_tty_t40	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_t40:$/;"	l
int10_write_char_tty_t80	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_t80:$/;"	l
int10_write_char_tty_text	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_text:$/;"	l
int10_write_char_tty_upd_cursor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int10_write_char_tty_upd_cursor:$/;"	l
int11	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int11:$/;"	l
int12	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int12:$/;"	l
int13	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int13:$/;"	l
int14	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int14:$/;"	l
int14_get_port_status	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int14_get_port_status:$/;"	l
int14_init	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int14_init:$/;"	l
int14_read_char	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int14_read_char:$/;"	l
int14_read_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int14_read_done:$/;"	l
int14_read_get	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int14_read_get:$/;"	l
int14_read_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int14_read_loop:$/;"	l
int14_write_char	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int14_write_char:$/;"	l
int14_write_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int14_write_done:$/;"	l
int14_write_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int14_write_loop:$/;"	l
int14_write_send	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int14_write_send:$/;"	l
int15	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15:$/;"	l
int15_80	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_80:$/;"	l
int15_81	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_81:$/;"	l
int15_82	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_82:$/;"	l
int15_83	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_83:$/;"	l
int15_83_cancel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_83_cancel:$/;"	l
int15_83_err	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_83_err:$/;"	l
int15_85	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_85:$/;"	l
int15_86	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_86:$/;"	l
int15_86_err	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_86_err:$/;"	l
int15_86_wait	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_86_wait:$/;"	l
int15_c0	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_c0:$/;"	l
int15_c1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_c1:$/;"	l
int15_c2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int15_c2:$/;"	l
int16	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16:$/;"	l
int16_00	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16_00:$/;"	l
int16_00_wait	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16_00_wait:$/;"	l
int16_01	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16_01:$/;"	l
int16_02	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16_02:$/;"	l
int16_03	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16_03:$/;"	l
int16_05	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16_05:$/;"	l
int16_09	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16_09:$/;"	l
int16_10	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16_10:$/;"	l
int16_10_wait	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16_10_wait:$/;"	l
int16_11	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16_11:$/;"	l
int16_12	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16_12:$/;"	l
int16_92	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int16_92:$/;"	l
int17	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int17:$/;"	l
int17_initprint	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int17_initprint:$/;"	l
int18	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int18:$/;"	l
int19	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int19:$/;"	l
int1a	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1a:$/;"	l
int1a_00	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1a_00:$/;"	l
int1a_01	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1a_01:$/;"	l
int1a_02	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1a_02:$/;"	l
int1a_03	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1a_03:$/;"	l
int1a_04	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1a_04:$/;"	l
int1a_05	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1a_05:$/;"	l
int1a_06	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1a_06:$/;"	l
int1a_07	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1a_07:$/;"	l
int1a_fail	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1a_fail:$/;"	l
int1a_success	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1a_success:$/;"	l
int1b	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1b:$/;"	l
int1c	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1c:$/;"	l
int1d	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1d:$/;"	l
int1e	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int1e:$/;"	l
int2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int2:$/;"	l
int2gpio	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline gpio_num_t int2gpio(int gpio)$/;"	f	namespace:fabgl	typeref:typename:gpio_num_t
int3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int3:$/;"	l
int4	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int4:$/;"	l
int41	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int41:$/;"	l
int41_max_cyls	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int41_max_cyls   dw 0$/;"	d
int41_max_heads	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int41_max_heads  db 0$/;"	d
int41_max_sect	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int41_max_sect  db 0$/;"	d
int46	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int46:$/;"	l
int46_max_cyls	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int46_max_cyls   dw 0$/;"	d
int46_max_heads	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int46_max_heads  db 0$/;"	d
int46_max_sect	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int46_max_sect  db 0$/;"	d
int5	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int5:$/;"	l
int6	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int6:$/;"	l
int7	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int7:$/;"	l
int70	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int70:$/;"	l
int70_checkAlarm	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int70_checkAlarm:$/;"	l
int70_exit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int70_exit:$/;"	l
int74	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int74:$/;"	l
int74_exit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int74_exit:$/;"	l
int74_pop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int74_pop:$/;"	l
int74_push	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int74_push:$/;"	l
int74_reset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int74_reset:$/;"	l
int8	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int8:$/;"	l
int9	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int9:$/;"	l
int9_ctrlbreak	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int9_ctrlbreak:$/;"	l
int9_exit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int9_exit:$/;"	l
int9_getcode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int9_getcode:$/;"	l
int9_pause	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int9_pause:$/;"	l
int9_printscreen	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int9_printscreen:$/;"	l
int9_reboot	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int9_reboot:$/;"	l
int9_sysreq	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int9_sysreq:$/;"	l
int_clear	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::int_clear()$/;"	f	class:fabgl::Terminal	typeref:typename:void
int_enableCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool Terminal::int_enableCursor(bool value)$/;"	f	class:fabgl::Terminal	typeref:typename:bool
int_setBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::int_setBackgroundColor(Color color)$/;"	f	class:fabgl::Terminal	typeref:typename:void
int_setForegroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::int_setForegroundColor(Color color)$/;"	f	class:fabgl::Terminal	typeref:typename:void
int_setTerminalType	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::int_setTerminalType(TermInfo const * value)$/;"	f	class:fabgl::Terminal	typeref:typename:void
int_setTerminalType	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::int_setTerminalType(TermType value)$/;"	f	class:fabgl::Terminal	typeref:typename:void
int_t	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/integer.hpp	/^struct int_t<16> {$/;"	s
int_t	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/integer.hpp	/^struct int_t<32> {$/;"	s
int_t	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/integer.hpp	/^struct int_t<8> {$/;"	s
int_table	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^int_table   dw int0$/;"	d
inta	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^inta:$/;"	l
intb	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^intb:$/;"	l
intc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^intc:$/;"	l
intd	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^intd:$/;"	l
inte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^inte:$/;"	l
integral	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatParts.hpp	/^  uint32_t integral;$/;"	m	struct:FloatParts	typeref:typename:uint32_t
integral_constant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/integral_constant.hpp	/^struct integral_constant {$/;"	s
intemulate	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^int Z80::intemulate(int opcode, int elapsed_cycles)$/;"	f	class:fabgl::Z80	typeref:typename:int
inten	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t inten;$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
interlaceFactor	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  uint8_t         interlaceFactor;                \/\/ 1 = progressive, 2 = interlaced$/;"	m	struct:fabgl::CVBSParams	typeref:typename:uint8_t
internalCommand	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::internalCommand(uint16_t cmdlineAddr, size_t cmdlen, uint16_t tailAddr)$/;"	f	class:CCP	typeref:typename:bool
interpolator	examples/test/.pio/libdeps/esp32dev/FabGL/tools/wav2header/wav2header.py	/^interpolator = interpolate.interp1d(time_old, old_audio.T)$/;"	v
interrupt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^bool Machine::interrupt(void * context, int num)$/;"	f	class:Machine	typeref:typename:bool
interruptHandler	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static IRAM_ATTR void interruptHandler(void *arg)$/;"	f	class:ClocklessController	typeref:typename:IRAM_ATTR void
interruptHandler	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^void IRAM_ATTR ESP32RMTController::interruptHandler(void *arg)$/;"	f	class:ESP32RMTController	typeref:typename:void IRAM_ATTR
intersection	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^Rect IRAM_ATTR Rect::intersection(Rect const & rect) const$/;"	f	class:fabgl::Rect	typeref:typename:Rect IRAM_ATTR
intersects	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool intersects(Rect const & rect) const       { return X1 <= rect.X2 && X2 >= rect.X1 && Y1 </;"	f	struct:fabgl::Rect	typeref:typename:bool
intf	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^intf:$/;"	l
invadersSoundSamples	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sounds.h	/^const int8_t * invadersSoundSamples[] = { invadersSoundSamples_1, invadersSoundSamples_2, invade/;"	v	typeref:typename:const int8_t * []
invadersSoundSamplesSize	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sounds.h	/^const int invadersSoundSamplesSize[]  = { sizeof(invadersSoundSamples_1), sizeof(invadersSoundSa/;"	v	typeref:typename:const int[]
invadersSoundSamples_1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sounds.h	/^const int8_t invadersSoundSamples_1[] = {$/;"	v	typeref:typename:const int8_t[]
invadersSoundSamples_2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sounds.h	/^ const int8_t invadersSoundSamples_2[] = {$/;"	v	typeref:typename:const int8_t[]
invadersSoundSamples_3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sounds.h	/^const int8_t invadersSoundSamples_3[] = {$/;"	v	typeref:typename:const int8_t[]
invadersSoundSamples_4	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sounds.h	/^const int8_t invadersSoundSamples_4[] = {$/;"	v	typeref:typename:const int8_t[]
invert	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::invert(bool value)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
invert	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint16_t invert           : 1;  \/**< If enabled swaps foreground and background colors. To /;"	m	struct:fabgl::GlyphOptions::__anon3dd53dc60108	typeref:typename:uint16_t:1
invertRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::invertRect(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
invertRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::invertRect(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::TFTController	typeref:typename:void
invertRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::invertRect(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
invertRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::invertRect(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
invertRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::invertRect(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
invertRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::invertRect(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
invertRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::invertRect(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
invertRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::invertRect(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
invertRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::invertRect(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
invertRectangle	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::invertRectangle(Rect const & rect)$/;"	f	class:fabgl::Canvas	typeref:typename:void
invertRectangle	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::invertRectangle(int X1, int Y1, int X2, int Y2)$/;"	f	class:fabgl::Canvas	typeref:typename:void
ipoints	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^    Point   ipoints[MAXPOINTS];$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:Point[]
ipoints	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^    Point   ipoints[MAXPOINTS];$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:Point[]
ipoints	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^    Point   ipoints[MAXPOINTS];$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:Point[]
iret	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^iret$/;"	l
iret_unsupported_bios_func	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^iret_unsupported_bios_func:$/;"	l
is	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  bool is() const {$/;"	f	class:JsonDocument	typeref:typename:bool
is	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  bool is() {$/;"	f	class:JsonDocument	typeref:typename:bool
is	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  is() const {$/;"	f	class:JsonVariantConst
is	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^      is() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE typename enable_if<ConverterNeedsWriteableRef<T>::value,bool>::type
is	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  is() const {$/;"	f	class:VariantRefBase
isALT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline bool isALT(VirtualKey value)$/;"	f	namespace:fabgl	typeref:typename:bool
isAcquired	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static bool            isAcquired() {$/;"	f	class:PWM_Arbiter	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE bool
isActive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  bool isActive()               { return m_inputATN || m_arbState != ArbState::Idle; }$/;"	f	class:IECDrive	typeref:typename:bool
isActive	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool isActive() { return s_activeTerminal == this; }$/;"	f	class:fabgl::Terminal	typeref:typename:bool
isActiveWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^bool uiWindow::isActiveWindow()$/;"	f	class:fabgl::uiWindow	typeref:typename:bool
isAligned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/Alignment.hpp	/^inline bool isAligned(T* ptr) {$/;"	f	typeref:typename:bool
isAligned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/Alignment.hpp	/^inline bool isAligned(size_t value) {$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE bool
isArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  bool isArray() const {$/;"	f	class:VariantData	typeref:typename:bool
isBetween	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  static inline bool isBetween(char c, char min, char max) {$/;"	f	class:JsonDeserializer	typeref:typename:bool
isBoolean	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  bool isBoolean() const {$/;"	f	class:VariantData	typeref:typename:bool
isButtonA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isButtonA()  { return bLeftButton; }$/;"	f	struct:GameControllerMouse	typeref:typename:bool
isButtonA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isButtonA()  { return false;  };$/;"	f	struct:GameController	typeref:typename:bool
isButtonA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isButtonA() {    return digitalRead(pinButtonA);  }$/;"	f	struct:GameControllerJoystick	typeref:typename:bool
isButtonA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isButtonA() {    return getKeyStatus(buttonA);  }$/;"	f	struct:GameControllerKeys	typeref:typename:bool
isButtonA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isButtonA()  { return bLeftButton; }$/;"	f	struct:GameControllerMouse	typeref:typename:bool
isButtonA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isButtonA()  { return false;  };$/;"	f	struct:GameController	typeref:typename:bool
isButtonA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isButtonA() {    return digitalRead(pinButtonA);  }$/;"	f	struct:GameControllerJoystick	typeref:typename:bool
isButtonA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isButtonA() {    return getKeyStatus(buttonA);  }$/;"	f	struct:GameControllerKeys	typeref:typename:bool
isButtonB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isButtonB()  { return bRightButton; }$/;"	f	struct:GameControllerMouse	typeref:typename:bool
isButtonB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isButtonB()  { return false;  };$/;"	f	struct:GameController	typeref:typename:bool
isButtonB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isButtonB() {    return digitalRead(pinButtonB);  }$/;"	f	struct:GameControllerJoystick	typeref:typename:bool
isButtonB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isButtonB() {    return getKeyStatus(buttonB);  }$/;"	f	struct:GameControllerKeys	typeref:typename:bool
isButtonB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isButtonB()  { return bRightButton; }$/;"	f	struct:GameControllerMouse	typeref:typename:bool
isButtonB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isButtonB()  { return false;  };$/;"	f	struct:GameController	typeref:typename:bool
isButtonB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isButtonB() {    return digitalRead(pinButtonB);  }$/;"	f	struct:GameControllerJoystick	typeref:typename:bool
isButtonB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isButtonB() {    return getKeyStatus(buttonB);  }$/;"	f	struct:GameControllerKeys	typeref:typename:bool
isCTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline bool isCTRL(VirtualKey value)$/;"	f	namespace:fabgl	typeref:typename:bool
isChild	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^bool uiWindow::isChild(uiWindow * window)$/;"	f	class:fabgl::uiWindow	typeref:typename:bool
isCollection	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  bool isCollection() const {$/;"	f	class:VariantData	typeref:typename:bool
isDefaultErrorMode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool isDefaultErrorMode()       { return SCB_getByte(SCB_ERRORMODE_B) < 0xFE; }$/;"	f	class:BDOS	typeref:typename:bool
isDir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::isDir(uint16_t FCBaddr)$/;"	f	class:BDOS	typeref:typename:bool
isDir	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool isDir;          \/**< True if this is a directory, false if this is an ordinary file *\/$/;"	m	struct:fabgl::DirItem	typeref:typename:bool
isDirectory	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^bool uiFileBrowser::isDirectory()$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:bool
isDisableCTRLCExit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool isDisableCTRLCExit()    { return SCB_getWord(SCB_CONSOLEMODE_W) & CONSOLEMODE_DISABLE_CTR/;"	f	class:BDOS	typeref:typename:bool
isDisableStopScroll	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool isDisableStopScroll()   { return SCB_getWord(SCB_CONSOLEMODE_W) & CONSOLEMODE_DISABLE_STO/;"	f	class:BDOS	typeref:typename:bool
isDisplayReturnErrorMode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool isDisplayReturnErrorMode() { return SCB_getByte(SCB_ERRORMODE_B) == 0xFE; }$/;"	f	class:BDOS	typeref:typename:bool
isDoubleBuffered	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  bool isDoubleBuffered()                  { return m_doubleBufferedSetup; }$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:bool
isDoubleBufferedEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  bool isDoubleBufferedEnabled()           { return m_doubleBufferedEnabled; }$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:bool
isDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isDown()     { return bRightButton;  }$/;"	f	struct:GameControllerMouse	typeref:typename:bool
isDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isDown()     { return false;  };$/;"	f	struct:GameController	typeref:typename:bool
isDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isDown()    {    return digitalRead(pinDown);  }$/;"	f	struct:GameControllerJoystick	typeref:typename:bool
isDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isDown()    {    return getKeyStatus(down);  }$/;"	f	struct:GameControllerKeys	typeref:typename:bool
isDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isDown()     { return bRightButton;  }$/;"	f	struct:GameControllerMouse	typeref:typename:bool
isDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isDown()     { return false;  };$/;"	f	struct:GameController	typeref:typename:bool
isDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isDown()    {    return digitalRead(pinDown);  }$/;"	f	struct:GameControllerJoystick	typeref:typename:bool
isDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isDown()    {    return getKeyStatus(down);  }$/;"	f	struct:GameControllerKeys	typeref:typename:bool
isEmpty	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^bool QuadTree::isEmpty()$/;"	f	class:fabgl::QuadTree	typeref:typename:bool
isEmpty	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool isEmpty() { return m_items == nullptr; }$/;"	f	class:fabgl::Stack	typeref:typename:bool
isEnclosed	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  bool isEnclosed() const {$/;"	f	class:VariantData	typeref:typename:bool
isFUNC11CTRLCOnlyMode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool isFUNC11CTRLCOnlyMode() { return SCB_getWord(SCB_CONSOLEMODE_W) & CONSOLEMODE_FUN11_CTRLC/;"	f	class:BDOS	typeref:typename:bool
isFileDelimiter	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::isFileDelimiter(char c)$/;"	f	class:BDOS	typeref:typename:bool
isFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  bool isFloat() const {$/;"	f	class:VariantData	typeref:typename:bool
isFocusable	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^bool uiWindow::isFocusable()$/;"	f	class:fabgl::uiWindow	typeref:typename:bool
isFree	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool LightMemoryPool::isFree(int pos)$/;"	f	class:fabgl::LightMemoryPool	typeref:typename:bool
isGUI	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline bool isGUI(VirtualKey value)$/;"	f	namespace:fabgl	typeref:typename:bool
isHighSurrogate	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp	/^inline bool isHighSurrogate(uint16_t codeunit) {$/;"	f	namespace:Utf16	typeref:typename:bool
isInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  bool isInteger() const {$/;"	f	class:VariantData	typeref:typename:bool
isKeyboardAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool isKeyboardAvailable() { return m_keyboardAvailable; }$/;"	f	class:fabgl::Keyboard	typeref:typename:bool
isLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isLeft()     { dx = 0; return bIsLeft;  }$/;"	f	struct:GameControllerMouse	typeref:typename:bool
isLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isLeft()     { return false;  };$/;"	f	struct:GameController	typeref:typename:bool
isLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isLeft()    {    return digitalRead(pinLeft);  }$/;"	f	struct:GameControllerJoystick	typeref:typename:bool
isLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isLeft()    {    return getKeyStatus(left);  }$/;"	f	struct:GameControllerKeys	typeref:typename:bool
isLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isLeft()     { dx = 0; return bIsLeft;  }$/;"	f	struct:GameControllerMouse	typeref:typename:bool
isLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isLeft()     { return false;  };$/;"	f	struct:GameController	typeref:typename:bool
isLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isLeft()    {    return digitalRead(pinLeft);  }$/;"	f	struct:GameControllerJoystick	typeref:typename:bool
isLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isLeft()    {    return getKeyStatus(left);  }$/;"	f	struct:GameControllerKeys	typeref:typename:bool
isLinked	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  bool isLinked() const {$/;"	f	class:JsonString	typeref:typename:bool
isListBoxOpen	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  bool isListBoxOpen()          { return m_listBoxParent->state().visible; }$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:bool
isLowSurrogate	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp	/^inline bool isLowSurrogate(uint16_t codeunit) {$/;"	f	namespace:Utf16	typeref:typename:bool
isMouseAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  bool isMouseAvailable() { return m_mouseAvailable; }$/;"	f	class:fabgl::Mouse	typeref:typename:bool
isMouseOver	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  bool isMouseOver() { return m_isMouseOver; }$/;"	f	class:fabgl::uiWindow	typeref:typename:bool
isMultiScanBlackLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^bool VGABaseController::isMultiScanBlackLine(int scan)$/;"	f	class:fabgl::VGABaseController	typeref:typename:bool
isNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE bool isNull() const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE bool
isNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  FORCE_INLINE bool isNull() const {$/;"	f	class:JsonArrayConst	typeref:typename:FORCE_INLINE bool
isNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  bool isNull() const {$/;"	f	class:JsonDocument	typeref:typename:bool
isNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE bool isNull() const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE bool
isNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  FORCE_INLINE bool isNull() const {$/;"	f	class:JsonObjectConst	typeref:typename:FORCE_INLINE bool
isNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  bool isNull() const {$/;"	f	class:FlashString	typeref:typename:bool
isNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  bool isNull() const {$/;"	f	class:SizedRamString	typeref:typename:bool
isNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  bool isNull() const {$/;"	f	class:ZeroTerminatedRamString	typeref:typename:bool
isNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  bool isNull() const {$/;"	f	class:JsonString	typeref:typename:bool
isNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  FORCE_INLINE bool isNull() const {$/;"	f	class:JsonVariantConst	typeref:typename:FORCE_INLINE bool
isNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  bool isNull() const {$/;"	f	class:VariantData	typeref:typename:bool
isNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE bool isNull() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE bool
isObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  bool isObject() const {$/;"	f	class:VariantData	typeref:typename:bool
isPhysicalDeviceAssigned	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^bool BIOS::isPhysicalDeviceAssigned(int logicalDevice, int physicalDevice)$/;"	f	class:BIOS	typeref:typename:bool
isQuote	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  static inline bool isQuote(char c) {$/;"	f	class:JsonDeserializer	typeref:typename:bool
isRawConsoleOutMode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool isRawConsoleOutMode()   { return SCB_getWord(SCB_CONSOLEMODE_W) & CONSOLEMODE_RAWCONSOLE_/;"	f	class:BDOS	typeref:typename:bool
isReturnErrorMode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool isReturnErrorMode()        { return SCB_getByte(SCB_ERRORMODE_B) == 0xFF; }$/;"	f	class:BDOS	typeref:typename:bool
isRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isRight()    { dx = 0; return bIsRight;  }$/;"	f	struct:GameControllerMouse	typeref:typename:bool
isRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isRight()    { return false;  };$/;"	f	struct:GameController	typeref:typename:bool
isRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isRight()   {    return digitalRead(pinRight);  }$/;"	f	struct:GameControllerJoystick	typeref:typename:bool
isRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isRight()   {    return getKeyStatus(right);  }$/;"	f	struct:GameControllerKeys	typeref:typename:bool
isRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isRight()    { dx = 0; return bIsRight;  }$/;"	f	struct:GameControllerMouse	typeref:typename:bool
isRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isRight()    { return false;  };$/;"	f	struct:GameController	typeref:typename:bool
isRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isRight()   {    return digitalRead(pinRight);  }$/;"	f	struct:GameControllerJoystick	typeref:typename:bool
isRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isRight()   {    return getKeyStatus(right);  }$/;"	f	struct:GameControllerKeys	typeref:typename:bool
isSHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline bool isSHIFT(VirtualKey value)$/;"	f	namespace:fabgl	typeref:typename:bool
isSelected	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	virtual bool isSelected() { return (*mPort & mPinMask) == mPinMask; }$/;"	f	class:Pin	typeref:typename:bool
isStatic	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint8_t isStatic:  1;$/;"	m	struct:fabgl::Sprite::__anon3dd53dc60208	typeref:typename:uint8_t:1
isString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  bool isString() const {$/;"	f	class:VariantData	typeref:typename:bool
isSupportedSCBField	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^inline bool isSupportedSCBField(int field)$/;"	f	typeref:typename:bool
isUnbound	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  FORCE_INLINE bool isUnbound() const {$/;"	f	class:JsonVariantConst	typeref:typename:FORCE_INLINE bool
isUnbound	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE bool isUnbound() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE bool
isUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isUp()       { return bLeftButton;  }$/;"	f	struct:GameControllerMouse	typeref:typename:bool
isUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isUp()       { return false;  };$/;"	f	struct:GameController	typeref:typename:bool
isUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isUp()      {    return digitalRead(pinUp);  }$/;"	f	struct:GameControllerJoystick	typeref:typename:bool
isUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual bool isUp()      {    return getKeyStatus(up);  }$/;"	f	struct:GameControllerKeys	typeref:typename:bool
isUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isUp()       { return bLeftButton;  }$/;"	f	struct:GameControllerMouse	typeref:typename:bool
isUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isUp()       { return false;  };$/;"	f	struct:GameController	typeref:typename:bool
isUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isUp()      {    return digitalRead(pinUp);  }$/;"	f	struct:GameControllerJoystick	typeref:typename:bool
isUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual bool isUp()      {    return getKeyStatus(up);  }$/;"	f	struct:GameControllerKeys	typeref:typename:bool
isVKDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^bool Keyboard::isVKDown(VirtualKey virtualKey)$/;"	f	class:fabgl::Keyboard	typeref:typename:bool
isVKDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool TerminalController::isVKDown(VirtualKey vk)$/;"	f	class:fabgl::TerminalController	typeref:typename:bool
isValid	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  bool isValid() const {$/;"	f	class:StringCopier	typeref:typename:bool
isValid	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp	/^  bool isValid() const {$/;"	f	class:StringMover	typeref:typename:bool
isValid	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  bool isValid()                                { return desc != nullptr; }$/;"	f	struct:MachineConfItem	typeref:typename:bool
is_array	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_array.hpp	/^struct is_array : false_type {};$/;"	s
is_array	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_array.hpp	/^struct is_array<T[N]> : true_type {};$/;"	s
is_array	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_array.hpp	/^struct is_array<T[]> : true_type {};$/;"	s
is_base_of	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_base_of.hpp	/^class is_base_of {$/;"	c
is_class	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_class.hpp	/^struct is_class {$/;"	s
is_const	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_const.hpp	/^struct is_const : false_type {};$/;"	s
is_const	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_const.hpp	/^struct is_const<const T> : true_type {};$/;"	s
is_convertible	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_convertible.hpp	/^struct is_convertible {$/;"	s
is_enum	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_enum.hpp	/^struct is_enum {$/;"	s
is_floating_point	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_floating_point.hpp	/^struct is_floating_point$/;"	s
is_integral	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_integral.hpp	/^struct is_integral : integral_constant<bool,$/;"	s
is_pointer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_pointer.hpp	/^struct is_pointer : false_type {};$/;"	s
is_pointer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_pointer.hpp	/^struct is_pointer<T*> : true_type {};$/;"	s
is_same	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_same.hpp	/^struct is_same : false_type {};$/;"	s
is_same	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_same.hpp	/^struct is_same<T, T> : true_type {};$/;"	s
is_signed	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_signed.hpp	/^struct is_signed : integral_constant<bool,$/;"	s
is_std_string	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStringWriter.hpp	/^struct is_std_string : false_type {};$/;"	s
is_std_string	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStringWriter.hpp	/^struct is_std_string<$/;"	s
is_unsigned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_unsigned.hpp	/^struct is_unsigned : integral_constant<bool,$/;"	s
iscmd	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::iscmd(char const * cmd, size_t cmdlen, uint16_t cmdlineAddr)$/;"	f	class:CCP	typeref:typename:bool
isdigit	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/ctype.hpp	/^inline bool isdigit(char c) {$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE bool
isfon	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def isfon(data):$/;"	f
isinf	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/math.hpp	/^bool isinf(T x) {$/;"	f	typeref:typename:bool
isnan	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/math.hpp	/^bool isnan(T x) {$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE bool
isqrt	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int isqrt (int x)$/;"	f	namespace:fabgl	typeref:typename:int
isrCount	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms.cpp	/^    uint32_t isrCount;$/;"	v	typeref:typename:uint32_t
isr_handler	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    static void isr_handler() {$/;"	f	class:PWM_Arbiter	typeref:typename:void
isr_handler	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    static void isr_handler() {$/;"	f	class:ClocklessController	typeref:typename:void
isset	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static bool isset() __attribute__ ((always_inline)) { return (FL_NRF_GPIO->IN & _MASK/;"	f	class:_ARMPIN	typeref:typename:bool
isset	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static bool isset() __attribute__ ((always_inline)) {$/;"	f	class:_ESPPIN	typeref:typename:bool
isset	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static bool isset() __attribute__ ((always_inline)) { return (PIN < 16) ? (GPO & MASK/;"	f	class:_ESPPIN	typeref:typename:bool
issign	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/ctype.hpp	/^inline bool issign(char c) {$/;"	f	typeref:typename:bool
iswap	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^constexpr auto iswap = tswap<int>;$/;"	v	namespace:fabgl	typeref:typename:auto
italic	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint16_t italic           : 1;  \/**< If enabled skews the glyph on the right. To implement /;"	m	struct:fabgl::GlyphOptions::__anon3dd53dc60108	typeref:typename:uint16_t:1
itbl_size	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^itbl_size   dw $-int_table$/;"	d
item	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  MachineConfItem * item;$/;"	m	struct:ConfigDialog	typeref:typename:MachineConfItem *	file:
item	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  T           item;$/;"	m	struct:fabgl::StackItem	typeref:typename:T
itemHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int              itemHeight                     = 16;                      \/**< Item height i/;"	m	struct:fabgl::uiListBoxStyle	typeref:typename:int
itemX	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t              itemX;  \/\/ starts from 0$/;"	m	struct:fabgl::GlyphsBufferRenderInfo	typeref:typename:int16_t
itemY	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t              itemY;  \/\/ starts from 0$/;"	m	struct:fabgl::GlyphsBufferRenderInfo	typeref:typename:int16_t
items	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  StringList & items()                              { return m_items; }$/;"	f	class:fabgl::uiListBox	typeref:typename:StringList &
items	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  StringList & items()                              { return m_items; }$/;"	f	class:fabgl::uiSimpleMenu	typeref:typename:StringList &
items	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  StringList & items()         { return m_menu->items(); }$/;"	f	class:fabgl::uiSplitButton	typeref:typename:StringList &
items	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  StringList & items() { return m_listBox->items(); }$/;"	f	class:fabgl::uiComboBox	typeref:typename:StringList &
items	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char const *     items;       \/\/ "separator" separated items (zero ends the list)$/;"	m	struct:fabgl::SelectForm	typeref:typename:char const *
itemsList	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  StringList *     itemsList;$/;"	m	struct:fabgl::SelectForm	typeref:typename:StringList *
items_deselectAll	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual void items_deselectAll()                  { m_items.deselectAll(); }$/;"	f	class:fabgl::uiListBox	typeref:typename:void
items_deselectAll	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual void items_deselectAll()                  { m_items.deselectAll(); }$/;"	f	class:fabgl::uiSimpleMenu	typeref:typename:void
items_deselectAll	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual void items_deselectAll()                  { m_selected = -1; }$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:void
items_deselectAll	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual void items_deselectAll()                  { }$/;"	f	class:fabgl::uiColorListBox	typeref:typename:void
items_draw	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiColorListBox::items_draw(int index, const Rect & itemRect)$/;"	f	class:fabgl::uiColorListBox	typeref:typename:void
items_draw	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFileBrowser::items_draw(int index, const Rect & itemRect)$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:void
items_draw	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiListBox::items_draw(int index, const Rect & itemRect)$/;"	f	class:fabgl::uiListBox	typeref:typename:void
items_draw	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiSimpleMenu::items_draw(int index, const Rect & itemRect)$/;"	f	class:fabgl::uiSimpleMenu	typeref:typename:void
items_getCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual int items_getCount()                      { return 16; }$/;"	f	class:fabgl::uiColorListBox	typeref:typename:int
items_getCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual int items_getCount()                      { return m_dir.count(); }$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:int
items_getCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual int items_getCount()                      { return m_items.count(); }$/;"	f	class:fabgl::uiListBox	typeref:typename:int
items_getCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual int items_getCount()                      { return m_items.count(); }$/;"	f	class:fabgl::uiSimpleMenu	typeref:typename:int
items_select	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFileBrowser::items_select(int index, bool select)$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:void
items_select	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual void items_select(int index, bool select) { if (select) m_selectedColor = (Color)index/;"	f	class:fabgl::uiColorListBox	typeref:typename:void
items_select	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual void items_select(int index, bool select) { m_items.select(index, select); }$/;"	f	class:fabgl::uiListBox	typeref:typename:void
items_select	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual void items_select(int index, bool select) { m_items.select(index, select); }$/;"	f	class:fabgl::uiSimpleMenu	typeref:typename:void
items_selected	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual bool items_selected(int index)            { return index == (int)m_selectedColor; }$/;"	f	class:fabgl::uiColorListBox	typeref:typename:bool
items_selected	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual bool items_selected(int index)            { return index == m_selected; }$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:bool
items_selected	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual bool items_selected(int index)            { return m_items.selected(index); }$/;"	f	class:fabgl::uiListBox	typeref:typename:bool
items_selected	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual bool items_selected(int index)            { return m_items.selected(index); }$/;"	f	class:fabgl::uiSimpleMenu	typeref:typename:bool
iterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  typedef JsonArrayIterator iterator;$/;"	t	class:JsonArray	typeref:typename:JsonArrayIterator
iterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  typedef JsonArrayConstIterator iterator;$/;"	t	class:JsonArrayConst	typeref:typename:JsonArrayConstIterator
iterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  typedef JsonObjectIterator iterator;$/;"	t	class:JsonObject	typeref:typename:JsonObjectIterator
iterator	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  typedef JsonObjectConstIterator iterator;$/;"	t	class:JsonObjectConst	typeref:typename:JsonObjectConstIterator
iterator	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    typedef pixelset_iterator_base<PIXEL_TYPE> iterator;              \/\/\/< Iterator helper ty/;"	t	class:CPixelView	typeref:typename:pixelset_iterator_base<PIXEL_TYPE>
ivalue	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    int16_t                ivalue;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:int16_t
jFixVersion	examples/test/lib/JFixLib/src/JFixture.h	/^char jFixVersion[2] = {1, 2};$/;"	v	typeref:typename:char[2]
jTl	examples/test/src/main.cpp	/^JTlFix jTl;$/;"	v	typeref:typename:JTlFix
joinAsyncRun	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::joinAsyncRun()$/;"	f	class:fabgl::uiApp	typeref:typename:void
joyEmu	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  JoyEmu joyEmu()              { return m_joyEmu; }$/;"	f	class:Machine	typeref:typename:JoyEmu
jupiter	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap jupiter = Bitmap(64, 48, &jupiter_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
jupiter	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap jupiter = Bitmap(64, 48, &jupiter_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
jupiter_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^const uint8_t jupiter_data[] = {$/;"	v	typeref:typename:const uint8_t[]
jupiter_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^const uint8_t jupiter_data[] = {$/;"	v	typeref:typename:const uint8_t[]
just8bits	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^} just8bits;$/;"	t	typeref:union:__anonad8cb3ed010a
justQuit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  void justQuit() {$/;"	f	struct:ConfigDialog	typeref:typename:void	file:
jxx_dec_a	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t jxx_dec_a[]   = { OF_ADDR, CF_ADDR, ZF_ADDR, CF_ADDR, SF_ADDR, PF_ADDR, XX_ADDR, /;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
jxx_dec_b	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t jxx_dec_b[]   = { XX_ADDR, XX_ADDR, XX_ADDR, ZF_ADDR, XX_ADDR, XX_ADDR, XX_ADDR, /;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
jxx_dec_c	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t jxx_dec_c[]   = { XX_ADDR, XX_ADDR, XX_ADDR,XX_ADDR, XX_ADDR, XX_ADDR, SF_ADDR, S/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
jxx_dec_d	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t jxx_dec_d[]   = { XX_ADDR, XX_ADDR, XX_ADDR, XX_ADDR,XX_ADDR, XX_ADDR, OF_ADDR, O/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
kb_adjust_buf	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^kb_adjust_buf:$/;"	l
kb_adjust_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^kb_adjust_done:$/;"	l
kb_adjust_tail	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^kb_adjust_tail:$/;"	l
kb_led	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^kb_led           db  0x10    ; 40:97, bit 4 = 1, ACK received (always on)$/;"	d
kb_mode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^kb_mode          db  0x10    ; 40:96, bit 4 = 1, 101\/102 enhanced keyboard$/;"	d
kbbuf	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^kbbuf:$/;"	l
kbbuf_end_ptr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^kbbuf_end_ptr    dw  0x003e     ; 40:82$/;"	d
kbbuf_head	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^kbbuf_head       dw  kbbuf-bios_data$/;"	d
kbbuf_start_ptr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^kbbuf_start_ptr  dw  0x001e     ; 40:80$/;"	d
kbbuf_tail	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^kbbuf_tail       dw  kbbuf-bios_data$/;"	d
kbdComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiComboBox *      kbdComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiComboBox *
kbdConv_Generic	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfoKbdConv kbdConv_Generic[] = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfoKbdConv[]
kbdCtrlSet	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  TermInfoKbdConv const *   kbdCtrlSet;$/;"	m	struct:fabgl::TermInfo	typeref:typename:TermInfoKbdConv const *
kernal_rom	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/ROM/kernal_rom.h	/^const uint8_t kernal_rom[] = {$/;"	v	typeref:typename:const uint8_t[]
key	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonPair.hpp	/^  JsonString key() const {$/;"	f	class:JsonPair	typeref:typename:JsonString
key	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonPair.hpp	/^  JsonString key() const {$/;"	f	class:JsonPairConst	typeref:typename:JsonString
key	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  const char* key() const {$/;"	f	class:VariantSlot	typeref:typename:const char *
key	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^    uiKeyEventInfo key;$/;"	m	union:fabgl::uiEvent::uiEventParams	typeref:typename:uiKeyEventInfo
keyAutorepeat	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         keyAutorepeat;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
keyToASCII	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiTextEdit::keyToASCII(uiKeyEventInfo const & key)$/;"	f	class:fabgl::uiTextEdit	typeref:typename:int
key_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonPair.hpp	/^  JsonString key_;$/;"	m	class:JsonPair	typeref:typename:JsonString
key_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonPair.hpp	/^  JsonString key_;$/;"	m	class:JsonPairConst	typeref:typename:JsonString
key_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp	/^  TStringRef key_;$/;"	m	class:MemberProxy	typeref:typename:TStringRef
key_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  const char* key_;$/;"	m	class:VariantSlot	typeref:typename:const char *
keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static Keyboard * keyboard()                { return s_keyboard; }$/;"	f	class:fabgl::PS2Controller	typeref:typename:Keyboard *
keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  Keyboard * keyboard()  { return m_keyboard; }$/;"	f	class:fabgl::i8042	typeref:typename:Keyboard *
keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Keyboard * keyboard()                            { return m_keyboard; }$/;"	f	class:fabgl::uiApp	typeref:typename:Keyboard *
keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Keyboard * keyboard() { return m_keyboard; }$/;"	f	class:fabgl::Terminal	typeref:typename:Keyboard *
keyboardInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^bool Machine::keyboardInterrupt(void * context)$/;"	f	class:Machine	typeref:typename:bool
keyboardReaderTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::keyboardReaderTask(void * pvParameters)$/;"	f	class:fabgl::Terminal	typeref:typename:void
keyboardReaderTaskStackSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int Terminal::keyboardReaderTaskStackSize = FABGLIB_DEFAULT_TERMINAL_KEYBOARD_READER_TASK_STACK_/;"	m	class:fabgl::Terminal	typeref:typename:int
keyboardReaderTaskStackSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  static int keyboardReaderTaskStackSize;$/;"	m	class:fabgl::Terminal	typeref:typename:int
keyflags1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^keyflags1        db  0$/;"	d
keyflags2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^keyflags2        db  0$/;"	d
keypadMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  KeypadMode   keypadMode;$/;"	m	struct:fabgl::EmuState	typeref:typename:KeypadMode
keywords	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^  "keywords": "json, rest, http, web",$/;"	s
keywords	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "keywords": "sprite, terminal, VT100, ANSI, keyboard, mouse, VGA, PAL, NTSC, Composite, SSD130/;"	s
keywords	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "keywords": "led,noise,rgb,math,fast",$/;"	s
kikstart_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/kikstart.h	/^char const * kikstart_filename = "Kikstart 16K.PRG";$/;"	v	typeref:typename:char const *
kikstart_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/kikstart.h	/^const uint8_t kikstart_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
killEvtHandlerTimers	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::killEvtHandlerTimers(uiEvtHandler * dest)$/;"	f	class:fabgl::uiApp	typeref:typename:void
killTimer	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::killTimer(uiTimerHandle handle)$/;"	f	class:fabgl::uiApp	typeref:typename:void
kweepoutmc_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/kweepoutmc.h	/^char const * kweepoutmc_filename = "Kweepoutmc 3K.PRG";$/;"	v	typeref:typename:char const *
kweepoutmc_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/kweepoutmc.h	/^const uint8_t kweepoutmc_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
l	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^      uint8_t l, h;$/;"	m	struct:fabgl::i8080::__anon81886eed010a::__anon81886eed0208	typeref:typename:uint8_t
label	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/restartdialog.h	/^  uiLabel *  label;$/;"	m	struct:RebootDialog	typeref:typename:uiLabel *
label	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  char          label[22];       \/**< Resolution text description *\/$/;"	m	struct:fabgl::VGATimings	typeref:typename:char[22]
label	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiLabel *               label;$/;"	m	struct:fabgl::ProgressForm	typeref:typename:uiLabel *
label	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^    uint32_t label : 16;$/;"	m	struct:__anonb43f0d850108	typeref:typename:uint32_t:16	file:
labelExtent	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              labelExtent;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:int
labelExtent	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              labelExtent;$/;"	m	struct:fabgl::TextInputForm	typeref:typename:int
labelStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiLabelStyle & labelStyle() { return m_labelStyle; }$/;"	f	class:fabgl::uiLabel	typeref:typename:uiLabelStyle &
labelStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiStaticLabelStyle & labelStyle() { return m_staticLabelStyle; }$/;"	f	class:fabgl::uiStaticLabel	typeref:typename:uiStaticLabelStyle &
labelText	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char const *     labelText;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:char const *
labelText	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char const *     labelText;$/;"	m	struct:fabgl::TextInputForm	typeref:typename:char const *
lagEndTime	examples/test/lib/JFixLib/src/JLag.h	/^    unsigned long lagEndTime = 0;$/;"	m	class:JLag	typeref:typename:unsigned long
lagStartTime	examples/test/lib/JFixLib/src/JLag.h	/^    unsigned long lagStartTime = 0;$/;"	m	class:JLag	typeref:typename:unsigned long
lagTime	examples/test/lib/JFixLib/src/JLag.h	/^    float lagTime = 1000; \/\/ ms$/;"	m	class:JLag	typeref:typename:float
laggers	examples/test/lib/JFixLib/src/JFixture.h	/^  JLag laggers[NUM_LAGGERS];$/;"	m	class:JFixture	typeref:typename:JLag[]
lalt	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^    uint8_t lalt     : 1;   \/**< LEFT-ALT needs to be down. *\/$/;"	m	struct:fabgl::AltVirtualKeyDef::__anon7ddb64db0108	typeref:typename:uint8_t:1
lanes	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline int lanes() { return LANES; }$/;"	f	struct:PixelController	typeref:typename:int
lanes	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    int lanes() { return LANES; }$/;"	f	class:CPixelLEDController	typeref:typename:int
lanes	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    virtual int lanes() { return 1; }$/;"	f	class:CLEDController	typeref:typename:int
langs_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/langs_dsk.h	/^const uint8_t langs_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
langs_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/langs_dsk.h	/^unsigned int langs_dsk_len = 337568;$/;"	v	typeref:typename:unsigned int
largestFree	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int LightMemoryPool::largestFree()$/;"	f	class:fabgl::LightMemoryPool	typeref:typename:int
last	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Latch.hpp	/^  int last() const {$/;"	f	class:Latch	typeref:typename:int
lastBlinked	examples/test/lib/JFixLib/src/JFixture.h	/^  unsigned long lastBlinked = 0;$/;"	m	class:JFixture	typeref:typename:unsigned long
lastCTSStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  bool              lastCTSStatus;$/;"	m	struct:ConfDialogApp	typeref:typename:bool
lastCar	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int lastCar;$/;"	m	struct:Race::Player	typeref:typename:int
lastCarSprite	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int lastCarSprite;$/;"	m	struct:Race::Player	typeref:typename:int
lastChild	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * lastChild() { return m_lastChild; }$/;"	f	class:fabgl::uiWindow	typeref:typename:uiWindow *
lastDraw	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  long lastDraw = 0;$/;"	m	struct:Score	typeref:typename:long
lastError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  esp_err_t lastError;$/;"	m	struct:fabgl::I2CJobInfo	typeref:typename:esp_err_t
lastError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  i2c_err_t lastError;$/;"	m	struct:fabgl::I2CJobInfo	typeref:typename:i2c_err_t
lastIDAdded	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  int lastIDAdded = -1;$/;"	m	class:JFixtureGraphics	typeref:typename:int
lastReceived	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  unsigned long lastReceived = 0;$/;"	m	class:JEspnowDevice	typeref:typename:unsigned long
lastSelectedItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiCustomListBox::lastSelectedItem()$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:int
lastSpriteTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  long lastSpriteTime = 0;$/;"	m	struct:Race	typeref:typename:long
lastTriggered	examples/test/lib/JFixLib/src/Event/expRandLines.h	/^    unsigned long lastTriggered = 0;$/;"	m	class:expRandLines	typeref:typename:unsigned long
lastUpdated	examples/test/lib/JFixLib/src/Event/JOsc.h	/^  unsigned long lastUpdated = 0;$/;"	m	class:JOsc	typeref:typename:unsigned long
lastUserActionTime	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int lastUserActionTime()                         { return m_lastUserActionTimeMS; }$/;"	f	class:fabgl::uiApp	typeref:typename:int
last_intr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^last_intr        db  0$/;"	d
last_pc	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    uint16_t last_pc;$/;"	m	struct:fabgl::i8080::Regs	typeref:typename:uint16_t
lastshow	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^static uint32_t lastshow = 0;$/;"	v	typeref:typename:uint32_t	file:
latch	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^    int32_t latch;        \/\/ Latched timer count (-1 = not latched)$/;"	m	struct:fabgl::PIT8253::TimerInfo	typeref:typename:int32_t
latch_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  Latch<TReader> latch_;$/;"	m	class:JsonDeserializer	typeref:typename:Latch<TReader>
layouts	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  static const KeyboardLayout * * layouts() {$/;"	f	struct:fabgl::SupportedLayouts	typeref:typename:const KeyboardLayout **
ledBuiltin	examples/test/lib/JFixLib/src/JFixture.h	/^  int ledBuiltin = 5;$/;"	m	class:JFixture	typeref:typename:int
ledBuiltin	examples/test/lib/JFixLib/src/JJonisk.h	/^    char ledBuiltin = 5;$/;"	m	class:JJoniskSettings	typeref:typename:char
ledBuiltin	examples/test/lib/JFixLib/src/JTlFix.h	/^    char ledBuiltin = 5;$/;"	m	class:JTlFixSettings	typeref:typename:char
ledIndex	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  int ledIndex = 0;$/;"	m	class:JFixtureAddr	typeref:typename:int
leds	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	CRGB *leds() { return (*this)[0].leds(); }$/;"	f	class:CFastLED	typeref:typename:CRGB *
leds	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CRGB* leds() { return m_Data; }$/;"	f	class:CLEDController	typeref:typename:CRGB *
leds	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^        T * leds;          \/\/\/< pointer to LED array$/;"	m	class:CPixelView::pixelset_iterator_base	typeref:typename:T *
leds	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    PIXEL_TYPE * const leds;      \/\/\/< pointer to the LED data$/;"	m	class:CPixelView	typeref:typename:PIXEL_TYPE * const
leds	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  CRGB **leds = nullptr;$/;"	m	class:JFixtureAddr	typeref:typename:CRGB **
ledsToWrite	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  CRGB **ledsToWrite = nullptr; \/\/ Use this array for the brightness curve. The$/;"	m	class:JFixtureAddr	typeref:typename:CRGB **
ledsValues	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  float ***ledsValues = nullptr;$/;"	m	class:JFixtureAddr	typeref:typename:float ***
left	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  VirtualKey up, down, left, right, buttonA, buttonB;$/;"	m	struct:GameControllerKeys	typeref:typename:VirtualKey
left	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  VirtualKey up, down, left, right, buttonA, buttonB;$/;"	m	struct:GameControllerKeys	typeref:typename:VirtualKey
left	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t left   : 1;     \/**< Left anchor enable\/disable switch *\/$/;"	m	struct:fabgl::uiAnchors	typeref:typename:uint8_t:1
left	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t left   : 1;   \/**< Contains 1 when left button is pressed. *\/$/;"	m	struct:fabgl::MouseButtons	typeref:typename:uint8_t:1
left_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  char *begin_, *left_, *right_, *end_;$/;"	m	class:MemoryPool	typeref:typename:char *
leftarrow_11x9	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t leftarrow_11x9[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  int len()             { return m_prglen; }$/;"	f	class:PRGCreator	typeref:typename:int
len	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    const int len;                \/\/\/< length of the LED data, in PIXEL_TYPE units. More accu/;"	m	class:CPixelView	typeref:typename:const int
len	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  uint8_t len = 0;$/;"	m	class:JEspnowMsg	typeref:typename:uint8_t
lerp15by12	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^static int16_t inline __attribute__((always_inline)) lerp15by12( int16_t a, int16_t b, fract16 f/;"	f	typeref:typename:int16_t	file:
lerp15by16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC int16_t lerp15by16( int16_t a, int16_t b, fract16 frac)$/;"	f	typeref:typename:LIB8STATIC int16_t
lerp15by8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC int16_t lerp15by8( int16_t a, int16_t b, fract8 frac)$/;"	f	typeref:typename:LIB8STATIC int16_t
lerp16	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB lerp16( const CRGB& other, fract16 frac) const$/;"	f	struct:CRGB	typeref:typename:CRGB
lerp16by16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint16_t lerp16by16( uint16_t a, uint16_t b, fract16 frac)$/;"	f	typeref:typename:LIB8STATIC uint16_t
lerp16by8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint16_t lerp16by8( uint16_t a, uint16_t b, fract8 frac)$/;"	f	typeref:typename:LIB8STATIC uint16_t
lerp7by8	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^static int8_t inline __attribute__((always_inline)) lerp7by8( int8_t a, int8_t b, fract8 frac)$/;"	f	typeref:typename:int8_t	file:
lerp8	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB lerp8( const CRGB& other, fract8 frac) const$/;"	f	struct:CRGB	typeref:typename:CRGB
lerp8by8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint8_t lerp8by8( uint8_t a, uint8_t b, fract8 frac)$/;"	f	typeref:typename:LIB8STATIC uint8_t
les	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  les    di, [0x1f * 4]$/;"	d
level	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int level ;$/;"	m	struct:Race::Player	typeref:typename:int
libArchive	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^    "libArchive": false$/;"	b	object:build
libArchive	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^        "libArchive": false$/;"	b	object:build
lib_deps	examples/test/platformio.ini	/^lib_deps = $/;"	k	section:env:esp32dev
license	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.properties	/^license=MIT$/;"	k
license	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "license": "MIT",$/;"	s
limitMode	examples/test/lib/JFixLib/src/Event/Event.h	/^  boundariesMode limitMode = MODE_BOUNCE;$/;"	m	class:Event	typeref:typename:boundariesMode
lineEnds	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    LineEnds               lineEnds;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:LineEnds
lineEnds	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  LineEnds     lineEnds;$/;"	m	struct:fabgl::PaintState	typeref:typename:LineEnds
lineHasColorBurst	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  bool lineHasColorBurst(int frame, int frameLine) const {$/;"	f	struct:fabgl::CVBS_I_NTSC_M	typeref:typename:bool	file:
lineHasColorBurst	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  bool lineHasColorBurst(int frame, int frameLine) const {$/;"	f	struct:fabgl::CVBS_I_PAL_B	typeref:typename:bool	file:
lineSampleToSubCarrierSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static scPhases_t * lineSampleToSubCarrierSample()          { return (scPhases_t*) s_lineSampl/;"	f	class:fabgl::CVBSGenerator	typeref:typename:scPhases_t *
lineSwitch	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static bool lineSwitch()                                    { return s_lineSwitch; }$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:bool
lineTo	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::lineTo(int X, int Y)$/;"	f	class:fabgl::Canvas	typeref:typename:void
lineTo	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::lineTo(Point const & position, Rect & updateRect)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
line_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          line_us;                        \/\/ line duration$/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
link	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StoragePolicy.hpp	/^  bool link;$/;"	m	struct:StringStoragePolicy::LinkOrCopy	typeref:typename:bool
link	examples/test/lib/JFixLib/src/JLag.h	/^    void link(float* v){$/;"	f	class:JLag	typeref:typename:void
linked_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/JsonString.hpp	/^  bool linked_;$/;"	m	class:JsonStringAdapter	typeref:typename:bool
listBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiListBox * listBox;$/;"	m	struct:TestControlsFrame	typeref:typename:uiListBox *
listBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiListBox *      listBox;$/;"	m	struct:fabgl::SelectForm	typeref:typename:uiListBox *
listBoxHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              listBoxHeight;$/;"	m	struct:fabgl::SelectForm	typeref:typename:int
listBoxProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiListBoxProps & listBoxProps() { return m_listBoxProps; }$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:uiListBoxProps &
listBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiListBoxStyle & listBoxStyle() { return listbox()->listBoxStyle(); }$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:uiListBoxStyle &
listBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiListBoxStyle & listBoxStyle() { return m_listBoxStyle; }$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:uiListBoxStyle &
listbox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiCustomListBox * listbox()  { return m_colorListBox; }$/;"	f	class:fabgl::uiColorComboBox	typeref:typename:uiCustomListBox *
listbox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiCustomListBox * listbox()  { return m_listBox; }$/;"	f	class:fabgl::uiComboBox	typeref:typename:uiCustomListBox *
listbox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiCustomListBox * listbox()  { return m_menu; }$/;"	f	class:fabgl::uiSplitButton	typeref:typename:uiCustomListBox *
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }$/;"	f	class:FastPin	typeref:typename:void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void lo() __attribute__ ((always_inline)) { }$/;"	f	class:FastPin	typeref:typename:void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void lo(FASTLED_REGISTER port_ptr_t port) __attribute__ ((always_inline)) { *port/;"	f	class:FastPin	typeref:typename:void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void lo(FASTLED_REGISTER port_ptr_t port) __attribute__ ((always_inline)) { }$/;"	f	class:FastPin	typeref:typename:void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }$/;"	f	class:Pin	typeref:typename:void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline void lo(FASTLED_REGISTER port_ptr_t port) __attribute__ ((always_inline)) { *port &= ~mP/;"	f	class:Pin	typeref:typename:void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static void lo() __attribute__ ((always_inline)) { FL_NRF_GPIO->OUTCLR= _MASK; }$/;"	f	class:_ARMPIN	typeref:typename:void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static void lo(FASTLED_REGISTER port_ptr_t port) __attribute__ ((always_inline)) { lo/;"	f	class:_ARMPIN	typeref:typename:void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void       lo()        { (reinterpret_cast<NRF_GPIO_Ty/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void lo (FASTLED_REGISTER port_ptr_t port) { lo();    /;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static void lo() __attribute__ ((always_inline)) {$/;"	f	class:_ESPPIN	typeref:typename:void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static void lo(FASTLED_REGISTER port_ptr_t port) __attribute__ ((always_inline)) { lo()/;"	f	class:_ESPPIN	typeref:typename:void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static void lo() __attribute__ ((always_inline)) { if(PIN < 16) { _GPB._GPOC = MASK; /;"	f	class:_ESPPIN	typeref:typename:void
lo	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static void lo(FASTLED_REGISTER port_ptr_t port) __attribute__ ((always_inline)) { lo/;"	f	class:_ESPPIN	typeref:typename:void
load	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Latch.hpp	/^  void load() {$/;"	f	class:Latch	typeref:typename:void
load	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Machine::load(int address, uint8_t const * data, int length)$/;"	f	class:Machine	typeref:typename:void
loadAndScale	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(Pi/;"	f	struct:PixelController	typeref:typename:uint8_t
loadAndScale0	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale0() { return loadAndScale<0>(*/;"	f	struct:PixelController	typeref:typename:uint8_t
loadAndScale0	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale0(int lane) { return loadAndSc/;"	f	struct:PixelController	typeref:typename:uint8_t
loadAndScale0	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale0(int lane, uint8_t scale) { r/;"	f	struct:PixelController	typeref:typename:uint8_t
loadAndScale1	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale1() { return loadAndScale<1>(*/;"	f	struct:PixelController	typeref:typename:uint8_t
loadAndScale1	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale1(int lane) { return loadAndSc/;"	f	struct:PixelController	typeref:typename:uint8_t
loadAndScale1	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale1(int lane, uint8_t scale) { r/;"	f	struct:PixelController	typeref:typename:uint8_t
loadAndScale2	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale2() { return loadAndScale<2>(*/;"	f	struct:PixelController	typeref:typename:uint8_t
loadAndScale2	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale2(int lane) { return loadAndSc/;"	f	struct:PixelController	typeref:typename:uint8_t
loadAndScale2	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t loadAndScale2(int lane, uint8_t scale) { r/;"	f	struct:PixelController	typeref:typename:uint8_t
loadBWImageScale	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^  void loadBWImageScale(int width_, int height_, int scale_, uint8_t const * data_, RGB888 foreg/;"	f	class:BWScaleBitmap	typeref:typename:void
loadByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelC/;"	f	struct:PixelController	typeref:typename:uint8_t
loadCRT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^int Machine::loadCRT(char const * filename, bool reset, int address)$/;"	f	class:Machine	typeref:typename:int
loadConfiguration	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static void loadConfiguration() {$/;"	f	struct:ConfDialogApp	typeref:typename:void
loadDynamicGradientPalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16& loadDynamicGradientPalette( TDynamicRGBGradientPalette_bytes gpal )$/;"	f	class:CRGBPalette16	typeref:typename:CRGBPalette16 &
loadDynamicGradientPalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256& loadDynamicGradientPalette( TDynamicRGBGradientPalette_bytes gpal )$/;"	f	class:CRGBPalette256	typeref:typename:CRGBPalette256 &
loadDynamicGradientPalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32& loadDynamicGradientPalette( TDynamicRGBGradientPalette_bytes gpal )$/;"	f	class:CRGBPalette32	typeref:typename:CRGBPalette32 &
loadFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::loadFont(FontInfo const * font)$/;"	f	class:fabgl::Terminal	typeref:typename:void
loadFromFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^void MachineConf::loadFromFile(FILE * file)$/;"	f	class:MachineConf	typeref:typename:void
loadMachineConfiguration	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^void loadMachineConfiguration(MachineConf * mconf)$/;"	f	typeref:typename:void
loadPRG	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::loadPRG(char const * filename, bool resetRequired, bool execRun)$/;"	f	class:Machine	typeref:typename:void
loadPixelData	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    void loadPixelData(PixelController<RGB_ORDER> & pixels)$/;"	f	class:ClocklessController	typeref:typename:void
loadRSX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::loadRSX(uint16_t imageAddr, int imageLen)$/;"	f	class:BDOS	typeref:typename:void
loadScore	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^bool loadScore()$/;"	f	typeref:typename:bool
loaded_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Latch.hpp	/^  bool loaded_;$/;"	m	class:Latch	typeref:typename:bool
loc	examples/test/lib/JFixLib/src/Event/Event.h	/^  float loc[2] = {0, 0};$/;"	m	class:Event	typeref:typename:float[2]
localInsert	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::localInsert(uint8_t c)$/;"	f	class:fabgl::Terminal	typeref:typename:void
localWrite	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::localWrite(char const * str)$/;"	f	class:fabgl::Terminal	typeref:typename:void
localWrite	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::localWrite(uint8_t c)$/;"	f	class:fabgl::Terminal	typeref:typename:void
lock	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^bool PS2Controller::lock(int PS2Port, int timeOutMS)$/;"	f	class:fabgl::PS2Controller	typeref:typename:bool
lock	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::lock(int timeOutMS)$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
lockedControls	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^  bool lockedControls[6] = { false, false, false, false,false,false };  $/;"	m	struct:Menu	typeref:typename:bool[6]
log	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::log(char c)$/;"	f	class:fabgl::Terminal	typeref:typename:void
log	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::log(const char * txt)$/;"	f	class:fabgl::Terminal	typeref:typename:void
logFmt	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::logFmt(const char * format, ...)$/;"	f	class:fabgl::Terminal	typeref:typename:void
logf	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::logf(char const * format, ...)$/;"	f	class:HAL	typeref:typename:void
logfade12	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^uint16_t logfade12(uint16_t val) {$/;"	f	typeref:typename:uint16_t
longPulse_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          longPulse_us;                   \/\/ vertical sync, long pulse duration$/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
loop	examples/test/src/main.cpp	/^void loop(){$/;"	f	typeref:typename:void
loopSamples	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Audio/loop.h	/^const int8_t loopSamples[] = {$/;"	v	typeref:typename:const int8_t[]
lost_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const  uint8_t lost_data[] =$/;"	v	typeref:typename:const uint8_t[]
loval	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	port_t loval() __attribute__ ((always_inline)) { return *mPort & ~mPinMask; }$/;"	f	class:Pin	typeref:typename:port_t
loval	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static port_t loval() __attribute__ ((always_inline)) { return *sPort & ~sPinMask; }$/;"	f	class:FastPin	typeref:typename:port_t
loval	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static port_t loval() __attribute__ ((always_inline)) { return 0;}$/;"	f	class:FastPin	typeref:typename:port_t
loval	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static port_t loval() __attribute__ ((always_inline)) { return FL_NRF_GPIO->OUT & ~_M/;"	f	class:_ARMPIN	typeref:typename:port_t
loval	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static port_t     loval()     { return (reinterpret_cast<NRF_/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE port_t
loval	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static port_t loval() __attribute__ ((always_inline)) {$/;"	f	class:_ESPPIN	typeref:typename:port_t
loval	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static port_t loval() __attribute__ ((always_inline)) { if (PIN<16) { return GPO & ~M/;"	f	class:_ESPPIN	typeref:typename:port_t
lowBitOnly	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^bool RGB222::lowBitOnly = false;$/;"	m	class:fabgl::RGB222	typeref:typename:bool
lowBitOnly	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  static bool lowBitOnly;  \/\/ true= 8 colors, false 64 colors$/;"	m	struct:fabgl::RGB222	typeref:typename:bool
lowest	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static T lowest() {$/;"	f	struct:FloatTraits	typeref:typename:T
lowest	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/limits.hpp	/^  static T lowest() {$/;"	f	struct:numeric_limits	typeref:typename:T
lowestTopScore	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^int lowestTopScore;$/;"	v	typeref:typename:int
lpt1addr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^lpt1addr         dw  0x0378              ; 40:08h$/;"	d
lpt2addr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^lpt2addr         dw  0$/;"	d
lpt3addr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^lpt3addr         dw  0$/;"	d
lpt4addr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^lpt4addr         dw  0                   ; 40:0e$/;"	d
lsrX4	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^inline uint8_t lsrX4( uint8_t dividend)$/;"	f	typeref:typename:uint8_t
lstOut	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::lstOut(char const * str)$/;"	f	class:BDOS	typeref:typename:void
lstOut	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::lstOut(uint8_t c)$/;"	f	class:BDOS	typeref:typename:void
mAdvance	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        int8_t mAdvance;         \/\/\/< how many bytes to advance the pointer by each time. For/;"	m	struct:PixelController	typeref:typename:int8_t
mBufSize	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    int            mBufSize;$/;"	m	class:ESP32RMTController	typeref:typename:int
mBuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    rmt_item32_t * mBuffer;$/;"	m	class:ESP32RMTController	typeref:typename:rmt_item32_t *
mBufferSize	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    uint16_t       mBufferSize; \/\/ bytes$/;"	m	class:ESP32RMTController	typeref:typename:uint16_t
mCur	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    int            mCur;$/;"	m	class:ESP32RMTController	typeref:typename:int
mCurPulse	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    int            mCurPulse;$/;"	m	class:ESP32RMTController	typeref:typename:int
mCyclesPerFill	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    uint32_t       mCyclesPerFill;$/;"	m	class:ESP32RMTController	typeref:typename:uint32_t
mData	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        const uint8_t *mData;    \/\/\/< pointer to the underlying LED data$/;"	m	struct:PixelController	typeref:typename:const uint8_t *
mInPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	volatile RoReg *mInPort;  \/\/\/< Input register for the pin$/;"	m	class:Pin	typeref:typename:volatile RoReg *
mInPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	volatile RoReg *mInPort;$/;"	m	class:Pin	typeref:typename:volatile RoReg *
mLastFill	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    uint32_t       mLastFill;$/;"	m	class:ESP32RMTController	typeref:typename:uint32_t
mLastMicros	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^	uint16_t mLastMicros;$/;"	m	class:CMinWait	typeref:typename:uint16_t
mLen	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        int mLen;                \/\/\/< number of LEDs in the data for one lane$/;"	m	struct:PixelController	typeref:typename:int
mLenRemaining	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        int mLenRemaining;       \/\/\/< counter for the number of LEDs left to process$/;"	m	struct:PixelController	typeref:typename:int
mMaxCyclesPerFill	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    uint32_t       mMaxCyclesPerFill;$/;"	m	class:ESP32RMTController	typeref:typename:uint32_t
mOffsets	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        int mOffsets[LANES];     \/\/\/< the number of bytes to offset each lane from the starti/;"	m	struct:PixelController	typeref:typename:int[]
mOne	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    rmt_item32_t   mOne;$/;"	m	class:ESP32RMTController	typeref:typename:rmt_item32_t
mPeriod	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    TIMETYPE mPeriod;       \/\/\/< Timing interval to check$/;"	m	class:CEveryNTime	typeref:typename:TIMETYPE
mPeriod	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    timeType mPeriod;$/;"	m	class:CEveryNTimePeriods	typeref:typename:timeType
mPin	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	uint8_t mPin;    \/\/\/< Arduino digital pin number$/;"	m	class:Pin	typeref:typename:uint8_t
mPin	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	uint8_t mPin;$/;"	m	class:Pin	typeref:typename:uint8_t
mPin	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    gpio_num_t     mPin;$/;"	m	class:ClocklessController	typeref:typename:gpio_num_t
mPin	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    gpio_num_t     mPin;$/;"	m	class:ESP32RMTController	typeref:typename:gpio_num_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	RwReg mPinMask;  \/\/\/< Bitmask for the pin within its register$/;"	m	class:Pin	typeref:typename:RwReg
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	RwReg mPinMask;$/;"	m	class:Pin	typeref:typename:RwReg
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/clockless_arm_d21.h	/^    data_t mPinMask;$/;"	m	class:ClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^	data_t mPinMask;$/;"	m	class:ClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^	data_t mPinMask;$/;"	m	class:ClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	data_t mPinMask;$/;"	m	class:InlineBlockClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	data_t mPinMask;$/;"	m	class:SixteenWayInlineBlockClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^	data_t mPinMask;$/;"	m	class:ClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	data_t mPinMask;$/;"	m	class:InlineBlockClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	data_t mPinMask;$/;"	m	class:SixteenWayInlineBlockClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/clockless_arm_kl26.h	/^  data_t mPinMask;$/;"	m	class:ClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	data_t mPinMask;$/;"	m	class:ClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^    data_t mPinMask;$/;"	m	class:ClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^	data_t mPinMask;$/;"	m	class:ClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^	data_t mPinMask;$/;"	m	class:InlineBlockClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^    data_t mPinMask;$/;"	m	class:ClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^	data_t mPinMask;$/;"	m	class:InlineBlockClocklessController	typeref:typename:data_t
mPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^	data_t mPinMask;$/;"	m	class:ClocklessController	typeref:typename:data_t
mPixelData	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    uint8_t *      mPixelData;$/;"	m	class:ESP32RMTController	typeref:typename:uint8_t *
mPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    PixelController<RGB_ORDER> * mPixels;$/;"	m	class:ClocklessController	typeref:typename:PixelController<RGB_ORDER> *
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	volatile RwReg *mPort;    \/\/\/< Output register for the pin$/;"	m	class:Pin	typeref:typename:volatile RwReg *
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	volatile RwReg *mPort;$/;"	m	class:Pin	typeref:typename:volatile RwReg *
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/clockless_arm_d21.h	/^    data_ptr_t mPort;$/;"	m	class:ClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^	data_ptr_t mPort;$/;"	m	class:ClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^	data_ptr_t mPort;$/;"	m	class:ClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	data_ptr_t mPort;$/;"	m	class:InlineBlockClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	data_ptr_t mPort;$/;"	m	class:SixteenWayInlineBlockClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^	data_ptr_t mPort;$/;"	m	class:ClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	data_ptr_t mPort;$/;"	m	class:InlineBlockClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	data_ptr_t mPort;$/;"	m	class:SixteenWayInlineBlockClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/clockless_arm_kl26.h	/^  data_ptr_t mPort;$/;"	m	class:ClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	data_ptr_t mPort;$/;"	m	class:ClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^    data_ptr_t mPort;$/;"	m	class:ClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^	data_ptr_t mPort;$/;"	m	class:ClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^	data_ptr_t mPort;$/;"	m	class:InlineBlockClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^    data_ptr_t mPort;$/;"	m	class:ClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    data_ptr_t mPort;$/;"	m	class:InlineBlockClocklessController	typeref:typename:data_ptr_t
mPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^	data_ptr_t mPort;$/;"	m	class:ClocklessController	typeref:typename:data_ptr_t
mPrevTrigger	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    TIMETYPE mPrevTrigger;  \/\/\/< Timestamp of the last time the class was "ready"$/;"	m	class:CEveryNTime	typeref:typename:TIMETYPE
mPrevTrigger	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    timeType mPrevTrigger;$/;"	m	class:CEveryNTimePeriods	typeref:typename:timeType
mRMTController	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    ESP32RMTController mRMTController;$/;"	m	class:ClocklessController	typeref:typename:ESP32RMTController
mRMT_channel	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    rmt_channel_t  mRMT_channel;$/;"	m	class:ESP32RMTController	typeref:typename:rmt_channel_t
mRMT_mem_ptr	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    volatile uint32_t * mRMT_mem_ptr;$/;"	m	class:ESP32RMTController	typeref:typename:volatile uint32_t *
mRMT_mem_start	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    volatile uint32_t * mRMT_mem_start;$/;"	m	class:ESP32RMTController	typeref:typename:volatile uint32_t *
mSPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	SPI mSPI;$/;"	m	class:APA102Controller	typeref:typename:SPI
mSPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	SPI mSPI;$/;"	m	class:LPD6803Controller	typeref:typename:SPI
mSPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	SPI mSPI;$/;"	m	class:LPD8806Controller	typeref:typename:SPI
mSPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	SPI mSPI;$/;"	m	class:P9813Controller	typeref:typename:SPI
mSPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	SPI mSPI;$/;"	m	class:SK9822Controller	typeref:typename:SPI
mSPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	SPI mSPI;$/;"	m	class:SM16716Controller	typeref:typename:SPI
mSPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	SPI mSPI;$/;"	m	class:WS2801Controller	typeref:typename:SPI
mSavedData	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    } mSavedData;$/;"	m	class:NRF51SPIOutput	typeref:struct:NRF51SPIOutput::saveData
mScale	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        CRGB mScale;             \/\/\/< the per-channel scale values, provided by a color corre/;"	m	struct:PixelController	typeref:typename:CRGB
mSize	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    int            mSize;$/;"	m	class:ESP32RMTController	typeref:typename:int
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	CMinWait<2000> mWait;$/;"	m	class:PixieController	typeref:typename:CMinWait<2000>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/clockless_apollo3.h	/^  	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/clockless_arm_d21.h	/^    CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:InlineBlockClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:SixteenWayInlineBlockClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:InlineBlockClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:SixteenWayInlineBlockClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/clockless_arm_kl26.h	/^  CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    CMinWait<WAIT_TIME> mWait;$/;"	m	class:FlexibleInlineBlockClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^    CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    static CMinWait<_WAIT_TIME_MICROSECONDS> mWait;  \/\/ ensure data has time to latch$/;"	m	class:ClocklessController	typeref:typename:CMinWait<_WAIT_TIME_MICROSECONDS>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^CMinWait<_WAIT_TIME_MICROSECONDS> ClocklessController<_DATA_PIN, _T1, _T2, _T3, _RGB_ORDER, _XTR/;"	m	class:ClocklessController<_DATA_PIN, _T1, _T2, _T3, _RGB_ORDER, _XTRA0, _FLIP, _WAIT_TIME_MICROSECONDS>	typeref:typename:CMinWait<_WAIT_TIME_MICROSECONDS>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    CMinWait<WAIT_TIME + ( ((T1 + T2 + T3) * 32 * 4) \/ (CLOCKLESS_FREQUENCY \/ 1000000) )> mWai/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME+(((T1+T2+T3)* 32* 4)/(CLOCKLESS_FREQUENCY/1000000))>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:InlineBlockClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^    CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	bool mWait;$/;"	m	class:AVRHardwareSPIOutput	typeref:typename:bool
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    CMinWait<WAIT_TIME> mWait;$/;"	m	class:InlineBlockClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    CMinWait<50>   mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<50>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:InlineBlockClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^	CMinWait<WAIT_TIME> mWait;$/;"	m	class:ClocklessController	typeref:typename:CMinWait<WAIT_TIME>
mWaitDelay	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	CMinWait<1000>  mWaitDelay;$/;"	m	class:WS2801Controller	typeref:typename:CMinWait<1000>
mWhichHalf	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    int                 mWhichHalf;$/;"	m	class:ESP32RMTController	typeref:typename:int
mZero	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    rmt_item32_t   mZero;$/;"	m	class:ESP32RMTController	typeref:typename:rmt_item32_t
m_A	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  uint8_t  m_A;$/;"	m	class:fabgl::MOS6502	typeref:typename:uint8_t
m_ACR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_ACR;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_BDOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.h	/^  BDOS *             m_BDOS;$/;"	m	class:CCP	typeref:typename:BDOS *
m_BIOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  BIOS *          m_BIOS;$/;"	m	class:BDOS	typeref:typename:BIOS *
m_BIOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  BIOS                     m_BIOS;$/;"	m	class:Machine	typeref:typename:BIOS
m_BL	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  gpio_num_t         m_BL;$/;"	m	class:fabgl::TFTController	typeref:typename:gpio_num_t
m_CA1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_CA1;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_CA1_prev	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_CA1_prev;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_CA2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_CA2;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_CA2_prev	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_CA2_prev;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_CAPSLOCK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool                      m_CAPSLOCK;$/;"	m	class:fabgl::Keyboard	typeref:typename:bool
m_CB1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_CB1;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_CB1_prev	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_CB1_prev;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_CB2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_CB2;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_CB2_prev	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_CB2_prev;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_CGA6845	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t                  m_CGA6845[18];$/;"	m	class:Machine	typeref:typename:uint8_t[18]
m_CGA6845SelectRegister	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t                  m_CGA6845SelectRegister;$/;"	m	class:Machine	typeref:typename:uint8_t
m_CGAColorReg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t                  m_CGAColorReg;$/;"	m	class:Machine	typeref:typename:uint8_t
m_CGAMemoryOffset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint16_t                 m_CGAMemoryOffset;$/;"	m	class:Machine	typeref:typename:uint16_t
m_CGAModeReg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t                  m_CGAModeReg;$/;"	m	class:Machine	typeref:typename:uint8_t
m_CGAVSyncQuery	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint16_t                 m_CGAVSyncQuery;$/;"	m	class:Machine	typeref:typename:uint16_t
m_CLK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  gpio_num_t          m_CLK;$/;"	m	class:fabgl::MCP23S17	typeref:typename:gpio_num_t
m_COM1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  PC8250                   m_COM1;$/;"	m	class:Machine	typeref:typename:PC8250
m_COM2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  PC8250                   m_COM2;$/;"	m	class:Machine	typeref:typename:PC8250
m_CPU	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  MOS6502               m_CPU;$/;"	m	class:Machine	typeref:typename:MOS6502
m_CPUSpeed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  uint32_t           m_CPUSpeed;  \/\/ 0 = max$/;"	m	class:HAL	typeref:typename:uint32_t
m_CS	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  gpio_num_t          m_CS;$/;"	m	class:fabgl::MCP23S17	typeref:typename:gpio_num_t
m_CS	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  gpio_num_t         m_CS;$/;"	m	class:fabgl::TFTController	typeref:typename:gpio_num_t
m_CTRL	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool                      m_CTRL;$/;"	m	class:fabgl::Keyboard	typeref:typename:bool
m_CVBSGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  CVBSGenerator          m_CVBSGenerator;$/;"	m	class:fabgl::CVBSBaseController	typeref:typename:CVBSGenerator
m_ColorCorrection	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CRGB m_ColorCorrection;    \/\/\/< CRGB object representing the color correction to apply to/;"	m	class:CLEDController	typeref:typename:CRGB
m_ColorTemperature	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CRGB m_ColorTemperature;   \/\/\/< CRGB object representing the color temperature to apply t/;"	m	class:CLEDController	typeref:typename:CRGB
m_DBBIN	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  uint8_t           m_DBBIN;$/;"	m	class:fabgl::i8042	typeref:typename:uint8_t
m_DBBOUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  uint8_t           m_DBBOUT;$/;"	m	class:fabgl::i8042	typeref:typename:uint8_t
m_DC	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  gpio_num_t         m_DC;$/;"	m	class:fabgl::TFTController	typeref:typename:gpio_num_t
m_DDRA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_DDRA;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_DDRB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_DDRB;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_DLL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  uint8_t           m_DLL;$/;"	m	class:fabgl::PC8250	typeref:typename:uint8_t
m_DLM	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  uint8_t           m_DLM;$/;"	m	class:fabgl::PC8250	typeref:typename:uint8_t
m_DMABuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.h	/^  volatile lldesc_t * m_DMABuffer;$/;"	m	class:fabgl::GPIOStream	typeref:typename:volatile lldesc_t *
m_DMABuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  lldesc_t volatile *    m_DMABuffers;$/;"	m	class:fabgl::VGABaseController	typeref:typename:lldesc_t volatile *
m_DMABuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  lldesc_t volatile *        m_DMABuffers;$/;"	m	class:fabgl::VGATextController	typeref:typename:lldesc_t volatile *
m_DMABuffersCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int                    m_DMABuffersCount;$/;"	m	class:fabgl::VGABaseController	typeref:typename:int
m_DMABuffersCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  int                        m_DMABuffersCount;$/;"	m	class:fabgl::VGATextController	typeref:typename:int
m_DMABuffersHead	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  lldesc_t volatile *    m_DMABuffersHead;$/;"	m	class:fabgl::VGABaseController	typeref:typename:lldesc_t volatile *
m_DMABuffersVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  lldesc_t volatile *    m_DMABuffersVisible;$/;"	m	class:fabgl::VGABaseController	typeref:typename:lldesc_t volatile *
m_DMAChain	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  lldesc_t volatile *           m_DMAChain;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:lldesc_t volatile *
m_DMAChain	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  lldesc_t volatile * m_DMAChain;$/;"	m	class:fabgl::SoundGenerator	typeref:typename:lldesc_t volatile *
m_DMAData	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.h	/^  volatile uint8_t *  m_DMAData;$/;"	m	class:fabgl::GPIOStream	typeref:typename:volatile uint8_t *
m_DMAStarted	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  bool                          m_DMAStarted;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:bool
m_DMAStarted	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.h	/^  bool                m_DMAStarted;$/;"	m	class:fabgl::GPIOStream	typeref:typename:bool
m_DTRStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool                      m_DTRStatus;      \/\/ true = asserted (low)$/;"	m	class:fabgl::SerialPort	typeref:typename:bool
m_Data	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CRGB *m_Data;              \/\/\/< pointer to the LED data used by this controller$/;"	m	class:CLEDController	typeref:typename:CRGB *
m_DitherMode	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    EDitherMode m_DitherMode;  \/\/\/< the current dither mode of the controller$/;"	m	class:CLEDController	typeref:typename:EDitherMode
m_GPIOStream	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  GPIOStream             m_GPIOStream;$/;"	m	class:fabgl::VGABaseController	typeref:typename:GPIOStream
m_GPIOStream	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  GPIOStream                 m_GPIOStream;$/;"	m	class:fabgl::VGATextController	typeref:typename:GPIOStream
m_GUI	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool                      m_GUI;$/;"	m	class:fabgl::Keyboard	typeref:typename:bool
m_HAL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  HAL *           m_HAL;$/;"	m	class:BDOS	typeref:typename:HAL *
m_HAL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^  HAL * m_HAL;$/;"	m	class:BIOS	typeref:typename:HAL *
m_HAL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.h	/^  HAL *              m_HAL;$/;"	m	class:CCP	typeref:typename:HAL *
m_HBarArea	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t         m_HBarArea;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:int16_t
m_HBlankLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  volatile uint8_t *     m_HBlankLine;$/;"	m	class:fabgl::VGABaseController	typeref:typename:volatile uint8_t *
m_HBlankLine_withVSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  volatile uint8_t *     m_HBlankLine_withVSync;$/;"	m	class:fabgl::VGABaseController	typeref:typename:volatile uint8_t *
m_HGC6845	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t                  m_HGC6845[18];$/;"	m	class:Machine	typeref:typename:uint8_t[18]
m_HGC6845SelectRegister	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t                  m_HGC6845SelectRegister;$/;"	m	class:Machine	typeref:typename:uint8_t
m_HGCMemoryOffset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint16_t                 m_HGCMemoryOffset;$/;"	m	class:Machine	typeref:typename:uint16_t
m_HGCModeReg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t                  m_HGCModeReg;$/;"	m	class:Machine	typeref:typename:uint8_t
m_HGCSwitchReg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t                  m_HGCSwitchReg;$/;"	m	class:Machine	typeref:typename:uint8_t
m_HGCVSyncQuery	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint16_t                 m_HGCVSyncQuery;$/;"	m	class:Machine	typeref:typename:uint16_t
m_HLineSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int16_t                m_HLineSize;$/;"	m	class:fabgl::VGABaseController	typeref:typename:int16_t
m_HScrollBarPosition	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t         m_HScrollBarPosition;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:int16_t
m_HScrollBarRange	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t         m_HScrollBarRange;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:int16_t
m_HScrollBarVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t         m_HScrollBarVisible;    \/\/ it means the "visible" area (how big is the bar)$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:int16_t
m_HVSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  volatile uint8_t       m_HVSync;$/;"	m	class:fabgl::VGABaseController	typeref:typename:volatile uint8_t
m_HVSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  volatile uint8_t           m_HVSync;$/;"	m	class:fabgl::VGATextController	typeref:typename:volatile uint8_t
m_IECDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  IECDrive              m_IECDrive;$/;"	m	class:Machine	typeref:typename:IECDrive
m_IER	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  uint8_t           m_IER;$/;"	m	class:fabgl::PC8250	typeref:typename:uint8_t
m_IER	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_IER;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_IFR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_IFR;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_IIR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  uint8_t           m_IIR;$/;"	m	class:fabgl::PC8250	typeref:typename:uint8_t
m_IMR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^  uint8_t m_IMR;  \/\/ Interrupt Mask Register$/;"	m	class:fabgl::PIC8259	typeref:typename:uint8_t
m_IOCON	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  uint8_t             m_IOCON[MCP_MAXDEVICES];$/;"	m	class:fabgl::MCP23S17	typeref:typename:uint8_t[]
m_IRA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_IRA;    \/\/ input register A$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_IRB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_IRB;    \/\/ input register B$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_IRR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^  uint8_t m_IRR;  \/\/ Interrupt Request Register$/;"	m	class:fabgl::PIC8259	typeref:typename:uint8_t
m_ISR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^  uint8_t m_ISR;  \/\/ In-Service Register$/;"	m	class:fabgl::PIC8259	typeref:typename:uint8_t
m_JOY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint8_t               m_JOY[JoyFire + 1];$/;"	m	class:Machine	typeref:typename:uint8_t[]
m_KBD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint8_t               m_KBD[8][8];$/;"	m	class:Machine	typeref:typename:uint8_t[8][8]
m_LALT	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool                      m_LALT;$/;"	m	class:fabgl::Keyboard	typeref:typename:bool
m_LCR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  uint8_t           m_LCR;$/;"	m	class:fabgl::PC8250	typeref:typename:uint8_t
m_LFSR	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t m_LFSR;$/;"	m	class:fabgl::VICNoiseGenerator	typeref:typename:uint16_t
m_LPTStream	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  Stream *           m_LPTStream;$/;"	m	class:HAL	typeref:typename:Stream *
m_LSR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  uint8_t           m_LSR;$/;"	m	class:fabgl::PC8250	typeref:typename:uint8_t
m_MC146818	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  MC146818 *      m_MC146818;$/;"	m	class:BIOS	typeref:typename:MC146818 *
m_MC146818	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  MC146818                 m_MC146818;$/;"	m	class:Machine	typeref:typename:MC146818
m_MCP23S17	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  MCP23S17                 m_MCP23S17;$/;"	m	class:Machine	typeref:typename:MCP23S17
m_MCP23S17Sel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t                  m_MCP23S17Sel;$/;"	m	class:Machine	typeref:typename:uint8_t
m_MCR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  uint8_t           m_MCR;$/;"	m	class:fabgl::PC8250	typeref:typename:uint8_t
m_MISO	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  gpio_num_t          m_MISO;$/;"	m	class:fabgl::MCP23S17	typeref:typename:gpio_num_t
m_MOSI	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  gpio_num_t          m_MOSI;$/;"	m	class:fabgl::MCP23S17	typeref:typename:gpio_num_t
m_MOSI	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  gpio_num_t         m_MOSI;$/;"	m	class:fabgl::TFTController	typeref:typename:gpio_num_t
m_MSR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  uint8_t           m_MSR;$/;"	m	class:fabgl::PC8250	typeref:typename:uint8_t
m_NMI	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  bool                  m_NMI;$/;"	m	class:Machine	typeref:typename:bool
m_NUMLOCK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool                      m_NUMLOCK;$/;"	m	class:fabgl::Keyboard	typeref:typename:bool
m_OP_ADC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  ADCSBC   m_OP_ADC;$/;"	m	class:fabgl::MOS6502	typeref:typename:ADCSBC
m_OP_SBC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  ADCSBC   m_OP_SBC;$/;"	m	class:fabgl::MOS6502	typeref:typename:ADCSBC
m_ORA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_ORA;    \/\/ output register A$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_ORB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_ORB;    \/\/ output register B$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_PA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_PA;     \/\/ what actually there is out of 6522 port A$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_PB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_PB;     \/\/ what actually there is out of 6522 port B$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_PC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  uint16_t m_PC;$/;"	m	class:fabgl::MOS6502	typeref:typename:uint16_t
m_PCGraphicsBackgroundColorIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  int8_t              m_PCGraphicsBackgroundColorIndex; \/\/ used as background color index on 3/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:int8_t
m_PCGraphicsForegroundColorIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  int8_t              m_PCGraphicsForegroundColorIndex; \/\/ used as foreground color index on 6/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:int8_t
m_PCGraphicsPaletteInUse	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  int8_t              m_PCGraphicsPaletteInUse;         \/\/ 0 = palette 0 low intensity, 1 = pa/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:int8_t
m_PCR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_PCR;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_PIC8259A	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  PIC8259                  m_PIC8259A;  \/\/ master$/;"	m	class:Machine	typeref:typename:PIC8259
m_PIC8259B	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  PIC8259                  m_PIC8259B;  \/\/ slave$/;"	m	class:Machine	typeref:typename:PIC8259
m_PIT8253	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  PIT8253                  m_PIT8253;$/;"	m	class:Machine	typeref:typename:PIT8253
m_PRGCreator	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  PRGCreator * m_PRGCreator;$/;"	m	class:IECDrive	typeref:typename:PRGCreator *
m_PS2Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  PS2Controller     m_PS2Controller;$/;"	m	class:fabgl::i8042	typeref:typename:PS2Controller
m_PS2Device	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  PS2Device * m_PS2Device;$/;"	m	struct:fabgl::PS2DeviceLock	typeref:typename:PS2Device *
m_PS2Port	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  int16_t           m_PS2Port;$/;"	m	class:fabgl::PS2Device	typeref:typename:int16_t
m_RALT	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool                      m_RALT;$/;"	m	class:fabgl::Keyboard	typeref:typename:bool
m_RAM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  uint8_t *    m_RAM;$/;"	m	class:Machine	typeref:typename:uint8_t *
m_RAM1K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint8_t *             m_RAM1K;$/;"	m	class:Machine	typeref:typename:uint8_t *
m_RAM4K	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint8_t *             m_RAM4K;$/;"	m	class:Machine	typeref:typename:uint8_t *
m_RAMColor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint8_t *             m_RAMColor;$/;"	m	class:Machine	typeref:typename:uint8_t *
m_RAMExpansion	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  RAMExpansionOption    m_RAMExpansion;$/;"	m	class:Machine	typeref:typename:RAMExpansionOption
m_RESX	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  gpio_num_t         m_RESX;$/;"	m	class:fabgl::TFTController	typeref:typename:gpio_num_t
m_RTSStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool                      m_RTSStatus;      \/\/ true = asserted (low)$/;"	m	class:fabgl::SerialPort	typeref:typename:bool
m_SCK	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  gpio_num_t         m_SCK;$/;"	m	class:fabgl::TFTController	typeref:typename:gpio_num_t
m_SCLGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  gpio_num_t         m_SCLGPIO;$/;"	m	class:fabgl::I2C	typeref:typename:gpio_num_t
m_SCR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  uint8_t           m_SCR;$/;"	m	class:fabgl::PC8250	typeref:typename:uint8_t
m_SCROLLLOCK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool                      m_SCROLLLOCK;$/;"	m	class:fabgl::Keyboard	typeref:typename:bool
m_SCodeToVKConverterTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  TaskHandle_t              m_SCodeToVKConverterTask; \/\/ Task that converts scancodes to virtu/;"	m	class:fabgl::Keyboard	typeref:typename:TaskHandle_t
m_SDAGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  gpio_num_t         m_SDAGPIO;$/;"	m	class:fabgl::I2C	typeref:typename:gpio_num_t
m_SHIFT	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool                      m_SHIFT;$/;"	m	class:fabgl::Keyboard	typeref:typename:bool
m_SP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  uint8_t  m_SP;$/;"	m	class:fabgl::MOS6502	typeref:typename:uint8_t
m_SPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^#define m_SPI /;"	d
m_SPIDevHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  spi_device_handle_t m_SPIDevHandle;$/;"	m	class:fabgl::MCP23S17	typeref:typename:spi_device_handle_t
m_SPIDevHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  spi_device_handle_t m_SPIDevHandle;$/;"	m	class:fabgl::TFTController	typeref:typename:spi_device_handle_t
m_SPIHost	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  spi_host_device_t   m_SPIHost;$/;"	m	class:fabgl::MCP23S17	typeref:typename:spi_host_device_t
m_SPIHost	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  spi_host_device_t  m_SPIHost;$/;"	m	class:fabgl::TFTController	typeref:typename:spi_host_device_t
m_SR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_SR;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_STATUS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  uint8_t           m_STATUS;$/;"	m	class:fabgl::i8042	typeref:typename:uint8_t
m_Scale	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	uint8_t  m_Scale;         \/\/\/< the current global brightness scale setting$/;"	m	class:CFastLED	typeref:typename:uint8_t
m_SpiSavedConfig	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        } m_SpiSavedConfig;$/;"	m	class:NRF52SPIOutput	typeref:struct:NRF52SPIOutput::spim_config
m_THR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  uint8_t           m_THR;$/;"	m	class:fabgl::PC8250	typeref:typename:uint8_t
m_VBarArea	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t         m_VBarArea;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:int16_t
m_VGADCtrl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  VGADirectController m_VGADCtrl;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:VGADirectController
m_VIA1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  VIA6522               m_VIA1;$/;"	m	class:Machine	typeref:typename:VIA6522
m_VIA2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  VIA6522               m_VIA2;$/;"	m	class:Machine	typeref:typename:VIA6522
m_VIC	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  MOS6561               m_VIC;$/;"	m	class:Machine	typeref:typename:MOS6561
m_VKMap	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  uint8_t                   m_VKMap[(int)(VK_LAST + 7) \/ 8];$/;"	m	class:fabgl::Keyboard	typeref:typename:uint8_t[]
m_VScrollBarPosition	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t         m_VScrollBarPosition;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:int16_t
m_VScrollBarRange	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t         m_VScrollBarRange;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:int16_t
m_VScrollBarVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t         m_VScrollBarVisible;    \/\/ it means the "visible" area (how big is the bar)$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:int16_t
m_X	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  uint8_t  m_X;$/;"	m	class:fabgl::MOS6502	typeref:typename:uint8_t
m_Y	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_Y;$/;"	m	class:MOS6561	typeref:typename:int
m_Y	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  uint8_t  m_Y;$/;"	m	class:fabgl::MOS6502	typeref:typename:uint8_t
m_Z80	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  fabgl::Z80   m_Z80;$/;"	m	class:Machine	typeref:typename:fabgl::Z80
m_Z80	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  fabgl::Z80         m_Z80;$/;"	m	class:HAL	typeref:typename:fabgl::Z80
m_abortReason	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  AbortReason        m_abortReason;$/;"	m	class:HAL	typeref:typename:AbortReason
m_absoluteQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  QueueHandle_t   m_absoluteQueue;         \/\/ a queue of messages generated by updateAbsoluteP/;"	m	class:fabgl::Mouse	typeref:typename:QueueHandle_t
m_absoluteUpdate	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  bool            m_absoluteUpdate;$/;"	m	class:fabgl::Mouse	typeref:typename:bool
m_acc	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^  uint32_t          m_acc;$/;"	m	class:fabgl::PIT8253	typeref:typename:uint32_t
m_activeSessionID	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^  int                     m_activeSessionID;$/;"	m	class:Supervisor	typeref:typename:int
m_activeWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *      m_activeWindow;        \/\/ foreground window. Also gets keyboard events (othe/;"	m	class:fabgl::uiApp	typeref:typename:uiWindow *
m_actualHLine_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double                        m_actualHLine_us;               \/\/ actual value of m_params->h/;"	m	class:fabgl::CVBSGenerator	typeref:typename:double
m_actualLine_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double                        m_actualLine_us;                \/\/ actual value of m_params->l/;"	m	class:fabgl::CVBSGenerator	typeref:typename:double
m_address	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  int                 m_address;$/;"	m	class:SIO	typeref:typename:int
m_allocated	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint16_t       m_allocated; \/\/ allocated items$/;"	m	class:fabgl::StringList	typeref:typename:uint16_t
m_allocated	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int                 m_allocated;$/;"	m	class:fabgl::LineEditor	typeref:typename:int
m_alternateCursorBlinkingEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool               m_alternateCursorBlinkingEnabled;$/;"	m	class:fabgl::Terminal	typeref:typename:bool
m_alternateCursorX	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int                m_alternateCursorX;$/;"	m	class:fabgl::Terminal	typeref:typename:int
m_alternateCursorY	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int                m_alternateCursorY;$/;"	m	class:fabgl::Terminal	typeref:typename:int
m_alternateMap	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  uint32_t *         m_alternateMap;$/;"	m	class:fabgl::Terminal	typeref:typename:uint32_t *
m_alternateScreenBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool               m_alternateScreenBuffer;$/;"	m	class:fabgl::Terminal	typeref:typename:bool
m_alternateScrollingRegionDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int                m_alternateScrollingRegionDown;$/;"	m	class:fabgl::Terminal	typeref:typename:int
m_alternateScrollingRegionTop	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int                m_alternateScrollingRegionTop;$/;"	m	class:fabgl::Terminal	typeref:typename:int
m_anchors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiAnchors     m_anchors;$/;"	m	class:fabgl::uiWindow	typeref:typename:uiAnchors
m_app	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiApp * m_app;$/;"	m	class:fabgl::uiEvtHandler	typeref:typename:uiApp *
m_appProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiAppProps      m_appProps;$/;"	m	class:fabgl::uiApp	typeref:typename:uiAppProps
m_arbState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  ArbState     m_arbState;$/;"	m	class:IECDrive	typeref:typename:ArbState
m_area	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  Size            m_area;$/;"	m	class:fabgl::Mouse	typeref:typename:Size
m_asyncRunWait	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  SemaphoreHandle_t m_asyncRunWait;$/;"	m	class:fabgl::uiApp	typeref:typename:SemaphoreHandle_t
m_autoDestroy	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  bool     m_autoDestroy; \/\/ if true: this object needs to be destroyed by the sound generator/;"	m	class:fabgl::WaveformGenerator	typeref:typename:bool
m_autoDetach	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  bool     m_autoDetach;  \/\/ if true: this object needs to be autodetached from the sound gene/;"	m	class:fabgl::WaveformGenerator	typeref:typename:bool
m_autoEOI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^  bool    m_autoEOI;$/;"	m	class:fabgl::PIC8259	typeref:typename:bool
m_autoOK	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uint16_t                            m_autoOK;                                    \/\/ auto ok /;"	m	class:fabgl::InputBox	typeref:typename:uint16_t
m_autoRun	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  bool                         m_autoRun;$/;"	m	class:fabgl::VGADirectController	typeref:typename:bool
m_autoSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  bool           m_autoSize;$/;"	m	class:fabgl::uiImage	typeref:typename:bool
m_autoSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t        m_autoSize;$/;"	m	class:fabgl::uiLabel	typeref:typename:uint8_t
m_auxColor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint8_t                 m_auxColor;$/;"	m	class:MOS6561	typeref:typename:uint8_t
m_auxStream	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  Stream *        m_auxStream;$/;"	m	class:BDOS	typeref:typename:Stream *
m_available	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  bool     m_available;$/;"	m	class:fabgl::DS3231	typeref:typename:bool
m_backgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  RGB888                              m_backgroundColor;$/;"	m	class:fabgl::InputBox	typeref:typename:RGB888
m_backgroundPrimitiveExecutionEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  bool                   m_backgroundPrimitiveExecutionEnabled; \/\/ when False primitives are e/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:bool
m_backgroundPrimitiveTimeoutEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  volatile bool          m_backgroundPrimitiveTimeoutEnabled;   \/\/ when False VSyncInterrupt()/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:volatile bool
m_baseDir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  char const *             m_baseDir;$/;"	m	class:Machine	typeref:typename:char const *
m_baseVector	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^  uint8_t m_baseVector; \/\/ bits 3..7 got from ICW2$/;"	m	class:fabgl::PIC8259	typeref:typename:uint8_t
m_bit7blink	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  bool                m_bit7blink;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:bool
m_bitCount	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	uint32_t  m_bitCount;$/;"	m	class:Teensy4HardwareSPIOutput	typeref:typename:uint32_t
m_bitData	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	uint32_t m_bitData;$/;"	m	class:Teensy4HardwareSPIOutput	typeref:typename:uint32_t
m_bitOffsets	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint8_t m_bitOffsets[16];$/;"	m	class:FlexibleInlineBlockClocklessController	typeref:typename:uint8_t[16]
m_bitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Bitmap const * m_bitmap;$/;"	m	class:fabgl::uiImage	typeref:typename:Bitmap const *
m_bitmappedDisplayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool               m_bitmappedDisplayController;  \/\/ true = bitmapped, false = textual$/;"	m	class:fabgl::Terminal	typeref:typename:bool
m_bitsPerChannel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int                    m_bitsPerChannel;$/;"	m	class:fabgl::VGABaseController	typeref:typename:int
m_bitsPerChannel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  int                        m_bitsPerChannel;  \/\/ 1 = 8 colors, 2 = 64 colors, set by begin()$/;"	m	class:fabgl::VGATextController	typeref:typename:int
m_blackBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile uint16_t *           m_blackBuffer;                  \/\/ derived from ending black p/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile uint16_t *
m_blackBufferLength	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  int                           m_blackBufferLength;            \/\/ number of available samples/;"	m	class:fabgl::CVBSGenerator	typeref:typename:int
m_blankLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  volatile uint8_t *         m_blankLine; \/\/ for vertical porch lines$/;"	m	class:fabgl::VGATextController	typeref:typename:volatile uint8_t *
m_blinkTimer	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  TimerHandle_t      m_blinkTimer;$/;"	m	class:fabgl::Terminal	typeref:typename:TimerHandle_t
m_blinkingTextEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  volatile bool      m_blinkingTextEnabled;$/;"	m	class:fabgl::Terminal	typeref:typename:volatile bool
m_blinkingTextVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  volatile bool      m_blinkingTextVisible;    \/\/ true = blinking text is currently visible$/;"	m	class:fabgl::Terminal	typeref:typename:volatile bool
m_bootDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t                  m_bootDrive;$/;"	m	class:Machine	typeref:typename:uint8_t
m_borderColor4	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint32_t                m_borderColor4;    \/\/ 4 times border color$/;"	m	class:MOS6561	typeref:typename:uint32_t
m_breakDetected	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  volatile bool             m_breakDetected;$/;"	m	class:fabgl::SerialPort	typeref:typename:volatile bool
m_bus	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  uint8_t            m_bus;$/;"	m	class:fabgl::I2C	typeref:typename:uint8_t
m_button	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiButton *     m_button;$/;"	m	class:fabgl::uiSplitButton	typeref:typename:uiButton *
m_buttonStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiButtonStyle  m_buttonStyle;$/;"	m	class:fabgl::uiButton	typeref:typename:uiButtonStyle
m_buttonSubItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int16_t                             m_buttonSubItem;                             \/\/ in case /;"	m	class:fabgl::InputBox	typeref:typename:int16_t
m_buttonSubItems	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char const *                        m_buttonSubItems[InputForm::BUTTONS] = { };  \/\/ ext butt/;"	m	class:fabgl::InputBox	typeref:typename:char const * []
m_buttonSubItemsHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uint16_t                            m_buttonSubItemsHeight[InputForm::BUTTONS] = { };$/;"	m	class:fabgl::InputBox	typeref:typename:uint16_t[]
m_buttonText	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char const *                        m_buttonText[InputForm::BUTTONS]     = { };$/;"	m	class:fabgl::InputBox	typeref:typename:char const * []
m_cachedDirLabelFlags	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  uint8_t         m_cachedDirLabelFlags[MAXDRIVERS];  \/\/ cached directory label FCB[FCB_EX], 0/;"	m	class:BDOS	typeref:typename:uint8_t[]
m_callbackArgs	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  void *                    m_callbackArgs;$/;"	m	class:fabgl::SerialPort	typeref:typename:void *
m_canvas	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Canvas *        m_canvas;$/;"	m	class:fabgl::uiApp	typeref:typename:Canvas *
m_canvas	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Canvas *           m_canvas;$/;"	m	class:fabgl::Terminal	typeref:typename:Canvas *
m_capsLockLED	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool                      m_capsLockLED;$/;"	m	class:fabgl::Keyboard	typeref:typename:bool
m_capturedMouseWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *      m_capturedMouseWindow; \/\/ window that has captured mouse$/;"	m	class:fabgl::uiApp	typeref:typename:uiWindow *
m_caretInvertState	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int             m_caretInvertState;    \/\/ -1 = suspended, 1 = rect reversed (cat visible), 0/;"	m	class:fabgl::uiApp	typeref:typename:int
m_caretRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Rect            m_caretRect;           \/\/ caret rect relative to m_caretWindow$/;"	m	class:fabgl::uiApp	typeref:typename:Rect
m_caretTimer	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiTimerHandle   m_caretTimer;$/;"	m	class:fabgl::uiApp	typeref:typename:uiTimerHandle
m_caretWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *      m_caretWindow;         \/\/ nullptr = caret is not visible$/;"	m	class:fabgl::uiApp	typeref:typename:uiWindow *
m_carry	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  bool     m_carry;$/;"	m	class:fabgl::MOS6502	typeref:typename:bool
m_changeOut	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^  ChangeOut         m_changeOut;$/;"	m	class:fabgl::PIT8253	typeref:typename:ChangeOut
m_channel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  int          m_channel;                        \/\/ current listen\/talk channel (-1 = not ass/;"	m	class:IECDrive	typeref:typename:int
m_channelCounter	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  size_t       m_channelCounter[CHANNELSCOUNT];  \/\/ bytes counter used on talking mode$/;"	m	class:IECDrive	typeref:typename:size_t[]
m_channelType	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  ChannelType  m_channelType[CHANNELSCOUNT];$/;"	m	class:IECDrive	typeref:typename:ChannelType[]
m_channels	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  WaveformGenerator * m_channels;$/;"	m	class:fabgl::SoundGenerator	typeref:typename:WaveformGenerator *
m_charAreaHeight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_charAreaHeight;$/;"	m	class:MOS6561	typeref:typename:int
m_charColumn	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_charColumn;$/;"	m	class:MOS6561	typeref:typename:int
m_charData	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint8_t                 m_charData;$/;"	m	class:MOS6561	typeref:typename:uint8_t
m_charData	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  uint8_t *                  m_charData;$/;"	m	class:fabgl::VGATextController	typeref:typename:uint8_t *
m_charHeight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_charHeight;$/;"	m	class:MOS6561	typeref:typename:int
m_charInvertMask	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint8_t                 m_charInvertMask;  \/\/ 0x00 = no invert, 0xff = invert$/;"	m	class:MOS6561	typeref:typename:uint8_t
m_charRow	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_charRow;$/;"	m	class:MOS6561	typeref:typename:int
m_charTableAddr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint16_t                m_charTableAddr;   \/\/ in the CPU address space$/;"	m	class:MOS6561	typeref:typename:uint16_t
m_charsConsumerTaskHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  TaskHandle_t       m_charsConsumerTaskHandle;$/;"	m	class:fabgl::Terminal	typeref:typename:TaskHandle_t
m_checkBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiCheckBoxStyle m_checkBoxStyle;$/;"	m	class:fabgl::uiCheckBox	typeref:typename:uiCheckBoxStyle
m_checked	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  bool            m_checked;$/;"	m	class:fabgl::uiCheckBox	typeref:typename:bool
m_children	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  QuadTree *          m_children[4]; \/\/ index is Quadrant$/;"	m	class:fabgl::QuadTree	typeref:typename:QuadTree * [4]
m_clippingRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.h	/^  Rect                m_clippingRect;$/;"	m	class:fabgl::Canvas	typeref:typename:Rect
m_closure	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  void (*m_closure)(void * func, const Params & ...params);$/;"	m	struct:fabgl::Delegate	typeref:typename:void (*)(void * func,const Params &...params)
m_cmdSubTimeOut	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  int16_t           m_cmdSubTimeOut;$/;"	m	class:fabgl::PS2Device	typeref:typename:int16_t
m_cmdTimeOut	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  int16_t           m_cmdTimeOut;$/;"	m	class:fabgl::PS2Device	typeref:typename:int16_t
m_codepage	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  CodePage const *          m_codepage;$/;"	m	class:fabgl::Keyboard	typeref:typename:CodePage const *
m_codepage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  CodePage const * m_codepage;$/;"	m	class:fabgl::uiTextEdit	typeref:typename:CodePage const *
m_colCount	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_colCount;$/;"	m	class:MOS6561	typeref:typename:int
m_colStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint8_t               m_colStatus;  \/\/ connected to VIA2 - PB$/;"	m	class:Machine	typeref:typename:uint8_t
m_collisionDetector	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  CollisionDetector * m_collisionDetector;$/;"	m	class:fabgl::QuadTree	typeref:typename:CollisionDetector *
m_collisionDetector	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  CollisionDetector m_collisionDetector;$/;"	m	class:fabgl::Scene	typeref:typename:CollisionDetector
m_color	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Color m_color;$/;"	m	class:fabgl::uiColorBox	typeref:typename:Color
m_colorBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiColorBox *     m_colorBox;$/;"	m	class:fabgl::uiColorComboBox	typeref:typename:uiColorBox *
m_colorBurstLUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile uint16_t             m_colorBurstLUT[2][CVBS_SUBCARRIERPHASES * 2];$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile uint16_t[2][]
m_colorLine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint8_t const *         m_colorLine;$/;"	m	class:MOS6561	typeref:typename:uint8_t const *
m_colorListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiColorListBox * m_colorListBox;$/;"	m	class:fabgl::uiColorComboBox	typeref:typename:uiColorListBox *
m_coloredAttributesColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Color                     m_coloredAttributesColor[4];$/;"	m	class:fabgl::Terminal	typeref:typename:Color[4]
m_coloredAttributesMaintainStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool                      m_coloredAttributesMaintainStyle;$/;"	m	class:fabgl::Terminal	typeref:typename:bool
m_coloredAttributesMask	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int                       m_coloredAttributesMask;    \/\/ related bit 1 if enabled$/;"	m	class:fabgl::Terminal	typeref:typename:int
m_columns	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  int16_t             m_columns;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:int16_t
m_columns	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  volatile int       m_columns;$/;"	m	class:fabgl::Terminal	typeref:typename:volatile int
m_columnsQuantum	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  int                         m_columnsQuantum; \/\/ viewport width must be divisble by m_column/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:int
m_columnsQuantum	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  int                         m_columnsQuantum; \/\/ viewport width must be divisble by m_column/;"	m	class:fabgl::VGAPalettedController	typeref:typename:int
m_combineMouseMoveEvents	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  bool            m_combineMouseMoveEvents;$/;"	m	class:fabgl::uiApp	typeref:typename:bool
m_comboBoxProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiComboBoxProps   m_comboBoxProps;$/;"	m	class:fabgl::uiCustomComboBox	typeref:typename:uiComboBoxProps
m_comboBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiComboBoxStyle   m_comboBoxStyle;$/;"	m	class:fabgl::uiCustomComboBox	typeref:typename:uiComboBoxStyle
m_commTaskHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  TaskHandle_t       m_commTaskHandle;$/;"	m	class:fabgl::I2C	typeref:typename:TaskHandle_t
m_commandBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  uint8_t      m_commandBuffer[COMMANDBUFFERMAXLEN + 1];$/;"	m	class:IECDrive	typeref:typename:uint8_t[]
m_commandBufferLen	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  int          m_commandBufferLen;$/;"	m	class:IECDrive	typeref:typename:int
m_commandByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  uint8_t           m_commandByte;$/;"	m	class:fabgl::i8042	typeref:typename:uint8_t
m_consoleReadyChar	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  uint8_t         m_consoleReadyChar; \/\/ 0 = no ready char, read directly from terminal$/;"	m	class:BDOS	typeref:typename:uint8_t
m_contentRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Rect             m_contentRect;  \/\/ updated on painting$/;"	m	class:fabgl::uiTextEdit	typeref:typename:Rect
m_context	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^  void *             m_context;$/;"	m	class:fabgl::MC146818	typeref:typename:void *
m_context	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  void *                 m_context;$/;"	m	class:fabgl::MOS6502	typeref:typename:void *
m_context	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  void *            m_context;$/;"	m	class:fabgl::PC8250	typeref:typename:void *
m_context	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^  void *            m_context;$/;"	m	class:fabgl::PIT8253	typeref:typename:void *
m_context	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  void *             m_context;$/;"	m	class:fabgl::VIA6522	typeref:typename:void *
m_context	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  void *            m_context;$/;"	m	class:fabgl::Z80	typeref:typename:void *
m_context	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  void *            m_context;$/;"	m	class:fabgl::i8042	typeref:typename:void *
m_context	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  void *             m_context;$/;"	m	class:fabgl::i8080	typeref:typename:void *
m_controllerHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int16_t            m_controllerHeight;$/;"	m	class:fabgl::TFTController	typeref:typename:int16_t
m_controllerWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int16_t            m_controllerWidth;$/;"	m	class:fabgl::TFTController	typeref:typename:int16_t
m_convMatchedChars	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  uint8_t                   m_convMatchedChars[EmuTerminalMaxChars];$/;"	m	class:fabgl::Terminal	typeref:typename:uint8_t[]
m_convMatchedCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  uint8_t                   m_convMatchedCount;$/;"	m	class:fabgl::Terminal	typeref:typename:uint8_t
m_convMatchedItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  TermInfoVideoConv const * m_convMatchedItem;$/;"	m	class:fabgl::Terminal	typeref:typename:TermInfoVideoConv const *
m_count	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int       m_count;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int
m_count	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint16_t       m_count;     \/\/ actual items$/;"	m	class:fabgl::StringList	typeref:typename:uint16_t
m_counter	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t m_counter;$/;"	m	class:fabgl::VICNoiseGenerator	typeref:typename:uint16_t
m_ctsPin	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  gpio_num_t                m_ctsPin;$/;"	m	class:fabgl::SerialPort	typeref:typename:gpio_num_t
m_curByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  uint8_t      m_curByte;$/;"	m	class:IECDrive	typeref:typename:uint8_t
m_currentDir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  char *          m_currentDir[MAXDRIVERS];$/;"	m	class:BDOS	typeref:typename:char * []
m_cursorBackground	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  uint8_t                    m_cursorBackground;$/;"	m	class:fabgl::VGATextController	typeref:typename:uint8_t
m_cursorCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  int                        m_cursorCol;$/;"	m	class:fabgl::VGATextController	typeref:typename:int
m_cursorCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  int16_t             m_cursorCol;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:int16_t
m_cursorCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int              m_cursorCol;$/;"	m	class:fabgl::uiTextEdit	typeref:typename:int
m_cursorCounter	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  int                        m_cursorCounter; \/\/ trip from -m_cursorSpeed to +m_cursorSpeed (>/;"	m	class:fabgl::VGATextController	typeref:typename:int
m_cursorEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  bool                       m_cursorEnabled;$/;"	m	class:fabgl::VGATextController	typeref:typename:bool
m_cursorEnd	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  uint8_t             m_cursorEnd;    \/\/ cursor shape scanline end$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:uint8_t
m_cursorForeground	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  uint8_t                    m_cursorForeground;$/;"	m	class:fabgl::VGATextController	typeref:typename:uint8_t
m_cursorGlyph	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  uint8_t *           m_cursorGlyph;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:uint8_t *
m_cursorRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  int                        m_cursorRow;$/;"	m	class:fabgl::VGATextController	typeref:typename:int
m_cursorRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  int16_t             m_cursorRow;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:int16_t
m_cursorSpeed	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  int                        m_cursorSpeed;$/;"	m	class:fabgl::VGATextController	typeref:typename:int
m_cursorStart	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  uint8_t             m_cursorStart;  \/\/ cursor shape scanline start$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:uint8_t
m_cursorState	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  volatile bool      m_cursorState;$/;"	m	class:fabgl::Terminal	typeref:typename:volatile bool
m_cursorVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  bool                m_cursorVisible;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:bool
m_cycle	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint32_t              m_cycle;$/;"	m	class:Machine	typeref:typename:uint32_t
m_data	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  int8_t const * m_data;$/;"	m	class:fabgl::SamplesGenerator	typeref:typename:int8_t const *
m_dataBit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  int          m_dataBit;$/;"	m	class:IECDrive	typeref:typename:int
m_dataReady	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  volatile bool     m_dataReady;$/;"	m	class:fabgl::PC8250	typeref:typename:volatile bool
m_dataRecv	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  volatile uint8_t  m_dataRecv;$/;"	m	class:fabgl::PC8250	typeref:typename:volatile uint8_t
m_dateTimeValid	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  bool     m_dateTimeValid;$/;"	m	class:fabgl::DS3231	typeref:typename:bool
m_datetime	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  DateTime m_datetime;$/;"	m	class:fabgl::DS3231	typeref:typename:DateTime
m_dcdPin	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  gpio_num_t                m_dcdPin;$/;"	m	class:fabgl::SerialPort	typeref:typename:gpio_num_t
m_decimal	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  bool     m_decimal;$/;"	m	class:fabgl::MOS6502	typeref:typename:bool
m_defaultBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Color              m_defaultBackgroundColor;$/;"	m	class:fabgl::Terminal	typeref:typename:Color
m_defaultForegroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Color              m_defaultForegroundColor;$/;"	m	class:fabgl::Terminal	typeref:typename:Color
m_defaultTerminalType	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.h	/^  TermType           m_defaultTerminalType;$/;"	m	class:CCP	typeref:typename:TermType
m_destIP	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.h	/^  IPAddress     m_destIP;$/;"	m	class:fabgl::ICMP	typeref:typename:IPAddress
m_destScanline	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint32_t *              m_destScanline;$/;"	m	class:MOS6561	typeref:typename:uint32_t *
m_dev	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  volatile uart_dev_t *     m_dev;$/;"	m	class:fabgl::SerialPort	typeref:typename:volatile uart_dev_t *
m_device	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  SDL_AudioDeviceID   m_device;$/;"	m	class:fabgl::SoundGenerator	typeref:typename:SDL_AudioDeviceID
m_deviceID	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  uint16_t          m_deviceID;       \/\/ read by send_cmdIdentify()$/;"	m	class:fabgl::PS2Device	typeref:typename:uint16_t
m_deviceNum	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  uint8_t      m_deviceNum;     \/\/ this device number (8, 9...)$/;"	m	class:IECDrive	typeref:typename:uint8_t
m_devices	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  Device *     m_devices;$/;"	m	class:Machine	typeref:typename:Device *
m_dir	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  FileBrowser m_dir;$/;"	m	class:fabgl::uiFileBrowser	typeref:typename:FileBrowser
m_dir	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  char *    m_dir;$/;"	m	class:fabgl::FileBrowser	typeref:typename:char *
m_disk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  FILE *                   m_disk[DISKCOUNT];$/;"	m	class:Machine	typeref:typename:FILE * []
m_diskChanged	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  bool                     m_diskChanged[DISKCOUNT];$/;"	m	class:Machine	typeref:typename:bool[]
m_diskCylinders	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint16_t                 m_diskCylinders[DISKCOUNT];$/;"	m	class:Machine	typeref:typename:uint16_t[]
m_diskFilename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  char *                   m_diskFilename[DISKCOUNT];$/;"	m	class:Machine	typeref:typename:char * []
m_diskFormat	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  DiskFormat      m_diskFormat;$/;"	m	class:Mits88Disk	typeref:typename:DiskFormat
m_diskHeads	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t                  m_diskHeads[DISKCOUNT];$/;"	m	class:Machine	typeref:typename:uint8_t[]
m_diskSectors	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t                  m_diskSectors[DISKCOUNT];$/;"	m	class:Machine	typeref:typename:uint8_t[]
m_diskSize	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint64_t                 m_diskSize[DISKCOUNT];$/;"	m	class:Machine	typeref:typename:uint64_t[]
m_dispCtrl	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  BitmappedDisplayController *        m_dispCtrl;$/;"	m	class:fabgl::InputBox	typeref:typename:BitmappedDisplayController *
m_displayColors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int                          m_displayColors;$/;"	m	class:fabgl::uiApp	typeref:typename:int
m_displayController	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^  BaseDisplayController * m_displayController;$/;"	m	class:Supervisor	typeref:typename:BaseDisplayController *
m_displayController	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  fabgl::VGAController *  m_displayController;$/;"	m	class:MOS6561	typeref:typename:fabgl::VGAController *
m_displayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.h	/^  BitmappedDisplayController * m_displayController;$/;"	m	class:fabgl::Canvas	typeref:typename:BitmappedDisplayController *
m_displayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  BitmappedDisplayController * m_displayController;$/;"	m	class:fabgl::uiApp	typeref:typename:BitmappedDisplayController *
m_displayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  BaseDisplayController * m_displayController;$/;"	m	class:fabgl::Terminal	typeref:typename:BaseDisplayController *
m_doubleBufferOverDMA	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  bool                   m_doubleBufferOverDMA;$/;"	m	class:fabgl::VGABaseController	typeref:typename:bool
m_doubleBufferedEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  volatile bool          m_doubleBufferedEnabled; \/\/ true = double buffering actually enabled$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:volatile bool
m_doubleBufferedSetup	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  volatile bool          m_doubleBufferedSetup;   \/\/ true = controller initialized for double /;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:volatile bool
m_down	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  bool           m_down;$/;"	m	class:fabgl::uiButton	typeref:typename:bool
m_drawScanlineArg	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  void *                        m_drawScanlineArg;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:void *
m_drawScanlineArg	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  void *                       m_drawScanlineArg;$/;"	m	class:fabgl::VGADirectController	typeref:typename:void *
m_drawScanlineCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  CVBSDrawScanlineCallback      m_drawScanlineCallback;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:CVBSDrawScanlineCallback
m_drawScanlineCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  DrawScanlineCallback         m_drawScanlineCallback;$/;"	m	class:fabgl::VGADirectController	typeref:typename:DrawScanlineCallback
m_drive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  int8_t          m_drive;$/;"	m	class:Mits88Disk	typeref:typename:int8_t
m_dsrPin	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  gpio_num_t                m_dsrPin;$/;"	m	class:fabgl::SerialPort	typeref:typename:gpio_num_t
m_dtrPin	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  gpio_num_t                m_dtrPin;$/;"	m	class:fabgl::SerialPort	typeref:typename:gpio_num_t
m_duration	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint32_t m_duration;  \/\/ number of samples to play (-1 = infinite)$/;"	m	class:fabgl::WaveformGenerator	typeref:typename:uint32_t
m_dutyCycle	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint8_t  m_dutyCycle;$/;"	m	class:fabgl::SquareWaveformGenerator	typeref:typename:uint8_t
m_emuState	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  EmuState           m_emuState;$/;"	m	class:fabgl::Terminal	typeref:typename:EmuState
m_emulation	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  Emulation           m_emulation;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:Emulation
m_enabled	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  bool            m_enabled;$/;"	m	class:Mits88Disk	typeref:typename:bool
m_enabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  int8_t   m_enabled;   \/\/ 0 = disabled, 1 = enabled$/;"	m	class:fabgl::WaveformGenerator	typeref:typename:int8_t
m_endUpdateIntTimerHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^  esp_timer_handle_t m_endUpdateIntTimerHandle;$/;"	m	class:fabgl::MC146818	typeref:typename:esp_timer_handle_t
m_endingState	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  volatile bool             m_endingState;$/;"	m	class:fabgl::Terminal	typeref:typename:volatile bool
m_eventGroup	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  EventGroupHandle_t m_eventGroup;$/;"	m	class:fabgl::I2C	typeref:typename:EventGroupHandle_t
m_eventsQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  QueueHandle_t   m_eventsQueue;$/;"	m	class:fabgl::uiApp	typeref:typename:QueueHandle_t
m_execMainLoop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  bool               m_execMainLoop;$/;"	m	class:HAL	typeref:typename:bool
m_execQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  volatile QueueHandle_t m_execQueue;             \/\/ current primitives queue$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:volatile QueueHandle_t
m_execQueueAlt	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  volatile QueueHandle_t m_execQueueAlt;          \/\/ alternate (in pause) primitive queue$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:volatile QueueHandle_t
m_executingCommand	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  uint8_t           m_executingCommand; \/\/ 0 = none$/;"	m	class:fabgl::i8042	typeref:typename:uint8_t
m_existingApp	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiApp *                             m_existingApp;                               \/\/ uiApp in/;"	m	class:fabgl::InputBox	typeref:typename:uiApp *
m_exitSystem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.h	/^  bool               m_exitSystem;$/;"	m	class:CCP	typeref:typename:bool
m_expRAM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint8_t *             m_expRAM[5];$/;"	m	class:Machine	typeref:typename:uint8_t * [5]
m_expROM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint8_t *             m_expROM[4];$/;"	m	class:Machine	typeref:typename:uint8_t * [4]
m_extNextCode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int                       m_extNextCode; \/\/ -1 = no code$/;"	m	class:fabgl::Terminal	typeref:typename:int
m_file	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  FILE *          m_file[DISKCOUNT];              \/\/ when using attachFile$/;"	m	class:Mits88Disk	typeref:typename:FILE * []
m_fileBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  FileBrowser     m_fileBrowser;$/;"	m	class:BDOS	typeref:typename:FileBrowser
m_fileBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  FileBrowser           m_fileBrowser;$/;"	m	class:Machine	typeref:typename:FileBrowser
m_fileSearchState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  FileSearchState m_fileSearchState;$/;"	m	class:BDOS	typeref:typename:FileSearchState
m_fileSectorBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  uint8_t *       m_fileSectorBuffer[DISKCOUNT];  \/\/ when using attachFile (sector buffer)$/;"	m	class:Mits88Disk	typeref:typename:uint8_t * []
m_files	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  FILE *       m_files[CHANNELSCOUNT];           \/\/ associated file for each channel$/;"	m	class:IECDrive	typeref:typename:FILE * []
m_firstActiveFieldLineSwitch	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  bool                          m_firstActiveFieldLineSwitch[4][2];  \/\/ line switch state for /;"	m	class:fabgl::CVBSGenerator	typeref:typename:bool[4][2]
m_firstActiveFrameLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile int16_t              m_firstActiveFrameLine[2];      \/\/ first active frame line for/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int16_t[2]
m_firstChild	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *    m_firstChild;$/;"	m	class:fabgl::uiWindow	typeref:typename:uiWindow *
m_firstColorBurstSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile uint16_t             m_firstColorBurstSample;        \/\/ sample where color burst st/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile uint16_t
m_firstVisibleFieldLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  int16_t                       m_firstVisibleFieldLine;        \/\/ 1...$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:int16_t
m_firstVisibleFrameLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile int16_t              m_firstVisibleFrameLine[2];     \/\/ first visible frame line fo/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int16_t[2]
m_firstVisibleItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int            m_firstVisibleItem;     \/\/ the item on the top$/;"	m	class:fabgl::uiCustomListBox	typeref:typename:int
m_flowControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  volatile FlowControl      m_flowControl;$/;"	m	class:fabgl::SerialPort	typeref:typename:volatile FlowControl
m_focusIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int8_t        m_focusIndex;      \/\/ -1 = doesn't partecipate to focus trip$/;"	m	class:fabgl::uiWindow	typeref:typename:int8_t
m_focusedWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *      m_focusedWindow;       \/\/ window that captures keyboard events (other than a/;"	m	class:fabgl::uiApp	typeref:typename:uiWindow *
m_font	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  FontInfo const *           m_font;$/;"	m	class:fabgl::VGATextController	typeref:typename:FontInfo const *
m_font	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  FontInfo            m_font;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:FontInfo
m_font	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  FontInfo           m_font;$/;"	m	class:fabgl::Terminal	typeref:typename:FontInfo
m_fontInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.h	/^  FontInfo const *    m_fontInfo;$/;"	m	class:fabgl::Canvas	typeref:typename:FontInfo const *
m_foregroundColorCode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_foregroundColorCode;$/;"	m	class:MOS6561	typeref:typename:int
m_frameBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t *                m_frameBuffer;$/;"	m	class:Machine	typeref:typename:uint8_t *
m_frameCounter	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  uint32_t            m_frameCounter;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:uint32_t
m_frameProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiFrameProps       m_frameProps;$/;"	m	class:fabgl::uiFrame	typeref:typename:uiFrameProps
m_frameState	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiFrameState       m_frameState;$/;"	m	class:fabgl::uiFrame	typeref:typename:uiFrameState
m_frameStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiFrameStyle       m_frameStyle;$/;"	m	class:fabgl::uiFrame	typeref:typename:uiFrameStyle
m_framingError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  volatile bool             m_framingError;$/;"	m	class:fabgl::SerialPort	typeref:typename:volatile bool
m_freeMouseWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *      m_freeMouseWindow;     \/\/ window where mouse is over$/;"	m	class:fabgl::uiApp	typeref:typename:uiWindow *
m_freq	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int32_t            m_freq;$/;"	m	class:fabgl::TFTController	typeref:typename:int32_t
m_freq	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  int32_t           m_freq;$/;"	m	class:fabgl::PC8250	typeref:typename:int32_t
m_frequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t m_frequency;$/;"	m	class:fabgl::SawtoothWaveformGenerator	typeref:typename:uint16_t
m_frequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t m_frequency;$/;"	m	class:fabgl::SineWaveformGenerator	typeref:typename:uint16_t
m_frequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t m_frequency;$/;"	m	class:fabgl::SquareWaveformGenerator	typeref:typename:uint16_t
m_frequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t m_frequency;$/;"	m	class:fabgl::TriangleWaveformGenerator	typeref:typename:uint16_t
m_frequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t m_frequency;$/;"	m	class:fabgl::VICNoiseGenerator	typeref:typename:uint16_t
m_func	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  void * m_func;$/;"	m	struct:fabgl::Delegate	typeref:typename:void *
m_genMethod	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  SoundGenMethod      m_genMethod;$/;"	m	class:fabgl::SoundGenerator	typeref:typename:SoundGenMethod
m_glyphOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  GlyphOptions       m_glyphOptions;$/;"	m	class:fabgl::Terminal	typeref:typename:GlyphOptions
m_glyphsBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  GlyphsBuffer       m_glyphsBuffer;$/;"	m	class:fabgl::Terminal	typeref:typename:GlyphsBuffer
m_gpio	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  gpio_num_t                    m_gpio;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:gpio_num_t
m_gpio	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  gpio_num_t          m_gpio;$/;"	m	class:fabgl::SoundGenerator	typeref:typename:gpio_num_t
m_graphicsAdapter	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  GraphicsAdapter          m_graphicsAdapter;$/;"	m	class:Machine	typeref:typename:GraphicsAdapter
m_groupIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t         m_groupIndex; \/\/ -1 = no group$/;"	m	class:fabgl::uiCheckBox	typeref:typename:int16_t
m_hcolors	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint8_t                 m_hcolors[2];$/;"	m	class:MOS6561	typeref:typename:uint8_t[2]
m_headLoaded	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  int8_t          m_headLoaded[DISKCOUNT];$/;"	m	class:Mits88Disk	typeref:typename:int8_t[]
m_height	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  int                 m_height;$/;"	m	class:fabgl::QuadTree	typeref:typename:int
m_height	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  int               m_height;$/;"	m	class:fabgl::Scene	typeref:typename:int
m_hiNibble	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint32_t                m_hiNibble;$/;"	m	class:MOS6561	typeref:typename:uint32_t
m_history	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  char *          m_history[CCP_HISTORY_DEPTH];$/;"	m	class:BDOS	typeref:typename:char * []
m_homeCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int16_t             m_homeCol;$/;"	m	class:fabgl::LineEditor	typeref:typename:int16_t
m_homeRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int16_t             m_homeRow;$/;"	m	class:fabgl::LineEditor	typeref:typename:int16_t
m_horizontalRate	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  int                    m_horizontalRate; \/\/ 1...$/;"	m	class:fabgl::CVBSBaseController	typeref:typename:int
m_i2c	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  i2c_t *            m_i2c;$/;"	m	class:fabgl::I2C	typeref:typename:i2c_t *
m_i2c	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  I2C *    m_i2c;$/;"	m	class:fabgl::DS3231	typeref:typename:I2C *
m_i2c	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  I2C *              m_i2c;$/;"	m	class:fabgl::SSD1306Controller	typeref:typename:I2C *
m_i2cAddress	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  uint8_t            m_i2cAddress;$/;"	m	class:fabgl::SSD1306Controller	typeref:typename:uint8_t
m_i2cAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  bool               m_i2cAvailable;$/;"	m	class:fabgl::I2C	typeref:typename:bool
m_i8042	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  i8042 *         m_i8042;$/;"	m	class:BIOS	typeref:typename:i8042 *
m_i8042	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  i8042                    m_i8042;$/;"	m	class:Machine	typeref:typename:i8042
m_i8080	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  fabgl::i8080 m_i8080;$/;"	m	class:Machine	typeref:typename:fabgl::i8080
m_idx	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  int                       m_idx;$/;"	m	class:fabgl::SerialPort	typeref:typename:int
m_imageStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiImageStyle   m_imageStyle;$/;"	m	class:fabgl::uiImage	typeref:typename:uiImageStyle
m_inCharRow	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_inCharRow; \/\/ row inside character tab$/;"	m	class:MOS6561	typeref:typename:int
m_includeHiddenFiles	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool      m_includeHiddenFiles;$/;"	m	class:fabgl::FileBrowser	typeref:typename:bool
m_index	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  int            m_index;$/;"	m	class:fabgl::SamplesGenerator	typeref:typename:int
m_initDone	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  bool                m_initDone;$/;"	m	class:fabgl::SoundGenerator	typeref:typename:bool
m_initialized	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool                      m_initialized;$/;"	m	class:fabgl::SerialPort	typeref:typename:bool
m_inputATN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  bool         m_inputATN;$/;"	m	class:IECDrive	typeref:typename:bool
m_inputCLK	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  bool         m_inputCLK;$/;"	m	class:IECDrive	typeref:typename:bool
m_inputDATA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  bool         m_inputDATA;$/;"	m	class:IECDrive	typeref:typename:bool
m_inputPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int16_t             m_inputPos;$/;"	m	class:fabgl::LineEditor	typeref:typename:int16_t
m_inputQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  volatile QueueHandle_t    m_inputQueue;$/;"	m	class:fabgl::Terminal	typeref:typename:volatile QueueHandle_t
m_insertMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool                m_insertMode;$/;"	m	class:fabgl::LineEditor	typeref:typename:bool
m_intDisable	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  bool     m_intDisable;$/;"	m	class:fabgl::MOS6502	typeref:typename:bool
m_interruptCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^  InterruptCallback  m_interruptCallback;$/;"	m	class:fabgl::MC146818	typeref:typename:InterruptCallback
m_interruptCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  InterruptCallback m_interruptCallback;$/;"	m	class:fabgl::PC8250	typeref:typename:InterruptCallback
m_inverted	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool                      m_inverted;$/;"	m	class:fabgl::SerialPort	typeref:typename:bool
m_isEmpty	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  bool         m_isEmpty;$/;"	m	class:IECDrive	typeref:typename:bool
m_isLastByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  bool         m_isLastByte;$/;"	m	class:IECDrive	typeref:typename:bool
m_isMouseOver	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t       m_isMouseOver;     \/\/ 1 after mouse entered, 0 after mouse left$/;"	m	class:fabgl::uiWindow	typeref:typename:uint8_t
m_isVBorder	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  bool                    m_isVBorder;$/;"	m	class:MOS6561	typeref:typename:bool
m_isrHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  intr_handler_t              m_isrHandler;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:intr_handler_t
m_isr_handle	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  intr_handle_t                 m_isr_handle;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:intr_handle_t
m_isr_handle	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  intr_handle_t       m_isr_handle;$/;"	m	class:fabgl::SoundGenerator	typeref:typename:intr_handle_t
m_isr_handle	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  intr_handle_t          m_isr_handle;$/;"	m	class:fabgl::VGABaseController	typeref:typename:intr_handle_t
m_isr_handle	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  intr_handle_t              m_isr_handle;$/;"	m	class:fabgl::VGATextController	typeref:typename:intr_handle_t
m_items	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  StringList     m_items;$/;"	m	class:fabgl::uiListBox	typeref:typename:StringList
m_items	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  StringList     m_items;$/;"	m	class:fabgl::uiSimpleMenu	typeref:typename:StringList
m_items	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  DirItem * m_items;$/;"	m	class:fabgl::FileBrowser	typeref:typename:DirItem *
m_items	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  StackItem<T> * m_items;$/;"	m	class:fabgl::Stack	typeref:typename:StackItem<T> *
m_items	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  char const * * m_items;$/;"	m	class:fabgl::StringList	typeref:typename:char const **
m_itemsList	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  MachineConfItem * m_itemsList;$/;"	m	class:MachineConf	typeref:typename:MachineConfItem *
m_jobInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  I2CJobInfo         m_jobInfo;$/;"	m	class:fabgl::I2C	typeref:typename:I2CJobInfo
m_joyEmu	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  JoyEmu                m_joyEmu;$/;"	m	class:Machine	typeref:typename:JoyEmu
m_kbdScancodeComp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  uint8_t         m_kbdScancodeComp;$/;"	m	class:BIOS	typeref:typename:uint8_t
m_keyDownHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiEvtHandler *  m_keyDownHandler;      \/\/ used to produce UIEVT_KEYTYPE$/;"	m	class:fabgl::uiApp	typeref:typename:uiEvtHandler *
m_keybIntTrigs	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  int               m_keybIntTrigs;$/;"	m	class:fabgl::i8042	typeref:typename:int
m_keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  Keyboard *      m_keyboard;$/;"	m	class:BIOS	typeref:typename:Keyboard *
m_keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  Keyboard *        m_keyboard;$/;"	m	class:fabgl::i8042	typeref:typename:Keyboard *
m_keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Keyboard *      m_keyboard;$/;"	m	class:fabgl::uiApp	typeref:typename:Keyboard *
m_keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Keyboard *         m_keyboard;$/;"	m	class:fabgl::Terminal	typeref:typename:Keyboard *
m_keyboardAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool                      m_keyboardAvailable;  \/\/ self test passed and support for scancode/;"	m	class:fabgl::Keyboard	typeref:typename:bool
m_keyboardInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  InterruptCallback m_keyboardInterrupt;$/;"	m	class:fabgl::i8042	typeref:typename:InterruptCallback
m_keyboardReaderTaskHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  TaskHandle_t       m_keyboardReaderTaskHandle;$/;"	m	class:fabgl::Terminal	typeref:typename:TaskHandle_t
m_kind	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiButtonKind   m_kind;$/;"	m	class:fabgl::uiButton	typeref:typename:uiButtonKind
m_kind	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiCheckBoxKind  m_kind;$/;"	m	class:fabgl::uiCheckBox	typeref:typename:uiCheckBoxKind
m_labelStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiLabelStyle   m_labelStyle;$/;"	m	class:fabgl::uiLabel	typeref:typename:uiLabelStyle
m_lastChild	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *    m_lastChild;$/;"	m	class:fabgl::uiWindow	typeref:typename:uiWindow *
m_lastColorBurstSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile uint16_t             m_lastColorBurstSample;         \/\/ sample where color burst en/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile uint16_t
m_lastDeadKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  VirtualKey                m_lastDeadKey;$/;"	m	class:fabgl::Keyboard	typeref:typename:VirtualKey
m_lastFocusedWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *      m_lastFocusedWindow;   \/\/ previous focused window$/;"	m	class:fabgl::uiApp	typeref:typename:uiWindow *
m_lastMouseUpPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Point           m_lastMouseUpPos;      \/\/ screen position of last mouse up$/;"	m	class:fabgl::uiApp	typeref:typename:Point
m_lastMouseUpTimeMS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int             m_lastMouseUpTimeMS;   \/\/ time (MS) at mouse up. Used to measure double clic/;"	m	class:fabgl::uiApp	typeref:typename:int
m_lastPressedKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  VirtualKey                m_lastPressedKey;$/;"	m	class:fabgl::Terminal	typeref:typename:VirtualKey
m_lastReshapingBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Rect               m_lastReshapingBox;    \/\/ last reshaping box painted by drawReshapingBox(/;"	m	class:fabgl::uiFrame	typeref:typename:Rect
m_lastResult	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  InputResult                         m_lastResult = InputResult::None;$/;"	m	class:fabgl::InputBox	typeref:typename:InputResult
m_lastSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  int16_t  m_lastSample;$/;"	m	class:fabgl::SineWaveformGenerator	typeref:typename:int16_t
m_lastSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  int8_t   m_lastSample;$/;"	m	class:fabgl::SawtoothWaveformGenerator	typeref:typename:int8_t
m_lastSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  int8_t   m_lastSample;$/;"	m	class:fabgl::SquareWaveformGenerator	typeref:typename:int8_t
m_lastSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  int8_t   m_lastSample;$/;"	m	class:fabgl::TriangleWaveformGenerator	typeref:typename:int8_t
m_lastSyncCycle	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint32_t              m_lastSyncCycle;$/;"	m	class:Machine	typeref:typename:uint32_t
m_lastSyncTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint64_t              m_lastSyncTime;   \/\/ uS$/;"	m	class:Machine	typeref:typename:uint64_t
m_lastTickTime	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^  uint32_t          m_lastTickTime;$/;"	m	class:fabgl::PIT8253	typeref:typename:uint32_t
m_lastUserActionTimeMS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int             m_lastUserActionTimeMS; \/\/ time when last user action (mouse\/keyboard) has /;"	m	class:fabgl::uiApp	typeref:typename:int
m_lastVisibleFieldLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  int16_t                       m_lastVisibleFieldLine;         \/\/ 1...$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:int16_t
m_lastVisibleFrameLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile int16_t              m_lastVisibleFrameLine[2];      \/\/ last visible frame line for/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int16_t[2]
m_lastWrittenChar	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  volatile uint8_t          m_lastWrittenChar;$/;"	m	class:fabgl::Terminal	typeref:typename:volatile uint8_t
m_layout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  KeyboardLayout const *    m_layout;$/;"	m	class:fabgl::Keyboard	typeref:typename:KeyboardLayout const *
m_leftPos	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_leftPos;   \/\/ where text starts$/;"	m	class:MOS6561	typeref:typename:int
m_length	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  int            m_length;$/;"	m	class:fabgl::SamplesGenerator	typeref:typename:int
m_lineBuf	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile uint16_t * *         m_lineBuf;                      \/\/ hsync + back porch + line +/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile uint16_t **
m_lineStatusCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  LineStatusCallback        m_lineStatusCallback;$/;"	m	class:fabgl::SerialPort	typeref:typename:LineStatusCallback
m_lines	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  uint8_t *  *                 m_lines;$/;"	m	class:fabgl::VGADirectController	typeref:typename:uint8_t **
m_lines	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  volatile uint8_t * *        m_lines;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:volatile uint8_t **
m_lines	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  uint32_t *                 m_lines;$/;"	m	class:fabgl::VGATextController	typeref:typename:uint32_t *
m_linesCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  int32_t                      m_linesCount;$/;"	m	class:fabgl::VGADirectController	typeref:typename:int32_t
m_linesCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  int                         m_linesCount;     \/\/ viewport height must be divisible by m_line/;"	m	class:fabgl::VGAPalettedController	typeref:typename:int
m_linesPerFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile int                  m_linesPerFrame;                \/\/ number of lines in a frame$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int
m_linkState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  LinkState    m_linkState;$/;"	m	class:IECDrive	typeref:typename:LinkState
m_linkStateCycles	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  int          m_linkStateCycles;$/;"	m	class:IECDrive	typeref:typename:int
m_listBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiListBox *  m_listBox;$/;"	m	class:fabgl::uiComboBox	typeref:typename:uiListBox *
m_listBoxParent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *        m_listBoxParent;$/;"	m	class:fabgl::uiCustomComboBox	typeref:typename:uiWindow *
m_listBoxProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiListBoxProps m_listBoxProps;$/;"	m	class:fabgl::uiCustomListBox	typeref:typename:uiListBoxProps
m_listBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiListBoxStyle m_listBoxStyle;$/;"	m	class:fabgl::uiCustomListBox	typeref:typename:uiListBoxStyle
m_listHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t           m_listHeight;$/;"	m	class:fabgl::uiCustomComboBox	typeref:typename:int16_t
m_loNibble	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint32_t                m_loNibble;$/;"	m	class:MOS6561	typeref:typename:uint32_t
m_loadChar	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  bool                    m_loadChar;$/;"	m	class:MOS6561	typeref:typename:bool
m_logStream	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Stream *           m_logStream;$/;"	m	class:fabgl::Terminal	typeref:typename:Stream *
m_loseFocusBy	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t           m_loseFocusBy;$/;"	m	class:fabgl::uiCustomComboBox	typeref:typename:int16_t
m_lsyncBuf	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile uint16_t *           m_lsyncBuf;                     \/\/ vertical blank, long pulse /;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile uint16_t *
m_machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  Machine * m_machine;$/;"	m	struct:Device	typeref:typename:Machine *
m_machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  Machine *       m_machine;$/;"	m	class:BIOS	typeref:typename:Machine *
m_machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  Machine *    m_machine;$/;"	m	class:IECDrive	typeref:typename:Machine *
m_machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  Machine *               m_machine;$/;"	m	class:MOS6561	typeref:typename:Machine *
m_map	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  uint32_t const *           m_map;$/;"	m	class:fabgl::VGATextController	typeref:typename:uint32_t const *
m_max	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t       m_max;$/;"	m	class:fabgl::uiSlider	typeref:typename:int16_t
m_maxColumns	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int                m_maxColumns;$/;"	m	class:fabgl::Terminal	typeref:typename:int
m_maxRows	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int                m_maxRows;$/;"	m	class:fabgl::Terminal	typeref:typename:int
m_maxVSyncISRTime	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.h	/^  volatile int16_t       m_maxVSyncISRTime; \/\/ Maximum us VSync interrupt routine can run$/;"	m	class:fabgl::VGAController	typeref:typename:volatile int16_t
m_mcolors	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint8_t                 m_mcolors[4];$/;"	m	class:MOS6561	typeref:typename:uint8_t[4]
m_mediaType	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  MediaType       m_mediaType[DISKCOUNT];$/;"	m	class:BIOS	typeref:typename:MediaType[]
m_mem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t * m_mem;$/;"	m	class:fabgl::LightMemoryPool	typeref:typename:uint8_t *
m_memBlock	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  uint32_t *         m_memBlock[64];  \/\/ 64 blocks of 1K$/;"	m	class:HAL	typeref:typename:uint32_t * [64]
m_memory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  uint8_t *       m_memory;$/;"	m	class:BIOS	typeref:typename:uint8_t *
m_menu	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiSimpleMenu * m_menu;$/;"	m	class:fabgl::uiSplitButton	typeref:typename:uiSimpleMenu *
m_menuCallback	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  MenuCallback m_menuCallback;$/;"	m	class:Machine	typeref:typename:MenuCallback
m_min	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t       m_min;$/;"	m	class:fabgl::uiSlider	typeref:typename:int16_t
m_minButtonsWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int16_t                             m_minButtonsWidth;$/;"	m	class:fabgl::InputBox	typeref:typename:int16_t
m_modalWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *      m_modalWindow;         \/\/ current modal window$/;"	m	class:fabgl::uiApp	typeref:typename:uiWindow *
m_monochrome	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.h	/^  bool                         m_monochrome;$/;"	m	class:fabgl::CVBS16Controller	typeref:typename:bool
m_mounts	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  char *             m_mounts[MAXDRIVERS];$/;"	m	class:HAL	typeref:typename:char * []
m_mouse	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  Mouse *         m_mouse;$/;"	m	class:BIOS	typeref:typename:Mouse *
m_mouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  Mouse *           m_mouse;$/;"	m	class:fabgl::i8042	typeref:typename:Mouse *
m_mouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Mouse *         m_mouse;$/;"	m	class:fabgl::uiApp	typeref:typename:Mouse *
m_mouseAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  bool            m_mouseAvailable;$/;"	m	class:fabgl::Mouse	typeref:typename:bool
m_mouseCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Sprite                 m_mouseCursor;$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:Sprite
m_mouseDownFrameItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiFrameItem        m_mouseDownFrameItem;  \/\/ frame item on mouse down$/;"	m	class:fabgl::uiFrame	typeref:typename:uiFrameItem
m_mouseDownHScrollBarPosition	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t         m_mouseDownHScrollBarPosition;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:int16_t
m_mouseDownPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Point              m_mouseDownPos;        \/\/ mouse position when mouse down event has been r/;"	m	class:fabgl::uiFrame	typeref:typename:Point
m_mouseDownPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Point           m_mouseDownPos;    \/\/ mouse position when mouse down event has been received$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:Point
m_mouseDownVScrollBarPosition	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t         m_mouseDownVScrollBarPosition;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:int16_t
m_mouseHotspotX	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t                m_mouseHotspotX;$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:int16_t
m_mouseHotspotY	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t                m_mouseHotspotY;$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:int16_t
m_mouseIntTrigs	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  int               m_mouseIntTrigs;$/;"	m	class:fabgl::i8042	typeref:typename:int
m_mouseInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  InterruptCallback m_mouseInterrupt;$/;"	m	class:fabgl::i8042	typeref:typename:InterruptCallback
m_mouseMoveFrameItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiFrameItem        m_mouseMoveFrameItem;  \/\/ frame item on mouse move$/;"	m	class:fabgl::uiFrame	typeref:typename:uiFrameItem
m_mouseOverItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiScrollBarItem m_mouseOverItem;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:uiScrollBarItem
m_mousePacket	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  MousePacket       m_mousePacket;$/;"	m	class:fabgl::i8042	typeref:typename:MousePacket
m_mousePacketIdx	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  int               m_mousePacketIdx;$/;"	m	class:fabgl::i8042	typeref:typename:int
m_mouseType	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  MouseType       m_mouseType;$/;"	m	class:fabgl::Mouse	typeref:typename:MouseType
m_mouseUpdateTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  TaskHandle_t    m_mouseUpdateTask;$/;"	m	class:fabgl::Mouse	typeref:typename:TaskHandle_t
m_movementAcceleration	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  int             m_movementAcceleration;  \/\/ reasonable values: 0...2000$/;"	m	class:fabgl::Mouse	typeref:typename:int
m_mutex	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  SemaphoreHandle_t m_mutex;$/;"	m	class:fabgl::i8042	typeref:typename:SemaphoreHandle_t
m_mutex	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  SemaphoreHandle_t m_mutex;$/;"	m	struct:fabgl::AutoSemaphore	typeref:typename:SemaphoreHandle_t
m_mutex	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  SemaphoreHandle_t m_mutex;$/;"	m	class:fabgl::Scene	typeref:typename:SemaphoreHandle_t
m_mutex	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  volatile SemaphoreHandle_t m_mutex;$/;"	m	class:fabgl::Terminal	typeref:typename:volatile SemaphoreHandle_t
m_nActualLanes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint8_t m_nActualLanes;$/;"	m	class:FlexibleInlineBlockClocklessController	typeref:typename:uint8_t
m_nFPS	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	uint16_t m_nFPS;          \/\/\/< tracking for current frames per second (FPS) value$/;"	m	class:CFastLED	typeref:typename:uint16_t
m_nHighBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint8_t m_nHighBit;$/;"	m	class:FlexibleInlineBlockClocklessController	typeref:typename:uint8_t
m_nLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    int m_nLeds;               \/\/\/< the number of LEDs in the LED data array$/;"	m	class:CLEDController	typeref:typename:int
m_nLowBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint8_t m_nLowBit;$/;"	m	class:FlexibleInlineBlockClocklessController	typeref:typename:uint8_t
m_nMinMicros	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	uint32_t m_nMinMicros;    \/\/\/< minimum µs between frames, used for capping frame rates$/;"	m	class:CFastLED	typeref:typename:uint32_t
m_nOutBlocks	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint8_t m_nOutBlocks;$/;"	m	class:FlexibleInlineBlockClocklessController	typeref:typename:uint8_t
m_nPowerData	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	uint32_t m_nPowerData;    \/\/\/< max power use parameter$/;"	m	class:CFastLED	typeref:typename:uint32_t
m_nWriteMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint32_t m_nWriteMask;$/;"	m	class:FlexibleInlineBlockClocklessController	typeref:typename:uint32_t
m_namesStorage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  char *    m_namesStorage;$/;"	m	class:fabgl::FileBrowser	typeref:typename:char *
m_nativePixelFormat	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  NativePixelFormat           m_nativePixelFormat;$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:NativePixelFormat
m_nativePixelFormat	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  NativePixelFormat           m_nativePixelFormat;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:NativePixelFormat
m_negative	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  bool     m_negative;$/;"	m	class:fabgl::MOS6502	typeref:typename:bool
m_next	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *    m_next;$/;"	m	class:fabgl::uiWindow	typeref:typename:uiWindow *
m_nextFreeFocusIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int                m_nextFreeFocusIndex;$/;"	m	class:fabgl::uiFrame	typeref:typename:int
m_noGen	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  VICNoiseGenerator       m_noGen;$/;"	m	class:MOS6561	typeref:typename:VICNoiseGenerator
m_noise	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t m_noise;$/;"	m	class:fabgl::NoiseWaveformGenerator	typeref:typename:uint16_t
m_numLockLED	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool                      m_numLockLED;$/;"	m	class:fabgl::Keyboard	typeref:typename:bool
m_nvs	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^  nvs_handle_t       m_nvs;$/;"	m	class:fabgl::MC146818	typeref:typename:nvs_handle_t
m_objectPool	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  QuadTreeObject * m_objectPool;$/;"	m	class:fabgl::CollisionDetector	typeref:typename:QuadTreeObject *
m_objectPoolSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  int              m_objectPoolSize;$/;"	m	class:fabgl::CollisionDetector	typeref:typename:int
m_objectType	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiObjectType m_objectType;$/;"	m	class:fabgl::uiObject	typeref:typename:uiObjectType
m_objects	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  QuadTreeObject *    m_objects;$/;"	m	class:fabgl::QuadTree	typeref:typename:QuadTreeObject *
m_objectsCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  int                 m_objectsCount;$/;"	m	class:fabgl::QuadTree	typeref:typename:int
m_offsets	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint32_t m_offsets[3];$/;"	m	class:FlexibleInlineBlockClocklessController	typeref:typename:uint32_t[3]
m_openFileCache	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  OpenFileCache   m_openFileCache[CPMMAXFILES];$/;"	m	class:BDOS	typeref:typename:OpenFileCache[]
m_orientation	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  SSD1306Orientation m_orientation;$/;"	m	class:fabgl::SSD1306Controller	typeref:typename:SSD1306Orientation
m_orientation	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  TFTOrientation     m_orientation;$/;"	m	class:fabgl::TFTController	typeref:typename:TFTOrientation
m_orientation	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiOrientation m_orientation;$/;"	m	class:fabgl::uiSlider	typeref:typename:uiOrientation
m_origInt1EAddr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  uint32_t        m_origInt1EAddr;$/;"	m	class:BIOS	typeref:typename:uint32_t
m_origin	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.h	/^  Point               m_origin;$/;"	m	class:fabgl::Canvas	typeref:typename:Point
m_outSR	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t m_outSR;$/;"	m	class:fabgl::VICNoiseGenerator	typeref:typename:uint16_t
m_outputQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  QueueHandle_t             m_outputQueue;$/;"	m	class:fabgl::Terminal	typeref:typename:QueueHandle_t
m_overflow	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  bool     m_overflow;$/;"	m	class:fabgl::MOS6502	typeref:typename:bool
m_overflowError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  volatile bool             m_overflowError;$/;"	m	class:fabgl::SerialPort	typeref:typename:volatile bool
m_overrun	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  volatile bool     m_overrun;$/;"	m	class:fabgl::PC8250	typeref:typename:volatile bool
m_ownStrings	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool           m_ownStrings;$/;"	m	class:fabgl::StringList	typeref:typename:bool
m_pHead	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^CLEDController *CLEDController::m_pHead = NULL;$/;"	m	class:CLEDController	typeref:typename:CLEDController *
m_pHead	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    static CLEDController *m_pHead;  \/\/\/< pointer to the first LED controller in the linked l/;"	m	class:CLEDController	typeref:typename:CLEDController *
m_pNext	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CLEDController *m_pNext;   \/\/\/< pointer to the next LED controller in the linked list$/;"	m	class:CLEDController	typeref:typename:CLEDController *
m_pPowerFunc	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	power_func m_pPowerFunc;  \/\/\/< function for overriding brightness when using FastLED.show();$/;"	m	class:CFastLED	typeref:typename:power_func
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	Selectable 	*m_pSelect;  \/\/\/< SPI chip select$/;"	m	class:AVRSoftwareSPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	Selectable *m_pSelect;$/;"	m	class:NOPSPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	Selectable *m_pSelect;$/;"	m	class:REFHardwareSPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	Selectable *m_pSelect;$/;"	m	class:APOLLO3HardwareSPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	Selectable *m_pSelect;$/;"	m	class:ARMHardwareSPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	Selectable *m_pSelect;$/;"	m	class:ARMHardwareSPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  Selectable *m_pSelect;$/;"	m	class:ARMHardwareSPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	Selectable *m_pSelect;$/;"	m	class:Teensy4HardwareSPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	Selectable *m_pSelect;$/;"	m	class:SAMHardwareSPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	Selectable *m_pSelect;$/;"	m	class:AVRHardwareSPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	Selectable *m_pSelect;$/;"	m	class:AVRUSART0SPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	Selectable *m_pSelect;$/;"	m	class:AVRUSART1SPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	Selectable 	*m_pSelect;$/;"	m	class:ESP32SPIOutput	typeref:typename:Selectable *
m_pSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	Selectable 	*m_pSelect;$/;"	m	class:ESP8266SPIOutput	typeref:typename:Selectable *
m_pTail	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^CLEDController *CLEDController::m_pTail = NULL;$/;"	m	class:CLEDController	typeref:typename:CLEDController *
m_pTail	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    static CLEDController *m_pTail;  \/\/\/< pointer to the last LED controller in the linked li/;"	m	class:CLEDController	typeref:typename:CLEDController *
m_packedPaletteIndexOctet_to_signals	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.h	/^  volatile uint64_t *         m_packedPaletteIndexOctet_to_signals;$/;"	m	class:fabgl::VGA2Controller	typeref:typename:volatile uint64_t *
m_packedPaletteIndexPair_to_signals	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.h	/^  volatile uint16_t           m_packedPaletteIndexPair_to_signals[256];$/;"	m	class:fabgl::VGA16Controller	typeref:typename:volatile uint16_t[256]
m_packedPaletteIndexPair_to_signals	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.h	/^  volatile uint16_t *         m_packedPaletteIndexPair_to_signals;$/;"	m	class:fabgl::VGA8Controller	typeref:typename:volatile uint16_t *
m_packedPaletteIndexQuad_to_signals	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.h	/^  volatile uint32_t *         m_packedPaletteIndexQuad_to_signals;$/;"	m	class:fabgl::VGA4Controller	typeref:typename:volatile uint32_t *
m_packedRGB222_to_PaletteIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  uint8_t                     m_packedRGB222_to_PaletteIndex[64];$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:uint8_t[64]
m_packedRGB222_to_PaletteIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  uint8_t                     m_packedRGB222_to_PaletteIndex[64];$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:uint8_t[64]
m_page0ReadByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  Page0ReadByteCallback  m_page0ReadByte;$/;"	m	class:fabgl::MOS6502	typeref:typename:Page0ReadByteCallback
m_page0WriteByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  Page0WriteByteCallback m_page0WriteByte;$/;"	m	class:fabgl::MOS6502	typeref:typename:Page0WriteByteCallback
m_page1ReadByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  Page1ReadByteCallback  m_page1ReadByte;$/;"	m	class:fabgl::MOS6502	typeref:typename:Page1ReadByteCallback
m_page1WriteByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  Page1WriteByteCallback m_page1WriteByte;$/;"	m	class:fabgl::MOS6502	typeref:typename:Page1WriteByteCallback
m_paintBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiPaintBoxStyle m_paintBoxStyle;$/;"	m	class:fabgl::uiPaintBox	typeref:typename:uiPaintBoxStyle
m_paintOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  PaintOptions       m_paintOptions;$/;"	m	class:fabgl::Terminal	typeref:typename:PaintOptions
m_paintState	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  PaintState             m_paintState;$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:PaintState
m_palette	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  RGB222 *                    m_palette;$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:RGB222 *
m_palette	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  RGB222 *                    m_palette;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:RGB222 *
m_panelStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiPanelStyle   m_panelStyle;$/;"	m	class:fabgl::uiPanel	typeref:typename:uiPanelStyle
m_params	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  CVBSParams const *            m_params;                       \/\/ decides the CVBS standard (/;"	m	class:fabgl::CVBSGenerator	typeref:typename:CVBSParams const *
m_parent	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  QuadTree *          m_parent;$/;"	m	class:fabgl::QuadTree	typeref:typename:QuadTree *
m_parent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *    m_parent;$/;"	m	class:fabgl::uiWindow	typeref:typename:uiWindow *
m_parentProcessKbdEvents	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t       m_parentProcessKbdEvents; \/\/ if 1 parent processes keyboard events$/;"	m	class:fabgl::uiWindow	typeref:typename:uint8_t
m_parityError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  volatile bool             m_parityError;$/;"	m	class:fabgl::SerialPort	typeref:typename:volatile bool
m_pendingIR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^  uint8_t m_pendingIR;$/;"	m	class:fabgl::PIC8259	typeref:typename:uint8_t
m_pendingInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^  bool    m_pendingInterrupt;$/;"	m	class:fabgl::PIC8259	typeref:typename:bool
m_percentage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int                  m_percentage;$/;"	m	class:fabgl::uiProgressBar	typeref:typename:int
m_periodicIntTimerHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^  esp_timer_handle_t m_periodicIntTimerHandle;$/;"	m	class:fabgl::MC146818	typeref:typename:esp_timer_handle_t
m_phaseAcc	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint32_t m_phaseAcc;$/;"	m	class:fabgl::SawtoothWaveformGenerator	typeref:typename:uint32_t
m_phaseAcc	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint32_t m_phaseAcc;$/;"	m	class:fabgl::SineWaveformGenerator	typeref:typename:uint32_t
m_phaseAcc	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint32_t m_phaseAcc;$/;"	m	class:fabgl::SquareWaveformGenerator	typeref:typename:uint32_t
m_phaseAcc	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint32_t m_phaseAcc;$/;"	m	class:fabgl::TriangleWaveformGenerator	typeref:typename:uint32_t
m_phaseInc	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint32_t m_phaseInc;$/;"	m	class:fabgl::SawtoothWaveformGenerator	typeref:typename:uint32_t
m_phaseInc	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint32_t m_phaseInc;$/;"	m	class:fabgl::SineWaveformGenerator	typeref:typename:uint32_t
m_phaseInc	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint32_t m_phaseInc;$/;"	m	class:fabgl::SquareWaveformGenerator	typeref:typename:uint32_t
m_phaseInc	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint32_t m_phaseInc;$/;"	m	class:fabgl::TriangleWaveformGenerator	typeref:typename:uint32_t
m_play	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  bool                m_play;$/;"	m	class:fabgl::SoundGenerator	typeref:typename:bool
m_poolSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int       m_poolSize;$/;"	m	class:fabgl::LightMemoryPool	typeref:typename:int
m_portIn	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  PortInputCallback  m_portIn;       \/\/ input callback$/;"	m	class:fabgl::VIA6522	typeref:typename:PortInputCallback
m_portOut	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  PortOutputCallback m_portOut;      \/\/ output callback$/;"	m	class:fabgl::VIA6522	typeref:typename:PortOutputCallback
m_pos	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  uint8_t         m_pos[DISKCOUNT];               \/\/ read\/write position$/;"	m	class:Mits88Disk	typeref:typename:uint8_t[]
m_pos	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Point         m_pos;$/;"	m	class:fabgl::uiWindow	typeref:typename:Point
m_position	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t       m_position;$/;"	m	class:fabgl::uiSlider	typeref:typename:int16_t
m_prev	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow *    m_prev;$/;"	m	class:fabgl::uiWindow	typeref:typename:uiWindow *
m_prevATN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  bool         m_prevATN;$/;"	m	class:IECDrive	typeref:typename:bool
m_prevBlinkingTextEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool               m_prevBlinkingTextEnabled;$/;"	m	class:fabgl::Terminal	typeref:typename:bool
m_prevCursorEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool               m_prevCursorEnabled;$/;"	m	class:fabgl::Terminal	typeref:typename:bool
m_prevDeltaTime	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  int64_t         m_prevDeltaTime;$/;"	m	class:fabgl::Mouse	typeref:typename:int64_t
m_prevStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  MouseStatus     m_prevStatus;$/;"	m	class:fabgl::Mouse	typeref:typename:MouseStatus
m_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint8_t * m_prg;$/;"	m	class:PRGCreator	typeref:typename:uint8_t *
m_prglen	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  int       m_prglen;$/;"	m	class:PRGCreator	typeref:typename:int
m_primDynMemPool	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  LightMemoryPool        m_primDynMemPool;$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:LightMemoryPool
m_primitiveExecTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  TaskHandle_t                m_primitiveExecTask;$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:TaskHandle_t
m_primitiveExecTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  TaskHandle_t                m_primitiveExecTask;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:TaskHandle_t
m_primitiveExecTimeoutCycles	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  volatile uint32_t           m_primitiveExecTimeoutCycles;$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:volatile uint32_t
m_primitiveExecTimeoutCycles	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  volatile uint32_t           m_primitiveExecTimeoutCycles;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:volatile uint32_t
m_primitiveProcessingSuspended	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  volatile int           m_primitiveProcessingSuspended;             \/\/ 0 = enabled, >0 suspen/;"	m	class:fabgl::CVBSBaseController	typeref:typename:volatile int
m_primitiveProcessingSuspended	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  volatile int           m_primitiveProcessingSuspended;             \/\/ 0 = enabled, >0 suspen/;"	m	class:fabgl::VGABaseController	typeref:typename:volatile int
m_printerEchoEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool            m_printerEchoEnabled;$/;"	m	class:BDOS	typeref:typename:bool
m_processPrimitivesOnBlank	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  bool                        m_processPrimitivesOnBlank;$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:bool
m_processPrimitivesOnBlank	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  bool                        m_processPrimitivesOnBlank;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:bool
m_progressBarProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiProgressBarProps   m_progressBarProps;$/;"	m	class:fabgl::uiProgressBar	typeref:typename:uiProgressBarProps
m_progressBarStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiProgressBarStyle   m_progressBarStyle;$/;"	m	class:fabgl::uiProgressBar	typeref:typename:uiProgressBarStyle
m_quadTreePool	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  QuadTree *       m_quadTreePool;$/;"	m	class:fabgl::CollisionDetector	typeref:typename:QuadTree *
m_quadTreePoolSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  int              m_quadTreePoolSize;$/;"	m	class:fabgl::CollisionDetector	typeref:typename:int
m_quadrant	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  QuadTreeQuadrant    m_quadrant;$/;"	m	class:fabgl::QuadTree	typeref:typename:QuadTreeQuadrant
m_queue	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.h	/^  QueueHandle_t m_queue;$/;"	m	class:fabgl::ICMP	typeref:typename:QueueHandle_t
m_rawFrameHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  int16_t                m_rawFrameHeight;$/;"	m	class:fabgl::VGABaseController	typeref:typename:int16_t
m_rawLUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  uint8_t *           m_rawLUT;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:uint8_t *
m_readByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  ReadByteCallback       m_readByte;$/;"	m	class:fabgl::MOS6502	typeref:typename:ReadByteCallback
m_readByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  ReadByteCallback  m_readByte;$/;"	m	class:fabgl::Z80	typeref:typename:ReadByteCallback
m_readByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  ReadByteCallback   m_readByte;$/;"	m	class:fabgl::i8080	typeref:typename:ReadByteCallback
m_readByteReady	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  int8_t          m_readByteReady[DISKCOUNT];$/;"	m	class:Mits88Disk	typeref:typename:int8_t[]
m_readByteTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  uint64_t        m_readByteTime[DISKCOUNT];$/;"	m	class:Mits88Disk	typeref:typename:uint64_t[]
m_readHistoryItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  int             m_readHistoryItem;$/;"	m	class:BDOS	typeref:typename:int
m_readIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  ReadIOCallback    m_readIO;$/;"	m	class:fabgl::Z80	typeref:typename:ReadIOCallback
m_readIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  ReadIOCallback     m_readIO;$/;"	m	class:fabgl::i8080	typeref:typename:ReadIOCallback
m_readISR	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^  bool    m_readISR;$/;"	m	class:fabgl::PIC8259	typeref:typename:bool
m_readOnlyBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  uint8_t const * m_readOnlyBuffer[DISKCOUNT];    \/\/ when using attachReadOnlyBuffer$/;"	m	class:Mits88Disk	typeref:typename:uint8_t const * []
m_readWord	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  ReadWordCallback  m_readWord;$/;"	m	class:fabgl::Z80	typeref:typename:ReadWordCallback
m_readWord	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  ReadWordCallback   m_readWord;$/;"	m	class:fabgl::i8080	typeref:typename:ReadWordCallback
m_realSpeed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  bool         m_realSpeed;$/;"	m	class:Machine	typeref:typename:bool
m_receivedBytes	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.h	/^  int           m_receivedBytes;$/;"	m	class:fabgl::ICMP	typeref:typename:int
m_receivedPacket	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  QueueHandle_t   m_receivedPacket;$/;"	m	class:fabgl::Mouse	typeref:typename:QueueHandle_t
m_receivedTTL	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.h	/^  int           m_receivedTTL;$/;"	m	class:fabgl::ICMP	typeref:typename:int
m_recvXOFF	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  volatile bool             m_recvXOFF;       \/\/ true if XOFF has been received$/;"	m	class:fabgl::SerialPort	typeref:typename:volatile bool
m_regSel	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^  uint8_t            m_regSel;$/;"	m	class:fabgl::MC146818	typeref:typename:uint8_t
m_regs	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint8_t                 m_regs[16];$/;"	m	class:MOS6561	typeref:typename:uint8_t[16]
m_regs	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^  uint8_t            m_regs[64];$/;"	m	class:fabgl::MC146818	typeref:typename:uint8_t[64]
m_reset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  bool                     m_reset;$/;"	m	class:Machine	typeref:typename:bool
m_reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  InterruptCallback m_reset;$/;"	m	class:fabgl::i8042	typeref:typename:InterruptCallback
m_resetGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  gpio_num_t         m_resetGPIO;$/;"	m	class:fabgl::SSD1306Controller	typeref:typename:gpio_num_t
m_resetRequested	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool                      m_resetRequested;$/;"	m	class:fabgl::Terminal	typeref:typename:bool
m_reverseHorizontal	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  bool               m_reverseHorizontal;$/;"	m	class:fabgl::TFTController	typeref:typename:bool
m_riPin	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  gpio_num_t                m_riPin;$/;"	m	class:fabgl::SerialPort	typeref:typename:gpio_num_t
m_rightPos	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_rightPos;  \/\/ where right border starts$/;"	m	class:MOS6561	typeref:typename:int
m_rootQuadTree	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  QuadTree *       m_rootQuadTree;$/;"	m	class:fabgl::CollisionDetector	typeref:typename:QuadTree *
m_rootWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiFrame *       m_rootWindow;$/;"	m	class:fabgl::uiApp	typeref:typename:uiFrame *
m_rot0ViewPortHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int16_t            m_rot0ViewPortHeight;$/;"	m	class:fabgl::TFTController	typeref:typename:int16_t
m_rot0ViewPortWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int16_t            m_rot0ViewPortWidth;$/;"	m	class:fabgl::TFTController	typeref:typename:int16_t
m_rotOffsetX	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int16_t            m_rotOffsetX;$/;"	m	class:fabgl::TFTController	typeref:typename:int16_t
m_rotOffsetY	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int16_t            m_rotOffsetY;$/;"	m	class:fabgl::TFTController	typeref:typename:int16_t
m_rowCount	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_rowCount;$/;"	m	class:MOS6561	typeref:typename:int
m_rowStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  uint8_t               m_rowStatus;  \/\/ connected to VIA2 - PA$/;"	m	class:Machine	typeref:typename:uint8_t
m_rows	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  int                        m_rows;$/;"	m	class:fabgl::VGATextController	typeref:typename:int
m_rows	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  int16_t             m_rows;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:int16_t
m_rows	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  volatile int       m_rows;$/;"	m	class:fabgl::Terminal	typeref:typename:volatile int
m_rtsPin	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  gpio_num_t                m_rtsPin;$/;"	m	class:fabgl::SerialPort	typeref:typename:gpio_num_t
m_running	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  volatile bool     m_running;$/;"	m	class:fabgl::Scene	typeref:typename:volatile bool
m_rxCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  RXCallback                m_rxCallback;$/;"	m	class:fabgl::SerialPort	typeref:typename:RXCallback
m_rxPin	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  gpio_num_t                m_rxPin;$/;"	m	class:fabgl::SerialPort	typeref:typename:gpio_num_t
m_rxReadyCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  RXReadyCallback           m_rxReadyCallback;$/;"	m	class:fabgl::SerialPort	typeref:typename:RXReadyCallback
m_sampleBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t *          m_sampleBuffer[2];$/;"	m	class:fabgl::SoundGenerator	typeref:typename:uint16_t * [2]
m_sampleRate	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t            m_sampleRate;$/;"	m	class:fabgl::SoundGenerator	typeref:typename:uint16_t
m_sampleRate	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t m_sampleRate;$/;"	m	class:fabgl::WaveformGenerator	typeref:typename:uint16_t
m_sample_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double                        m_sample_us;                    \/\/ duration of a sample$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:double
m_savedCursorStateList	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  TerminalCursorState *     m_savedCursorStateList;$/;"	m	class:fabgl::Terminal	typeref:typename:TerminalCursorState *
m_savedScreenRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Rect               m_savedScreenRect;     \/\/ saved screen rect before Maximize or Minimize$/;"	m	class:fabgl::uiFrame	typeref:typename:Rect
m_scanX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_scanX;$/;"	m	class:MOS6561	typeref:typename:int
m_scanY	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_scanY;$/;"	m	class:MOS6561	typeref:typename:int
m_scancodeSet	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  uint8_t                   m_scancodeSet;$/;"	m	class:fabgl::Keyboard	typeref:typename:uint8_t
m_screenBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  uint8_t *          m_screenBuffer;$/;"	m	class:fabgl::SSD1306Controller	typeref:typename:uint8_t *
m_screenCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  int16_t            m_screenCol;$/;"	m	class:fabgl::SSD1306Controller	typeref:typename:int16_t
m_screenCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int16_t            m_screenCol;$/;"	m	class:fabgl::TFTController	typeref:typename:int16_t
m_screenHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  int16_t            m_screenHeight;$/;"	m	class:fabgl::SSD1306Controller	typeref:typename:int16_t
m_screenHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int16_t            m_screenHeight;$/;"	m	class:fabgl::TFTController	typeref:typename:int16_t
m_screenHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t          m_screenHeight;$/;"	m	class:fabgl::BaseDisplayController	typeref:typename:int16_t
m_screenRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  int16_t            m_screenRow;$/;"	m	class:fabgl::SSD1306Controller	typeref:typename:int16_t
m_screenRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int16_t            m_screenRow;$/;"	m	class:fabgl::TFTController	typeref:typename:int16_t
m_screenWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  int16_t            m_screenWidth;$/;"	m	class:fabgl::SSD1306Controller	typeref:typename:int16_t
m_screenWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int16_t            m_screenWidth;$/;"	m	class:fabgl::TFTController	typeref:typename:int16_t
m_screenWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t          m_screenWidth;$/;"	m	class:fabgl::BaseDisplayController	typeref:typename:int16_t
m_scrollLockLED	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool                      m_scrollLockLED;$/;"	m	class:fabgl::Keyboard	typeref:typename:bool
m_scrollTimer	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiTimerHandle   m_scrollTimer;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:uiTimerHandle
m_scrollableControlStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiScrollableControlStyle m_scrollableControlStyle;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:uiScrollableControlStyle
m_searchPath	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  char *          m_searchPath;$/;"	m	class:BDOS	typeref:typename:char *
m_sector	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  int8_t          m_sector[DISKCOUNT];$/;"	m	class:Mits88Disk	typeref:typename:int8_t[]
m_sectorChangeDuration	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  int32_t         m_sectorChangeDuration; \/\/ us$/;"	m	class:Mits88Disk	typeref:typename:int32_t
m_sectorChangeTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  uint64_t        m_sectorChangeTime[DISKCOUNT];$/;"	m	class:Mits88Disk	typeref:typename:uint64_t[]
m_sectorTrue	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  int8_t          m_sectorTrue[DISKCOUNT];$/;"	m	class:Mits88Disk	typeref:typename:int8_t[]
m_selCursorCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int              m_selCursorCol;$/;"	m	class:fabgl::uiTextEdit	typeref:typename:int
m_selMap	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint32_t *     m_selMap;$/;"	m	class:fabgl::StringList	typeref:typename:uint32_t *
m_selected	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int         m_selected;  \/\/ -1 = no sel$/;"	m	class:fabgl::uiFileBrowser	typeref:typename:int
m_selectedColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Color m_selectedColor;$/;"	m	class:fabgl::uiColorListBox	typeref:typename:Color
m_selectedItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int            m_selectedItem;$/;"	m	class:fabgl::uiSplitButton	typeref:typename:int
m_sentXOFF	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  volatile bool             m_sentXOFF;       \/\/ true if XOFF has been sent or RTS is disabled/;"	m	class:fabgl::SerialPort	typeref:typename:volatile bool
m_serialPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  SerialPort *  m_serialPort;$/;"	m	class:fabgl::SerialPortTerminalConnector	typeref:typename:SerialPort *
m_serialPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  SerialPort *      m_serialPort;$/;"	m	class:fabgl::PC8250	typeref:typename:SerialPort *
m_serialPortRXEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  volatile bool m_serialPortRXEnabled;$/;"	m	class:fabgl::SerialPortTerminalConnector	typeref:typename:volatile bool
m_serialStream	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  Stream *           m_serialStream[2];$/;"	m	class:HAL	typeref:typename:Stream * [2]
m_sessions	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^  Session                 m_sessions[MAXSESSIONS];$/;"	m	class:Supervisor	typeref:typename:Session[]
m_shortDir	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  bool         m_shortDir;$/;"	m	class:IECDrive	typeref:typename:bool
m_sinWaveGen	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  SineWaveformGenerator    m_sinWaveGen;$/;"	m	class:Machine	typeref:typename:SineWaveformGenerator
m_size	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Size          m_size;$/;"	m	class:fabgl::uiWindow	typeref:typename:Size
m_sizeAtMouseDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Size               m_sizeAtMouseDown;     \/\/ used to resize$/;"	m	class:fabgl::uiFrame	typeref:typename:Size
m_sliderStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiSliderStyle m_sliderStyle;$/;"	m	class:fabgl::uiSlider	typeref:typename:uiSliderStyle
m_sorted	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool      m_sorted;$/;"	m	class:fabgl::FileBrowser	typeref:typename:bool
m_soundGen	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  SoundGenerator           m_soundGen;$/;"	m	class:Machine	typeref:typename:SoundGenerator
m_soundGen	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  SoundGenerator          m_soundGen;$/;"	m	class:MOS6561	typeref:typename:SoundGenerator
m_soundGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  SoundGenerator *          m_soundGenerator;$/;"	m	class:fabgl::Terminal	typeref:typename:SoundGenerator *
m_speakerDataEnable	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  bool                     m_speakerDataEnable;$/;"	m	class:Machine	typeref:typename:bool
m_spi	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  SPIClass *         m_spi;$/;"	m	class:fabgl::TFTController	typeref:typename:SPIClass *
m_spriteSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int                    m_spriteSize;    \/\/ size of sprite structure$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:int
m_sprites	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void *                 m_sprites;       \/\/ pointer to array of sprite structures$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:void *
m_sprites	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Sprite *                  m_sprites;$/;"	m	class:fabgl::Terminal	typeref:typename:Sprite *
m_spritesCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int                    m_spritesCount;  \/\/ number of sprites in m_sprites array$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:int
m_spritesCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int                       m_spritesCount;$/;"	m	class:fabgl::Terminal	typeref:typename:int
m_spritesHidden	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  bool                   m_spritesHidden; \/\/ true between hideSprites() and showSprites()$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:bool
m_sqGen1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  SquareWaveformGenerator m_sqGen1;$/;"	m	class:MOS6561	typeref:typename:SquareWaveformGenerator
m_sqGen2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  SquareWaveformGenerator m_sqGen2;$/;"	m	class:MOS6561	typeref:typename:SquareWaveformGenerator
m_sqGen3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  SquareWaveformGenerator m_sqGen3;$/;"	m	class:MOS6561	typeref:typename:SquareWaveformGenerator
m_ssyncBuf	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile uint16_t *           m_ssyncBuf;                     \/\/ vertical blank, short pulse/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile uint16_t *
m_start	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int64_t m_start;$/;"	m	struct:fabgl::TimeOut	typeref:typename:int64_t
m_startingAddress	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  int       m_startingAddress;$/;"	m	class:PRGCreator	typeref:typename:int
m_startingScanLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile int16_t              m_startingScanLine[2];          \/\/ starting scanline for each /;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int16_t[2]
m_state	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^  uint8_t m_state; \/\/ all zeros = ready, bit 0 = waiting for ICW2, bit 1 = waiting for ICW3, b/;"	m	class:fabgl::PIC8259	typeref:typename:uint8_t
m_state	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindowState m_state;$/;"	m	class:fabgl::uiWindow	typeref:typename:uiWindowState
m_state	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int16_t             m_state;     \/\/ -1 = begin input, 0 = normal input, 1 = ESC, 2 = CTRL-Q,/;"	m	class:fabgl::LineEditor	typeref:typename:int16_t
m_staticLabelStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiStaticLabelStyle m_staticLabelStyle;$/;"	m	class:fabgl::uiStaticLabel	typeref:typename:uiStaticLabelStyle
m_status	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  MouseStatus     m_status;$/;"	m	class:fabgl::Mouse	typeref:typename:MouseStatus
m_stepCallback	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  StepCallback             m_stepCallback;$/;"	m	class:Machine	typeref:typename:StepCallback
m_stream	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  Stream *            m_stream;$/;"	m	class:SIO	typeref:typename:Stream *
m_style	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiStyle *       m_style;$/;"	m	class:fabgl::uiApp	typeref:typename:uiStyle *
m_styleClassID	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t       m_styleClassID;$/;"	m	class:fabgl::uiWindow	typeref:typename:uint8_t
m_subCarrierPhases	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile scPhases_t *         m_subCarrierPhases[4];          \/\/ subcarrier phase for [frame/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile scPhases_t * [4]
m_suspendedTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  TaskHandle_t      m_suspendedTask;$/;"	m	class:fabgl::Scene	typeref:typename:TaskHandle_t
m_syncLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  volatile uint8_t *         m_syncLine;  \/\/ for vertical sync lines$/;"	m	class:fabgl::VGATextController	typeref:typename:volatile uint8_t *
m_sysReq	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  InterruptCallback m_sysReq;$/;"	m	class:fabgl::i8042	typeref:typename:InterruptCallback
m_sysReqCallback	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  SysReqCallback           m_sysReqCallback;$/;"	m	class:Machine	typeref:typename:SysReqCallback
m_sysReqTriggered	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  bool              m_sysReqTriggered;$/;"	m	class:fabgl::i8042	typeref:typename:bool
m_tag	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_tag;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_taskHandle	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  TaskHandle_t             m_taskHandle;$/;"	m	class:Machine	typeref:typename:TaskHandle_t
m_taskProcessingPrimitives	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  volatile bool               m_taskProcessingPrimitives;$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:volatile bool
m_taskProcessingPrimitives	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  volatile bool               m_taskProcessingPrimitives;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:volatile bool
m_termCtrl	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.h	/^  TerminalController m_termCtrl;$/;"	m	class:CCP	typeref:typename:TerminalController
m_termCtrl	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  TerminalController m_termCtrl;$/;"	m	class:HAL	typeref:typename:TerminalController
m_termInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  TermInfo const *          m_termInfo;$/;"	m	class:fabgl::Terminal	typeref:typename:TermInfo const *
m_termctrl	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  TerminalController  m_termctrl;$/;"	m	class:fabgl::LineEditor	typeref:typename:TerminalController
m_terminal	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  Terminal *         m_terminal;$/;"	m	class:HAL	typeref:typename:Terminal *
m_terminal	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  Terminal *    m_terminal;$/;"	m	class:fabgl::SerialPortTerminalConnector	typeref:typename:Terminal *
m_terminal	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Terminal *          m_terminal;$/;"	m	class:fabgl::LineEditor	typeref:typename:Terminal *
m_terminal	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Terminal * m_terminal;$/;"	m	class:fabgl::TerminalController	typeref:typename:Terminal *
m_text	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  char *           m_text;$/;"	m	class:fabgl::uiTextEdit	typeref:typename:char *
m_text	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  char *         m_text;$/;"	m	class:fabgl::uiButton	typeref:typename:char *
m_text	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  char *         m_text;$/;"	m	class:fabgl::uiLabel	typeref:typename:char *
m_text	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  char const *       m_text;$/;"	m	class:fabgl::uiStaticLabel	typeref:typename:char const *
m_text	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  char *              m_text;$/;"	m	class:fabgl::LineEditor	typeref:typename:char *
m_textEdit	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiTextEdit * m_textEdit;$/;"	m	class:fabgl::uiComboBox	typeref:typename:uiTextEdit *
m_textEditProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiTextEditProps m_textEditProps;$/;"	m	class:fabgl::uiTextEdit	typeref:typename:uiTextEditProps
m_textEditStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiTextEditStyle m_textEditStyle;$/;"	m	class:fabgl::uiTextEdit	typeref:typename:uiTextEditStyle
m_textExtent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int            m_textExtent;  \/\/ calculated by setText(). TODO: changing font doesn't update/;"	m	class:fabgl::uiButton	typeref:typename:int
m_textHorizRate	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.h	/^  uint8_t             m_textHorizRate; \/\/ specify character size: 1 = m_fontInfo.width, 2 = m_/;"	m	class:fabgl::Canvas	typeref:typename:uint8_t
m_textLength	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int              m_textLength; \/\/ text length NOT including ending zero$/;"	m	class:fabgl::uiTextEdit	typeref:typename:int
m_textLength	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int                 m_textLength;$/;"	m	class:fabgl::LineEditor	typeref:typename:int
m_textSpace	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int              m_textSpace;  \/\/ actual space allocated including ending zero$/;"	m	class:fabgl::uiTextEdit	typeref:typename:int
m_tick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  uint64_t        m_tick;$/;"	m	class:Mits88Disk	typeref:typename:uint64_t
m_tick	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  int           m_tick;$/;"	m	class:fabgl::VIA6522	typeref:typename:int
m_ticksCounter	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint32_t                 m_ticksCounter;$/;"	m	class:Machine	typeref:typename:uint32_t
m_ticksFrequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int16_t       m_ticksFrequency;$/;"	m	class:fabgl::uiSlider	typeref:typename:int16_t
m_timer	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^  TimerInfo         m_timer[3];$/;"	m	class:fabgl::PIT8253	typeref:typename:TimerInfo[3]
m_timer1Counter	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  int           m_timer1Counter;$/;"	m	class:fabgl::VIA6522	typeref:typename:int
m_timer1Latch	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint16_t      m_timer1Latch;$/;"	m	class:fabgl::VIA6522	typeref:typename:uint16_t
m_timer1Triggered	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  bool          m_timer1Triggered;$/;"	m	class:fabgl::VIA6522	typeref:typename:bool
m_timer2Counter	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  int           m_timer2Counter;$/;"	m	class:fabgl::VIA6522	typeref:typename:int
m_timer2Latch	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t       m_timer2Latch;     \/\/ timer 2 latch is 8 bits$/;"	m	class:fabgl::VIA6522	typeref:typename:uint8_t
m_timer2Triggered	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  bool          m_timer2Triggered;$/;"	m	class:fabgl::VIA6522	typeref:typename:bool
m_timerHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  esp_timer_handle_t  m_timerHandle;$/;"	m	class:fabgl::SoundGenerator	typeref:typename:esp_timer_handle_t
m_timers	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  list<uiTimerAssoc> m_timers;$/;"	m	class:fabgl::uiApp	typeref:typename:list<uiTimerAssoc>
m_timings	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  VGATimings             m_timings;$/;"	m	class:fabgl::VGABaseController	typeref:typename:VGATimings
m_timings	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  VGATimings                 m_timings;$/;"	m	class:fabgl::VGATextController	typeref:typename:VGATimings
m_title	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  char *             m_title;$/;"	m	class:fabgl::uiFrame	typeref:typename:char *
m_titleLength	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int                m_titleLength;$/;"	m	class:fabgl::uiFrame	typeref:typename:int
m_topPos	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  int                     m_topPos;$/;"	m	class:MOS6561	typeref:typename:int
m_track	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  uint8_t         m_track[DISKCOUNT];$/;"	m	class:Mits88Disk	typeref:typename:uint8_t[]
m_trackSize	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  uint8_t         m_trackSize;                    \/\/ number of sectors per track$/;"	m	class:Mits88Disk	typeref:typename:uint8_t
m_tracksCount	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  uint8_t         m_tracksCount;                  \/\/ number of tracks per disc$/;"	m	class:Mits88Disk	typeref:typename:uint8_t
m_trigs	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  uint8_t           m_trigs;$/;"	m	class:fabgl::PC8250	typeref:typename:uint8_t
m_txPin	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  gpio_num_t                m_txPin;$/;"	m	class:fabgl::SerialPort	typeref:typename:gpio_num_t
m_typeText	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  char *              m_typeText;$/;"	m	class:fabgl::LineEditor	typeref:typename:char *
m_typingIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int                 m_typingIndex;$/;"	m	class:fabgl::LineEditor	typeref:typename:int
m_typingString	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  char const *          m_typingString;$/;"	m	class:Machine	typeref:typename:char const *
m_uiApp	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  uiApp *                   m_uiApp;$/;"	m	class:fabgl::Keyboard	typeref:typename:uiApp *
m_uiApp	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  uiApp *         m_uiApp;$/;"	m	class:fabgl::Mouse	typeref:typename:uiApp *
m_updateCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  int               m_updateCount;$/;"	m	class:fabgl::Scene	typeref:typename:int
m_updateDisplayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  BitmappedDisplayController * m_updateDisplayController;$/;"	m	class:fabgl::Mouse	typeref:typename:BitmappedDisplayController *
m_updateTaskFuncSuspended	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  volatile int       m_updateTaskFuncSuspended;             \/\/ 0 = enabled, >0 suspended$/;"	m	class:fabgl::SSD1306Controller	typeref:typename:volatile int
m_updateTaskFuncSuspended	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  volatile int       m_updateTaskFuncSuspended;             \/\/ 0 = enabled, >0 suspended$/;"	m	class:fabgl::TFTController	typeref:typename:volatile int
m_updateTaskHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  TaskHandle_t       m_updateTaskHandle;$/;"	m	class:fabgl::SSD1306Controller	typeref:typename:TaskHandle_t
m_updateTaskHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  TaskHandle_t       m_updateTaskHandle;$/;"	m	class:fabgl::TFTController	typeref:typename:TaskHandle_t
m_updateTaskHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  TaskHandle_t      m_updateTaskHandle;$/;"	m	class:fabgl::Scene	typeref:typename:TaskHandle_t
m_updateTaskRunning	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  volatile bool      m_updateTaskRunning;$/;"	m	class:fabgl::SSD1306Controller	typeref:typename:volatile bool
m_updateTaskRunning	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  volatile bool      m_updateTaskRunning;$/;"	m	class:fabgl::TFTController	typeref:typename:volatile bool
m_updateTimeMS	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  int               m_updateTimeMS;$/;"	m	class:fabgl::Scene	typeref:typename:int
m_vgaCtrl	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  VGABaseController *                 m_vgaCtrl;$/;"	m	class:fabgl::InputBox	typeref:typename:VGABaseController *
m_videoBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  uint8_t const *     m_videoBuffer;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:uint8_t const *
m_videoEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  bool                m_videoEnabled;$/;"	m	class:fabgl::GraphicsAdapter	typeref:typename:bool
m_videoLine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint8_t const *         m_videoLine;$/;"	m	class:MOS6561	typeref:typename:uint8_t const *
m_videoMatrixAddr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  uint16_t                m_videoMatrixAddr; \/\/ in the CPU address space$/;"	m	class:MOS6561	typeref:typename:uint16_t
m_viewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  uint16_t * *       m_viewPort;$/;"	m	class:fabgl::TFTController	typeref:typename:uint16_t **
m_viewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  volatile uint8_t * *   m_viewPort;$/;"	m	class:fabgl::CVBSBaseController	typeref:typename:volatile uint8_t **
m_viewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  volatile uint8_t * *   m_viewPort;$/;"	m	class:fabgl::VGABaseController	typeref:typename:volatile uint8_t **
m_viewPortCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  volatile int16_t       m_viewPortCol;$/;"	m	class:fabgl::VGABaseController	typeref:typename:volatile int16_t
m_viewPortHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  volatile int16_t m_viewPortHeight;$/;"	m	class:fabgl::BaseDisplayController	typeref:typename:volatile int16_t
m_viewPortMemoryPool	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  uint8_t * *            m_viewPortMemoryPool;  \/\/ array ends with nullptr$/;"	m	class:fabgl::CVBSBaseController	typeref:typename:uint8_t **
m_viewPortMemoryPool	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  uint8_t * *            m_viewPortMemoryPool;  \/\/ array ends with nullptr$/;"	m	class:fabgl::VGABaseController	typeref:typename:uint8_t **
m_viewPortRatioDiv	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  int                         m_viewPortRatioDiv;$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:int
m_viewPortRatioDiv	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  int                         m_viewPortRatioDiv;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:int
m_viewPortRatioMul	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  int                         m_viewPortRatioMul;$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:int
m_viewPortRatioMul	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  int                         m_viewPortRatioMul;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:int
m_viewPortRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  volatile int16_t       m_viewPortRow;$/;"	m	class:fabgl::VGABaseController	typeref:typename:volatile int16_t
m_viewPortVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  volatile uint8_t * *   m_viewPortVisible;$/;"	m	class:fabgl::CVBSBaseController	typeref:typename:volatile uint8_t **
m_viewPortVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  volatile uint8_t * *   m_viewPortVisible;$/;"	m	class:fabgl::VGABaseController	typeref:typename:volatile uint8_t **
m_viewPortWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  volatile int16_t m_viewPortWidth;$/;"	m	class:fabgl::BaseDisplayController	typeref:typename:volatile int16_t
m_viewPorts	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  volatile uint8_t * *   m_viewPorts[2];$/;"	m	class:fabgl::CVBSBaseController	typeref:typename:volatile uint8_t ** [2]
m_viewPorts	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  volatile uint8_t * *   m_viewPorts[2];$/;"	m	class:fabgl::VGABaseController	typeref:typename:volatile uint8_t ** [2]
m_viewX	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int              m_viewX;$/;"	m	class:fabgl::uiTextEdit	typeref:typename:int
m_virtualKeyQueue	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  QueueHandle_t             m_virtualKeyQueue;$/;"	m	class:fabgl::Keyboard	typeref:typename:QueueHandle_t
m_visibleLines	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  volatile int16_t              m_visibleLines;                 \/\/ visible lines in a field$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int16_t
m_volume	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  int8_t              m_volume;$/;"	m	class:fabgl::SoundGenerator	typeref:typename:int8_t
m_volume	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  int8_t   m_volume;$/;"	m	class:fabgl::WaveformGenerator	typeref:typename:int8_t
m_waitingID	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.h	/^  int           m_waitingID;$/;"	m	class:fabgl::ICMP	typeref:typename:int
m_waitingSeq	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.h	/^  int           m_waitingSeq;$/;"	m	class:fabgl::ICMP	typeref:typename:int
m_wheelAcceleration	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  int             m_wheelAcceleration;     \/\/ reasonable values: 0...100000$/;"	m	class:fabgl::Mouse	typeref:typename:int
m_width	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  int                 m_width;$/;"	m	class:fabgl::QuadTree	typeref:typename:int
m_width	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  int               m_width;$/;"	m	class:fabgl::Scene	typeref:typename:int
m_windowProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindowProps m_windowProps;$/;"	m	class:fabgl::uiWindow	typeref:typename:uiWindowProps
m_windowStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindowStyle m_windowStyle;$/;"	m	class:fabgl::uiWindow	typeref:typename:uiWindowStyle
m_writeByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  WriteByteCallback      m_writeByte;$/;"	m	class:fabgl::MOS6502	typeref:typename:WriteByteCallback
m_writeByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  WriteByteCallback m_writeByte;$/;"	m	class:fabgl::Z80	typeref:typename:WriteByteCallback
m_writeByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  WriteByteCallback  m_writeByte;$/;"	m	class:fabgl::i8080	typeref:typename:WriteByteCallback
m_writeDetectedFabGLSeq	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  volatile bool             m_writeDetectedFabGLSeq;$/;"	m	class:fabgl::Terminal	typeref:typename:volatile bool
m_writeHistoryItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  int             m_writeHistoryItem;$/;"	m	class:BDOS	typeref:typename:int
m_writeIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  WriteIOCallback   m_writeIO;$/;"	m	class:fabgl::Z80	typeref:typename:WriteIOCallback
m_writeIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  WriteIOCallback    m_writeIO;$/;"	m	class:fabgl::i8080	typeref:typename:WriteIOCallback
m_writeProtectWord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  uint16_t        m_writeProtectWord;$/;"	m	class:BDOS	typeref:typename:uint16_t
m_writeToMouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  bool              m_writeToMouse; \/\/ if True next byte on port 0 (0x60) is transferred to mo/;"	m	class:fabgl::i8042	typeref:typename:bool
m_writeWord	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  WriteWordCallback m_writeWord;$/;"	m	class:fabgl::Z80	typeref:typename:WriteWordCallback
m_writeWord	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  WriteWordCallback  m_writeWord;$/;"	m	class:fabgl::i8080	typeref:typename:WriteWordCallback
m_x	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  int                 m_x;$/;"	m	class:fabgl::QuadTree	typeref:typename:int
m_y	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  int                 m_y;$/;"	m	class:fabgl::QuadTree	typeref:typename:int
m_zero	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  bool     m_zero;$/;"	m	class:fabgl::MOS6502	typeref:typename:bool
machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  Machine * machine() { return m_machine; }$/;"	f	struct:Device	typeref:typename:Machine *
machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.h	/^  Machine * machine() { return m_machine; }$/;"	f	class:MOS6561	typeref:typename:Machine *
main	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^main:$/;"	l
mainFrame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiFrame         * mainFrame;$/;"	m	struct:ConfigDialog	typeref:typename:uiFrame *	file:
mainFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiFrame *        mainFrame;$/;"	m	struct:fabgl::InputForm	typeref:typename:uiFrame *
maintainer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.properties	/^maintainer=Benoit Blanchon <blog.benoitblanchon.fr>$/;"	k
maintainer	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^      "maintainer": true$/;"	b	object:authors.0
maintainer	examples/test/.pio/libdeps/esp32dev/FabGL/library.properties	/^maintainer=Fabrizio Di Vittorio <fdivitto2013@gmail.com>$/;"	k
maintainer	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "maintainer": true$/;"	b	object:authors.0
maintainer	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "maintainer": true$/;"	b	object:authors.1
maintainer	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "maintainer": true$/;"	b	object:authors.2
maintainer	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "maintainer": true$/;"	b	object:authors.3
maintainer	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "maintainer": true$/;"	b	object:authors.4
maintainer	examples/test/.pio/libdeps/esp32dev/FastLED/library.properties	/^maintainer=Daniel Garcia <dgarcia@fastled.io>$/;"	k
makeDeserializationOptions	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationOptions.hpp	/^inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions($/;"	f	typeref:typename:DeserializationOptions<AllowAllFilter>
makeDeserializationOptions	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationOptions.hpp	/^inline DeserializationOptions<TFilter> makeDeserializationOptions($/;"	f	typeref:typename:DeserializationOptions<TFilter>
makeDeserializer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/deserialize.hpp	/^TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool* pool,$/;"	f	typeref:typename:TDeserializer<TReader,TWriter>
makeDirectory	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void FileBrowser::makeDirectory(char const * dirname)$/;"	f	class:fabgl::FileBrowser	typeref:typename:void
makeGlyphItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^uint32_t Terminal::makeGlyphItem(uint8_t c, GlyphOptions * glyphOptions, Color * newForegroundCo/;"	f	class:fabgl::Terminal	typeref:typename:uint32_t
makeItemVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomListBox::makeItemVisible(int index)$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:void
makeReader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Reader.hpp	/^BoundedReader<TChar*> makeReader(TChar* input, size_t inputSize) {$/;"	f	typeref:typename:BoundedReader<TChar * >
makeReader	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Reader.hpp	/^Reader<typename remove_reference<TInput>::type> makeReader(TInput&& input) {$/;"	f	typeref:typename:ARDUINOJSON_END_PRIVATE_NAMESPACE ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE Reader<typename remove_reference<TInput>::type>
makeStringStorage	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringStorage.hpp	/^StringCopier makeStringStorage(TInput&, MemoryPool* pool) {$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE StringCopier
makeStringStorage	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringStorage.hpp	/^StringMover makeStringStorage($/;"	f	typeref:typename:StringMover
make_flags	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint16_t i8086::make_flags()$/;"	f	class:fabgl::i8086	typeref:typename:uint16_t
make_float	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^inline TFloat make_float(TFloat m, TExponent e) {$/;"	f	typeref:typename:TFloat
make_unsigned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp	/^struct make_unsigned<char> : type_identity<unsigned char> {};$/;"	s
make_unsigned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp	/^struct make_unsigned<signed char> : type_identity<unsigned char> {};$/;"	s
make_unsigned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp	/^struct make_unsigned<signed int> : type_identity<unsigned int> {};$/;"	s
make_unsigned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp	/^struct make_unsigned<signed long long> : type_identity<unsigned long long> {};$/;"	s
make_unsigned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp	/^struct make_unsigned<signed long> : type_identity<unsigned long> {};$/;"	s
make_unsigned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp	/^struct make_unsigned<signed short> : type_identity<unsigned short> {};$/;"	s
make_unsigned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp	/^struct make_unsigned<unsigned char> : type_identity<unsigned char> {};$/;"	s
make_unsigned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp	/^struct make_unsigned<unsigned int> : type_identity<unsigned int> {};$/;"	s
make_unsigned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp	/^struct make_unsigned<unsigned long long> : type_identity<unsigned long long> {};$/;"	s
make_unsigned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp	/^struct make_unsigned<unsigned long> : type_identity<unsigned long> {};$/;"	s
make_unsigned	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp	/^struct make_unsigned<unsigned short> : type_identity<unsigned short> {};$/;"	s
make_void	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_void.hpp	/^struct make_void {$/;"	s
manageCAPSLOCK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^VirtualKey Keyboard::manageCAPSLOCK(VirtualKey vk)$/;"	f	class:fabgl::Keyboard	typeref:typename:VirtualKey
mant16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^        uint32_t mant16: 16;  \/\/\/< @todo Doc: what is this for?$/;"	m	struct:__anon26d1ab7c010a::__anon26d1ab7c0308	typeref:typename:uint32_t:16
mant7	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^        uint32_t mant7 :  7;  \/\/\/< @todo Doc: what is this for?$/;"	m	struct:__anon26d1ab7c010a::__anon26d1ab7c0308	typeref:typename:uint32_t:7
mant_hi16_exp_lo1	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^        uint32_t mant_hi16_exp_lo1 : 16;  \/\/\/< @todo Doc: what is this for?$/;"	m	struct:__anon26d1ab7c010a::__anon26d1ab7c0408	typeref:typename:uint32_t:16
mant_lo8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^        uint32_t mant_lo8 : 8;  \/\/\/< @todo Doc: what is this for?$/;"	m	struct:__anon26d1ab7c010a::__anon26d1ab7c0408	typeref:typename:uint32_t:8
mantissa	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^        uint32_t mantissa: 23;  \/\/\/< 23-bit mantissa$/;"	m	struct:__anon26d1ab7c010a::__anon26d1ab7c0208	typeref:typename:uint32_t:23
mantissa_bits	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static const short mantissa_bits = 23;$/;"	m	struct:FloatTraits	typeref:typename:const short
mantissa_bits	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static const short mantissa_bits = 52;$/;"	m	struct:FloatTraits	typeref:typename:const short
mantissa_max	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static const mantissa_type mantissa_max =$/;"	m	struct:FloatTraits	typeref:typename:const mantissa_type
mantissa_t	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/parseNumber.hpp	/^  typedef choose_largest<traits::mantissa_type, JsonUInt>::type mantissa_t;$/;"	t	function:parseNumber	typeref:typename:choose_largest<traits::mantissa_type,JsonUInt>::type
mantissa_type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  typedef uint32_t mantissa_type;$/;"	t	struct:FloatTraits	typeref:typename:uint32_t
mantissa_type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  typedef uint64_t mantissa_type;$/;"	t	struct:FloatTraits	typeref:typename:uint64_t
map	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint32_t *      map;  \/\/ look at glyphMapItem_... inlined functions$/;"	m	struct:fabgl::GlyphsBuffer	typeref:typename:uint32_t *
map8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint8_t map8( uint8_t in, uint8_t rangeStart, uint8_t rangeEnd)$/;"	f	typeref:typename:LIB8STATIC uint8_t
map_data_into_colors_through_palette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^void map_data_into_colors_through_palette($/;"	f	typeref:typename:void
mapcars	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  uint8_t mapcars[200]; \/\/ max racecars = 200$/;"	m	struct:Race	typeref:typename:uint8_t[200]
marioSamples	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Audio/mario.h	/^const int8_t marioSamples[] = {$/;"	v	typeref:typename:const int8_t[]
mark	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void LightMemoryPool::mark(int pos, int16_t size, bool allocated)$/;"	f	class:fabgl::LightMemoryPool	typeref:typename:void
mark	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^	void mark() { mLastMicros = micros() & 0xFFFF; }$/;"	f	class:CMinWait	typeref:typename:void
markAsOverflowed	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  void markAsOverflowed() {$/;"	f	class:MemoryPool	typeref:typename:void
markFree	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  void markFree(int pos) { m_mem[pos + 1] &= 0x7f; }$/;"	f	class:fabgl::LightMemoryPool	typeref:typename:void
mask	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/Alignment.hpp	/^  static const size_t mask = sizeof(void*) - 1;$/;"	m	struct:AddPadding	typeref:typename:const size_t
mask	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	port_t mask() __attribute__ ((always_inline)) { return mPinMask; }$/;"	f	class:Pin	typeref:typename:port_t
mask	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static port_t mask() __attribute__ ((always_inline)) { return 0; }$/;"	f	class:FastPin	typeref:typename:port_t
mask	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static port_t mask() __attribute__ ((always_inline)) { return sPinMask; }$/;"	f	class:FastPin	typeref:typename:port_t
mask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static port_t mask() __attribute__ ((always_inline)) { return _MASK; }$/;"	f	class:_ARMPIN	typeref:typename:port_t
mask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static port_t     mask()      { return _MASK;                /;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE port_t
mask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static port_t mask() __attribute__ ((always_inline)) { return MASK; }$/;"	f	class:_ESPPIN	typeref:typename:port_t
mask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static port_t mask() __attribute__ ((always_inline)) { return MASK; }$/;"	f	class:_ESPPIN	typeref:typename:port_t
matrix	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/smartmatrix_t3.h	/^    SmartMatrix matrix;$/;"	m	class:CSmartMatrixController	typeref:typename:SmartMatrix
max	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int max() { return m_max; }$/;"	f	class:fabgl::uiSlider	typeref:typename:int
maxDirectoryLength	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              maxDirectoryLength;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:int
maxFilenameLength	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              maxFilenameLength;$/;"	m	struct:fabgl::FileSelectorForm	typeref:typename:int
maxInt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^int maxInt( int a, int b ) { return MAX(a,b);}$/;"	f	typeref:typename:int
maxLength	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              maxLength;$/;"	m	struct:fabgl::TextInputForm	typeref:typename:int
maximizeBrightness	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline void maximizeBrightness( uint8_t limit = 255 )  {$/;"	f	struct:CRGB	typeref:typename:void
maximizeFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::maximizeFrame(uiFrame * frame, bool value)$/;"	f	class:fabgl::uiApp	typeref:typename:void
maximized	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t maximized : 1;  \/**< 0 = normal,   1 = maximized *\/$/;"	m	struct:fabgl::uiFrameState	typeref:typename:uint8_t:1
maxx	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int maxx;$/;"	m	struct:Race::Player	typeref:typename:int
mconf	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  MachineConf     * mconf;$/;"	m	struct:ConfigDialog	typeref:typename:MachineConf *	file:
measure	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/measure.hpp	/^size_t measure(ArduinoJson::JsonVariantConst source) {$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE size_t
measureJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^inline size_t measureJson(JsonVariantConst source) {$/;"	f	typeref:typename:size_t
measureJsonPretty	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp	/^inline size_t measureJsonPretty(JsonVariantConst source) {$/;"	f	typeref:typename:size_t
measureMsgPack	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^inline size_t measureMsgPack(JsonVariantConst source) {$/;"	f	typeref:typename:size_t
mediaUnknown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.h	/^  mediaUnknown,$/;"	e	enum:MediaType
memCheck	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool LightMemoryPool::memCheck()$/;"	f	class:fabgl::LightMemoryPool	typeref:typename:bool
mem_top	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^mem_top  db  0xea, 0, 0x01, 0, 0xf0, '01\/01\/91', 0, MODEL, SUBMODEL$/;"	d
memcmp_P	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp	/^inline int memcmp_P(const void* a, ArduinoJson::detail::pgm_p b, size_t n) {$/;"	f	typeref:typename:int
memcpy8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.cpp	/^void * memcpy8 ( void * dst, const void* src, uint16_t num )$/;"	f	typeref:typename:void *
memcpy8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define memcpy8 /;"	d
memcpy_P	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp	/^inline void* memcpy_P(void* dst, ArduinoJson::detail::pgm_p src, size_t n) {$/;"	f	typeref:typename:void *
memmove8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.cpp	/^void * memmove8 ( void * dst, const void* src, uint16_t num )$/;"	f	typeref:typename:void *
memmove8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define memmove8 /;"	d
memory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t * memory()                   { return s_memory; }$/;"	f	class:Machine	typeref:typename:uint8_t *
memoryUsage	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE size_t memoryUsage() const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE size_t
memoryUsage	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  FORCE_INLINE size_t memoryUsage() const {$/;"	f	class:JsonArrayConst	typeref:typename:FORCE_INLINE size_t
memoryUsage	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline size_t CollectionData::memoryUsage() const {$/;"	f	class:CollectionData	typeref:typename:size_t
memoryUsage	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  size_t memoryUsage() const {$/;"	f	class:JsonDocument	typeref:typename:size_t
memoryUsage	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE size_t memoryUsage() const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE size_t
memoryUsage	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  FORCE_INLINE size_t memoryUsage() const {$/;"	f	class:JsonObjectConst	typeref:typename:FORCE_INLINE size_t
memoryUsage	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  FORCE_INLINE size_t memoryUsage() const {$/;"	f	class:JsonVariantConst	typeref:typename:FORCE_INLINE size_t
memoryUsage	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  size_t memoryUsage() const {$/;"	f	class:VariantData	typeref:typename:size_t
memoryUsage	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE size_t memoryUsage() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE size_t
memset8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.cpp	/^void * memset8 ( void * ptr, uint8_t val, uint16_t num )$/;"	f	typeref:typename:void *
memset8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^#define memset8 /;"	d
memsize	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^memsize          dw  MEMSIZE$/;"	d
menu	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^int InputBox::menu(char const * titleText, char const * messageText, StringList * items)$/;"	f	class:fabgl::InputBox	typeref:typename:int
menu	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^int InputBox::menu(char const * titleText, char const * messageText, char const * itemsText, cha/;"	f	class:fabgl::InputBox	typeref:typename:int
menuMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  bool             menuMode;$/;"	m	struct:fabgl::SelectForm	typeref:typename:bool
menulastactivity	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^  long menulastactivity = 0;     $/;"	m	struct:Menu	typeref:typename:long
merge	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^Rect IRAM_ATTR Rect::merge(Rect const & rect) const$/;"	f	class:fabgl::Rect	typeref:typename:Rect IRAM_ATTR
message	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^InputResult InputBox::message(char const * titleText, char const * messageText, char const * but/;"	f	class:fabgl::InputBox	typeref:typename:InputResult
messageBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiMessageBoxResult uiApp::messageBox(char const * title, char const * text, char const * button1/;"	f	class:fabgl::uiApp	typeref:typename:uiMessageBoxResult
messageExtent	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              messageExtent;$/;"	m	struct:fabgl::MessageForm	typeref:typename:int
messageFmt	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^InputResult InputBox::messageFmt(char const * titleText, char const * buttonCancelText, char con/;"	f	class:fabgl::InputBox	typeref:typename:InputResult
messageText	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char const *     messageText;$/;"	m	struct:fabgl::MessageForm	typeref:typename:char const *
messageText	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char const *     messageText;$/;"	m	struct:fabgl::SelectForm	typeref:typename:char const *
middle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t middle : 1;   \/**< Contains 1 when middle button is pressed. *\/$/;"	m	struct:fabgl::MouseButtons	typeref:typename:uint8_t:1
min	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int min() { return m_min; }$/;"	f	class:fabgl::uiSlider	typeref:typename:int
minButtonsWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int minButtonsWidth()                                { return m_minButtonsWidth; }$/;"	f	class:fabgl::InputBox	typeref:typename:int
minInt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^int minInt( int a, int b ) { return MIN(a,b);}$/;"	f	typeref:typename:int
minWindowSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Size uiFrame::minWindowSize()$/;"	f	class:fabgl::uiFrame	typeref:typename:Size
minWindowSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  virtual Size minWindowSize()        { return Size(0, 0); }$/;"	f	class:fabgl::uiWindow	typeref:typename:Size
minidiskSectorsPerTrack	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static const int minidiskSectorsPerTrack      = 16;    \/\/ number of sectors per track (MiniD/;"	m	class:Mits88Disk	typeref:typename:const int
minidiskTracksCount	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static const int minidiskTracksCount          = 35;    \/\/ number of tracks (MiniDisk_76K)$/;"	m	class:Mits88Disk	typeref:typename:const int
minimizeFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::minimizeFrame(uiFrame * frame, bool value)$/;"	f	class:fabgl::uiApp	typeref:typename:void
minimized	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t minimized : 1;  \/**< 0 = normal,   1 = minimized *\/$/;"	m	struct:fabgl::uiFrameState	typeref:typename:uint8_t:1
minutes	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  int8_t  minutes;      \/**< 0..59             *\/$/;"	m	struct:fabgl::DateTime	typeref:typename:int8_t
minutes16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint16_t minutes16()$/;"	f	typeref:typename:LIB8STATIC uint16_t
minutes_BCD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^  uint8_t  minutes_BCD;$/;"	m	struct:DateTime	typeref:typename:uint8_t
minx	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int minx;$/;"	m	struct:Race::Player	typeref:typename:int
miso	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^        uint32_t miso;$/;"	m	struct:NRF51SPIOutput::saveData	typeref:typename:uint32_t
miso_pin	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t miso_pin;$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
mod8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t mod8( uint8_t a, uint8_t m)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
modalDialog	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  bool             modalDialog;$/;"	m	struct:fabgl::InputForm	typeref:typename:bool
modalResult	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^    int modalResult;$/;"	m	union:fabgl::uiEvent::uiEventParams	typeref:typename:int
modalResult	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int        modalResult;$/;"	m	struct:fabgl::ModalWindowState	typeref:typename:int
mode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  gcmode mode = MODE_DIRECTIONAL;$/;"	m	struct:GameController	typeref:typename:gcmode
mode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  gcmode mode = MODE_DIRECTIONAL;$/;"	m	struct:GameController	typeref:typename:gcmode
mode	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^    int32_t mode;         \/\/ Timer mode$/;"	m	struct:fabgl::PIT8253::TimerInfo	typeref:typename:int32_t
modeline	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^    char const *         modeline;$/;"	m	struct:fabgl::GraphicsAdapter::setupEmulation::__anonf67d7a610108	typeref:typename:char const *	file:
modem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transfile.py	/^modem = XMODEM(getc, putc)$/;"	v
modfreq	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^  modfreqmode modfreq;$/;"	m	struct:playsounddata	typeref:typename:modfreqmode
modfreq	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^  modfreqmode modfreq;$/;"	m	struct:playsounddata	typeref:typename:modfreqmode
modfreqmode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^enum modfreqmode { MODFREQ_NONE, MODFREQ_TO_END, MODFREQ_TO_RELEASE, MODFREQ_TO_SUSTAIN  };$/;"	g
modfreqmode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^enum modfreqmode { MODFREQ_NONE, MODFREQ_TO_END, MODFREQ_TO_RELEASE, MODFREQ_TO_SUSTAIN  };$/;"	g
monochrome	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.h	/^  bool monochrome()                                         { return m_monochrome; }$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:bool
month	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  int8_t  month;        \/**< 1..12             *\/$/;"	m	struct:fabgl::DateTime	typeref:typename:int8_t
mosi	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^        uint32_t mosi;$/;"	m	struct:NRF51SPIOutput::saveData	typeref:typename:uint32_t
mosi_pin	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t mosi_pin;$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
motherShipSoundSamples	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sounds.h	/^const int8_t motherShipSoundSamples[] = {$/;"	v	typeref:typename:const int8_t[]
mothershipexplosionSoundSamples	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sounds.h	/^const int8_t mothershipexplosionSoundSamples[] = {$/;"	v	typeref:typename:const int8_t[]
motorshutoff	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^motorshutoff     db  0x07               ; 40:40h$/;"	d
mountDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::mountDrive(int drive, char const * path)$/;"	f	class:HAL	typeref:typename:void
mountSDCard	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::mountSDCard(bool formatOnFail, char const * mountPath, size_t maxFiles, int al/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
mountSPIFFS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::mountSPIFFS(bool formatOnFail, char const * mountPath, size_t maxFiles)$/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
mountedSDCard	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static bool mountedSDCard() { return s_SDCardMounted; }$/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
mouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static Mouse * mouse()                      { return s_mouse; }$/;"	f	class:fabgl::PS2Controller	typeref:typename:Mouse *
mouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  Mouse * mouse()        { return m_mouse; }$/;"	f	class:fabgl::i8042	typeref:typename:Mouse *
mouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^    uiMouseEventInfo mouse;$/;"	m	union:fabgl::uiEvent::uiEventParams	typeref:typename:uiMouseEventInfo
mouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Mouse * mouse()                                  { return m_mouse; }$/;"	f	class:fabgl::uiApp	typeref:typename:Mouse *
mouseCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Sprite * mouseCursor() { return &m_mouseCursor; }$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:Sprite *
mouseDownBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           mouseDownBackgroundColor = RGB888(128, 128, 255); \/**< Background color when/;"	m	struct:fabgl::uiButtonStyle	typeref:typename:RGB888
mouseDownSelect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomListBox::mouseDownSelect(int mouseX, int mouseY)$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:void
mouseInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^bool Machine::mouseInterrupt(void * context)$/;"	f	class:Machine	typeref:typename:bool
mouseMoveSelect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomListBox::mouseMoveSelect(int mouseX, int mouseY)$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:void
mouseOverBackgroundButtonColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              mouseOverBackgroundButtonColor = RGB888(0, 0, 255);      \/**< Color used /;"	m	struct:fabgl::uiFrameStyle	typeref:typename:RGB888
mouseOverBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              mouseOverBackgroundColor = RGB888(128, 128, 255);  \/**< Background color /;"	m	struct:fabgl::uiCheckBoxStyle	typeref:typename:RGB888
mouseOverBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           mouseOverBackgroundColor   = RGB888(255, 255, 255);     \/**< Background colo/;"	m	struct:fabgl::uiTextEditStyle	typeref:typename:RGB888
mouseOverBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           mouseOverBackgroundColor = RGB888(255, 255, 255); \/**< Background color when/;"	m	struct:fabgl::uiButtonStyle	typeref:typename:RGB888
mouseOverButtonColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              mouseOverButtonColor           = RGB888(255, 255, 255);  \/**< Color used /;"	m	struct:fabgl::uiFrameStyle	typeref:typename:RGB888
mouseOverForegroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              mouseOverForegroundColor = RGB888(0, 0, 0);        \/**< Foreground color /;"	m	struct:fabgl::uiCheckBoxStyle	typeref:typename:RGB888
mouseOverGripColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888 mouseOverGripColor = RGB888(255, 255, 255);        \/**< Color of slider grip when mous/;"	m	struct:fabgl::uiSliderStyle	typeref:typename:RGB888
mouseOverScrollBarForegroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888  mouseOverScrollBarForegroundColor = RGB888(255, 255, 255);  \/**< Foreground color of /;"	m	struct:fabgl::uiScrollableControlStyle	typeref:typename:RGB888
mouseOverTextColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           mouseOverTextColor       = RGB888(0, 0, 0);       \/**< Text color when mouse/;"	m	struct:fabgl::uiButtonStyle	typeref:typename:RGB888
mouseUpdateTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^void Mouse::mouseUpdateTask(void * arg)$/;"	f	class:fabgl::Mouse	typeref:typename:void
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    dh, 4$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    dh, [vid_rows-bios_data]$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    di, ax$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    di, cga_glyphs$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    dl, 0$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    dl, [si+curpos_x-bios_data]$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    dl, [si+curpos_y-bios_data]$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    dl, [vid_cols-bios_data]$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    ds, ax$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    ds, bx$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    dx, 0x03d4$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    dx, 0x03d5$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov    dx, 128$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov   dh, [si+curpos_y-bios_data]$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov   di, ax$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov   di, dx$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov   dl, 24$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov   dl, [si+curpos_x-bios_data]$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov   ds, ax$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov   dx, 0x3d4$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov   dx, 0x3d5$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov   dx, 0x3d8$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov   dx, 0x3d9$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov   dx, ax$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dh, 0$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dh, al$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  di, 0$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  di, 0x0$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  di, 0x0000$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  di, ax$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  di, confDataTable$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  di, glyphs8x8$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  di, int09_bios_redirect$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dl, [cs:boot_device]$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dl, al$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  ds, ax$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  ds, bx$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  ds, cx$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  ds, dx$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, 0x0040$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, 0x3BC  ; LPT1$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, 0x3DA  ; CGA status port$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, 0x3d4$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, 0x3d5$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, 0x3d8  ; CGA Mode Control port$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, 0x3d9  ; CGA Color Control port$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, 0x3d9$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, 0x40  ; PIT channel 0$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, 0x61  ; Keyboard ctrl \/ speaker ctrl$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, 0x62  ; PPI - needed for memory parity checks$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, [clk_dtimer_lo - bios_data]  ; DX = ticks low word$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, [com1addr - bios_data + bx]$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, [com1addr-bios_data+bx]$/;"	d
mov	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mov  dx, ax$/;"	d
move	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  void move() {$/;"	f	class:JsonDeserializer	typeref:typename:void
move	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Rect move(Point const & position) const        { return Rect(position.X, position.Y, position./;"	f	struct:fabgl::Rect	typeref:typename:Rect
move	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Rect move(int x, int y) const                  { return Rect(x, y, x + width() - 1, y + height/;"	f	struct:fabgl::Rect	typeref:typename:Rect
move	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::move(int offset)$/;"	f	class:fabgl::Terminal	typeref:typename:void
moveAfter	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::moveAfter(uiWindow * child, uiWindow * underlyingChild)$/;"	f	class:fabgl::uiWindow	typeref:typename:void
moveAssignFrom	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  void moveAssignFrom(BasicJsonDocument& src) {$/;"	f	class:BasicJsonDocument	typeref:typename:void
moveBy	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^Sprite * Sprite::moveBy(int offsetX, int offsetY)$/;"	f	class:fabgl::Sprite	typeref:typename:Sprite *
moveBy	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^Sprite * Sprite::moveBy(int offsetX, int offsetY, int wrapAroundWidth, int wrapAroundHeight)$/;"	f	class:fabgl::Sprite	typeref:typename:Sprite *
moveChildOnTop	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::moveChildOnTop(uiWindow * child)$/;"	f	class:fabgl::uiWindow	typeref:typename:void
moveCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiTextEdit::moveCursor(int col, int selCol)$/;"	f	class:fabgl::uiTextEdit	typeref:typename:void
moveDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool Terminal::moveDown()$/;"	f	class:fabgl::Terminal	typeref:typename:bool
moveFocus	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiWindow * uiApp::moveFocus(int delta)$/;"	f	class:fabgl::uiApp	typeref:typename:uiWindow *
moveGripTo	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiSlider::moveGripTo(int x, int y)$/;"	f	class:fabgl::uiSlider	typeref:typename:void
moveItems	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^T moveItems(T dest, T src, size_t n)$/;"	f	namespace:fabgl	typeref:typename:T
moveMem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::moveMem(uint16_t destAddr, uint16_t srcAddr, size_t size)$/;"	f	class:HAL	typeref:typename:void
movePointer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline void movePointer(T*& p, ptrdiff_t offset) {$/;"	f	typeref:typename:void
movePointers	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline void CollectionData::movePointers(ptrdiff_t stringDistance,$/;"	f	class:CollectionData	typeref:typename:void
movePointers	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  void movePointers(ptrdiff_t offset) {$/;"	f	class:MemoryPool	typeref:typename:void
movePointers	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  void movePointers(ptrdiff_t stringDistance, ptrdiff_t variantDistance) {$/;"	f	class:VariantData	typeref:typename:void
movePointers	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  void movePointers(ptrdiff_t stringDistance, ptrdiff_t variantDistance) {$/;"	f	class:VariantSlot	typeref:typename:void
moveScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::moveScreen(int offsetX, int offsetY)$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
moveTo	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::moveTo(int X, int Y)$/;"	f	class:fabgl::Canvas	typeref:typename:void
moveTo	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^Sprite * Sprite::moveTo(int x, int y)$/;"	f	class:fabgl::Sprite	typeref:typename:Sprite *
moveUp	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool Terminal::moveUp()$/;"	f	class:fabgl::Terminal	typeref:typename:bool
moveWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::moveWindow(uiWindow * window, int x, int y)$/;"	f	class:fabgl::uiApp	typeref:typename:void
move_19x19	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t move_19x19[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
moveable	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t moveable          : 1; \/**< Frame is moveable. Make sure the window has a title bar s/;"	m	struct:fabgl::uiFrameProps	typeref:typename:uint8_t:1
movementAcceleration	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  int & movementAcceleration() { return m_movementAcceleration; }$/;"	f	class:fabgl::Mouse	typeref:typename:int &
movingCapturedMouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFrame::movingCapturedMouse(int mouseX, int mouseY, bool mouseIsDown)$/;"	f	class:fabgl::uiFrame	typeref:typename:void
movingFreeMouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFrame::movingFreeMouse(int mouseX, int mouseY)$/;"	f	class:fabgl::uiFrame	typeref:typename:void
msToTicks	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^uint32_t msToTicks(int ms)$/;"	f	namespace:fabgl	typeref:typename:uint32_t
msgBoxButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  uiButton * createFrameButton, * destroyFrameButton, * testModalDialogButton, * msgBoxButton;$/;"	m	class:MyApp	typeref:typename:uiButton *
msgBuffer	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  JEspnowMsg msgBuffer[MAX_MSG];$/;"	m	class:JEspnowDevice	typeref:typename:JEspnowMsg[]
mul	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  mul  dh  ; ax = window bottom row screen word offset$/;"	d
mul8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t mul8( uint8_t i, uint8_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
multiScanBlack	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  uint8_t       multiScanBlack;  \/**< 0 = Additional rows are the repetition of the first. 1 = /;"	m	struct:fabgl::VGATimings	typeref:typename:uint8_t
multilineDeleteChar	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::multilineDeleteChar(int charsToMove)$/;"	f	class:fabgl::Terminal	typeref:typename:void
multilineDeleteChar	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::multilineDeleteChar(int charsToMove)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
multilineInsertChar	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool Terminal::multilineInsertChar(int charsToMove)$/;"	f	class:fabgl::Terminal	typeref:typename:bool
multilineInsertChar	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool TerminalController::multilineInsertChar(int charsToMove)$/;"	f	class:fabgl::TerminalController	typeref:typename:bool
multiplan_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/multiplan_dsk.h	/^const uint8_t multiplan_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
multiplan_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/multiplan_dsk.h	/^unsigned int multiplan_dsk_len = 337568;$/;"	v	typeref:typename:unsigned int
myAddr	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  uint8_t myAddr[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};$/;"	m	class:JEspnowDevice	typeref:typename:uint8_t[6]
name	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^    "name": "Benoit Blanchon",$/;"	s	object:authors
name	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^  "name": "ArduinoJson",$/;"	s
name	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.properties	/^name=ArduinoJson$/;"	k
name	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^  char const * name() { return "Balls"; }$/;"	f	class:BallsTest	typeref:typename:char const *
name	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  char const * name() { return "Polygons"; }$/;"	f	class:PolygonsTest	typeref:typename:char const *
name	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  char const * name() { return "Sprites"; }$/;"	f	class:SpritesTest	typeref:typename:char const *
name	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^  char const * name() { return "Balls"; }$/;"	f	class:BallsTest	typeref:typename:char const *
name	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  char const * name() { return "Polygons"; }$/;"	f	class:PolygonsTest	typeref:typename:char const *
name	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  char const * name() { return "Sprites"; }$/;"	f	class:SpritesTest	typeref:typename:char const *
name	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^  char const * name() { return "Balls"; }$/;"	f	class:BallsTest	typeref:typename:char const *
name	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  char const * name() { return "Polygons"; }$/;"	f	class:PolygonsTest	typeref:typename:char const *
name	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  char const * name() { return "Sprites"; }$/;"	f	class:SpritesTest	typeref:typename:char const *
name	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^  char const * name;$/;"	m	struct:__anon1168f0c30108	typeref:typename:char const *	file:
name	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  char    name[6];$/;"	m	struct:PhysicalDevice	typeref:typename:char[6]
name	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^      "name": "Fabrizio Di Vittorio",$/;"	s	object:authors.0
name	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "name": "FabGL",$/;"	s
name	examples/test/.pio/libdeps/esp32dev/FabGL/library.properties	/^name=FabGL$/;"	k
name	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  const char *             name;                \/**< Layout name. *\/$/;"	m	struct:fabgl::KeyboardLayout	typeref:typename:const char *
name	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  char const * name;   \/**< File or directory name *\/$/;"	m	struct:fabgl::DirItem	typeref:typename:char const *
name	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^name = os.path.basename(os.path.splitext(filename)[0])$/;"	v
name	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "name": "Daniel Garcia",$/;"	s	object:authors.0
name	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "name": "Jason Coon",$/;"	s	object:authors.3
name	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "name": "Josh Huber",$/;"	s	object:authors.4
name	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "name": "Mark Kriegsman",$/;"	s	object:authors.1
name	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "name": "Sam Guyer",$/;"	s	object:authors.2
name	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "name": "FastLED",$/;"	s
name	examples/test/.pio/libdeps/esp32dev/FastLED/library.properties	/^name=FastLED$/;"	k
names	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  static char const * * names() {$/;"	f	struct:fabgl::SupportedLayouts	typeref:typename:char const **
names	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  static char const * * names() {$/;"	f	struct:fabgl::SupportedTerminals	typeref:typename:char const **
nan	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static T nan() {$/;"	f	struct:FloatTraits	typeref:typename:T
napplyGamma_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB& napplyGamma_video( CRGB& rgb, float gamma)$/;"	f	typeref:typename:CRGB &
napplyGamma_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB& napplyGamma_video( CRGB& rgb, float gammaR, float gammaG, float gammaB)$/;"	f	typeref:typename:CRGB &
napplyGamma_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void napplyGamma_video( CRGB* rgbarray, uint16_t count, float gamma)$/;"	f	typeref:typename:void
napplyGamma_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void napplyGamma_video( CRGB* rgbarray, uint16_t count, float gammaR, float gammaG, float gammaB/;"	f	typeref:typename:void
napplyGamma_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & napplyGamma_video(float gamma) {$/;"	f	class:CPixelView	typeref:typename:CPixelView &
napplyGamma_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & napplyGamma_video(float gammaR, float gammaG, float gammaB) {$/;"	f	class:CPixelView	typeref:typename:CPixelView &
nativePixelFormat	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  NativePixelFormat nativePixelFormat() { return NativePixelFormat::Mono; }$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:NativePixelFormat
nativePixelFormat	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  NativePixelFormat nativePixelFormat() { return NativePixelFormat::RGB565BE; }$/;"	f	class:fabgl::TFTController	typeref:typename:NativePixelFormat
nativePixelFormat	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  NativePixelFormat nativePixelFormat()                 { return m_nativePixelFormat; }$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:NativePixelFormat
nativePixelFormat	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.h	/^  NativePixelFormat nativePixelFormat() { return NativePixelFormat::SBGR2222; }$/;"	f	class:fabgl::VGAController	typeref:typename:NativePixelFormat
nativePixelFormat	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  NativePixelFormat nativePixelFormat()               { return NativePixelFormat::SBGR2222; }$/;"	f	class:fabgl::VGADirectController	typeref:typename:NativePixelFormat
nativePixelFormat	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  NativePixelFormat nativePixelFormat()                 { return m_nativePixelFormat; }$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:NativePixelFormat
nativeToRGB888	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^inline RGB888 nativeToRGB888(uint16_t pattern)$/;"	f	namespace:fabgl	typeref:typename:RGB888
nativeToRGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^inline RGBA8888 nativeToRGBA8888(uint16_t pattern)$/;"	f	namespace:fabgl	typeref:typename:RGBA8888
nblend	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CHSV& nblend( CHSV& existing, const CHSV& overlay, fract8 amountOfOverlay, TGradientDirectionCod/;"	f	typeref:typename:CHSV &
nblend	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )$/;"	f	typeref:typename:CRGB &
nblend	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void nblend( CHSV* existing, CHSV* overlay, uint16_t count, fract8 amountOfOverlay, TGradientDir/;"	f	typeref:typename:void
nblend	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void nblend( CRGB* existing, CRGB* overlay, uint16_t count, fract8 amountOfOverlay)$/;"	f	typeref:typename:void
nblend	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & nblend(const CPixelView & rhs, fract8 amountOfOverlay) { for(iterator pi/;"	f	class:CPixelView	typeref:typename:CPixelView &
nblend	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & nblend(const PIXEL_TYPE & overlay, fract8 amountOfOverlay) { for(iterato/;"	f	class:CPixelView	typeref:typename:CPixelView &
nblendPaletteTowardPalette	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChang/;"	f	typeref:typename:void
needwait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:bool
needwait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:bool
nefon	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def nefon(fon, neoff):$/;"	f
neg	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Point neg() const                { return Point(-X, -Y); }$/;"	f	struct:fabgl::Point	typeref:typename:Point
negativeBinaryPowersOfTen	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static pgm_ptr<T> negativeBinaryPowersOfTen() {$/;"	f	struct:FloatTraits	typeref:typename:pgm_ptr<T>
nesting	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE size_t nesting() const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE size_t
nesting	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  FORCE_INLINE size_t nesting() const {$/;"	f	class:JsonArrayConst	typeref:typename:FORCE_INLINE size_t
nesting	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  size_t nesting() const {$/;"	f	class:JsonDocument	typeref:typename:size_t
nesting	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE size_t nesting() const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE size_t
nesting	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  FORCE_INLINE size_t nesting() const {$/;"	f	class:JsonObjectConst	typeref:typename:FORCE_INLINE size_t
nesting	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  FORCE_INLINE size_t nesting() const {$/;"	f	class:JsonVariantConst	typeref:typename:FORCE_INLINE size_t
nesting	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE size_t nesting() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE size_t
nestingLimit	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationOptions.hpp	/^  DeserializationOption::NestingLimit nestingLimit;$/;"	m	struct:DeserializationOptions	typeref:typename:DeserializationOption::NestingLimit
nesting_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp	/^  uint8_t nesting_;$/;"	m	class:PrettyJsonSerializer	typeref:typename:uint8_t
networkName	examples/test/lib/JFixLib/src/JJonisk.h	/^    String networkName = "JV_";$/;"	m	class:JJoniskSettings	typeref:typename:String
networkName	examples/test/lib/JFixLib/src/JTlFix.h	/^    String networkName = "JV_";$/;"	m	class:JTlFixSettings	typeref:typename:String
newConfigDialog	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^void newConfigDialog(InputBox * ibox, MachineConf * mconf, int idx)$/;"	f	typeref:typename:void
newFocused	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * newFocused;$/;"	m	struct:fabgl::uiFocusInfo	typeref:typename:uiWindow *
newFolderButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiButton *      newFolderButton;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:uiButton *
newLineMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         newLineMode;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
newSize	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^    newSize = (int(sys.argv[i + 1]), int(sys.argv[i + 2]))$/;"	v
newSize	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^newSize = None$/;"	v
new_audio	examples/test/.pio/libdeps/esp32dev/FabGL/tools/wav2header/wav2header.py	/^new_audio = interpolator(time_new).T$/;"	v
new_samplerate	examples/test/.pio/libdeps/esp32dev/FabGL/tools/wav2header/wav2header.py	/^new_samplerate = int(sys.argv[2])$/;"	v
next	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  VariantSlot* next() {$/;"	f	class:VariantSlot	typeref:typename:VariantSlot *
next	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  VariantSlot* next(size_t distance) {$/;"	f	class:VariantSlot	typeref:typename:VariantSlot *
next	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  const VariantSlot* next() const {$/;"	f	class:VariantSlot	typeref:typename:const VariantSlot *
next	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  const VariantSlot* next(size_t distance) const {$/;"	f	class:VariantSlot	typeref:typename:const VariantSlot *
next	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  Device * next = nullptr;$/;"	m	struct:Device	typeref:typename:Device *
next	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  MachineConfItem * next;$/;"	m	struct:MachineConfItem	typeref:typename:MachineConfItem *
next	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  QuadTreeObject * next;$/;"	m	struct:fabgl::QuadTreeObject	typeref:typename:QuadTreeObject *
next	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  WaveformGenerator * next;$/;"	m	class:fabgl::WaveformGenerator	typeref:typename:WaveformGenerator *
next	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * next()  { return m_next; }$/;"	f	class:fabgl::uiWindow	typeref:typename:uiWindow *
next	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  StackItem * next;$/;"	m	struct:fabgl::StackItem	typeref:typename:StackItem *
next	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  TerminalCursorState *   next;$/;"	m	struct:fabgl::TerminalCursorState	typeref:typename:TerminalCursorState *
next	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CLEDController *next() { return m_pNext; }$/;"	f	class:CLEDController	typeref:typename:CLEDController *
nextFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void nextFrame() { ++currentFrame; if (currentFrame >= framesCount) currentFrame = 0; }$/;"	f	struct:fabgl::Sprite	typeref:typename:void
nextState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^  bool nextState()$/;"	f	class:BallsTest	typeref:typename:bool
nextState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  bool nextState()$/;"	f	class:PolygonsTest	typeref:typename:bool
nextState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  bool nextState()$/;"	f	class:SpritesTest	typeref:typename:bool
nextState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^  bool nextState()$/;"	f	class:BallsTest	typeref:typename:bool
nextState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  bool nextState()$/;"	f	class:PolygonsTest	typeref:typename:bool
nextState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  bool nextState()$/;"	f	class:SpritesTest	typeref:typename:bool
nextState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^  bool nextState()$/;"	f	class:BallsTest	typeref:typename:bool
nextState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  bool nextState()$/;"	f	class:PolygonsTest	typeref:typename:bool
nextState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  bool nextState()$/;"	f	class:SpritesTest	typeref:typename:bool
nextStep	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^int Machine::nextStep(CPU cpu)$/;"	f	class:Machine	typeref:typename:int
nextTabStop	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::nextTabStop()$/;"	f	class:fabgl::Terminal	typeref:typename:void
next_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  VariantSlotDiff next_;$/;"	m	class:VariantSlot	typeref:typename:VariantSlotDiff
nibbler_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/nibbler.h	/^char const * nibbler_filename = "Nibbler 3K.PRG";$/;"	v	typeref:typename:char const *
nibbler_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/nibbler.h	/^const uint8_t nibbler_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
nmax	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^int32_t nmax=0;$/;"	v	typeref:typename:int32_t
nmin	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^int32_t nmin=11111110;$/;"	v	typeref:typename:int32_t
noSound	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    void noSound()$/;"	f	struct:Race::Player	typeref:typename:void
noiseScale	examples/test/lib/JFixLib/src/Event/JEvent_Perlin.h	/^    float noiseScale = 0.01;$/;"	m	class:JEvent_Perlin	typeref:typename:float
noiseScale	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  float noiseScale = 0.01;$/;"	m	class:JFixtureAddr	typeref:typename:float
noiseTimeScale	examples/test/lib/JFixLib/src/Event/JEvent_Perlin.h	/^    float noiseTimeScale = 0.0005;$/;"	m	class:JEvent_Perlin	typeref:typename:float
noiseTimeScale	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  float noiseTimeScale = 0.0005;$/;"	m	class:JFixtureAddr	typeref:typename:float
normalButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiButton * normalButton, * switchButton;$/;"	m	struct:TestControlsFrame	typeref:typename:uiButton *
normalize	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatParts.hpp	/^  static int16_t normalize(TFloat& value) {$/;"	f	struct:FloatParts	typeref:typename:int16_t
notifyTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    TaskHandle_t           notifyTask;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:TaskHandle_t
np	examples/test/.pio/libdeps/esp32dev/FabGL/tools/wav2header/wav2header.py	/^import numpy as np$/;"	I	nameref:module:numpy
nrf_pin	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static uint32_t   nrf_pin()  { return NRF_GPIO_PIN_MAP(_PORT_/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE uint32_t
nrf_pin2	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    constexpr                      static uint32_t   nrf_pin2() { return NRF_GPIO_PIN_MAP(_PORT_/;"	f	class:_ARMPIN	typeref:typename:uint32_t
nscale8	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)$/;"	f	typeref:typename:void
nscale8	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & nscale8(CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = rhs/;"	f	class:CPixelView	typeref:typename:CPixelView &
nscale8	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & nscale8(PIXEL_TYPE & scaledown) { for(iterator pixel = begin(), _end = e/;"	f	class:CPixelView	typeref:typename:CPixelView &
nscale8	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & nscale8(uint8_t scaledown) { for(iterator pixel = begin(), _end = end();/;"	f	class:CPixelView	typeref:typename:CPixelView &
nscale8	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& nscale8 (const CRGB & scaledown )$/;"	f	struct:CRGB	typeref:typename:CRGB &
nscale8	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& nscale8 (uint8_t scaledown )$/;"	f	struct:CRGB	typeref:typename:CRGB &
nscale8_LEAVING_R1_DIRTY	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC_ALWAYS_INLINE void nscale8_LEAVING_R1_DIRTY( uint8_t& i, fract8 scale)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE void
nscale8_raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void nscale8_raw( CRGB* leds, uint16_t num_leds, uint8_t scale)$/;"	f	typeref:typename:void
nscale8_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.cpp	/^void nscale8_video( CRGB* leds, uint16_t num_leds, uint8_t scale)$/;"	f	typeref:typename:void
nscale8_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & nscale8_video(uint8_t scaledown) { for(iterator pixel = begin(), _end = /;"	f	class:CPixelView	typeref:typename:CPixelView &
nscale8_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& nscale8_video (uint8_t scaledown )$/;"	f	struct:CRGB	typeref:typename:CRGB &
nscale8_video_LEAVING_R1_DIRTY	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC_ALWAYS_INLINE void nscale8_video_LEAVING_R1_DIRTY( uint8_t & i, fract8 scale)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE void
nscale8x2	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC void nscale8x2( uint8_t& i, uint8_t& j, fract8 scale)$/;"	f	typeref:typename:LIB8STATIC void
nscale8x2_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC void nscale8x2_video( uint8_t& i, uint8_t& j, fract8 scale)$/;"	f	typeref:typename:LIB8STATIC void
nscale8x3	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)$/;"	f	typeref:typename:LIB8STATIC void
nscale8x3_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)$/;"	f	typeref:typename:LIB8STATIC void
numChannels	examples/test/lib/JFixLib/src/JFixture.h	/^  char numChannels = 4;$/;"	m	class:JFixture	typeref:typename:char
numChannels	examples/test/lib/JFixLib/src/JJonisk.h	/^    char numChannels = 4;$/;"	m	class:JJoniskSettings	typeref:typename:char
numChannels	examples/test/lib/JFixLib/src/JTlFix.h	/^    char numChannels = 6;$/;"	m	class:JTlFixSettings	typeref:typename:char
numLeds	examples/test/lib/JFixLib/src/Event/Event.h	/^  int numLeds = 1;$/;"	m	class:Event	typeref:typename:int
numLedsPerString	examples/test/lib/JFixLib/src/Event/Event.h	/^  int numLedsPerString = 1;$/;"	m	class:Event	typeref:typename:int
numLedsPerString	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  int numLedsPerString = 1;$/;"	m	class:JFixtureAddr	typeref:typename:int
numLedsPerString	examples/test/lib/JFixLib/src/JTlFix.h	/^    uint8_t numLedsPerString = 144;$/;"	m	class:JTlFixSettings	typeref:typename:uint8_t
numStrings	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  char numStrings = 1;$/;"	m	class:JFixtureAddr	typeref:typename:char
numStrings	examples/test/lib/JFixLib/src/JTlFix.h	/^    char numStrings = 2;$/;"	m	class:JTlFixSettings	typeref:typename:char
numTries	examples/test/lib/JFixLib/src/JOtaServer.h	/^  int numTries = 0;$/;"	m	class:JOtaServer	typeref:typename:int
num_hd	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^num_hd           db  0   ; 0x75$/;"	d
number_data_3x5	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const  uint8_t number_data_3x5[10][8] = {$/;"	v	typeref:typename:const uint8_t[10][8]
numbers_bitmaps	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^BWScaleBitmap numbers_bitmaps[10];  $/;"	v	typeref:typename:BWScaleBitmap[10]
numeric_limits	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/limits.hpp	/^struct numeric_limits<$/;"	s
numeric_limits	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/limits.hpp	/^struct numeric_limits<T, typename enable_if<is_unsigned<T>::value>::type> {$/;"	s
nvs_handle_t	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^typedef nvs_handle nvs_handle_t;$/;"	t	typeref:typename:nvs_handle
o_div	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t o_div;$/;"	m	struct:fabgl::APLLParams	typeref:typename:uint8_t
objectInRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^bool QuadTree::objectInRect(QuadTreeObject * object, int x, int y, int width, int height)$/;"	f	class:fabgl::QuadTree	typeref:typename:bool
objectIntersectsQuadTree	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^bool QuadTree::objectIntersectsQuadTree(QuadTreeObject * object, QuadTree * quadTree)$/;"	f	class:fabgl::QuadTree	typeref:typename:bool
objectType	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiObjectType & objectType() { return m_objectType; }$/;"	f	class:fabgl::uiObject	typeref:typename:uiObjectType &
objectsIntersect	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^bool QuadTree::objectsIntersect(QuadTreeObject * objectA, QuadTreeObject * objectB)$/;"	f	class:fabgl::QuadTree	typeref:typename:bool
ofNoise	examples/test/lib/JFixLib/src/ofNoise.h	/^float ofNoise(float x, float y, float z){$/;"	f	typeref:typename:float
off	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint16_t  off;  \/\/ Offset, number of reserved tracks$/;"	m	struct:DiscParameterBlock	typeref:typename:uint16_t
off	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	uint32_t off[3];$/;"	m	class:ClocklessController	typeref:typename:uint32_t[3]
offset	examples/test/lib/JFixLib/src/Event/JOsc.h	/^  float offset = 0;$/;"	m	class:JOsc	typeref:typename:float
oldFocused	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * oldFocused;$/;"	m	struct:fabgl::uiFocusInfo	typeref:typename:uiWindow *
old_audio	examples/test/.pio/libdeps/esp32dev/FabGL/tools/wav2header/wav2header.py	/^old_samplerate, old_audio = wavfile.read(filename)$/;"	v
old_samplerate	examples/test/.pio/libdeps/esp32dev/FabGL/tools/wav2header/wav2header.py	/^old_samplerate, old_audio = wavfile.read(filename)$/;"	v
omega_fury_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/omega_fury.h	/^char const * omega_fury_filename = "Omega Fury 16K.PRG";$/;"	v	typeref:typename:char const *
omega_fury_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/omega_fury.h	/^const uint8_t omega_fury_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
onCPUStep	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  Delegate<> onCPUStep;$/;"	m	class:HAL	typeref:typename:Delegate<>
onCarriageReturn	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<int *> onCarriageReturn;$/;"	m	class:fabgl::LineEditor	typeref:typename:Delegate<int * >
onChange	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onChange;$/;"	m	class:fabgl::uiButton	typeref:typename:Delegate<>
onChange	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onChange;$/;"	m	class:fabgl::uiCheckBox	typeref:typename:Delegate<>
onChange	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onChange;$/;"	m	class:fabgl::uiCustomComboBox	typeref:typename:Delegate<>
onChange	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onChange;$/;"	m	class:fabgl::uiCustomListBox	typeref:typename:Delegate<>
onChange	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onChange;$/;"	m	class:fabgl::uiSlider	typeref:typename:Delegate<>
onChange	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onChange;$/;"	m	class:fabgl::uiTextEdit	typeref:typename:Delegate<>
onChangeHScrollBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onChangeHScrollBar;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:Delegate<>
onChangeVScrollBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onChangeVScrollBar;$/;"	m	class:fabgl::uiScrollableControl	typeref:typename:Delegate<>
onChar	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<int *>  onChar;$/;"	m	class:fabgl::LineEditor	typeref:typename:Delegate<int * >
onClick	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onClick;$/;"	m	class:fabgl::uiButton	typeref:typename:Delegate<>
onClick	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onClick;$/;"	m	class:fabgl::uiCheckBox	typeref:typename:Delegate<>
onClick	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onClick;$/;"	m	class:fabgl::uiCustomListBox	typeref:typename:Delegate<>
onClick	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onClick;$/;"	m	class:fabgl::uiLabel	typeref:typename:Delegate<>
onCreateFrameButtonClick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  void onCreateFrameButtonClick() {$/;"	f	class:MyApp	typeref:typename:void
onDblClick	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onDblClick;$/;"	m	class:fabgl::uiCustomListBox	typeref:typename:Delegate<>
onHide	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onHide;$/;"	m	class:fabgl::uiFrame	typeref:typename:Delegate<>
onKeyDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<uiKeyEventInfo const &> onKeyDown;$/;"	m	class:fabgl::uiFrame	typeref:typename:Delegate<uiKeyEventInfo const &>
onKeyType	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<uiKeyEventInfo const &> onKeyType;$/;"	m	class:fabgl::uiCustomListBox	typeref:typename:Delegate<uiKeyEventInfo const &>
onKeyType	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<uiKeyEventInfo const &> onKeyType;$/;"	m	class:fabgl::uiTextEdit	typeref:typename:Delegate<uiKeyEventInfo const &>
onKeyUp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<uiKeyEventInfo const &> onKeyUp;$/;"	m	class:fabgl::uiCustomListBox	typeref:typename:Delegate<uiKeyEventInfo const &>
onKeyUp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<uiKeyEventInfo const &> onKeyUp;$/;"	m	class:fabgl::uiFrame	typeref:typename:Delegate<uiKeyEventInfo const &>
onKillFocus	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onKillFocus;$/;"	m	class:fabgl::uiCustomListBox	typeref:typename:Delegate<>
onMouseDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<uiMouseEventInfo const&> onMouseDown;$/;"	m	class:fabgl::uiButton	typeref:typename:Delegate<uiMouseEventInfo const &>
onMouseUp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<uiMouseEventInfo const&> onMouseUp;$/;"	m	class:fabgl::uiButton	typeref:typename:Delegate<uiMouseEventInfo const &>
onNewSession	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^  Delegate<HAL *> onNewSession;$/;"	m	class:Supervisor	typeref:typename:Delegate<HAL * >
onPaint	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onPaint;$/;"	m	class:fabgl::uiFrame	typeref:typename:Delegate<>
onPaint	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<Rect const &> onPaint;$/;"	m	class:fabgl::uiPaintBox	typeref:typename:Delegate<Rect const &>
onPaint	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  Delegate<Canvas *> onPaint;$/;"	m	class:fabgl::InputBox	typeref:typename:Delegate<Canvas * >
onPaintPaintBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestPaintBoxFrame.h	/^  void onPaintPaintBox(Rect const & r) {$/;"	f	struct:TestPaintBoxFrame	typeref:typename:void
onPaintPaintBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestTimerFrame.h	/^  void onPaintPaintBox(Rect const & r) {$/;"	f	struct:TestTimerFrame	typeref:typename:void
onRead	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<int *> onRead;$/;"	m	class:fabgl::LineEditor	typeref:typename:Delegate<int * >
onRead	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<int *> onRead;$/;"	m	class:fabgl::TerminalController	typeref:typename:Delegate<int * >
onReadyToSend	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<bool *> onReadyToSend;$/;"	m	class:fabgl::Terminal	typeref:typename:Delegate<bool * >
onReceive	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<uint8_t> onReceive;$/;"	m	class:fabgl::Terminal	typeref:typename:Delegate<uint8_t>
onResize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onResize;$/;"	m	class:fabgl::uiFrame	typeref:typename:Delegate<>
onSelect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<int> onSelect;$/;"	m	class:fabgl::uiSimpleMenu	typeref:typename:Delegate<int>
onSelect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<int> onSelect;$/;"	m	class:fabgl::uiSplitButton	typeref:typename:Delegate<int>
onSend	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<uint8_t> onSend;$/;"	m	class:fabgl::Terminal	typeref:typename:Delegate<uint8_t>
onSetupDMABuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void VGAController::onSetupDMABuffer(lldesc_t volatile * buffer, bool isStartOfVertFrontPorch, i/;"	f	class:fabgl::VGAController	typeref:typename:void
onSetupDMABuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::onSetupDMABuffer(lldesc_t volatile * buffer, bool isStartOfVertFrontPo/;"	f	class:fabgl::VGADirectController	typeref:typename:void
onSetupDMABuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^void VGAPalettedController::onSetupDMABuffer(lldesc_t volatile * buffer, bool isStartOfVertFront/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
onShow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<> onShow;$/;"	m	class:fabgl::uiFrame	typeref:typename:Delegate<>
onSpecialChar	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<LineEditorSpecialChar> onSpecialChar;$/;"	m	class:fabgl::LineEditor	typeref:typename:Delegate<LineEditorSpecialChar>
onTestInputBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  void onTestInputBox() {$/;"	f	class:MyApp	typeref:typename:void
onTestModalDialogButtonClick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  void onTestModalDialogButtonClick() {$/;"	f	class:MyApp	typeref:typename:void
onTimer	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<uiTimerHandle> onTimer;$/;"	m	class:fabgl::uiApp	typeref:typename:Delegate<uiTimerHandle>
onTimer	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Delegate<uiTimerHandle> onTimer;$/;"	m	class:fabgl::uiFrame	typeref:typename:Delegate<uiTimerHandle>
onUserSequence	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<char const *> onUserSequence;$/;"	m	class:fabgl::Terminal	typeref:typename:Delegate<char const * >
onVirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  Delegate<VirtualKey *, bool> onVirtualKey;$/;"	m	class:fabgl::Keyboard	typeref:typename:Delegate<VirtualKey *,bool>
onVirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<VirtualKey *, bool> onVirtualKey;$/;"	m	class:fabgl::Terminal	typeref:typename:Delegate<VirtualKey *,bool>
onVirtualKeyItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<VirtualKeyItem *> onVirtualKeyItem;$/;"	m	class:fabgl::Terminal	typeref:typename:Delegate<VirtualKeyItem * >
onWrite	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<int> onWrite;$/;"	m	class:fabgl::LineEditor	typeref:typename:Delegate<int>
onWrite	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  Delegate<int> onWrite;$/;"	m	class:fabgl::TerminalController	typeref:typename:Delegate<int>
oneShots	examples/test/lib/JFixLib/src/JModes.h	/^  std::map<OneShot, JMsgArguments> oneShots{$/;"	m	class:JModes	typeref:typename:std::map<OneShot,JMsgArguments>
ones_for_one	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static int ones_for_one;$/;"	v	typeref:typename:int
ones_for_zero	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^static int ones_for_zero;$/;"	v	typeref:typename:int
op_dest	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint32_t   op_source, op_dest, set_flags_type;$/;"	v	namespace:fabgl	typeref:typename:uint32_t	file:
op_from_addr	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static int32_t    op_to_addr, op_from_addr;$/;"	v	namespace:fabgl	typeref:typename:int32_t	file:
op_source	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint32_t   op_source, op_dest, set_flags_type;$/;"	v	namespace:fabgl	typeref:typename:uint32_t	file:
op_to_addr	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static int32_t    op_to_addr, op_from_addr;$/;"	v	namespace:fabgl	typeref:typename:int32_t	file:
openBitPA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.cpp	/^void VIA6522::openBitPA(int bit)$/;"	f	class:fabgl::VIA6522	typeref:typename:void
openBitPB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.cpp	/^void VIA6522::openBitPB(int bit)$/;"	f	class:fabgl::VIA6522	typeref:typename:void
openFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^FILE * BDOS::openFile(uint16_t FCBaddr, bool create, bool tempext, int errFunc, int * err)$/;"	f	class:BDOS	typeref:typename:FILE *
openFile	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^FILE * FileBrowser::openFile(char const * filename, char const * mode)$/;"	f	class:fabgl::FileBrowser	typeref:typename:FILE *
openListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomComboBox::openListBox()$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:void
openListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiSplitButton::openListBox()$/;"	f	class:fabgl::uiSplitButton	typeref:typename:void
openOnFocus	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t openOnFocus  : 1;  \/**< Open the combobox when it acquires focus *\/$/;"	m	struct:fabgl::uiComboBoxProps	typeref:typename:uint8_t:1
operator !=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  bool operator!=(const JsonArrayConstIterator& other) const {$/;"	f	class:JsonArrayConstIterator	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  bool operator!=(const JsonArrayIterator& other) const {$/;"	f	class:JsonArrayIterator	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  friend bool operator!=(Code lhs, const DeserializationError& rhs) {$/;"	f	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  friend bool operator!=(const DeserializationError& lhs, Code rhs) {$/;"	f	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  friend bool operator!=(const DeserializationError& lhs,$/;"	f	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  bool operator!=(const JsonObjectConstIterator& other) const {$/;"	f	class:JsonObjectConstIterator	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  bool operator!=(const JsonObjectIterator& other) const {$/;"	f	class:JsonObjectIterator	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  friend bool operator!=(JsonString lhs, JsonString rhs) {$/;"	f	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^      operator!=(TVariant lhs, const T& rhs) {$/;"	f	typeref:typename:enable_if<!is_base_of<VariantOperatorTag,T>::value,bool>::type
operator !=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator!=(T* lhs, TVariant rhs) {$/;"	f	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator!=(TVariant lhs, T* rhs) {$/;"	f	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator!=(const T& lhs, TVariant rhs) {$/;"	f	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline bool operator!=(RGB222 const& lhs, RGB222 const& rhs)$/;"	f	namespace:fabgl	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline bool operator!=(RGB888 const& lhs, RGB888 const& rhs)$/;"	f	namespace:fabgl	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool operator!=(Point const & r) { return X != r.X || Y != r.Y; }$/;"	f	struct:fabgl::Point	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool operator!=(Rect const & r)                { return X1 != r.X1 || Y1 != r.Y1 || X2 != r.X2/;"	f	struct:fabgl::Rect	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool operator!=(Size const & r) { return width != r.width || height != r.height; }$/;"	f	struct:fabgl::Size	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    bool operator!=( const CHSVPalette16 &rhs) const$/;"	f	class:CHSVPalette16	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    bool operator!=( const CHSVPalette256 &rhs) const$/;"	f	class:CHSVPalette256	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    bool operator!=( const CHSVPalette32 &rhs) const$/;"	f	class:CHSVPalette32	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    bool operator!=( const CRGBPalette16 &rhs) const$/;"	f	class:CRGBPalette16	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    bool operator!=( const CRGBPalette256 &rhs) const$/;"	f	class:CRGBPalette256	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    bool operator!=( const CRGBPalette32 &rhs) const$/;"	f	class:CRGBPalette32	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^        __attribute__((always_inline)) inline bool operator!=(pixelset_iterator_base & other) co/;"	f	class:CPixelView::pixelset_iterator_base	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    bool operator!=(const CPixelView & rhs) const { return leds != rhs.leds || len != rhs.len ||/;"	f	class:CPixelView	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline __attribute__((always_inline)) bool operator!= (const CHSV& lhs, const CHSV& rhs)$/;"	f	typeref:typename:bool
operator !=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline __attribute__((always_inline)) bool operator!= (const CRGB& lhs, const CRGB& rhs)$/;"	f	typeref:typename:bool
operator %	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline CRGB operator%( const CRGB& p1, uint8_t d)$/;"	f	typeref:typename:CRGB
operator %=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator%=(uint8_t scaledown) { for(iterator pixel = begin(), _end = end/;"	f	class:CPixelView	typeref:typename:CPixelView &
operator %=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator%= (uint8_t scaledown )$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator &	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline CRGB operator&( const CRGB& p1, const CRGB& p2)$/;"	f	typeref:typename:CRGB
operator &=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator&=(const CPixelView & rhs) { for(iterator pixel = begin(), rhspi/;"	f	class:CPixelView	typeref:typename:CPixelView &
operator &=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator&=(const PIXEL_TYPE & rhs) { for(iterator pixel = begin(), _end /;"	f	class:CPixelView	typeref:typename:CPixelView &
operator &=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator&=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixe/;"	f	class:CPixelView	typeref:typename:CPixelView &
operator &=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator&= (const CRGB& rhs )$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator &=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator&= (uint8_t d )$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator ()	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/SlotFunctions.hpp	/^  void operator()(TStoredString s) {$/;"	f	struct:SlotKeySetter	typeref:typename:void
operator ()	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^    void operator()(TStoredString s) {$/;"	f	struct:VariantData::VariantStringSetter	typeref:typename:void
operator ()	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  void operator()(const Params & ...params) {$/;"	f	struct:fabgl::Delegate	typeref:typename:void
operator ()	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView operator()(int start, int end) { return CPixelView(leds, start, end); }$/;"	f	class:CPixelView	typeref:typename:CPixelView
operator *	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonVariant operator*() const {$/;"	f	class:JsonArrayIterator	typeref:typename:JsonVariant
operator *	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonVariant& operator*() {$/;"	f	class:VariantPtr	typeref:typename:JsonVariant &
operator *	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonVariantConst operator*() const {$/;"	f	class:JsonArrayConstIterator	typeref:typename:JsonVariantConst
operator *	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonVariantConst& operator*() {$/;"	f	class:VariantConstPtr	typeref:typename:JsonVariantConst &
operator *	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonPair operator*() const {$/;"	f	class:JsonObjectIterator	typeref:typename:JsonPair
operator *	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonPairConst operator*() const {$/;"	f	class:JsonObjectConstIterator	typeref:typename:JsonPairConst
operator *	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  const JsonPair& operator*() const {$/;"	f	class:JsonPairPtr	typeref:typename:const JsonPair &
operator *	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  const JsonPairConst& operator*() const {$/;"	f	class:JsonPairConstPtr	typeref:typename:const JsonPairConst &
operator *	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    int operator*(int v) { return (v*i) + ((v*f)>>F); }$/;"	f	class:q	typeref:typename:int
operator *	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    int16_t operator*(int16_t v) { return (v*i) + ((v*f)>>F); }$/;"	f	class:q	typeref:typename:int16_t
operator *	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    int32_t operator*(int32_t v) { return (v*i) + ((v*f)>>F); }$/;"	f	class:q	typeref:typename:int32_t
operator *	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    uint16_t operator*(uint16_t v) { return (v*i) + ((v*f)>>F); }$/;"	f	class:q	typeref:typename:uint16_t
operator *	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    uint32_t operator*(uint32_t v) { return (v*i) + ((v*f)>>F); }$/;"	f	class:q	typeref:typename:uint32_t
operator *	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^template<class T, int F, int I> static int operator*(int v, q<T,F,I> & q) { return q * v; }$/;"	f	typeref:typename:int
operator *	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^template<class T, int F, int I> static int16_t operator*(int16_t v, q<T,F,I> & q) { return q * v/;"	f	typeref:typename:int16_t
operator *	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^template<class T, int F, int I> static int32_t operator*(int32_t v, q<T,F,I> & q) { return q * v/;"	f	typeref:typename:int32_t
operator *	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^template<class T, int F, int I> static uint16_t operator*(uint16_t v, q<T,F,I> & q) { return q */;"	f	typeref:typename:uint16_t
operator *	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^template<class T, int F, int I> static uint32_t operator*(uint32_t v, q<T,F,I> & q) { return q */;"	f	typeref:typename:uint32_t
operator *	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^        __attribute__((always_inline)) inline PIXEL_TYPE& operator*() const { return *leds; }  \//;"	f	class:CPixelView::pixelset_iterator_base	typeref:typename:PIXEL_TYPE &
operator *	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline CRGB operator*( const CRGB& p1, uint8_t d)$/;"	f	typeref:typename:CRGB
operator *=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator*=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixe/;"	f	class:CPixelView	typeref:typename:CPixelView &
operator *=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator*= (uint8_t d )$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator +	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^inline CRGB *operator+(const CRGBSet & pixels, int offset) { return (CRGB*)pixels + offset; }$/;"	f	typeref:typename:CRGB *
operator +	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline CRGB operator+( const CRGB& p1, const CRGB& p2)$/;"	f	typeref:typename:CRGB
operator ++	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonArrayConstIterator& operator++() {$/;"	f	class:JsonArrayConstIterator	typeref:typename:JsonArrayConstIterator &
operator ++	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonArrayIterator& operator++() {$/;"	f	class:JsonArrayIterator	typeref:typename:JsonArrayIterator &
operator ++	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonObjectConstIterator& operator++() {$/;"	f	class:JsonObjectConstIterator	typeref:typename:JsonObjectConstIterator &
operator ++	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonObjectIterator& operator++() {$/;"	f	class:JsonObjectIterator	typeref:typename:JsonObjectIterator &
operator ++	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^        __attribute__((always_inline)) inline pixelset_iterator_base operator++(int) { pixelset_/;"	f	class:CPixelView::pixelset_iterator_base	typeref:typename:pixelset_iterator_base
operator ++	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^        __attribute__((always_inline)) inline pixelset_iterator_base& operator++() { leds += dir/;"	f	class:CPixelView::pixelset_iterator_base	typeref:typename:pixelset_iterator_base &
operator ++	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator++() { for(iterator pixel = begin(), _end = end(); pixel != _end/;"	f	class:CPixelView	typeref:typename:CPixelView &
operator ++	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator++(int DUMMY_ARG) { for(iterator pixel = begin(), _end = end(); /;"	f	class:CPixelView	typeref:typename:CPixelView &
operator ++	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB operator++ (int )  __attribute__((always_inline))$/;"	f	struct:CRGB	typeref:typename:CRGB
operator ++	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator++ ()  __attribute__((always_inline))$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator +=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonArrayConstIterator& operator+=(size_t distance) {$/;"	f	class:JsonArrayConstIterator	typeref:typename:JsonArrayConstIterator &
operator +=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonArrayIterator& operator+=(size_t distance) {$/;"	f	class:JsonArrayIterator	typeref:typename:JsonArrayIterator &
operator +=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonObjectConstIterator& operator+=(size_t distance) {$/;"	f	class:JsonObjectConstIterator	typeref:typename:JsonObjectConstIterator &
operator +=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonObjectIterator& operator+=(size_t distance) {$/;"	f	class:JsonObjectIterator	typeref:typename:JsonObjectIterator &
operator +=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator+=(CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = /;"	f	class:CPixelView	typeref:typename:CPixelView &
operator +=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator+= (const CRGB& rhs )$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator -	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView operator-() { return CPixelView(leds, len - dir, 0); }$/;"	f	class:CPixelView	typeref:typename:CPixelView
operator -	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB operator- () const$/;"	f	struct:CRGB	typeref:typename:CRGB
operator -	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline CRGB operator-( const CRGB& p1, const CRGB& p2)$/;"	f	typeref:typename:CRGB
operator --	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator--() { for(iterator pixel = begin(), _end = end(); pixel != _end/;"	f	class:CPixelView	typeref:typename:CPixelView &
operator --	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator--(int DUMMY_ARG) { for(iterator pixel = begin(), _end = end(); /;"	f	class:CPixelView	typeref:typename:CPixelView &
operator --	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB operator-- (int )  __attribute__((always_inline))$/;"	f	struct:CRGB	typeref:typename:CRGB
operator --	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator-- ()  __attribute__((always_inline))$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator -=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator-=(CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = /;"	f	class:CPixelView	typeref:typename:CPixelView &
operator -=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator-= (const CRGB& rhs )$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator ->	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonVariant* operator->() {$/;"	f	class:VariantPtr	typeref:typename:JsonVariant *
operator ->	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonVariantConst* operator->() {$/;"	f	class:VariantConstPtr	typeref:typename:JsonVariantConst *
operator ->	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  VariantConstPtr operator->() {$/;"	f	class:JsonArrayConstIterator	typeref:typename:VariantConstPtr
operator ->	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  VariantPtr operator->() {$/;"	f	class:JsonArrayIterator	typeref:typename:VariantPtr
operator ->	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonPairConstPtr operator->() {$/;"	f	class:JsonObjectConstIterator	typeref:typename:JsonPairConstPtr
operator ->	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonPairPtr operator->() {$/;"	f	class:JsonObjectIterator	typeref:typename:JsonPairPtr
operator ->	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  const JsonPair* operator->() const {$/;"	f	class:JsonPairPtr	typeref:typename:const JsonPair *
operator ->	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  const JsonPairConst* operator->() const {$/;"	f	class:JsonPairConstPtr	typeref:typename:const JsonPairConst *
operator /	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline CRGB operator\/( const CRGB& p1, uint8_t d)$/;"	f	typeref:typename:CRGB
operator /=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator\/=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pix/;"	f	class:CPixelView	typeref:typename:CPixelView &
operator /=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator\/= (uint8_t d )$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator <	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^      operator<(TVariant lhs, const T& rhs) {$/;"	f	typeref:typename:enable_if<!is_base_of<VariantOperatorTag,T>::value,bool>::type
operator <	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator<(T* lhs, TVariant rhs) {$/;"	f	typeref:typename:bool
operator <	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator<(TVariant lhs, T* rhs) {$/;"	f	typeref:typename:bool
operator <	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator<(const T& lhs, TVariant rhs) {$/;"	f	typeref:typename:bool
operator <	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline __attribute__((always_inline)) bool operator< (const CRGB& lhs, const CRGB& rhs)$/;"	f	typeref:typename:bool
operator <<	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^inline std::ostream& operator<<(std::ostream& s, DeserializationError::Code c) {$/;"	f	typeref:typename:std::ostream &
operator <<	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^inline std::ostream& operator<<(std::ostream& s,$/;"	f	typeref:typename:std::ostream &
operator <<	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^operator<<(std::ostream& os, const T& source) {$/;"	f	typeref:typename:detail::enable_if<detail::is_convertible<T,JsonVariantConst>::value,std::ostream &>::type
operator <<	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  friend std::ostream& operator<<(std::ostream& lhs, const JsonString& rhs) {$/;"	f	typeref:typename:std::ostream &
operator <=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^      operator<=(TVariant lhs, const T& rhs) {$/;"	f	typeref:typename:enable_if<!is_base_of<VariantOperatorTag,T>::value,bool>::type
operator <=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator<=(T* lhs, TVariant rhs) {$/;"	f	typeref:typename:bool
operator <=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator<=(TVariant lhs, T* rhs) {$/;"	f	typeref:typename:bool
operator <=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator<=(const T& lhs, TVariant rhs) {$/;"	f	typeref:typename:bool
operator <=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline __attribute__((always_inline)) bool operator<= (const CRGB& lhs, const CRGB& rhs)$/;"	f	typeref:typename:bool
operator =	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp	/^  FORCE_INLINE ElementProxy& operator=(T* src) {$/;"	f	class:ElementProxy	typeref:typename:FORCE_INLINE ElementProxy &
operator =	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp	/^  FORCE_INLINE ElementProxy& operator=(const ElementProxy& src) {$/;"	f	class:ElementProxy	typeref:typename:FORCE_INLINE ElementProxy &
operator =	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp	/^  FORCE_INLINE ElementProxy& operator=(const T& src) {$/;"	f	class:ElementProxy	typeref:typename:FORCE_INLINE ElementProxy &
operator =	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  BasicJsonDocument& operator=(BasicJsonDocument&& src) {$/;"	f	class:BasicJsonDocument	typeref:typename:BasicJsonDocument &
operator =	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  BasicJsonDocument& operator=(const BasicJsonDocument& src) {$/;"	f	class:BasicJsonDocument	typeref:typename:BasicJsonDocument &
operator =	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  BasicJsonDocument& operator=(const T& src) {$/;"	f	class:BasicJsonDocument	typeref:typename:BasicJsonDocument &
operator =	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp	/^  StaticJsonDocument& operator=(const StaticJsonDocument& src) {$/;"	f	class:StaticJsonDocument	typeref:typename:StaticJsonDocument &
operator =	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp	/^  StaticJsonDocument& operator=(const T& src) {$/;"	f	class:StaticJsonDocument	typeref:typename:StaticJsonDocument &
operator =	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp	/^  FORCE_INLINE MemberProxy& operator=(T* src) {$/;"	f	class:MemberProxy	typeref:typename:FORCE_INLINE MemberProxy &
operator =	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp	/^  FORCE_INLINE MemberProxy& operator=(const MemberProxy& src) {$/;"	f	class:MemberProxy	typeref:typename:FORCE_INLINE MemberProxy &
operator =	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp	/^  FORCE_INLINE MemberProxy& operator=(const T& src) {$/;"	f	class:MemberProxy	typeref:typename:FORCE_INLINE MemberProxy &
operator =	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  void operator=(const VariantData& src) {$/;"	f	class:VariantData	typeref:typename:void
operator =	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  ScoreCard * operator =(ScoreCard *tscore )$/;"	f	struct:ScoreCard	typeref:typename:ScoreCard *
operator =	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  void operator=(Func f) {$/;"	f	struct:fabgl::Delegate	typeref:typename:void
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette16& operator=( const CHSVPalette16& rhs)$/;"	f	class:CHSVPalette16	typeref:typename:CHSVPalette16 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette16& operator=( const TProgmemHSVPalette16& rhs)$/;"	f	class:CHSVPalette16	typeref:typename:CHSVPalette16 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette256& operator=( const CHSVPalette16& rhs16)$/;"	f	class:CHSVPalette256	typeref:typename:CHSVPalette256 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette256& operator=( const CHSVPalette256& rhs)$/;"	f	class:CHSVPalette256	typeref:typename:CHSVPalette256 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette256& operator=( const TProgmemRGBPalette16& rhs)$/;"	f	class:CHSVPalette256	typeref:typename:CHSVPalette256 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette32& operator=( const CHSVPalette32& rhs)$/;"	f	class:CHSVPalette32	typeref:typename:CHSVPalette32 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CHSVPalette32& operator=( const TProgmemHSVPalette32& rhs)$/;"	f	class:CHSVPalette32	typeref:typename:CHSVPalette32 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )$/;"	f	class:CRGBPalette16	typeref:typename:CRGBPalette16 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16& operator=( const CHSV rhs[16])$/;"	f	class:CRGBPalette16	typeref:typename:CRGBPalette16 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16& operator=( const CHSVPalette16& rhs)$/;"	f	class:CRGBPalette16	typeref:typename:CRGBPalette16 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16& operator=( const CRGB rhs[16])$/;"	f	class:CRGBPalette16	typeref:typename:CRGBPalette16 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16& operator=( const CRGBPalette16& rhs)$/;"	f	class:CRGBPalette16	typeref:typename:CRGBPalette16 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette16& operator=( const TProgmemRGBPalette16& rhs)$/;"	f	class:CRGBPalette16	typeref:typename:CRGBPalette16 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256& operator=( TProgmemRGBGradientPalette_bytes progpal )$/;"	f	class:CRGBPalette256	typeref:typename:CRGBPalette256 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256& operator=( const CHSV rhs[256])$/;"	f	class:CRGBPalette256	typeref:typename:CRGBPalette256 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256& operator=( const CHSVPalette256& rhs)$/;"	f	class:CRGBPalette256	typeref:typename:CRGBPalette256 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256& operator=( const CRGB rhs[256])$/;"	f	class:CRGBPalette256	typeref:typename:CRGBPalette256 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256& operator=( const CRGBPalette16& rhs16)$/;"	f	class:CRGBPalette256	typeref:typename:CRGBPalette256 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256& operator=( const CRGBPalette256& rhs)$/;"	f	class:CRGBPalette256	typeref:typename:CRGBPalette256 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette256& operator=( const TProgmemRGBPalette16& rhs)$/;"	f	class:CRGBPalette256	typeref:typename:CRGBPalette256 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32& operator=( TProgmemRGBGradientPalette_bytes progpal )$/;"	f	class:CRGBPalette32	typeref:typename:CRGBPalette32 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32& operator=( const CHSV rhs[32])$/;"	f	class:CRGBPalette32	typeref:typename:CRGBPalette32 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32& operator=( const CHSVPalette32& rhs)$/;"	f	class:CRGBPalette32	typeref:typename:CRGBPalette32 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32& operator=( const CRGB rhs[32])$/;"	f	class:CRGBPalette32	typeref:typename:CRGBPalette32 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32& operator=( const CRGBPalette16& rhs16)$/;"	f	class:CRGBPalette32	typeref:typename:CRGBPalette32 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32& operator=( const CRGBPalette32& rhs)$/;"	f	class:CRGBPalette32	typeref:typename:CRGBPalette32 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32& operator=( const TProgmemRGBPalette16& rhs)$/;"	f	class:CRGBPalette32	typeref:typename:CRGBPalette32 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    CRGBPalette32& operator=( const TProgmemRGBPalette32& rhs)$/;"	f	class:CRGBPalette32	typeref:typename:CRGBPalette32 &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator=(const CPixelView & rhs) {$/;"	f	class:CPixelView	typeref:typename:CPixelView &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator=(const PIXEL_TYPE & color) {$/;"	f	class:CPixelView	typeref:typename:CPixelView &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator =	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator =	examples/test/lib/JFixLib/src/JModes.h	/^    JMsgArguments& operator=(bool isActive) {$/;"	f	class:JMsgArguments	typeref:typename:JMsgArguments &
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE bool operator==(JsonArray rhs) const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  FORCE_INLINE bool operator==(JsonArrayConst rhs) const {$/;"	f	class:JsonArrayConst	typeref:typename:FORCE_INLINE bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  bool operator==(const JsonArrayConstIterator& other) const {$/;"	f	class:JsonArrayConstIterator	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  bool operator==(const JsonArrayIterator& other) const {$/;"	f	class:JsonArrayIterator	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  friend bool operator==(Code lhs, const DeserializationError& rhs) {$/;"	f	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  friend bool operator==(const DeserializationError& lhs, Code rhs) {$/;"	f	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  friend bool operator==(const DeserializationError& lhs,$/;"	f	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE bool operator==(JsonObject rhs) const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  FORCE_INLINE bool operator==(JsonObjectConst rhs) const {$/;"	f	class:JsonObjectConst	typeref:typename:FORCE_INLINE bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  bool operator==(const JsonObjectConstIterator& other) const {$/;"	f	class:JsonObjectConstIterator	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  bool operator==(const JsonObjectIterator& other) const {$/;"	f	class:JsonObjectIterator	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  friend bool operator==(JsonString lhs, JsonString rhs) {$/;"	f	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^      operator==(TVariant lhs, const T& rhs) {$/;"	f	typeref:typename:enable_if<!is_base_of<VariantOperatorTag,T>::value,bool>::type
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator==(T* lhs, TVariant rhs) {$/;"	f	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator==(TVariant lhs, T* rhs) {$/;"	f	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator==(const T& lhs, TVariant rhs) {$/;"	f	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline bool operator==(RGB222 const& lhs, RGB222 const& rhs)$/;"	f	namespace:fabgl	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^inline bool operator==(RGB888 const& lhs, RGB888 const& rhs)$/;"	f	namespace:fabgl	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool operator==(Point const & r) { return X == r.X && Y == r.Y; }$/;"	f	struct:fabgl::Point	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool operator==(Rect const & r)                { return X1 == r.X1 && Y1 == r.Y1 && X2 == r.X2/;"	f	struct:fabgl::Rect	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  bool operator==(Size const & r) { return width == r.width && height == r.height; }$/;"	f	struct:fabgl::Size	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    bool operator==( const CHSVPalette16 &rhs) const$/;"	f	class:CHSVPalette16	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    bool operator==( const CHSVPalette256 &rhs) const$/;"	f	class:CHSVPalette256	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    bool operator==( const CHSVPalette32 &rhs) const$/;"	f	class:CHSVPalette32	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    bool operator==( const CRGBPalette16 &rhs) const$/;"	f	class:CRGBPalette16	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    bool operator==( const CRGBPalette256 &rhs) const$/;"	f	class:CRGBPalette256	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    bool operator==( const CRGBPalette32 &rhs) const$/;"	f	class:CRGBPalette32	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^        __attribute__((always_inline)) inline bool operator==(pixelset_iterator_base & other) co/;"	f	class:CPixelView::pixelset_iterator_base	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    bool operator==(const CPixelView & rhs) const { return leds == rhs.leds && len == rhs.len &&/;"	f	class:CPixelView	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline __attribute__((always_inline)) bool operator== (const CHSV& lhs, const CHSV& rhs)$/;"	f	typeref:typename:bool
operator ==	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline __attribute__((always_inline)) bool operator== (const CRGB& lhs, const CRGB& rhs)$/;"	f	typeref:typename:bool
operator >	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^      operator>(TVariant lhs, const T& rhs) {$/;"	f	typeref:typename:enable_if<!is_base_of<VariantOperatorTag,T>::value,bool>::type
operator >	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator>(T* lhs, TVariant rhs) {$/;"	f	typeref:typename:bool
operator >	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator>(TVariant lhs, T* rhs) {$/;"	f	typeref:typename:bool
operator >	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator>(const T& lhs, TVariant rhs) {$/;"	f	typeref:typename:bool
operator >	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline __attribute__((always_inline)) bool operator> (const CRGB& lhs, const CRGB& rhs)$/;"	f	typeref:typename:bool
operator >=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^      operator>=(TVariant lhs, const T& rhs) {$/;"	f	typeref:typename:enable_if<!is_base_of<VariantOperatorTag,T>::value,bool>::type
operator >=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator>=(T* lhs, TVariant rhs) {$/;"	f	typeref:typename:bool
operator >=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator>=(TVariant lhs, T* rhs) {$/;"	f	typeref:typename:bool
operator >=	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend bool operator>=(const T& lhs, TVariant rhs) {$/;"	f	typeref:typename:bool
operator >=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline __attribute__((always_inline)) bool operator>= (const CRGB& lhs, const CRGB& rhs)$/;"	f	typeref:typename:bool
operator >>=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator>>=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pix/;"	f	class:CPixelView	typeref:typename:CPixelView &
operator >>=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator>>= (uint8_t d)$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator CHSV*	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    operator CHSV*()$/;"	f	class:CHSVPalette16
operator CHSV*	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    operator CHSV*()$/;"	f	class:CHSVPalette256
operator CHSV*	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    operator CHSV*()$/;"	f	class:CHSVPalette32
operator CRGB*	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    operator CRGB*()$/;"	f	class:CRGBPalette16
operator CRGB*	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    operator CRGB*()$/;"	f	class:CRGBPalette256
operator CRGB*	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    operator CRGB*()$/;"	f	class:CRGBPalette32
operator JsonArrayConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  operator JsonArrayConst() const {$/;"	f	class:JsonArray
operator JsonObjectConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  operator JsonObjectConst() const {$/;"	f	class:JsonObject
operator JsonVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  operator JsonVariant() {$/;"	f	class:JsonArray
operator JsonVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  FORCE_INLINE operator JsonVariant() {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE
operator JsonVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  operator JsonVariant() const {$/;"	f	class:JsonObject
operator JsonVariantConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  operator JsonVariantConst() const {$/;"	f	class:JsonArray
operator JsonVariantConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  operator JsonVariantConst() const {$/;"	f	class:JsonArrayConst
operator JsonVariantConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  FORCE_INLINE operator JsonVariantConst() const {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE
operator JsonVariantConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  operator JsonVariantConst() const {$/;"	f	class:JsonObject
operator JsonVariantConst	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  operator JsonVariantConst() const {$/;"	f	class:JsonObjectConst
operator PIXEL_TYPE*	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline operator PIXEL_TYPE* () const { return leds; }$/;"	f	class:CPixelView
operator T	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^  operator T() const {$/;"	f	class:SerializedValue
operator T	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  FORCE_INLINE operator T() const {$/;"	f	class:JsonVariantConst	typeref:typename:FORCE_INLINE
operator T	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE operator T() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE
operator TChar*	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^  operator TChar*() const {$/;"	f	class:SerializedValue
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE detail::ElementProxy<JsonArray> operator[](size_t index) const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE detail::ElementProxy<JsonArray>
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  FORCE_INLINE JsonVariantConst operator[](size_t index) const {$/;"	f	class:JsonArrayConst	typeref:typename:FORCE_INLINE JsonVariantConst
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayImpl.hpp	/^inline ElementProxy<TDerived> VariantRefBase<TDerived>::operator[]($/;"	f	class:VariantRefBase	typeref:typename:ElementProxy<TDerived>
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^  AllowAllFilter operator[](const TKey&) const {$/;"	f	struct:detail::AllowAllFilter	typeref:typename:AllowAllFilter
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^  Filter operator[](const TKey& key) const {$/;"	f	class:DeserializationOption::Filter	typeref:typename:Filter
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  FORCE_INLINE JsonVariantConst operator[](size_t index) const {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE JsonVariantConst
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  FORCE_INLINE detail::ElementProxy<JsonDocument&> operator[](size_t index) {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE detail::ElementProxy<JsonDocument &>
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  operator[](TChar* key) const {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TChar * >::value,JsonVariantConst>::type
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  operator[](TChar* key) {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TChar * >::value,detail::MemberProxy<JsonDocument &,TChar * >>::type
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  operator[](const TString& key) const {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TString>::value,JsonVariantConst>::type
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  operator[](const TString& key) {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TString>::value,detail::MemberProxy<JsonDocument &,TString>>::type
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^      operator[](TChar* key) const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TChar * >::value,detail::MemberProxy<JsonObject,TChar * >>::type
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^      operator[](const TString& key) const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TString>::value,detail::MemberProxy<JsonObject,TString>>::type
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  operator[](TChar* key) const {$/;"	f	class:JsonObjectConst	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TChar * >::value,JsonVariantConst>::type
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  operator[](const TString& key) const {$/;"	f	class:JsonObjectConst	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TString>::value,JsonVariantConst>::type
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectImpl.hpp	/^VariantRefBase<TDerived>::operator[](TString* key) const {$/;"	f	class:VariantRefBase	typeref:typename:enable_if<IsString<TString * >::value,MemberProxy<TDerived,TString * >>::type
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectImpl.hpp	/^VariantRefBase<TDerived>::operator[](const TString& key) const {$/;"	f	class:VariantRefBase	typeref:typename:enable_if<IsString<TString>::value,MemberProxy<TDerived,TString>>::type
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace_generic.hpp	/^  T operator[](intptr_t index) const {$/;"	f	class:pgm_ptr	typeref:typename:T
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  char operator[](size_t i) const {$/;"	f	class:FlashString	typeref:typename:char
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  char operator[](size_t i) const {$/;"	f	class:SizedRamString	typeref:typename:char
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  char operator[](size_t i) const {$/;"	f	class:ZeroTerminatedRamString	typeref:typename:char
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  FORCE_INLINE JsonVariantConst operator[](size_t index) const {$/;"	f	class:JsonVariantConst	typeref:typename:FORCE_INLINE JsonVariantConst
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  operator[](TChar* key) const {$/;"	f	class:JsonVariantConst	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TChar * >::value,JsonVariantConst>::type
operator []	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  operator[](const TString& key) const {$/;"	f	class:JsonVariantConst	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TString>::value,JsonVariantConst>::type
operator []	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^CLEDController & CFastLED::operator[](int x) {$/;"	f	class:CFastLED	typeref:typename:CLEDController &
operator []	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CRGB &operator[](int x) { return m_Data[x]; }$/;"	f	class:CLEDController	typeref:typename:CRGB &
operator []	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline PIXEL_TYPE & operator[](int x) const { if(dir & 0x80) { return leds[-x]; } else { ret/;"	f	class:CPixelView	typeref:typename:PIXEL_TYPE &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline CHSV& operator[] (int x) __attribute__((always_inline))$/;"	f	class:CHSVPalette16	typeref:typename:CHSV &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline CHSV& operator[] (int x) __attribute__((always_inline))$/;"	f	class:CHSVPalette256	typeref:typename:CHSV &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline CHSV& operator[] (int x) __attribute__((always_inline))$/;"	f	class:CHSVPalette32	typeref:typename:CHSV &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline CHSV& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	class:CHSVPalette16	typeref:typename:CHSV &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline CHSV& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	class:CHSVPalette256	typeref:typename:CHSV &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline CHSV& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	class:CHSVPalette32	typeref:typename:CHSV &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline CRGB& operator[] (int x) __attribute__((always_inline))$/;"	f	class:CRGBPalette16	typeref:typename:CRGB &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline CRGB& operator[] (int x) __attribute__((always_inline))$/;"	f	class:CRGBPalette256	typeref:typename:CRGB &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline CRGB& operator[] (int x) __attribute__((always_inline))$/;"	f	class:CRGBPalette32	typeref:typename:CRGB &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline CRGB& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	class:CRGBPalette16	typeref:typename:CRGB &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline CRGB& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	class:CRGBPalette256	typeref:typename:CRGB &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline CRGB& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	class:CRGBPalette32	typeref:typename:CRGB &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline const CHSV& operator[] (int x) const __attribute__((always_inline))$/;"	f	class:CHSVPalette16	typeref:typename:const CHSV &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline const CHSV& operator[] (int x) const __attribute__((always_inline))$/;"	f	class:CHSVPalette256	typeref:typename:const CHSV &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline const CHSV& operator[] (int x) const __attribute__((always_inline))$/;"	f	class:CHSVPalette32	typeref:typename:const CHSV &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline const CHSV& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	class:CHSVPalette16	typeref:typename:const CHSV &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline const CHSV& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	class:CHSVPalette256	typeref:typename:const CHSV &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline const CHSV& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	class:CHSVPalette32	typeref:typename:const CHSV &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline const CRGB& operator[] (int x) const __attribute__((always_inline))$/;"	f	class:CRGBPalette16	typeref:typename:const CRGB &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline const CRGB& operator[] (int x) const __attribute__((always_inline))$/;"	f	class:CRGBPalette256	typeref:typename:const CRGB &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline const CRGB& operator[] (int x) const __attribute__((always_inline))$/;"	f	class:CRGBPalette32	typeref:typename:const CRGB &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline const CRGB& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	class:CRGBPalette16	typeref:typename:const CRGB &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline const CRGB& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	class:CRGBPalette256	typeref:typename:const CRGB &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^    inline const CRGB& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	class:CRGBPalette32	typeref:typename:const CRGB &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline const uint8_t& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	struct:CHSV	typeref:typename:const uint8_t &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline const uint8_t& operator[] (uint8_t x) const __attribute__((always_inline))$/;"	f	struct:CRGB	typeref:typename:const uint8_t &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline uint8_t& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	struct:CHSV	typeref:typename:uint8_t &
operator [] 	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline uint8_t& operator[] (uint8_t x) __attribute__((always_inline))$/;"	f	struct:CRGB	typeref:typename:uint8_t &
operator bool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE operator bool() const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE
operator bool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  FORCE_INLINE operator bool() const {$/;"	f	class:JsonArrayConst	typeref:typename:FORCE_INLINE
operator bool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp	/^  explicit operator bool() const {$/;"	f	class:DeserializationError
operator bool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE operator bool() const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE
operator bool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  FORCE_INLINE operator bool() const {$/;"	f	class:JsonObjectConst	typeref:typename:FORCE_INLINE
operator bool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  explicit operator bool() const {$/;"	f	class:JsonString
operator bool	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    operator bool() { return ready(); }$/;"	f	class:CEveryNTime
operator bool	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    operator bool() { return ready(); }$/;"	f	class:CEveryNTimePeriods
operator bool	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline operator bool() { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel)/;"	f	class:CPixelView
operator bool	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline explicit operator bool() const __attribute__((always_inline))$/;"	f	struct:CRGB
operator new	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  void* operator new(size_t, void* p) {$/;"	f	class:MemoryPool	typeref:typename:void *
operator rgb24	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    operator rgb24() const {$/;"	f	struct:CRGB
operator uint32_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline explicit operator uint32_t() const$/;"	f	struct:CRGB
operator |	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^      operator|(const TVariant& variant, const T& defaultValue) {$/;"	f	typeref:typename:enable_if<!IsVariant<T>::value &&!is_array<T>::value,T>::type
operator |	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  friend const char* operator|(const TVariant& variant,$/;"	f	typeref:typename:const char *
operator |	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantOperators.hpp	/^  operator|(const TVariant& variant, T defaultValue) {$/;"	f	typeref:typename:enable_if<IsVariant<T>::value,JsonVariantConst>::type
operator |	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^inline CRGB operator|( const CRGB& p1, const CRGB& p2)$/;"	f	typeref:typename:CRGB
operator |=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator|=(const CPixelView & rhs) { for(iterator pixel = begin(), rhspi/;"	f	class:CPixelView	typeref:typename:CPixelView &
operator |=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator|=(const PIXEL_TYPE & rhs) { for(iterator pixel = begin(), _end /;"	f	class:CPixelView	typeref:typename:CPixelView &
operator |=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & operator|=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixe/;"	f	class:CPixelView	typeref:typename:CPixelView &
operator |=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator|= (const CRGB& rhs )$/;"	f	struct:CRGB	typeref:typename:CRGB &
operator |=	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& operator|= (uint8_t d )$/;"	f	struct:CRGB	typeref:typename:CRGB &
opix	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^opix = im.load()$/;"	v
optcodes	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t optcodes[] = {$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
options	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^    options = 0$/;"	v
options	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^options = 1$/;"	v
orc	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t orc;$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
org	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^org  100h        ; BIOS loads at offset 0x0100$/;"	l
origin	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Point        origin;$/;"	m	struct:fabgl::PaintState	typeref:typename:Point
originMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool                    originMode;$/;"	m	struct:fabgl::TerminalCursorState	typeref:typename:bool
originMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         originMode;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
os_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStreamWriter.hpp	/^  std::ostream* os_;$/;"	m	class:Writer	typeref:typename:std::ostream *
otaMode	examples/test/lib/JFixLib/src/JOtaServer.h	/^  Mode otaMode = IDLE;$/;"	m	class:JOtaServer	typeref:typename:Mode
otastatus	examples/test/lib/JFixLib/src/JOtaServer.h	/^  HttpsOTAStatus_t otastatus;$/;"	m	class:JOtaServer	typeref:typename:HttpsOTAStatus_t
out	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  out    dx, al$/;"	d
out	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  out   dx, al    ; Set CGA to hires text, video enabled$/;"	d
out	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  out   dx, al$/;"	d
out	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  out  dx, al    ; Write LSB$/;"	d
out	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  out  dx, al    ; Write MSB$/;"	d
out	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  out  dx, al$/;"	d
out	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^    bool    out;          \/\/ out state$/;"	m	struct:fabgl::PIT8253::TimerInfo	typeref:typename:bool
outSelected	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              outSelected;$/;"	m	struct:fabgl::SelectForm	typeref:typename:int
out_file	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^    out_file = args[pidx + 1]$/;"	v
out_file	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^out_file = os.path.splitext(input_file)[0] + str(font_size) + ".h"$/;"	v
outext	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^      outext = ".h"$/;"	v
outext	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^outext = ".fd"$/;"	v
outfile	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^  outfile = os.path.splitext(os.path.basename(infile))[0] + outext$/;"	v
outfile	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^outfile = None$/;"	v
outhex	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^def outhex(v):$/;"	f
outmode	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^    outmode = 0$/;"	v
outmode	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^    outmode = 1$/;"	v
outmode	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^outmode = 0  # C++$/;"	v
outs	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^    outs = outs + "\\n"$/;"	v
outs	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^    outs = outs + "\\t"$/;"	v
outs	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  outs = outs + "Bitmap {} = Bitmap({}, {}, &{}_data[0], {});".format(name, im.width, im.height,/;"	v
outs	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  outs = outs + "Data:\\n"$/;"	v
outs	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  outs = outs + "Size: {} x {}\\n".format(im.width, im.height)$/;"	v
outs	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  outs = outs + "const uint8_t {}_data[] = {{\\n".format(name)$/;"	v
outs	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  outs = outs + "};\\n"$/;"	v
outs	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^outs = ""$/;"	v
overflowError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool overflowError() { auto r = m_overflowError; m_overflowError = false; return r; }$/;"	f	class:fabgl::SerialPort	typeref:typename:bool
overflowX	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  uint8_t      overflowX : 1;      \/**< Contains 1 when horizontal overflow has been detected. /;"	m	struct:fabgl::MouseDelta	typeref:typename:uint8_t:1
overflowY	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  uint8_t      overflowY : 1;      \/**< Contains 1 when vertical overflow has been detected. *\/$/;"	m	struct:fabgl::MouseDelta	typeref:typename:uint8_t:1
overflowed	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  bool overflowed() const {$/;"	f	class:JsonDocument	typeref:typename:bool
overflowed	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  bool overflowed() const {$/;"	f	class:MemoryPool	typeref:typename:bool
overflowed	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  bool overflowed() const {$/;"	f	class:detail::MemoryPoolPrint	typeref:typename:bool
overflowed_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  bool overflowed_;$/;"	m	class:MemoryPool	typeref:typename:bool
owner	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  QuadTree *       owner;$/;"	m	struct:fabgl::QuadTreeObject	typeref:typename:QuadTree *
ownership_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  Ownership ownership_;$/;"	m	class:JsonString	typeref:typename:Ownership
owns	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  bool owns(void* p) const {$/;"	f	class:MemoryPool	typeref:typename:bool
ownsKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  bool ownsKey() const {$/;"	f	class:VariantSlot	typeref:typename:bool
p	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StaticStringWriter.hpp	/^  char* p;$/;"	m	class:StaticStringWriter	typeref:typename:char *
p	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^FL_PROGMEM static uint8_t const p[] = {$/;"	v	typeref:typename:FASTLED_NAMESPACE_BEGIN FL_PROGMEM uint8_t const[]	file:
pSmartMatrix	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^void *pSmartMatrix = NULL;$/;"	v	typeref:typename:FASTLED_NAMESPACE_BEGIN void *
packHVSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^uint8_t IRAM_ATTR VGABaseController::packHVSync(bool HSync, bool VSync)$/;"	f	class:fabgl::VGABaseController	typeref:typename:uint8_t IRAM_ATTR
packHVSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^uint8_t IRAM_ATTR VGATextController::packHVSync(bool HSync, bool VSync)$/;"	f	class:fabgl::VGATextController	typeref:typename:uint8_t IRAM_ATTR
packetAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^bool Mouse::packetAvailable()$/;"	f	class:fabgl::Mouse	typeref:typename:bool
pad	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^  uint8_t pad;$/;"	m	struct:M0ClocklessData	typeref:typename:uint8_t
page0Read	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  static int page0Read(void * context, int addr)               { return ((Machine*)context)->m_R/;"	f	class:Machine	typeref:typename:int
page0Write	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  static void page0Write(void * context, int addr, int value)  { ((Machine*)context)->m_RAM1K[ad/;"	f	class:Machine	typeref:typename:void
page1Read	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  static int page1Read(void * context, int addr)               { return ((Machine*)context)->m_R/;"	f	class:Machine	typeref:typename:int
page1Write	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  static void page1Write(void * context, int addr, int value)  { ((Machine*)context)->m_RAM1K[0x/;"	f	class:Machine	typeref:typename:void
paintBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestPaintBoxFrame.h	/^  uiPaintBox * paintBox;$/;"	m	struct:TestPaintBoxFrame	typeref:typename:uiPaintBox *
paintBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestTimerFrame.h	/^  uiPaintBox * paintBox;$/;"	m	struct:TestTimerFrame	typeref:typename:uiPaintBox *
paintBoxFrame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  TestPaintBoxFrame * paintBoxFrame;$/;"	m	class:MyApp	typeref:typename:TestPaintBoxFrame *
paintBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiPaintBoxStyle & paintBoxStyle() { return m_paintBoxStyle; }$/;"	f	class:fabgl::uiPaintBox	typeref:typename:uiPaintBoxStyle &
paintButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiButton::paintButton()$/;"	f	class:fabgl::uiButton	typeref:typename:void
paintButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomComboBox::paintButton()$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:void
paintButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiSplitButton::paintButton()$/;"	f	class:fabgl::uiSplitButton	typeref:typename:void
paintButtons	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiFrame::paintButtons(Rect const & bkgRect)$/;"	f	class:fabgl::uiFrame	typeref:typename:int
paintCheckBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCheckBox::paintCheckBox()$/;"	f	class:fabgl::uiCheckBox	typeref:typename:void
paintColorBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiColorBox::paintColorBox()$/;"	f	class:fabgl::uiColorBox	typeref:typename:void
paintContent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiButton::paintContent(Rect const & rect)$/;"	f	class:fabgl::uiButton	typeref:typename:void
paintContent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiTextEdit::paintContent()$/;"	f	class:fabgl::uiTextEdit	typeref:typename:void
paintFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFrame::paintFrame()$/;"	f	class:fabgl::uiFrame	typeref:typename:void
paintImage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiImage::paintImage()$/;"	f	class:fabgl::uiImage	typeref:typename:void
paintLabel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiLabel::paintLabel()$/;"	f	class:fabgl::uiLabel	typeref:typename:void
paintLabel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiStaticLabel::paintLabel()$/;"	f	class:fabgl::uiStaticLabel	typeref:typename:void
paintListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomListBox::paintListBox()$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:void
paintOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    PaintOptions           paintOptions;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:PaintOptions
paintOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  PaintOptions paintOptions;$/;"	m	struct:fabgl::PaintState	typeref:typename:PaintOptions
paintPaintBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiPaintBox::paintPaintBox()$/;"	f	class:fabgl::uiPaintBox	typeref:typename:void
paintPanel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiPanel::paintPanel()$/;"	f	class:fabgl::uiPanel	typeref:typename:void
paintProgressBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiProgressBar::paintProgressBar()$/;"	f	class:fabgl::uiProgressBar	typeref:typename:void
paintScrollableControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiScrollableControl::paintScrollableControl()$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:void
paintSlider	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiSlider::paintSlider()$/;"	f	class:fabgl::uiSlider	typeref:typename:void
paintState	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  PaintState & paintState() { return m_paintState; }$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:PaintState &
paintTextEdit	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiTextEdit::paintTextEdit()$/;"	f	class:fabgl::uiTextEdit	typeref:typename:void
paintWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::paintWindow()$/;"	f	class:fabgl::uiWindow	typeref:typename:void
pair_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonPair pair_;$/;"	m	class:JsonPairPtr	typeref:typename:JsonPair
pair_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  JsonPairConst pair_;$/;"	m	class:JsonPairConstPtr	typeref:typename:JsonPairConst
pal64	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  pal64 = []$/;"	v
pal64image	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  pal64image = Image.new('P', (16, 16))$/;"	v
panel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestModalDialog.h	/^  uiPanel * panel;$/;"	m	struct:TestModalDialog	typeref:typename:uiPanel *
panel	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiPanel *        panel;$/;"	m	struct:fabgl::InputForm	typeref:typename:uiPanel *
panelStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiPanelStyle & panelStyle() { return m_panelStyle; }$/;"	f	class:fabgl::uiPanel	typeref:typename:uiPanelStyle &
paragraph	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.properties	/^paragraph=ArduinoJson supports ✔ serialization, ✔ deserialization, ✔ MessagePack, ✔ fixe/;"	k
paragraph	examples/test/.pio/libdeps/esp32dev/FabGL/library.properties	/^paragraph=ESP32 VGA, PAL\/NTSC Color Composite, SSD1306 ILI9341 ST7789 Controller, PS\/2 Mouse a/;"	k
paragraph	examples/test/.pio/libdeps/esp32dev/FastLED/library.properties	/^paragraph=Multi-platform library for controlling dozens of different types of LEDs along with op/;"	k
params	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  CVBSParams const * params()                                 { return m_params; }$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:CVBSParams const *
params	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  CVBSParams const * params()                      { return m_CVBSGenerator.params(); }$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:CVBSParams const *
params	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  } params;$/;"	m	struct:fabgl::uiEvent	typeref:union:fabgl::uiEvent::uiEventParams
parent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * parent() { return m_parent; }$/;"	f	class:fabgl::uiWindow	typeref:typename:uiWindow *
parentFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiWindow * uiWindow::parentFrame()$/;"	f	class:fabgl::uiWindow	typeref:typename:uiWindow *
parity	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t parity[] = {   1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
parityComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiComboBox *      parityComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiComboBox *
parityError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static bool parityError(int PS2Port)        { return s_parityError[PS2Port]; }$/;"	f	class:fabgl::PS2Controller	typeref:typename:bool
parityError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::parityError()$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
parityError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool parityError()   { auto r = m_parityError; m_parityError = false; return r; }$/;"	f	class:fabgl::SerialPort	typeref:typename:bool
parity_flag	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    uint8_t parity_flag;$/;"	m	struct:fabgl::i8080::__anon81886eed0308	typeref:typename:uint8_t
parse	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError parse(VariantData& variant, TFilter filter,$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError
parse	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError parse(VariantData& variant, TFilter filter,$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError
parseArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code parseArray($/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
parseHex4	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code parseHex4(uint16_t& result) {$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
parseKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code parseKey() {$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
parseMsgs	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  void parseMsgs() {$/;"	f	class:JEspnowDevice	typeref:typename:void
parseMultiple	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  void parseMultiple(const uint8_t *data, const uint8_t data_len) {$/;"	f	class:JEspnowDevice	typeref:typename:void
parseNonQuotedString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code parseNonQuotedString() {$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
parseNumber	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/parseNumber.hpp	/^inline T parseNumber(const char* s) {$/;"	f	typeref:typename:T
parseNumber	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/parseNumber.hpp	/^inline bool parseNumber(const char* s, VariantData& result) {$/;"	f	typeref:typename:bool
parseNumericValue	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code parseNumericValue(VariantData& result) {$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
parseObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code parseObject($/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
parseOtaServerVariables	examples/test/lib/JFixLib/src/JOtaServer.h	/^  bool parseOtaServerVariables(const uint8_t *data, int data_len){$/;"	f	class:JOtaServer	typeref:typename:bool
parseParams	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::parseParams()$/;"	f	class:BDOS	typeref:typename:void
parseQuotedString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code parseQuotedString() {$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
parseStringValue	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code parseStringValue(VariantData& variant) {$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
parseVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code parseVariant($/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
parseVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code parseVariant($/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
password	examples/test/lib/JFixLib/src/JOtaServer.h	/^  char* password;$/;"	m	class:JOtaServer	typeref:typename:char *
passwordMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t passwordMode : 1;   \/**< If True the edit box shows '*' in place of actual characters/;"	m	struct:fabgl::uiTextEditProps	typeref:typename:uint8_t:1
passwordMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  bool             passwordMode;$/;"	m	struct:fabgl::TextInputForm	typeref:typename:bool
pasteButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiButton *      pasteButton;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:uiButton *
path	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^  char const *    path;$/;"	m	struct:Program	typeref:typename:char const *
path	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    Path                   path;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:Path
pc	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  int               i, r, pc, iff1, iff2, im;$/;"	m	struct:fabgl::Z80_STATE	typeref:typename:int
pc	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    reg_pair sp, pc;$/;"	m	struct:fabgl::i8080::Regs	typeref:typename:reg_pair
pc_interrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::pc_interrupt(uint8_t interrupt_num)$/;"	f	class:fabgl::i8086	typeref:typename:void
pda_2nd	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  pda_2nd:$/;"	l
peek	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int Terminal::peek()$/;"	f	class:fabgl::Terminal	typeref:typename:int
peekEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^bool uiApp::peekEvent(uiEvent * event, int timeOutMS)$/;"	f	class:fabgl::uiApp	typeref:typename:bool
pefon	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def pefon(fon, peoff):$/;"	f
penColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  RGB888       penColor;$/;"	m	struct:fabgl::PaintState	typeref:typename:RGB888
penWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t      penWidth;$/;"	m	struct:fabgl::PaintState	typeref:typename:int16_t
pen_16x16	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t pen_16x16[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
pendingInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^  bool pendingInterrupt()                               { return m_pendingInterrupt; }$/;"	f	class:fabgl::PIC8259	typeref:typename:bool
pendingInterruptNum	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.h	/^  int pendingInterruptNum()                             { return m_baseVector | m_pendingIR; }$/;"	f	class:fabgl::PIC8259	typeref:typename:int
performCursorDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::performCursorDown()$/;"	f	class:fabgl::LineEditor	typeref:typename:void
performCursorEnd	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::performCursorEnd()$/;"	f	class:fabgl::LineEditor	typeref:typename:void
performCursorHome	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::performCursorHome()$/;"	f	class:fabgl::LineEditor	typeref:typename:void
performCursorLeft	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::performCursorLeft()$/;"	f	class:fabgl::LineEditor	typeref:typename:void
performCursorRight	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::performCursorRight()$/;"	f	class:fabgl::LineEditor	typeref:typename:void
performCursorUp	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::performCursorUp()$/;"	f	class:fabgl::LineEditor	typeref:typename:void
performDeleteLeft	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::performDeleteLeft()$/;"	f	class:fabgl::LineEditor	typeref:typename:void
performDeleteRight	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::performDeleteRight()$/;"	f	class:fabgl::LineEditor	typeref:typename:void
performEOI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^void PIC8259::performEOI()$/;"	f	class:fabgl::PIC8259	typeref:typename:void
performReboot	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  void performReboot() {$/;"	f	struct:ConfDialogApp	typeref:typename:void
periodIntTimerFunc	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^void MC146818::periodIntTimerFunc(void * args)$/;"	f	class:fabgl::MC146818	typeref:typename:void
perm	examples/test/lib/JFixLib/src/ofNoise.h	/^unsigned char perm[512] = {151,160,137,91,90,15,$/;"	v	namespace:__anon8cc37bff0111	typeref:typename:unsigned char[512]
pgcd	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^   static int pgcd(int smallest,int precision,int a,int b,int c)$/;"	f	class:ClocklessController	typeref:typename:int
pgm_p	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp	/^  pgm_p(const void* p) : address(reinterpret_cast<const char*>(p)) {}$/;"	f	struct:pgm_p
pgm_p	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp	/^struct pgm_p {$/;"	s
pgm_ptr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace_generic.hpp	/^  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}$/;"	f	class:pgm_ptr
pgm_ptr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace_generic.hpp	/^class pgm_ptr {$/;"	c
pgm_read	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace_generic.hpp	/^inline const T* pgm_read(const T* const* p) {$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE const T *
pgm_read	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace_generic.hpp	/^inline double pgm_read(const double* p) {$/;"	f	typeref:typename:double
pgm_read	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace_generic.hpp	/^inline float pgm_read(const float* p) {$/;"	f	typeref:typename:float
pgm_read	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace_generic.hpp	/^inline uint32_t pgm_read(const uint32_t* p) {$/;"	f	typeref:typename:uint32_t
pgm_read_double	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp	/^inline double pgm_read_double(ArduinoJson::detail::pgm_p p) {$/;"	f	typeref:typename:double
pgm_read_dword	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp	/^inline uint32_t pgm_read_dword(ArduinoJson::detail::pgm_p p) {$/;"	f	typeref:typename:uint32_t
pgm_read_dword	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define pgm_read_dword(/;"	d
pgm_read_dword_near	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define pgm_read_dword_near(/;"	d
pgm_read_float	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp	/^inline float pgm_read_float(ArduinoJson::detail::pgm_p p) {$/;"	f	typeref:typename:float
pgm_read_ptr	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp	/^inline void* pgm_read_ptr(ArduinoJson::detail::pgm_p p) {$/;"	f	typeref:typename:void *
phase	examples/test/lib/JFixLib/src/Event/JOsc.h	/^  float phase;$/;"	m	class:JOsc	typeref:typename:float
phm	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint8_t   phm;  \/\/ Physical sector mask,  0 => 128-byte sectors 1 => 256-byte sectors  3 => /;"	m	struct:DiscParameterBlock	typeref:typename:uint8_t
pictureLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static int pictureLine()                                    { return s_scanLine; }$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:int
pidx	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^pidx = 2$/;"	v
pin	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^        typedef FastPin<DATA_PIN> pin;$/;"	t	function:ClocklessController::showRGBBlocking	typeref:typename:FastPin<DATA_PIN>
pinButtonA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  int pinButtonA = -1;$/;"	m	struct:GameControllerJoystick	typeref:typename:int
pinButtonA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  int pinButtonA = -1;$/;"	m	struct:GameControllerJoystick	typeref:typename:int
pinButtonB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  int pinButtonB = -1;$/;"	m	struct:GameControllerJoystick	typeref:typename:int
pinButtonB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  int pinButtonB = -1;$/;"	m	struct:GameControllerJoystick	typeref:typename:int
pinDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  int pinDown = -1;$/;"	m	struct:GameControllerJoystick	typeref:typename:int
pinDown	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  int pinDown = -1;$/;"	m	struct:GameControllerJoystick	typeref:typename:int
pinLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  int pinLeft = -1;$/;"	m	struct:GameControllerJoystick	typeref:typename:int
pinLeft	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  int pinLeft = -1;$/;"	m	struct:GameControllerJoystick	typeref:typename:int
pinRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  int pinRight = -1;$/;"	m	struct:GameControllerJoystick	typeref:typename:int
pinRight	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  int pinRight = -1;$/;"	m	struct:GameControllerJoystick	typeref:typename:int
pinUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  int pinUp = -1;$/;"	m	struct:GameControllerJoystick	typeref:typename:int
pinUp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  int pinUp = -1;$/;"	m	struct:GameControllerJoystick	typeref:typename:int
ping	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.cpp	/^int ICMP::ping(IPAddress const &dest)$/;"	f	class:fabgl::ICMP	typeref:typename:int
ping	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.cpp	/^int ICMP::ping(char const * host)$/;"	f	class:fabgl::ICMP	typeref:typename:int
pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	uint32_t pins[4];$/;"	m	struct:SPIState	typeref:typename:uint32_t[4]
pins	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	uint32_t pins[4];$/;"	m	struct:SPIState	typeref:typename:uint32_t[4]
pins	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  uint8_t* pins;$/;"	m	class:JFixtureDimmer	typeref:typename:uint8_t *
pins	examples/test/lib/JFixLib/src/JJonisk.h	/^    uint8_t* pins = nullptr;$/;"	m	class:JJoniskSettings	typeref:typename:uint8_t *
pins	examples/test/lib/JFixLib/src/JTlFix.h	/^    uint8_t* pins = nullptr;$/;"	m	class:JTlFixSettings	typeref:typename:uint8_t *
pio_clock_multiplier	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    float pio_clock_multiplier;$/;"	m	class:ClocklessController	typeref:typename:float
pio_instr	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/pio_asm.h	/^typedef uint16_t pio_instr;$/;"	t	typeref:typename:uint16_t
pix	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^pix = im.load()$/;"	v
pixelDesc	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    PixelDesc              pixelDesc;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:PixelDesc
pixelset_iterator_base	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^        __attribute__((always_inline)) inline pixelset_iterator_base(T * _leds, const char _dir)/;"	f	class:CPixelView::pixelset_iterator_base
pixelset_iterator_base	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^        __attribute__((always_inline)) inline pixelset_iterator_base(const pixelset_iterator_bas/;"	f	class:CPixelView::pixelset_iterator_base
pixelset_iterator_base	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    class pixelset_iterator_base {$/;"	c	class:CPixelView
platform	examples/test/platformio.ini	/^platform = espressif32$/;"	k	section:env:esp32dev
platforms	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^  "platforms": "*",$/;"	s
platforms	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "platforms": "espressif32",$/;"	s
platforms	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "platforms": "atmelavr, atmelsam, freescalekinetis, nordicnrf51, nxplpc, ststm32, teensy, es/;"	s
play	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^bool SoundGenerator::play(bool value)$/;"	f	class:fabgl::SoundGenerator	typeref:typename:bool
play	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.cpp	/^void GPIOStream::play(int freq, lldesc_t volatile * dmaBuffers)$/;"	f	class:fabgl::GPIOStream	typeref:typename:void
playSamples	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^SamplesGenerator * SoundGenerator::playSamples(int8_t const * data, int length, int volume, int /;"	f	class:fabgl::SoundGenerator	typeref:typename:SamplesGenerator *
playSound	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^void playSound( playsounddata ps )$/;"	f	typeref:typename:void
playSound	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^void playSound( playsounddata ps )$/;"	f	typeref:typename:void
playSound	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  void playSound(T const & waveform, int frequency, int durationMS, int volume = 100) {$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
playSoundOut	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^void playSoundOut()$/;"	f	typeref:typename:void
playSoundPic	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^void playSoundPic()$/;"	f	typeref:typename:void
playSoundPic	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^void playSoundPic()$/;"	f	typeref:typename:void
playSoundPong	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^void playSoundPong()$/;"	f	typeref:typename:void
playSoundPong	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^void playSoundPong()$/;"	f	typeref:typename:void
playSoundReset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^void playSoundReset()$/;"	f	typeref:typename:void
playSoundTuc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^void playSoundTuc()$/;"	f	typeref:typename:void
playSoundTuc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^void playSoundTuc()$/;"	f	typeref:typename:void
player	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int player;$/;"	m	struct:Race::Player	typeref:typename:int
player_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^const uint8_t player_data[] = {$/;"	v	typeref:typename:const uint8_t[]
player_explosion_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^const uint8_t player_explosion_data[][16] = {$/;"	v	typeref:typename:const uint8_t[][16]
player_fire_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^const uint8_t player_fire_data[][6] = {$/;"	v	typeref:typename:const uint8_t[][6]
playercontrol	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^int playercontrol[2] = {0,0};$/;"	v	typeref:typename:int[2]
players	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Player players[2];$/;"	m	struct:Race	typeref:typename:Player[2]
playing	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  bool playing() { return m_play; }$/;"	f	class:fabgl::SoundGenerator	typeref:typename:bool
playsounddata	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^struct playsounddata$/;"	s
playsounddata	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^struct playsounddata$/;"	s
pocto	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^  OctoWS2811  *pocto;$/;"	m	class:COctoWS2811Controller	typeref:typename:OctoWS2811 *
pocto	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/octows2811_controller.h	/^  OctoWS2811  *pocto;$/;"	m	class:COctoWS2811Controller	typeref:typename:OctoWS2811 *
pointSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t  pointSize;$/;"	m	struct:fabgl::FontInfo	typeref:typename:uint8_t
point_5x5	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t point_5x5[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
pointer_12x17	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t pointer_12x17[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
pointer_amigalike_11x11	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t pointer_amigalike_11x11[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
pointer_shadowed_11x19	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t pointer_shadowed_11x19[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
pointer_simple_11x19	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t pointer_simple_11x19[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
pointer_simplereduced_10x15	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t pointer_simplereduced_10x15[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
pointingDeviceInterface	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::pointingDeviceInterface()$/;"	f	class:BIOS	typeref:typename:void
points	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int score, points;$/;"	m	struct:Race::Player	typeref:typename:int
points	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  int points;$/;"	m	struct:ScoreCard	typeref:typename:int
points	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Point const * points;$/;"	m	struct:fabgl::Path	typeref:typename:Point const *
pointsCount	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^    int     pointsCount;$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:int
pointsCount	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^    int     pointsCount;$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:int
pointsCount	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^    int     pointsCount;$/;"	m	struct:PolygonsTest::Polygon	typeref:typename:int
pointsCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int           pointsCount;$/;"	m	struct:fabgl::Path	typeref:typename:int
polygonsCount_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  int polygonsCount_ = 0;$/;"	m	class:PolygonsTest	typeref:typename:int
polygonsCount_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  int polygonsCount_ = 0;$/;"	m	class:PolygonsTest	typeref:typename:int
polygonsCount_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  int polygonsCount_ = 0;$/;"	m	class:PolygonsTest	typeref:typename:int
polygons_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  Polygon * polygons_ = nullptr;$/;"	m	class:PolygonsTest	typeref:typename:Polygon *
polygons_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  Polygon * polygons_ = nullptr;$/;"	m	class:PolygonsTest	typeref:typename:Polygon *
polygons_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  Polygon * polygons_ = nullptr;$/;"	m	class:PolygonsTest	typeref:typename:Polygon *
pool_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  detail::MemoryPool* pool_;$/;"	m	class:JsonArray	typeref:typename:detail::MemoryPool *
pool_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  detail::MemoryPool* pool_;$/;"	m	class:JsonArrayIterator	typeref:typename:detail::MemoryPool *
pool_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  detail::MemoryPool pool_;$/;"	m	class:JsonDocument	typeref:typename:detail::MemoryPool
pool_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  MemoryPool* pool_;$/;"	m	class:JsonDeserializer	typeref:typename:MemoryPool *
pool_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  MemoryPool* pool_;$/;"	m	class:MsgPackDeserializer	typeref:typename:MemoryPool *
pool_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  detail::MemoryPool* pool_;$/;"	m	class:JsonObject	typeref:typename:detail::MemoryPool *
pool_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  detail::MemoryPool* pool_;$/;"	m	class:JsonObjectIterator	typeref:typename:detail::MemoryPool *
pool_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  MemoryPool* pool_;$/;"	m	class:StringCopier	typeref:typename:MemoryPool *
pool_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  MemoryPool* pool_;$/;"	m	class:detail::MemoryPoolPrint	typeref:typename:MemoryPool *
pool_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  detail::MemoryPool* pool_;$/;"	m	class:JsonVariant	typeref:typename:detail::MemoryPool *
pooyan_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/pooyan.h	/^char const * pooyan_filename = "Pooyan 16K.PRG";$/;"	v	typeref:typename:char const *
pooyan_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/pooyan.h	/^const uint8_t pooyan_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
pop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  pop    di$/;"	d
pop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  pop    ds$/;"	d
pop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  pop    dx$/;"	d
pop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  pop   di$/;"	d
pop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  pop   ds$/;"	d
pop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  pop   dx$/;"	d
pop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  pop  di$/;"	d
pop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  pop  ds$/;"	d
pop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  pop  dx$/;"	d
pop	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  T pop() {$/;"	f	class:fabgl::Stack	typeref:typename:T
popeye_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/popeye.h	/^char const * popeye_filename = "Popeye 32K.PRG";$/;"	v	typeref:typename:char const *
popeye_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/popeye.h	/^const uint8_t popeye_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
port	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  int port;$/;"	m	struct:fabgl::PS2PortAutoDisableRX	typeref:typename:int
port	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	port_ptr_t  port() __attribute__ ((always_inline)) { return mPort; }$/;"	f	class:Pin	typeref:typename:port_ptr_t
port	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static port_ptr_t  port() __attribute__ ((always_inline)) { return NULL; }$/;"	f	class:FastPin	typeref:typename:port_ptr_t
port	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static port_ptr_t  port() __attribute__ ((always_inline)) { return sPort; }$/;"	f	class:FastPin	typeref:typename:port_ptr_t
port	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	inline IMXRT_LPSPI_t & port() __attribute__((always_inline)) {$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:IMXRT_LPSPI_t &
port	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static port_ptr_t port() __attribute__ ((always_inline)) { return &FL_NRF_GPIO->OUT; /;"	f	class:_ARMPIN	typeref:typename:port_ptr_t
port	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static port_ptr_t port()      { return &((reinterpret_cast<NR/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE port_ptr_t
port	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static port_ptr_t port() __attribute__ ((always_inline)) {$/;"	f	class:_ESPPIN	typeref:typename:port_ptr_t
port	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static port_ptr_t port() __attribute__ ((always_inline)) { if(PIN<16) { return &_GPB./;"	f	class:_ESPPIN	typeref:typename:port_ptr_t
portAddr	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static const void *portAddr() { return NULL; }$/;"	f	struct:__FL_PORT_INFO	typeref:typename:const void *
portName	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static const char *portName() { return "--"; }$/;"	f	struct:__FL_PORT_INFO	typeref:typename:const char *
port_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	typedef volatile RwReg * port_ptr_t;  \/\/\/< @copydoc Pin::port_ptr_t$/;"	t	class:FastPin	typeref:typename:volatile RwReg *
port_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	typedef volatile RwReg * port_ptr_t;  \/\/\/< type for a pin read\/write register, volatile$/;"	t	class:Pin	typeref:typename:volatile RwReg *
port_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	typedef volatile RwReg * port_ptr_t;$/;"	t	class:Pin	typeref:typename:volatile RwReg *
port_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    typedef volatile uint32_t * port_ptr_t;$/;"	t	class:_ARMPIN	typeref:typename:volatile uint32_t *
port_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    typedef volatile uint32_t * port_ptr_t;$/;"	t	class:_ARMPIN	typeref:typename:volatile uint32_t *
port_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  typedef volatile uint32_t * port_ptr_t;$/;"	t	class:_ESPPIN	typeref:typename:volatile uint32_t *
port_ptr_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    typedef volatile uint32_t * port_ptr_t;$/;"	t	class:_ESPPIN	typeref:typename:volatile uint32_t *
port_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	typedef RwReg port_t;  \/\/\/< @copydoc Pin::port_t$/;"	t	class:FastPin	typeref:typename:RwReg
port_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	typedef RwReg port_t;  \/\/\/< type for a pin read\/write register, non-volatile$/;"	t	class:Pin	typeref:typename:RwReg
port_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	typedef RwReg port_t;$/;"	t	class:Pin	typeref:typename:RwReg
port_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    typedef uint32_t port_t;$/;"	t	class:_ARMPIN	typeref:typename:uint32_t
port_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    typedef uint32_t port_t;$/;"	t	class:_ARMPIN	typeref:typename:uint32_t
port_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  typedef uint32_t port_t;$/;"	t	class:_ESPPIN	typeref:typename:uint32_t
port_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    typedef uint32_t port_t;$/;"	t	class:_ESPPIN	typeref:typename:uint32_t
pos	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Point  pos;$/;"	m	struct:fabgl::PixelDesc	typeref:typename:Point
pos	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^    Point pos;$/;"	m	union:fabgl::uiEvent::uiEventParams	typeref:typename:Point
pos	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Point pos() { return m_pos; }$/;"	f	class:fabgl::uiWindow	typeref:typename:Point
pos	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Point pos() const                              { return Point(X1, Y1); }$/;"	f	struct:fabgl::Rect	typeref:typename:Point
position	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    Point                  position;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:Point
position	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Point        position;        \/\/ value already traslated to "origin"$/;"	m	struct:fabgl::PaintState	typeref:typename:Point
position	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int position() { return m_position; }$/;"	f	class:fabgl::uiSlider	typeref:typename:int
positiveBinaryPowersOfTen	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  static pgm_ptr<T> positiveBinaryPowersOfTen() {$/;"	f	struct:FloatTraits	typeref:typename:pgm_ptr<T>
postBlock	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^		__attribute__((always_inline)) inline static void postBlock(int len) {$/;"	f	class:LPD8806Controller::LPD8806_ADJUST	typeref:typename:void
postBlock	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_types.h	/^    static __attribute__((always_inline)) inline void postBlock(int \/* len *\/) { }$/;"	f	class:DATA_NOP	typeref:typename:void
postDebugMsg	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::postDebugMsg(char const * msg)$/;"	f	class:fabgl::uiApp	typeref:typename:void
postEqualizingPulseCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  int8_t          postEqualizingPulseCount;       \/\/ vertical sync, number of short pulses jus/;"	m	struct:fabgl::CVBSParams	typeref:typename:int8_t
postEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^bool uiApp::postEvent(uiEvent const * event)$/;"	f	class:fabgl::uiApp	typeref:typename:bool
postVirtualKeyItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^void Keyboard::postVirtualKeyItem(VirtualKeyItem const & item)$/;"	f	class:fabgl::Keyboard	typeref:typename:void
power_func	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^typedef uint8_t (*power_func)(uint8_t scale, uint32_t data);$/;"	t	typeref:typename:uint8_t (*)(uint8_t scale,uint32_t data)
preEqualizingPulseCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  int8_t          preEqualizingPulseCount;        \/\/ vertical sync, number of short pulses jus/;"	m	struct:fabgl::CVBSParams	typeref:typename:int8_t
preStepFirstByteDithering	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline void preStepFirstByteDithering() {$/;"	f	struct:PixelController	typeref:typename:void
preferences	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^Preferences preferences;$/;"	v	typeref:typename:Preferences
prefix	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^prefix = None$/;"	v
prepareDirectoryRead	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::prepareDirectoryRead()$/;"	f	class:IECDrive	typeref:typename:void
preparePixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^inline uint8_t preparePixel(RGB888 const & rgb)$/;"	f	namespace:fabgl	typeref:typename:uint8_t
preparePixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^inline uint16_t preparePixel(RGB888 const & px)$/;"	f	namespace:fabgl	typeref:typename:uint16_t
preparePixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  uint8_t inline __attribute__((always_inline)) preparePixel(RGB222 rgb) { return m_HVSync | (rg/;"	f	class:fabgl::VGABaseController	typeref:typename:uint8_t
preparePixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  uint8_t IRAM_ATTR preparePixel(RGB222 rgb) { return m_HVSync | (rgb.B << VGA_BLUE_BIT) | (rgb./;"	f	class:fabgl::VGATextController	typeref:typename:uint8_t IRAM_ATTR
preparePixelWithSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^uint8_t IRAM_ATTR VGABaseController::preparePixelWithSync(RGB222 rgb, bool HSync, bool VSync)$/;"	f	class:fabgl::VGABaseController	typeref:typename:uint8_t IRAM_ATTR
preparePixelWithSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^uint8_t IRAM_ATTR VGATextController::preparePixelWithSync(RGB222 rgb, bool HSync, bool VSync)$/;"	f	class:fabgl::VGATextController	typeref:typename:uint8_t IRAM_ATTR
prepareSequenceBuffers	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void prepareSequenceBuffers(PixelController<_RGB_ORDER/;"	f	class:ClocklessController	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
preprocessEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::preprocessEvent(uiEvent * event)$/;"	f	class:fabgl::uiApp	typeref:typename:void
preprocessKeyboardEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::preprocessKeyboardEvent(uiEvent * event)$/;"	f	class:fabgl::uiApp	typeref:typename:void
preprocessMouseEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::preprocessMouseEvent(uiEvent * event)$/;"	f	class:fabgl::uiApp	typeref:typename:void
prev	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * prev()  { return m_prev; }$/;"	f	class:fabgl::uiWindow	typeref:typename:uiWindow *
prevActiveWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * prevActiveWindow;$/;"	m	struct:fabgl::ModalWindowState	typeref:typename:uiWindow *
prevFocusedWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * prevFocusedWindow;$/;"	m	struct:fabgl::ModalWindowState	typeref:typename:uiWindow *
prevModal	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * prevModal;$/;"	m	struct:fabgl::ModalWindowState	typeref:typename:uiWindow *
primitiveExecTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^void CVBSPalettedController::primitiveExecTask(void * arg)$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:void
primitiveExecTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^void VGAPalettedController::primitiveExecTask(void * arg)$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
primitiveReplaceDynamicBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void BitmappedDisplayController::primitiveReplaceDynamicBuffers(Primitive & primitive)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
primitivesExecutionWait	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void BitmappedDisplayController::primitivesExecutionWait()$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
printerEchoEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool printerEchoEnabled()       { return m_printerEchoEnabled; }$/;"	f	class:BDOS	typeref:typename:bool
printf	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  void printf(const char * format, ...) {$/;"	f	struct:fabgl::Print	typeref:typename:void
processBDOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::processBDOS()$/;"	f	class:BDOS	typeref:typename:void
processBIOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::processBIOS(int func)$/;"	f	class:BIOS	typeref:typename:void
processByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::processByte(uint8_t value)$/;"	f	class:IECDrive	typeref:typename:void
processCLOSE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::processCLOSE()$/;"	f	class:IECDrive	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiApp	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiButton::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiButton	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCheckBox::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiCheckBox	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiColorBox::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiColorBox	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiControl::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiControl	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomComboBox::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomListBox::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiEvtHandler::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiEvtHandler	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFileBrowser::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFrame::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiFrame	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiImage::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiImage	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiLabel::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiLabel	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiPaintBox::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiPaintBox	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiPanel::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiPanel	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiProgressBar::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiProgressBar	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiScrollableControl::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiSimpleMenu::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiSimpleMenu	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiSlider::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiSlider	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiSplitButton::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiSplitButton	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiStaticLabel::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiStaticLabel	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiTextEdit::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiTextEdit	typeref:typename:void
processEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::processEvent(uiEvent * event)$/;"	f	class:fabgl::uiWindow	typeref:typename:void
processEvents	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::processEvents()$/;"	f	class:fabgl::uiApp	typeref:typename:void
processModalWindowEvents	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^bool uiApp::processModalWindowEvents(ModalWindowState * state, int timeout)$/;"	f	class:fabgl::uiApp	typeref:typename:bool
processOPEN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::processOPEN()$/;"	f	class:IECDrive	typeref:typename:void
processPrevDirMarks	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::processPrevDirMarks(char * path)$/;"	f	class:BDOS	typeref:typename:void
processPrimitives	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::processPrimitives()$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
processRSXCOM	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::processRSXCOM()$/;"	f	class:BDOS	typeref:typename:void
processScancode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^bool BIOS::processScancode(int scancode, uint16_t * syscode)$/;"	f	class:BIOS	typeref:typename:bool
processWRITE	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::processWRITE()$/;"	f	class:IECDrive	typeref:typename:void
producesText	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  static const bool producesText = true;$/;"	m	class:JsonSerializer	typeref:typename:const bool
producesText	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  static const bool producesText = false;$/;"	m	class:MsgPackSerializer	typeref:typename:const bool
progComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/progsdialog.h	/^  uiComboBox *      progComboBox;$/;"	m	struct:ProgsDialog	typeref:typename:uiComboBox *
progToInstall	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  int               progToInstall;$/;"	m	struct:ConfDialogApp	typeref:typename:int
prog_uint32_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^typedef uint32_t prog_uint32_t;$/;"	t	typeref:typename:uint32_t
prog_uint32_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/led_sysdefs_esp32.h	/^typedef unsigned long prog_uint32_t;$/;"	t	typeref:typename:unsigned long
prog_uint32_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/led_sysdefs_esp8266.h	/^typedef uint32_t prog_uint32_t;$/;"	t	typeref:typename:uint32_t
programs	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^static const Program programs[] = {$/;"	v	typeref:typename:const Program[]
progressBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiProgressBar *         progressBar;$/;"	m	struct:fabgl::ProgressForm	typeref:typename:uiProgressBar *
progressBarHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  static const int        progressBarHeight = 16;$/;"	m	struct:fabgl::ProgressForm	typeref:typename:const int
progressBarProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiProgressBarProps & progressBarProps() { return m_progressBarProps; }$/;"	f	class:fabgl::uiProgressBar	typeref:typename:uiProgressBarProps &
progressBarStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiProgressBarStyle & progressBarStyle() { return m_progressBarStyle; }$/;"	f	class:fabgl::uiProgressBar	typeref:typename:uiProgressBarStyle &
progressBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  InputResult progressBox(char const * titleText, char const * buttonCancelText, bool hasProgres/;"	f	class:fabgl::InputBox	typeref:typename:InputResult
progressBoxImpl	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^InputResult InputBox::progressBoxImpl(ProgressForm & form, char const * titleText, char const * /;"	f	class:fabgl::InputBox	typeref:typename:InputResult
pserial	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/ws2812serial_controller.h	/^    WS2812Serial *pserial;$/;"	m	class:CWS2812SerialController	typeref:typename:WS2812Serial *
psh	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint8_t   psh;  \/\/ Physical sector shift, 0 => 128-byte sectors 1 => 256-byte sectors  2 => /;"	m	struct:DiscParameterBlock	typeref:typename:uint8_t
ptr_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp	/^  const char* ptr_;$/;"	m	struct:BoundedReader	typeref:typename:const char *
ptr_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp	/^  const char* ptr_;$/;"	m	struct:Reader	typeref:typename:const char *
ptr_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp	/^  TIterator ptr_, end_;$/;"	m	class:IteratorReader	typeref:typename:TIterator
ptr_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp	/^  const char* ptr_;$/;"	m	struct:Reader	typeref:typename:const char *
ptr_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace_generic.hpp	/^  const T* ptr_;$/;"	m	class:pgm_ptr	typeref:typename:const T *
ptr_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  char* ptr_;$/;"	m	class:StringCopier	typeref:typename:char *
ptr_reg32_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^typedef volatile uint32_t * ptr_reg32_t;  \/\/\/< Pointer to a 32-bit register, volatile$/;"	t	typeref:typename:volatile uint32_t *
pulse_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/pulse.h	/^char const * pulse_filename = "Pulse.PRG";$/;"	v	typeref:typename:char const *
pulse_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/pulse.h	/^const uint8_t pulse_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
push	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  push   di$/;"	d
push	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  push   ds$/;"	d
push	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  push   dx$/;"	d
push	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  push  di$/;"	d
push	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  push  ds$/;"	d
push	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  push  dx$/;"	d
push	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  push di$/;"	d
push	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  push ds$/;"	d
push	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  push dx$/;"	d
push	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  void push(T const & value) {$/;"	f	class:fabgl::Stack	typeref:typename:void
put_cga320_char	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga320_char:$/;"	l
put_cga320_char_c2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga320_char_c2:$/;"	l
put_cga320_char_c3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga320_char_c3:$/;"	l
put_cga320_char_cdone	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga320_char_cdone:$/;"	l
put_cga320_char_copy1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga320_char_copy1:$/;"	l
put_cga320_char_copy2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga320_char_copy2:$/;"	l
put_cga320_char_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga320_char_done:$/;"	l
put_cga320_char_double	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga320_char_double:$/;"	l
put_cga320_char_high	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga320_char_high:$/;"	l
put_cga320_char_oddlines	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga320_char_oddlines:$/;"	l
put_cga320_char_vidoffset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga320_char_vidoffset:$/;"	l
put_cga640_char	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga640_char:$/;"	l
put_cga640_char_copy1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga640_char_copy1:$/;"	l
put_cga640_char_copy2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga640_char_copy2:$/;"	l
put_cga640_char_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga640_char_done:$/;"	l
put_cga640_char_high	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga640_char_high:$/;"	l
put_cga640_char_oddlines	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga640_char_oddlines:$/;"	l
put_cga640_char_vidoffset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_cga640_char_vidoffset:$/;"	l
put_chachar_bit0	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_chachar_bit0:$/;"	l
put_chachar_bit1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_chachar_bit1:$/;"	l
put_chachar_bit2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_chachar_bit2:$/;"	l
put_chachar_bit3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_chachar_bit3:$/;"	l
put_chachar_bit4	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_chachar_bit4:$/;"	l
put_chachar_bit5	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_chachar_bit5:$/;"	l
put_chachar_bit6	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_chachar_bit6:$/;"	l
put_chachar_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_chachar_done:$/;"	l
put_mode11_char	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_mode11_char:$/;"	l
put_mode11_char_high	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_mode11_char_high:$/;"	l
put_mode11_char_vidoffset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_mode11_char_vidoffset:$/;"	l
put_mode13_char	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_mode13_char:$/;"	l
put_mode13_char_clear	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_mode13_char_clear:$/;"	l
put_mode13_char_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_mode13_char_done:$/;"	l
put_mode13_char_high	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_mode13_char_high:$/;"	l
put_mode13_char_line_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_mode13_char_line_loop:$/;"	l
put_mode13_char_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_mode13_char_loop:$/;"	l
put_mode13_char_pixel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_mode13_char_pixel:$/;"	l
put_mode13_char_vidoffset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^put_mode13_char_vidoffset:$/;"	l
putc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transfile.py	/^def putc(data, timeout=1):$/;"	f
puts_decimal_al	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^puts_decimal_al:$/;"	l
puts_hex_al	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^puts_hex_al:$/;"	l
puts_hex_d1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^puts_hex_d1:$/;"	l
puts_hex_d1_letter	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  puts_hex_d1_letter:$/;"	l
puts_hex_d2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  puts_hex_d2:$/;"	l
puts_hex_d2_letter	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^puts_hex_d2_letter:$/;"	l
pwmMode	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  PwmMode pwmMode = PwmMode::PWM12BIT;$/;"	m	class:JFixtureDimmer	typeref:typename:PwmMode
q	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    q(float fx) { i = fx; f = (fx-i) * (1<<F); }$/;"	f	class:q
q	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    q(uint8_t _i, uint8_t _f) {i=_i; f=_f; }$/;"	f	class:q
q	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^template<class T, int F, int I> class q {$/;"	c
q124	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef q<uint16_t, 12,4> q124;$/;"	t	typeref:typename:q<uint16_t,12,4>
q44	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef q<uint8_t, 4,4> q44;$/;"	t	typeref:typename:q<uint8_t,4,4>
q62	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef q<uint8_t, 6,2> q62;$/;"	t	typeref:typename:q<uint8_t,6,2>
q88	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef q<uint16_t, 8,8> q88;$/;"	t	typeref:typename:q<uint16_t,8,8>
qadd7	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE int8_t qadd7( int8_t i, int8_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE int8_t
qadd8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
qmul8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t qmul8( uint8_t i, uint8_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
qsub8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
quadwave8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint8_t quadwave8(uint8_t in)$/;"	f	typeref:typename:LIB8STATIC uint8_t
questionBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/bitmaps.h	/^const Bitmap questionBitmap = Bitmap(16, 16, &questionBitmap_data[0], PixelFormat::RGBA2222);$/;"	v	namespace:fabgl	typeref:typename:const Bitmap
questionBitmap_data	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/bitmaps.h	/^const uint8_t questionBitmap_data[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
queueSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^int BitmappedDisplayController::queueSize = FABGLIB_DEFAULT_DISPLAYCONTROLLER_QUEUE_SIZE;$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:int
queueSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  static int queueSize;$/;"	m	class:fabgl::BitmappedDisplayController	typeref:typename:int
quickCheckHardware	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^void PS2Device::quickCheckHardware()$/;"	f	class:fabgl::PS2Device	typeref:typename:void
quickCheckHardware	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  static void quickCheckHardware()   { s_quickCheckHardware = true; }$/;"	f	class:fabgl::Mouse	typeref:typename:void
quietCore	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static int quietCore()                   { return s_busiestCore != -1 ? s_busiestCore ^ 1 : -1/;"	f	struct:fabgl::CoreUsage	typeref:typename:int
quikman_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/quikman.h	/^char const * quikman_filename = "Quikman 8K.PRG";$/;"	v	typeref:typename:char const *
quikman_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/quikman.h	/^const uint8_t quikman_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
quit	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::quit(int exitCode)$/;"	f	class:fabgl::uiApp	typeref:typename:void
r	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transdisk.py	/^      r = ord(ser.read()[0])$/;"	v
r	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  int               i, r, pc, iff1, iff2, im;$/;"	m	struct:fabgl::Z80_STATE	typeref:typename:int
r	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^        uint8_t r;      \/\/\/< CRGB::red channel value of the color entry$/;"	m	struct:__anon875718a3020a::__anon875718a30308	typeref:typename:uint8_t
r	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t r;    \/\/\/< Red channel value$/;"	m	union:CRGB::__anonbcc8608a070a::__anonbcc8608a0808::__anonbcc8608a090a	typeref:typename:uint8_t
r	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE constexpr static uintptr_t r() {$/;"	f	struct:__generated_struct_NRF_P0	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE uintptr_t
r	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE constexpr static uintptr_t r() {$/;"	f	struct:__generated_struct_NRF_P1	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE uintptr_t
r	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    unsigned short a, s, r;$/;"	m	class:JEnv	typeref:typename:unsigned short
radio1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiCheckBox * radio1, * radio2, * radio3;$/;"	m	struct:TestControlsFrame	typeref:typename:uiCheckBox *
radio2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiCheckBox * radio1, * radio2, * radio3;$/;"	m	struct:TestControlsFrame	typeref:typename:uiCheckBox *
radio3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiCheckBox * radio1, * radio2, * radio3;$/;"	m	struct:TestControlsFrame	typeref:typename:uiCheckBox *
raiseDivideByZeroInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint8_t i8086::raiseDivideByZeroInterrupt()$/;"	f	class:fabgl::i8086	typeref:typename:uint8_t
ralt	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^    uint8_t ralt     : 1;   \/**< RIGHT-ALT needs to be down. *\/$/;"	m	struct:fabgl::AltVirtualKeyDef::__anon7ddb64db0108	typeref:typename:uint8_t:1
rand16seed	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.cpp	/^uint16_t rand16seed = RAND16_SEED;$/;"	v	typeref:typename:FASTLED_NAMESPACE_BEGIN uint16_t
random16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^LIB8STATIC uint16_t random16( uint16_t lim)$/;"	f	typeref:typename:LIB8STATIC uint16_t
random16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)$/;"	f	typeref:typename:LIB8STATIC uint16_t
random16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^LIB8STATIC uint16_t random16()$/;"	f	typeref:typename:LIB8STATIC uint16_t
random16_add_entropy	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^LIB8STATIC void random16_add_entropy( uint16_t entropy)$/;"	f	typeref:typename:LIB8STATIC void
random16_get_seed	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^LIB8STATIC uint16_t random16_get_seed()$/;"	f	typeref:typename:LIB8STATIC uint16_t
random16_set_seed	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^LIB8STATIC void random16_set_seed( uint16_t seed)$/;"	f	typeref:typename:LIB8STATIC void
random8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^LIB8STATIC uint8_t random8()$/;"	f	typeref:typename:LIB8STATIC uint8_t
random8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^LIB8STATIC uint8_t random8(uint8_t lim)$/;"	f	typeref:typename:LIB8STATIC uint8_t
random8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/random8.h	/^LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)$/;"	f	typeref:typename:LIB8STATIC uint8_t
randomPw	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  String randomPw() {$/;"	f	class:JEspnowDevice	typeref:typename:String
range	examples/test/lib/JFixLib/src/Event/JOsc.h	/^  float range = 1;$/;"	m	class:JOsc	typeref:typename:float
rangeColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888 rangeColor         = RGB888(0, 128, 255);      \/**< Color of slide before the grip *\/$/;"	m	struct:fabgl::uiSliderStyle	typeref:typename:RGB888
raw	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/alias_cast.hpp	/^    F raw;$/;"	m	union:alias_cast_t::__anon7c3d3698010a	typeref:typename:F
raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint8_t raw;   \/\/\/< the entire byte$/;"	m	union:__anonad8cb3ed010a	typeref:typename:uint8_t
raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        uint8_t raw[3];$/;"	m	union:CHSV::__anonbcc8608a010a	typeref:typename:uint8_t[3]
raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^        uint8_t raw[3];$/;"	m	union:CRGB::__anonbcc8608a070a	typeref:typename:uint8_t[3]
raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^		uint32_t raw[3];$/;"	m	union:InlineBlockClocklessController::__anona800f11d010a	typeref:typename:uint32_t[3]
raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^		uint32_t raw[4];$/;"	m	union:SixteenWayInlineBlockClocklessController::__anona800f11d020a	typeref:typename:uint32_t[4]
raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^    uint32_t raw[2];$/;"	m	union:COctoWS2811Controller::__anonf4de0cf3010a	typeref:typename:uint32_t[2]
raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^		uint32_t raw[3];$/;"	m	union:InlineBlockClocklessController::__anon2749c531010a	typeref:typename:uint32_t[3]
raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^		uint32_t raw[4];$/;"	m	union:SixteenWayInlineBlockClocklessController::__anon2749c531020a	typeref:typename:uint32_t[4]
raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint32_t raw[8];$/;"	m	union:FlexibleInlineBlockClocklessController::__anon2152c22b010a	typeref:typename:uint32_t[8]
raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^    uint32_t raw[2];$/;"	m	union:__anonf80a47c5010a	typeref:typename:uint32_t[2]
raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^	uint32_t raw[2];$/;"	m	union:InlineBlockClocklessController::__anonedf8fd7e010a	typeref:typename:uint32_t[2]
raw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^		uint32_t raw[2];$/;"	m	union:InlineBlockClocklessController::__anon110b7520010a	typeref:typename:uint32_t[2]
rawConsoleAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::rawConsoleAvailable()$/;"	f	class:BDOS	typeref:typename:bool
rawConsoleDirectAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::rawConsoleDirectAvailable()$/;"	f	class:BDOS	typeref:typename:bool
rawConsoleDirectIn	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^uint8_t BDOS::rawConsoleDirectIn()$/;"	f	class:BDOS	typeref:typename:uint8_t
rawConsoleIn	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^uint8_t BDOS::rawConsoleIn()$/;"	f	class:BDOS	typeref:typename:uint8_t
rawCopyRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::rawCopyRow(int x1, int x2, int srcY, int dstY)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
rawCopyRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::rawCopyRow(int x1, int x2, int srcY, int dstY)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
rawCopyRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::rawCopyRow(int x1, int x2, int srcY, int dstY)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
rawCopyRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::rawCopyRow(int x1, int x2, int srcY, int dstY)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
rawCopyRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::rawCopyRow(int x1, int x2, int srcY, int dstY)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
rawCopyRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::rawCopyRow(int x1, int x2, int srcY, int dstY)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
rawCopyRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::rawCopyRow(int x1, int x2, int srcY, int dstY)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
rawDrawBitmap_Mask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::rawDrawBitmap_Mask(int destX, int destY, Bitmap const * bitmap, void * s/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
rawDrawBitmap_Mask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::rawDrawBitmap_Mask(int destX, int destY, Bitmap const * bitmap, void * saveB/;"	f	class:fabgl::TFTController	typeref:typename:void
rawDrawBitmap_Mask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::rawDrawBitmap_Mask(int destX, int destY, Bitmap const * bitmap, void * sa/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
rawDrawBitmap_Mask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::rawDrawBitmap_Mask(int destX, int destY, Bitmap const * bitmap, void * sav/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
rawDrawBitmap_Mask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::rawDrawBitmap_Mask(int destX, int destY, Bitmap const * bitmap, void * save/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
rawDrawBitmap_Mask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::rawDrawBitmap_Mask(int destX, int destY, Bitmap const * bitmap, void * save/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
rawDrawBitmap_Mask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::rawDrawBitmap_Mask(int destX, int destY, Bitmap const * bitmap, void * save/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
rawDrawBitmap_Mask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::rawDrawBitmap_Mask(int destX, int destY, Bitmap const * bitmap, vo/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
rawDrawBitmap_Mask	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::rawDrawBitmap_Mask(int destX, int destY, Bitmap const * bitmap, void */;"	f	class:fabgl::VGADirectController	typeref:typename:void
rawDrawBitmap_Native	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::rawDrawBitmap_Native(int destX, int destY, Bitmap const * bitmap, int X1/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
rawDrawBitmap_Native	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::rawDrawBitmap_Native(int destX, int destY, Bitmap const * bitmap, int X1, in/;"	f	class:fabgl::TFTController	typeref:typename:void
rawDrawBitmap_Native	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::rawDrawBitmap_Native(int destX, int destY, Bitmap const * bitmap, int X1,/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
rawDrawBitmap_Native	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::rawDrawBitmap_Native(int destX, int destY, Bitmap const * bitmap, int X1, /;"	f	class:fabgl::VGA16Controller	typeref:typename:void
rawDrawBitmap_Native	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::rawDrawBitmap_Native(int destX, int destY, Bitmap const * bitmap, int X1, i/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
rawDrawBitmap_Native	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::rawDrawBitmap_Native(int destX, int destY, Bitmap const * bitmap, int X1, i/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
rawDrawBitmap_Native	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::rawDrawBitmap_Native(int destX, int destY, Bitmap const * bitmap, int X1, i/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
rawDrawBitmap_Native	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::rawDrawBitmap_Native(int destX, int destY, Bitmap const * bitmap, /;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
rawDrawBitmap_Native	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::rawDrawBitmap_Native(int destX, int destY, Bitmap const * bitmap, int /;"	f	class:fabgl::VGADirectController	typeref:typename:void
rawDrawBitmap_RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::rawDrawBitmap_RGBA2222(int destX, int destY, Bitmap const * bitmap, void/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
rawDrawBitmap_RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::rawDrawBitmap_RGBA2222(int destX, int destY, Bitmap const * bitmap, void * s/;"	f	class:fabgl::TFTController	typeref:typename:void
rawDrawBitmap_RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::rawDrawBitmap_RGBA2222(int destX, int destY, Bitmap const * bitmap, void /;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
rawDrawBitmap_RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::rawDrawBitmap_RGBA2222(int destX, int destY, Bitmap const * bitmap, void */;"	f	class:fabgl::VGA16Controller	typeref:typename:void
rawDrawBitmap_RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::rawDrawBitmap_RGBA2222(int destX, int destY, Bitmap const * bitmap, void * /;"	f	class:fabgl::VGA2Controller	typeref:typename:void
rawDrawBitmap_RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::rawDrawBitmap_RGBA2222(int destX, int destY, Bitmap const * bitmap, void * /;"	f	class:fabgl::VGA4Controller	typeref:typename:void
rawDrawBitmap_RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::rawDrawBitmap_RGBA2222(int destX, int destY, Bitmap const * bitmap, void * /;"	f	class:fabgl::VGA8Controller	typeref:typename:void
rawDrawBitmap_RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::rawDrawBitmap_RGBA2222(int destX, int destY, Bitmap const * bitmap/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
rawDrawBitmap_RGBA2222	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::rawDrawBitmap_RGBA2222(int destX, int destY, Bitmap const * bitmap, vo/;"	f	class:fabgl::VGADirectController	typeref:typename:void
rawDrawBitmap_RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::rawDrawBitmap_RGBA8888(int destX, int destY, Bitmap const * bitmap, void/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
rawDrawBitmap_RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::rawDrawBitmap_RGBA8888(int destX, int destY, Bitmap const * bitmap, void * s/;"	f	class:fabgl::TFTController	typeref:typename:void
rawDrawBitmap_RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::rawDrawBitmap_RGBA8888(int destX, int destY, Bitmap const * bitmap, void /;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
rawDrawBitmap_RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::rawDrawBitmap_RGBA8888(int destX, int destY, Bitmap const * bitmap, void */;"	f	class:fabgl::VGA16Controller	typeref:typename:void
rawDrawBitmap_RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::rawDrawBitmap_RGBA8888(int destX, int destY, Bitmap const * bitmap, void * /;"	f	class:fabgl::VGA2Controller	typeref:typename:void
rawDrawBitmap_RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::rawDrawBitmap_RGBA8888(int destX, int destY, Bitmap const * bitmap, void * /;"	f	class:fabgl::VGA4Controller	typeref:typename:void
rawDrawBitmap_RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::rawDrawBitmap_RGBA8888(int destX, int destY, Bitmap const * bitmap, void * /;"	f	class:fabgl::VGA8Controller	typeref:typename:void
rawDrawBitmap_RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::rawDrawBitmap_RGBA8888(int destX, int destY, Bitmap const * bitmap/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
rawDrawBitmap_RGBA8888	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::rawDrawBitmap_RGBA8888(int destX, int destY, Bitmap const * bitmap, vo/;"	f	class:fabgl::VGADirectController	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::rawFillRow(int y, int x1, int x2, RGB888 color)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::rawFillRow(int y, int x1, int x2, uint8_t pattern)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::rawFillRow(int y, int x1, int x2, RGB888 color)$/;"	f	class:fabgl::TFTController	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::rawFillRow(int y, int x1, int x2, uint16_t pattern)$/;"	f	class:fabgl::TFTController	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::rawFillRow(int y, int x1, int x2, RGB888 color)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::rawFillRow(int y, int x1, int x2, uint8_t colorIndex)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::rawFillRow(int y, int x1, int x2, RGB888 color)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::rawFillRow(int y, int x1, int x2, uint8_t colorIndex)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::rawFillRow(int y, int x1, int x2, RGB888 color)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::rawFillRow(int y, int x1, int x2, uint8_t colorIndex)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::rawFillRow(int y, int x1, int x2, RGB888 color)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::rawFillRow(int y, int x1, int x2, uint8_t colorIndex)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::rawFillRow(int y, int x1, int x2, RGB888 color)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::rawFillRow(int y, int x1, int x2, uint8_t colorIndex)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::rawFillRow(int y, int x1, int x2, RGB888 color)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::rawFillRow(int y, int x1, int x2, uint8_t pattern)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::rawFillRow(int y, int x1, int x2, RGB888 color)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
rawFillRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::rawFillRow(int y, int x1, int x2, uint8_t colorIndex)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
rawInvertRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::rawInvertRow(int y, int x1, int x2)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
rawInvertRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::rawInvertRow(int y, int x1, int x2)$/;"	f	class:fabgl::TFTController	typeref:typename:void
rawInvertRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::rawInvertRow(int y, int x1, int x2)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
rawInvertRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::rawInvertRow(int y, int x1, int x2)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
rawInvertRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::rawInvertRow(int y, int x1, int x2)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
rawInvertRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::rawInvertRow(int y, int x1, int x2)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
rawInvertRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::rawInvertRow(int y, int x1, int x2)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
rawInvertRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::rawInvertRow(int y, int x1, int x2)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
rawInvertRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::rawInvertRow(int y, int x1, int x2)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
raw_opcode_id	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t    * regs8, i_mod_size, i_d, i_w, raw_opcode_id, xlat_opcode_id, extra, rep_mode,/;"	v	namespace:fabgl	typeref:typename:uint8_t	file:
raw_recv_fn	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.cpp	/^uint8_t ICMP::raw_recv_fn(void * arg, raw_pcb * pcb, pbuf * p, const ip_addr_t * addr)$/;"	f	class:fabgl::ICMP	typeref:typename:uint8_t
rawleds	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    CRGB rawleds[SIZE];  \/\/\/< the LED data$/;"	m	class:CRGBArray	typeref:typename:CRGB[]
rcl	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  rcl    dl, 1$/;"	d
reach_stack_carry	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^reach_stack_carry:$/;"	l
reach_stack_clc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^reach_stack_clc:$/;"	l
reach_stack_stc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^reach_stack_stc:$/;"	l
reached	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/NestingLimit.hpp	/^  bool reached() const {$/;"	f	class:DeserializationOption::NestingLimit	typeref:typename:bool
read	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Reader.hpp	/^  int read() {$/;"	f	struct:Reader	typeref:typename:int
read	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStreamReader.hpp	/^  int read() {$/;"	f	struct:Reader	typeref:typename:int
read	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp	/^  int read() {$/;"	f	struct:BoundedReader	typeref:typename:int
read	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp	/^  int read() {$/;"	f	struct:Reader	typeref:typename:int
read	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp	/^  int read() {$/;"	f	class:IteratorReader	typeref:typename:int
read	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp	/^  int read() {$/;"	f	struct:Reader	typeref:typename:int
read	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/StdStreamReader.hpp	/^  int read() {$/;"	f	struct:Reader	typeref:typename:int
read	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^bool Mits88Disk::read(int address, int * result)$/;"	f	class:Mits88Disk	typeref:typename:bool
read	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^bool SIO::read(int address, int * result)$/;"	f	class:SIO	typeref:typename:bool
read	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^int I2C::read(int address, uint8_t * buffer, int size, int frequency, int timeOutMS)$/;"	f	class:fabgl::I2C	typeref:typename:int
read	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^uint8_t MC146818::read(int address)$/;"	f	class:fabgl::MC146818	typeref:typename:uint8_t
read	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^uint8_t PC8250::read(int reg)$/;"	f	class:fabgl::PC8250	typeref:typename:uint8_t
read	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^uint8_t PIC8259::read(int addr)$/;"	f	class:fabgl::PIC8259	typeref:typename:uint8_t
read	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.cpp	/^uint8_t PIT8253::read(int reg)$/;"	f	class:fabgl::PIT8253	typeref:typename:uint8_t
read	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^uint8_t i8042::read(int address)$/;"	f	class:fabgl::i8042	typeref:typename:uint8_t
read	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int LineEditor::read()$/;"	f	class:fabgl::LineEditor	typeref:typename:int
read	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int Terminal::read()$/;"	f	class:fabgl::Terminal	typeref:typename:int
read	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int Terminal::read(int timeOutMS)$/;"	f	class:fabgl::Terminal	typeref:typename:int
read	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^int TerminalController::read()$/;"	f	class:fabgl::TerminalController	typeref:typename:int
readArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code readArray($/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
readByte	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code readByte(uint8_t& value) {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
readByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^int Machine::readByte(void * context, int address)$/;"	f	class:Machine	typeref:typename:int
readByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^uint8_t HAL::readByte(uint16_t addr)$/;"	f	class:HAL	typeref:typename:uint8_t
readByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  static int readByte(void * context, int address)                { return ((HAL*)context)->read/;"	f	class:HAL	typeref:typename:int
readByteDuration	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static const int readByteDuration             = 32;    \/\/ us$/;"	m	class:Mits88Disk	typeref:typename:const int
readByteFromDisk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^int Mits88Disk::readByteFromDisk()$/;"	f	class:Mits88Disk	typeref:typename:int
readBytes	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Reader.hpp	/^  size_t readBytes(char* buffer, size_t length) {$/;"	f	struct:Reader	typeref:typename:size_t
readBytes	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStreamReader.hpp	/^  size_t readBytes(char* buffer, size_t length) {$/;"	f	struct:Reader	typeref:typename:size_t
readBytes	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp	/^  size_t readBytes(char* buffer, size_t length) {$/;"	f	struct:BoundedReader	typeref:typename:size_t
readBytes	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp	/^  size_t readBytes(char* buffer, size_t length) {$/;"	f	struct:Reader	typeref:typename:size_t
readBytes	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp	/^  size_t readBytes(char* buffer, size_t length) {$/;"	f	class:IteratorReader	typeref:typename:size_t
readBytes	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp	/^  size_t readBytes(char* buffer, size_t length) {$/;"	f	struct:Reader	typeref:typename:size_t
readBytes	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/StdStreamReader.hpp	/^  size_t readBytes(char* buffer, size_t length) {$/;"	f	struct:Reader	typeref:typename:size_t
readBytes	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code readBytes(T& value) {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
readBytes	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code readBytes(uint8_t* p, size_t n) {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
readCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  uint32_t  readCount;$/;"	m	struct:fabgl::I2CJobInfo	typeref:typename:uint32_t
readDirectoryLabel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^uint8_t BDOS::readDirectoryLabel(int drive, uint16_t FCBaddr, uint8_t * FCB)$/;"	f	class:BDOS	typeref:typename:uint8_t
readDouble	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  readDouble(VariantData* variant) {$/;"	f	class:MsgPackDeserializer	typeref:typename:enable_if<sizeof (T)==4,DeserializationError::Code>::type
readDouble	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  readDouble(VariantData* variant) {$/;"	f	class:MsgPackDeserializer	typeref:typename:enable_if<sizeof (T)==8,DeserializationError::Code>::type
readEEPROM	examples/test/lib/JFixLib/src/JFixture.h	/^  void readEEPROM(){$/;"	f	class:JFixture	typeref:typename:void
readFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  readFloat(VariantData* variant) {$/;"	f	class:MsgPackDeserializer	typeref:typename:enable_if<sizeof (T)==4,DeserializationError::Code>::type
readGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^bool MCP23S17::readGPIO(int gpio, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:bool
readIO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^int Machine::readIO(void * context, int address)$/;"	f	class:Machine	typeref:typename:int
readIO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^uint8_t HAL::readIO(uint16_t addr)$/;"	f	class:HAL	typeref:typename:uint8_t
readIO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  static int readIO(void * context, int address)                  { return ((HAL*)context)->read/;"	f	class:HAL	typeref:typename:int
readInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code readInteger(T& value) {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
readInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code readInteger(VariantData* variant) {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
readKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code readKey() {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
readObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code readObject($/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
readPort	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^uint8_t Machine::readPort(void * context, int address)$/;"	f	class:Machine	typeref:typename:uint8_t
readPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::readPort(int port, void * buffer, size_t length, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:void
readPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  uint8_t readPort(int port, uint8_t hwAddr = 0)                         { return readReg(MCP_GP/;"	f	class:fabgl::MCP23S17	typeref:typename:uint8_t
readPort16	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  uint16_t readPort16(uint8_t hwAddr = 0)                                { return readReg16(MCP_/;"	f	class:fabgl::MCP23S17	typeref:typename:uint16_t
readReg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.cpp	/^int MOS6561::readReg(int reg)$/;"	f	class:MOS6561	typeref:typename:int
readReg	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^uint8_t DS3231::readReg(int reg)$/;"	f	class:fabgl::DS3231	typeref:typename:uint8_t
readReg	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^uint8_t MCP23S17::readReg(uint8_t addr, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:uint8_t
readReg	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.cpp	/^int VIA6522::readReg(int reg)$/;"	f	class:fabgl::VIA6522	typeref:typename:int
readReg16	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^uint16_t MCP23S17::readReg16(uint8_t addr, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:uint16_t
readRegByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  uint8_t readRegByte(int reg)                { return state.registers.byte[reg]; }$/;"	f	class:fabgl::Z80	typeref:typename:uint8_t
readRegWord	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  uint16_t readRegWord(int reg)               { return state.registers.word[reg]; }$/;"	f	class:fabgl::Z80	typeref:typename:uint16_t
readScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::readScreen(Rect const & rect, RGB888 * destBuf)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
readScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::readScreen(Rect const & rect, RGB888 * destBuf)$/;"	f	class:fabgl::TFTController	typeref:typename:void
readScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::readScreen(Rect const & rect, RGB888 * destBuf)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
readScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::readScreen(Rect const & rect, RGB888 * destBuf)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
readScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::readScreen(Rect const & rect, RGB888 * destBuf)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
readScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::readScreen(Rect const & rect, RGB888 * destBuf)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
readScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::readScreen(Rect const & rect, RGB888 * destBuf)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
readScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void VGAController::readScreen(Rect const & rect, RGB222 * destBuf)$/;"	f	class:fabgl::VGAController	typeref:typename:void
readScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void VGAController::readScreen(Rect const & rect, RGB888 * destBuf)$/;"	f	class:fabgl::VGAController	typeref:typename:void
readScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::readScreen(Rect const & rect, RGB888 * destBuf)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
readString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code readString() {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
readString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code readString(VariantData* variant) {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
readString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code readString(VariantData* variant, size_t n) {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
readString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code readString(size_t n) {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
readVideoMemory16	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^uint16_t Machine::readVideoMemory16(void * context, int address)$/;"	f	class:Machine	typeref:typename:uint16_t
readVideoMemory8	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^uint8_t Machine::readVideoMemory8(void * context, int address)$/;"	f	class:Machine	typeref:typename:uint8_t
readWord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static int readWord(void * context, int addr)              { return readByte(context, addr) | /;"	f	class:Machine	typeref:typename:int
readWord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^uint16_t HAL::readWord(uint16_t addr)$/;"	f	class:HAL	typeref:typename:uint16_t
readWord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  static int readWord(void * context, int addr)                   { return ((HAL*)context)->read/;"	f	class:HAL	typeref:typename:int
reader_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Latch.hpp	/^  TReader reader_;$/;"	m	class:Latch	typeref:typename:TReader
reader_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  TReader reader_;$/;"	m	class:MsgPackDeserializer	typeref:typename:TReader
ready	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    bool ready() {$/;"	f	class:CEveryNTime	typeref:typename:bool
ready	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    bool ready() {$/;"	f	class:CEveryNTimePeriods	typeref:typename:bool
readyToReceive	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.h	/^  bool readyToReceive()                { return !m_sentXOFF; }$/;"	f	class:fabgl::SerialPort	typeref:typename:bool
readyToSend	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^bool SerialPort::readyToSend()$/;"	f	class:fabgl::SerialPort	typeref:typename:bool
readyTransferBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	static inline void readyTransferBits(FASTLED_REGISTER uint32_t bits) {$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
realSpeed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  bool realSpeed() { return m_realSpeed; }$/;"	f	class:Machine	typeref:typename:bool
realloc32	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void * realloc32(void * ptr, size_t size)$/;"	f	namespace:fabgl	typeref:typename:void *
reallocPool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  void reallocPool(size_t requiredSize) {$/;"	f	class:BasicJsonDocument	typeref:typename:void
reallocate	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  void* reallocate(void* ptr, size_t new_size) {$/;"	f	class:AllocatorOwner	typeref:typename:void *
reallocate	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/DynamicJsonDocument.hpp	/^  void* reallocate(void* ptr, size_t new_size) {$/;"	f	struct:DefaultAllocator	typeref:typename:void *
realtimeMoving	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  bool     realtimeMoving    = false; \/**< If true moving a window always repaints it, otherwis/;"	m	struct:fabgl::uiAppProps	typeref:typename:bool
realtimeReshaping	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  bool     realtimeReshaping = false; \/**< If true resizing a window always repaints it, otherw/;"	m	struct:fabgl::uiAppProps	typeref:typename:bool
receive	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  static void receive(const uint8_t *mac_addr, const uint8_t *data,$/;"	f	class:JEspnowDevice	typeref:typename:void
receiveDiskImageFromStream	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Mits88Disk::receiveDiskImageFromStream(int drive, Stream * stream)$/;"	f	class:Mits88Disk	typeref:typename:void
receivedBytes	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.h	/^  int receivedBytes() { return m_receivedBytes; }$/;"	f	class:fabgl::ICMP	typeref:typename:int
receivedSeq	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.h	/^  int receivedSeq() { return m_waitingSeq; }$/;"	f	class:fabgl::ICMP	typeref:typename:int
receivedTTL	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.h	/^  int receivedTTL() { return m_receivedTTL; }$/;"	f	class:fabgl::ICMP	typeref:typename:int
rect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    Rect                   rect;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:Rect
rect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Rect uiWindow::rect(uiOrigin origin)$/;"	f	class:fabgl::uiWindow	typeref:typename:Rect
rect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^    Rect rect;$/;"	m	union:fabgl::uiEvent::uiEventParams	typeref:typename:Rect
red	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t red;  \/\/\/< @copydoc r$/;"	m	union:CRGB::__anonbcc8608a070a::__anonbcc8608a0808::__anonbcc8608a090a	typeref:typename:uint8_t
reduceLuminosity	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint16_t reduceLuminosity : 1;  \/**< If enabled reduces luminosity. To implement characters/;"	m	struct:fabgl::GlyphOptions::__anon3dd53dc60108	typeref:typename:uint16_t:1
refresh	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::refresh()$/;"	f	class:fabgl::Terminal	typeref:typename:void
refresh	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::refresh(int X, int Y)$/;"	f	class:fabgl::Terminal	typeref:typename:void
refresh	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::refresh(int X1, int Y1, int X2, int Y2)$/;"	f	class:fabgl::Terminal	typeref:typename:void
refreshSprites	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void BitmappedDisplayController::refreshSprites()$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
reg	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^  uint8_t & reg(int address) { return m_regs[address]; }$/;"	f	class:fabgl::MC146818	typeref:typename:uint8_t &
reg32_t	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^typedef volatile uint32_t & reg32_t;      \/\/\/< Reference to a 32-bit register, volatile$/;"	t	typeref:typename:volatile uint32_t &
reg_ip	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint16_t   * regs16, reg_ip, seg_override;$/;"	v	namespace:fabgl	typeref:typename:uint16_t	file:
reg_pair	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  } reg_pair;$/;"	t	class:fabgl::i8080	typeref:union:fabgl::i8080::__anon81886eed010a
register_table	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  void              * register_table[16];$/;"	m	struct:fabgl::Z80_STATE	typeref:typename:void * [16]
registers	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  } registers;$/;"	m	struct:fabgl::Z80_STATE	typeref:union:fabgl::Z80_STATE::__anon8d47e636030a
regs	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t    regs[48];$/;"	v	namespace:fabgl	typeref:typename:uint8_t[48]	file:
regs16	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint16_t   * regs16, reg_ip, seg_override;$/;"	v	namespace:fabgl	typeref:typename:uint16_t *	file:
regs8	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t    * regs8, i_mod_size, i_d, i_w, raw_opcode_id, xlat_opcode_id, extra, rep_mode,/;"	v	namespace:fabgl	typeref:typename:uint8_t *	file:
regs_a	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int regs_a()   { return cpu.af.b.h;  }$/;"	f	class:fabgl::i8080	typeref:typename:int
regs_b	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int regs_b()   { return cpu.bc.b.h;  }$/;"	f	class:fabgl::i8080	typeref:typename:int
regs_bc	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int regs_bc()  { return cpu.bc.w; }$/;"	f	class:fabgl::i8080	typeref:typename:int
regs_c	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int regs_c()   { return cpu.bc.b.l;  }$/;"	f	class:fabgl::i8080	typeref:typename:int
regs_d	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int regs_d()   { return cpu.de.b.h;  }$/;"	f	class:fabgl::i8080	typeref:typename:int
regs_de	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int regs_de()  { return cpu.de.w; }$/;"	f	class:fabgl::i8080	typeref:typename:int
regs_e	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int regs_e()   { return cpu.de.b.l;  }$/;"	f	class:fabgl::i8080	typeref:typename:int
regs_h	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int regs_h()   { return cpu.hl.b.h;  }$/;"	f	class:fabgl::i8080	typeref:typename:int
regs_hl	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int regs_hl()  { return cpu.hl.w; }$/;"	f	class:fabgl::i8080	typeref:typename:int
regs_l	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int regs_l()   { return cpu.hl.b.l;  }$/;"	f	class:fabgl::i8080	typeref:typename:int
regs_offset	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static int32_t    regs_offset;$/;"	v	namespace:fabgl	typeref:typename:int32_t	file:
regs_sp	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  int regs_sp()  { return cpu.sp.w; }$/;"	f	class:fabgl::i8080	typeref:typename:int
release	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^  long release; \/\/ time in millis $/;"	m	struct:playsounddata	typeref:typename:long
release	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^  long release; \/\/ time in millis $/;"	m	struct:playsounddata	typeref:typename:long
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	virtual void release() { lo(); }$/;"	f	class:Pin	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } \/\/ FastPin<SELECT_PIN>::lo/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	void release() { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	void inline release() __attribute__((always_inline)) { if(m_pSelect != NULL) { m_pSelect->relea/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	void inline release() { \/* TODO *\/ }$/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	void inline release() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	void inline release() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  void inline release() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	void inline release() __attribute__((always_inline)) {$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    void release() { shouldWait(); restoreSPIData(); }$/;"	f	class:NRF51SPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        void release() {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	void inline release() __attribute__((always_inline)) { if(m_pSelect != NULL) { m_pSelect->relea/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void release() {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void release() {$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void release() {$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	void release() { $/;"	f	class:ESP32SPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	void release() { $/;"	f	class:ESP8266SPIOutput	typeref:typename:void
release	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	void inline release() __attribute__((always_inline)) {$/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
releaseFromIsr	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void            releaseFromIsr() {$/;"	f	class:PWM_Arbiter	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
releaseMem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::releaseMem(uint16_t startAddr, size_t endAddr)$/;"	f	class:HAL	typeref:typename:void
releaseSequenceBuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void releaseSequenceBuffer() {$/;"	f	class:ClocklessController	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
reload	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::reload()$/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
reloc_info_t	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^} reloc_info_t;$/;"	t	typeref:struct:__anonb43f0d850108	file:
reloc_sort_func	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^static int reloc_sort_func(const void* p_lhs, const void* p_rhs)$/;"	f	typeref:typename:int	file:
remountSDCard	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::remountSDCard()$/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
remountSPIFFS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::remountSPIFFS()$/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE void remove(iterator it) const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE void
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE void remove(size_t index) const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE void
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^      remove(const TString& key) {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TString>::value>::type
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  FORCE_INLINE void remove(size_t index) {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE void
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  remove(TChar* key) {$/;"	f	class:JsonDocument	typeref:typename:FORCE_INLINE typename detail::enable_if<detail::IsString<TChar * >::value>::type
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE void remove(TChar* key) const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE void
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE void remove(const TString& key) const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE void
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE void remove(iterator it) const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE void
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  void remove(TAdaptedString key) {$/;"	f	class:VariantData	typeref:typename:void
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  void remove(size_t index) {$/;"	f	class:VariantData	typeref:typename:void
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE typename enable_if<IsString<TChar*>::value>::type remove($/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE typename enable_if<IsString<TChar * >::value>::type
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE typename enable_if<IsString<TString>::value>::type remove($/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE typename enable_if<IsString<TString>::value>::type
remove	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE void remove(size_t index) const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE void
remove	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^void QuadTree::remove(QuadTreeObject * object)$/;"	f	class:fabgl::QuadTree	typeref:typename:void
remove	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void FileBrowser::remove(char const * name)$/;"	f	class:fabgl::FileBrowser	typeref:typename:void
remove	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void StringList::remove(int index)$/;"	f	class:fabgl::StringList	typeref:typename:void
removeCRT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::removeCRT()$/;"	f	class:Machine	typeref:typename:void
removeChild	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::removeChild(uiWindow * child, bool freeChild)$/;"	f	class:fabgl::uiWindow	typeref:typename:void
removeElement	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline void CollectionData::removeElement(size_t index) {$/;"	f	class:CollectionData	typeref:typename:void
removeFileFromCache	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::removeFileFromCache(FILE * file)$/;"	f	class:BDOS	typeref:typename:void
removeMember	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionData.hpp	/^  void removeMember(TAdaptedString key) {$/;"	f	class:CollectionData	typeref:typename:void
removeMember	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  void removeMember(TAdaptedString key) const {$/;"	f	class:JsonObject	typeref:typename:void
removeRSX	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::removeRSX()$/;"	f	class:BDOS	typeref:typename:void
removeRectangle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void removeRectangle(Stack<Rect> & rects, Rect const & mainRect, Rect const & rectToRemove)$/;"	f	namespace:fabgl	typeref:typename:void
removeSel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiTextEdit::removeSel()$/;"	f	class:fabgl::uiTextEdit	typeref:typename:void
removeSlot	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline void CollectionData::removeSlot(VariantSlot* slot) {$/;"	f	class:CollectionData	typeref:typename:void
removeSprite	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^void CollisionDetector::removeSprite(Sprite * sprite)$/;"	f	class:fabgl::CollisionDetector	typeref:typename:void
removeSprite	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  void removeSprite(Sprite * sprite) { m_collisionDetector.removeSprite(sprite); }$/;"	f	class:fabgl::Scene	typeref:typename:void
removeSprites	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void removeSprites() { setSprites(nullptr, 0, 0); }$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
remove_const	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_const.hpp	/^struct remove_const {$/;"	s
remove_const	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_const.hpp	/^struct remove_const<const T> {$/;"	s
remove_cv	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_cv.hpp	/^struct remove_cv {$/;"	s
remove_cv	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_cv.hpp	/^struct remove_cv<const T> {$/;"	s
remove_cv	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_cv.hpp	/^struct remove_cv<const volatile T> {$/;"	s
remove_cv	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_cv.hpp	/^struct remove_cv<volatile T> {$/;"	s
remove_reference	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_reference.hpp	/^struct remove_reference {$/;"	s
remove_reference	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_reference.hpp	/^struct remove_reference<T&> {$/;"	s
rename	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void FileBrowser::rename(char const * oldName, char const * newName)$/;"	f	class:fabgl::FileBrowser	typeref:typename:void
renameButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  uiButton *      renameButton;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:uiButton *
renderGlyphsBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::renderGlyphsBuffer(int itemX, int itemY, GlyphsBuffer const * glyphsBuffer)$/;"	f	class:fabgl::Canvas	typeref:typename:void
renderGlyphsBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::renderGlyphsBuffer(GlyphsBufferRenderInfo const & gly/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
rep_mode	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t    * regs8, i_mod_size, i_d, i_w, raw_opcode_id, xlat_opcode_id, extra, rep_mode,/;"	v	namespace:fabgl	typeref:typename:uint8_t	file:
rep_override_en	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t    * regs8, i_mod_size, i_d, i_w, raw_opcode_id, xlat_opcode_id, extra, rep_mode,/;"	v	namespace:fabgl	typeref:typename:uint8_t	file:
repaint	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::repaint()$/;"	f	class:fabgl::uiWindow	typeref:typename:void
repaint	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::repaint(Rect const & rect)$/;"	f	class:fabgl::uiWindow	typeref:typename:void
repaintRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::repaintRect(Rect const & rect)$/;"	f	class:fabgl::uiApp	typeref:typename:void
repaintScrollBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiScrollableControl::repaintScrollBar(uiOrientation orientation)$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:void
repaintWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::repaintWindow(uiWindow * window)$/;"	f	class:fabgl::uiApp	typeref:typename:void
replacePathSep	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void replacePathSep(char * path, char newSep)$/;"	f	namespace:fabgl	typeref:typename:void
replacePool	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  void replacePool(detail::MemoryPool pool) {$/;"	f	class:JsonDocument	typeref:typename:void
replace_placeholders	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^static void replace_placeholders(uint32_t prg_start, int size, bool port0Enabled, gpio_num_t por/;"	f	namespace:fabgl	typeref:typename:void	file:
replyAddr	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  uint8_t replyAddr[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};$/;"	m	class:JEspnowDevice	typeref:typename:uint8_t[6]
reportEOIA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^reportEOIA:$/;"	l
reportEOIB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^reportEOIB:$/;"	l
repository	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^  "repository": {$/;"	o
repository	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.properties	/^repository=https:\/\/github.com\/bblanchon\/ArduinoJson.git$/;"	k
repository	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "repository":$/;"	o
repository	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "repository": {$/;"	o
reqVirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  VirtualKey   reqVirtualKey;   \/**< Currently pressed virtual key *\/$/;"	m	struct:fabgl::DeadKeyVirtualKeyDef	typeref:typename:VirtualKey
reqVirtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  VirtualKey reqVirtualKey; \/**< Source virtualkey translated using VirtualKeyDef. *\/$/;"	m	struct:fabgl::AltVirtualKeyDef	typeref:typename:VirtualKey
requestToResendLastByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^void PS2Device::requestToResendLastByte()$/;"	f	class:fabgl::PS2Device	typeref:typename:void
requiredHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              requiredHeight;$/;"	m	struct:fabgl::InputForm	typeref:typename:int
requiredWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int              requiredWidth;$/;"	m	struct:fabgl::InputForm	typeref:typename:int
reset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::reset()$/;"	f	class:BIOS	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::reset()$/;"	f	class:Machine	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::reset()$/;"	f	class:IECDrive	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.cpp	/^void MOS6561::reset()$/;"	f	class:MOS6561	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::reset()$/;"	f	class:Machine	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::reset()$/;"	f	class:fabgl::Canvas	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^bool Keyboard::reset()$/;"	f	class:fabgl::Keyboard	typeref:typename:bool
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^bool Mouse::reset()$/;"	f	class:fabgl::Mouse	typeref:typename:bool
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  void reset() { hardReset(); softReset(); }$/;"	f	class:fabgl::TFTController	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^void MC146818::reset()$/;"	f	class:fabgl::MC146818	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^int MOS6502::reset()$/;"	f	class:fabgl::MOS6502	typeref:typename:int
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::reset()$/;"	f	class:fabgl::PC8250	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^void PIC8259::reset()$/;"	f	class:fabgl::PIC8259	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.cpp	/^void PIT8253::reset()$/;"	f	class:fabgl::PIT8253	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.cpp	/^void VIA6522::reset()$/;"	f	class:fabgl::VIA6522	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^void Z80::reset()$/;"	f	class:fabgl::Z80	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^void i8042::reset()$/;"	f	class:fabgl::i8042	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^void i8080::reset()$/;"	f	class:fabgl::i8080	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::reset()$/;"	f	class:fabgl::i8086	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::reset()$/;"	f	class:fabgl::Terminal	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    void reset() { mPrevTrigger = getTime(); };$/;"	f	class:CEveryNTime	typeref:typename:void
reset	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    void reset() { mPrevTrigger = getTime(); };$/;"	f	class:CEveryNTimePeriods	typeref:typename:void
resetButtons	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void InputBox::resetButtons()$/;"	f	class:fabgl::InputBox	typeref:typename:void
resetCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^    int32_t resetCount;   \/\/ Reload value when count is zero$/;"	m	struct:fabgl::PIT8253::TimerInfo	typeref:typename:int32_t
resetDiskChanged	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  void resetDiskChanged(int drive)             { m_diskChanged[drive] = false; }$/;"	f	class:Machine	typeref:typename:void
resetGlyphOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::resetGlyphOptions()$/;"	f	class:fabgl::Canvas	typeref:typename:void
resetHolding	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^    int32_t resetHolding; \/\/ Holding area for timer reset count$/;"	m	struct:fabgl::PIT8253::TimerInfo	typeref:typename:int32_t
resetJoy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::resetJoy()$/;"	f	class:Machine	typeref:typename:void
resetKeyboard	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::resetKeyboard()$/;"	f	class:Machine	typeref:typename:void
resetMachine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^bool Machine::resetMachine(void * context)$/;"	f	class:Machine	typeref:typename:bool
resetPaintOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::resetPaintOptions()$/;"	f	class:fabgl::Canvas	typeref:typename:void
resetPaintState	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::resetPaintState()$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
resetProgramEnv	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::resetProgramEnv()$/;"	f	class:BDOS	typeref:typename:void
resetSPI	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	void resetSPI() { m_SPI->SPI_CR = SPI_CR_SWRST; }$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
resetTabStops	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::resetTabStops()$/;"	f	class:fabgl::Terminal	typeref:typename:void
reshape	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiWindow::reshape(Rect const & r)$/;"	f	class:fabgl::uiWindow	typeref:typename:void
reshapeWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::reshapeWindow(uiWindow * window, Rect const & rect)$/;"	f	class:fabgl::uiApp	typeref:typename:void
resize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Rect resize(Size size) const                   { return Rect(X1, Y1, X1 + size.width - 1, Y1 +/;"	f	struct:fabgl::Rect	typeref:typename:Rect
resize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Rect resize(int width, int height) const       { return Rect(X1, Y1, X1 + width - 1, Y1 + heig/;"	f	struct:fabgl::Rect	typeref:typename:Rect
resize1_12x12	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t resize1_12x12[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
resize2_12x12	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t resize2_12x12[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
resize3_9x17	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t resize3_9x17[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
resize4_17x9	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t resize4_17x9[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
resizeWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::resizeWindow(uiWindow * window, Size size)$/;"	f	class:fabgl::uiApp	typeref:typename:void
resizeWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::resizeWindow(uiWindow * window, int width, int height)$/;"	f	class:fabgl::uiApp	typeref:typename:void
resizeable	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t resizeable        : 1; \/**< Frame is resizeable. Make sure the window border has enou/;"	m	struct:fabgl::uiFrameProps	typeref:typename:uint8_t:1
resolution	examples/test/lib/JFixLib/src/Event/JWavetable.h	/^  int resolution;$/;"	m	class:JWavetable	typeref:typename:int
resolutionComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiComboBox *      resolutionComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiComboBox *
restoreCursorState	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::restoreCursorState()$/;"	f	class:fabgl::Terminal	typeref:typename:void
restoreSPIData	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    void restoreSPIData() {$/;"	f	class:NRF51SPIOutput	typeref:typename:void
restoreSpimConfig	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        void restoreSpimConfig() {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
restore_spi_state	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	void inline restore_spi_state() __attribute__ ((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
restore_spi_state	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	void inline restore_spi_state() __attribute__ ((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
result_type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/Visitor.hpp	/^  typedef TResult result_type;$/;"	t	struct:Visitor	typeref:typename:TResult
resumeBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::resumeBackgroundPrimitiveExecution()$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
resumeBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::resumeBackgroundPrimitiveExecution()$/;"	f	class:fabgl::TFTController	typeref:typename:void
resumeBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^void CVBSBaseController::resumeBackgroundPrimitiveExecution()$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
resumeBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::resumeBackgroundPrimitiveExecution()$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
resumeBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void VGAController::resumeBackgroundPrimitiveExecution()$/;"	f	class:fabgl::VGAController	typeref:typename:void
resumePort	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^void PS2Device::resumePort()$/;"	f	class:fabgl::PS2Device	typeref:typename:void
retCode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  int32_t   retCode;$/;"	m	struct:FileSearchState	typeref:typename:int32_t
ret_handle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^  intr_handle_t * ret_handle;$/;"	m	struct:fabgl::esp_intr_alloc_args	typeref:typename:intr_handle_t *	file:
retrieve_flags	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^void i8080::retrieve_flags()$/;"	f	class:fabgl::i8080	typeref:typename:void
returnSFCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  bool      returnSFCB;$/;"	m	struct:FileSearchState	typeref:typename:bool
retval	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  InputResult      retval;$/;"	m	struct:fabgl::InputForm	typeref:typename:InputResult
reverseVideo	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::reverseVideo(bool value)$/;"	f	class:fabgl::Terminal	typeref:typename:void
reverseWraparoundMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         reverseWraparoundMode;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
reversed	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    bool reversed() { return len < 0; }$/;"	f	class:CPixelView	typeref:typename:bool
rgb222_to_hsv	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void rgb222_to_hsv(int R, int G, int B, double * h, double * s, double * v)$/;"	f	namespace:fabgl	typeref:typename:void
rgb2hsv_approximate	examples/test/.pio/libdeps/esp32dev/FastLED/src/hsv2rgb.cpp	/^CHSV rgb2hsv_approximate( const CRGB& rgb)$/;"	f	typeref:typename:CHSV
rgba	examples/test/lib/JFixLib/src/Event/Event.h	/^  float rgba[4] = {1, 1, 1, 1};$/;"	m	class:Event	typeref:typename:float[4]
rgbaBackground	examples/test/lib/JFixLib/src/JFixture.h	/^  float rgbaBackground[4] = {0.0};$/;"	m	class:JFixture	typeref:typename:float[4]
rhs	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  T rhs;  \/\/ TODO: store adapted string?$/;"	m	struct:Comparer	typeref:typename:T
rhs	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  T rhs;$/;"	m	struct:Comparer	typeref:typename:T
rhs	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  const VariantData* rhs;$/;"	m	struct:VariantComparer	typeref:typename:const VariantData *
rhsData_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  const char* rhsData_;$/;"	m	struct:RawComparer	typeref:typename:const char *
rhsSize_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  size_t rhsSize_;$/;"	m	struct:RawComparer	typeref:typename:size_t
rhs_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  const CollectionData* rhs_;$/;"	m	struct:ArrayComparer	typeref:typename:const CollectionData *
rhs_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  const CollectionData* rhs_;$/;"	m	struct:ObjectComparer	typeref:typename:const CollectionData *
right	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  VirtualKey up, down, left, right, buttonA, buttonB;$/;"	m	struct:GameControllerKeys	typeref:typename:VirtualKey
right	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  VirtualKey up, down, left, right, buttonA, buttonB;$/;"	m	struct:GameControllerKeys	typeref:typename:VirtualKey
right	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t right  : 1;     \/**< Right anchor enable\/disable switch *\/$/;"	m	struct:fabgl::uiAnchors	typeref:typename:uint8_t:1
right	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t right  : 1;   \/**< Contains 1 when right button is pressed. *\/$/;"	m	struct:fabgl::MouseButtons	typeref:typename:uint8_t:1
right_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  char *begin_, *left_, *right_, *end_;$/;"	m	class:MemoryPool	typeref:typename:char *
rightarrow_11x9	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t rightarrow_11x9[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
rm_mode012_reg2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t rm_mode012_reg2[] = { 6, 7, 6, 7, 12, 12, 12, 12 };$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
rm_mode0_dfseg	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t rm_mode0_dfseg[]  = { 11, 11, 10, 10, 11, 11, 11, 11 };$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
rm_mode0_disp	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t rm_mode0_disp[]   = { 0, 0, 0, 0, 0, 0, 1, 0 };$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
rm_mode0_reg1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t rm_mode0_reg1[]   = { 3, 3, 5, 5, 6, 7, 12, 3 };$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
rm_mode12_dfseg	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t rm_mode12_dfseg[] = { 11, 11, 10, 10, 11, 11, 10, 11 };$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
rm_mode12_disp	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t rm_mode12_disp[]  = { 1, 1, 1, 1, 1, 1, 1, 1 };$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
rm_mode12_reg1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t rm_mode12_reg1[]  = { 3, 3, 5, 5, 6, 7, 5, 3 };$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
rom_config	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^rom_config  dw 16          ; 16 bytes following$/;"	d
rootWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiFrame * rootWindow() { return m_rootWindow; }$/;"	f	class:fabgl::uiApp	typeref:typename:uiFrame *
rotate	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  void rotate(Polygon * polygon)$/;"	f	class:PolygonsTest	typeref:typename:void
rotate	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  void rotate(Polygon * polygon)$/;"	f	class:PolygonsTest	typeref:typename:void
rotate	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  void rotate(Polygon * polygon)$/;"	f	class:PolygonsTest	typeref:typename:void
rows	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t         rows;$/;"	m	struct:fabgl::GlyphsBuffer	typeref:typename:int16_t
rowsComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiComboBox *      rowsComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiComboBox *
run	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Machine::run(CPU cpu, int address)$/;"	f	class:Machine	typeref:typename:void
run	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^void CCP::run()$/;"	f	class:CCP	typeref:typename:void
run	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::run()$/;"	f	class:Machine	typeref:typename:void
run	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^int Machine::run()$/;"	f	class:Machine	typeref:typename:int
run	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^void CVBSGenerator::run(bool subCarrierOnly)$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:void
run	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^void CVBSBaseController::run()$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
run	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::run()$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
run	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiApp::run(BitmappedDisplayController * displayController, Keyboard * keyboard, Mouse * mous/;"	f	class:fabgl::uiApp	typeref:typename:int
runAsync	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiApp & uiApp::runAsync(BitmappedDisplayController * displayController, int taskStack, Keyboard /;"	f	class:fabgl::uiApp	typeref:typename:uiApp &
runCommand	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::runCommand(uint16_t cmdline)$/;"	f	class:BDOS	typeref:typename:void
runDMA	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^void CVBSGenerator::runDMA(lldesc_t volatile * dmaBuffers)$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:void
runTask	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::runTask(void * pvParameters)$/;"	f	class:Machine	typeref:typename:void
running	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^    bool    running;      \/\/ counting down in course$/;"	m	struct:fabgl::PIT8253::TimerInfo	typeref:typename:bool
rxCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPortTerminalConnector::rxCallback(void * args, uint8_t value, bool fromISR)$/;"	f	class:fabgl::SerialPortTerminalConnector	typeref:typename:void
rxCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::rxCallback(void * args, uint8_t value, bool fromISR)$/;"	f	class:fabgl::PC8250	typeref:typename:void
rxReadyCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^bool SerialPortTerminalConnector::rxReadyCallback(void * args, bool fromISR)$/;"	f	class:fabgl::SerialPortTerminalConnector	typeref:typename:bool
rxReadyCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^bool PC8250::rxReadyCallback(void * args, bool fromISR)$/;"	f	class:fabgl::PC8250	typeref:typename:bool
rx_delay	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t rx_delay;     \/\/ IFTIMING.RXDELAY$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
s	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t s;    \/\/\/< @copydoc saturation$/;"	m	union:CHSV::__anonbcc8608a010a::__anonbcc8608a0208::__anonbcc8608a040a	typeref:typename:uint8_t
s	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^  uint32_t s[3];$/;"	m	struct:M0ClocklessData	typeref:typename:uint32_t[3]
s	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    unsigned short a, s, r;$/;"	m	class:JEnv	typeref:typename:unsigned short
sInPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static volatile RoReg *sInPort;   \/\/\/< Input register for the pin$/;"	m	class:FastPin	typeref:typename:volatile RoReg *
sInPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^template<uint8_t PIN> volatile RoReg *FastPin<PIN>::sInPort;$/;"	m	class:FastPin<PIN>	typeref:typename:volatile RoReg *
sPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static RwReg sPinMask;            \/\/\/< Bitmask for the pin within its register$/;"	m	class:FastPin	typeref:typename:RwReg
sPinMask	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^template<uint8_t PIN> RwReg FastPin<PIN>::sPinMask;$/;"	m	class:FastPin<PIN>	typeref:typename:RwReg
sPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	static volatile RwReg *sPort;     \/\/\/< Output register for the pin$/;"	m	class:FastPin	typeref:typename:volatile RwReg *
sPort	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^template<uint8_t PIN> volatile RwReg *FastPin<PIN>::sPort;$/;"	m	class:FastPin<PIN>	typeref:typename:volatile RwReg *
s_Buffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        static uint8_t  s_Buffer[2][2]; \/\/ 2x two-byte buffers, allows one buffer currently be/;"	m	class:NRF52SPIOutput	typeref:typename:uint8_t[2][2]
s_Buffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^    uint8_t NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>::s_Buffer[2][2] = {{0,0},{/;"	m	class:NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>	typeref:typename:uint8_t[2][2]
s_BufferIndex	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        static uint8_t  s_BufferIndex;$/;"	m	class:NRF52SPIOutput	typeref:typename:uint8_t
s_BufferIndex	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^    uint8_t NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>::s_BufferIndex = 0;$/;"	m	class:NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>	typeref:typename:uint8_t
s_CLKTimeOutError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^bool               PS2Controller::s_CLKTimeOutError[2];$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool[2]
s_CLKTimeOutError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static bool               s_CLKTimeOutError[2];$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool[2]
s_DMALines	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^lldesc_t volatile * *    VGADirectController::s_DMALines = nullptr;$/;"	m	class:fabgl::VGADirectController	typeref:typename:lldesc_t volatile **
s_DMALines	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  static lldesc_t volatile * * s_DMALines;$/;"	m	class:fabgl::VGADirectController	typeref:typename:lldesc_t volatile **
s_InUse	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        static bool s_InUse;$/;"	m	class:NRF52SPIOutput	typeref:typename:bool
s_InUse	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^    bool NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>::s_InUse = false;$/;"	m	class:NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>	typeref:typename:bool
s_Isr	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    static FASTLED_NRF52_PWM_INTERRUPT_HANDLER volatile   s_Isr;$/;"	m	class:PWM_Arbiter	typeref:typename:FASTLED_NRF52_PWM_INTERRUPT_HANDLER volatile
s_Isr	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^template <uint32_t _PWM_ID> FASTLED_NRF52_PWM_INTERRUPT_HANDLER volatile  PWM_Arbiter<_PWM_ID>::/;"	m	class:PWM_Arbiter<_PWM_ID>	typeref:typename:FASTLED_NRF52_PWM_INTERRUPT_HANDLER volatile
s_NeedToWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        static bool s_NeedToWait; \/\/ a data transfer was started, and completion event was not/;"	m	class:NRF52SPIOutput	typeref:typename:bool
s_NeedToWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^    bool NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>::s_NeedToWait = false;$/;"	m	class:NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>	typeref:typename:bool
s_PWM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    static NRF_PWM_Type * const                  s_PWM;$/;"	m	class:PWM_Arbiter	typeref:typename:NRF_PWM_Type * const
s_PWM	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^template <uint32_t _PWM_ID> NRF_PWM_Type * const PWM_Arbiter<_PWM_ID>::s_PWM           =$/;"	m	class:PWM_Arbiter<_PWM_ID>	typeref:typename:NRF_PWM_Type * const
s_PWM_IRQ	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    static IRQn_Type      const                           s_PWM_IRQ;$/;"	m	class:PWM_Arbiter	typeref:typename:IRQn_Type const
s_PWM_IRQ	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^template <uint32_t _PWM_ID> IRQn_Type    const                            PWM_Arbiter<_PWM_ID>::/;"	m	class:PWM_Arbiter<_PWM_ID>	typeref:typename:IRQn_Type const
s_PwmInUse	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    static uint32_t                              s_PwmInUse;$/;"	m	class:PWM_Arbiter	typeref:typename:uint32_t
s_PwmInUse	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^template <uint32_t _PWM_ID> uint32_t                                      PWM_Arbiter<_PWM_ID>::/;"	m	class:PWM_Arbiter<_PWM_ID>	typeref:typename:uint32_t
s_SDCard	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^sdmmc_card_t * FileBrowser::s_SDCard = nullptr;$/;"	m	class:fabgl::FileBrowser	typeref:typename:sdmmc_card_t *
s_SDCard	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static sdmmc_card_t * s_SDCard;$/;"	m	class:fabgl::FileBrowser	typeref:typename:sdmmc_card_t *
s_SDCardAllocationUnitSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int            FileBrowser::s_SDCardAllocationUnitSize;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int
s_SDCardAllocationUnitSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static int            s_SDCardAllocationUnitSize;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int
s_SDCardCLK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int8_t         FileBrowser::s_SDCardCLK;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int8_t
s_SDCardCLK	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static int8_t         s_SDCardCLK;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int8_t
s_SDCardCS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int8_t         FileBrowser::s_SDCardCS;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int8_t
s_SDCardCS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static int8_t         s_SDCardCS;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int8_t
s_SDCardMISO	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int8_t         FileBrowser::s_SDCardMISO;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int8_t
s_SDCardMISO	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static int8_t         s_SDCardMISO;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int8_t
s_SDCardMOSI	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int8_t         FileBrowser::s_SDCardMOSI;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int8_t
s_SDCardMOSI	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static int8_t         s_SDCardMOSI;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int8_t
s_SDCardMaxFiles	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^size_t         FileBrowser::s_SDCardMaxFiles;$/;"	m	class:fabgl::FileBrowser	typeref:typename:size_t
s_SDCardMaxFiles	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static size_t         s_SDCardMaxFiles;$/;"	m	class:fabgl::FileBrowser	typeref:typename:size_t
s_SDCardMaxFreqKHz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int            FileBrowser::s_SDCardMaxFreqKHz = 19000;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int
s_SDCardMaxFreqKHz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static int            s_SDCardMaxFreqKHz;$/;"	m	class:fabgl::FileBrowser	typeref:typename:int
s_SDCardMountPath	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^char const *   FileBrowser::s_SDCardMountPath;$/;"	m	class:fabgl::FileBrowser	typeref:typename:char const *
s_SDCardMountPath	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static char const *   s_SDCardMountPath;$/;"	m	class:fabgl::FileBrowser	typeref:typename:char const *
s_SDCardMounted	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool           FileBrowser::s_SDCardMounted = false;$/;"	m	class:fabgl::FileBrowser	typeref:typename:bool
s_SDCardMounted	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static bool           s_SDCardMounted;$/;"	m	class:fabgl::FileBrowser	typeref:typename:bool
s_SPIFFSMaxFiles	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^size_t         FileBrowser::s_SPIFFSMaxFiles;$/;"	m	class:fabgl::FileBrowser	typeref:typename:size_t
s_SPIFFSMaxFiles	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static size_t         s_SPIFFSMaxFiles;$/;"	m	class:fabgl::FileBrowser	typeref:typename:size_t
s_SPIFFSMountPath	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^char const *   FileBrowser::s_SPIFFSMountPath;$/;"	m	class:fabgl::FileBrowser	typeref:typename:char const *
s_SPIFFSMountPath	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static char const *   s_SPIFFSMountPath;$/;"	m	class:fabgl::FileBrowser	typeref:typename:char const *
s_SPIFFSMounted	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool           FileBrowser::s_SPIFFSMounted = false;$/;"	m	class:fabgl::FileBrowser	typeref:typename:bool
s_SPIFFSMounted	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static bool           s_SPIFFSMounted;$/;"	m	class:fabgl::FileBrowser	typeref:typename:bool
s_SequenceBuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    static uint16_t s_SequenceBuffer[_PWM_BUFFER_COUNT];$/;"	m	class:ClocklessController	typeref:typename:uint16_t[]
s_SequenceBuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^uint16_t ClocklessController<_DATA_PIN, _T1, _T2, _T3, _RGB_ORDER, _XTRA0, _FLIP, _WAIT_TIME_MIC/;"	m	class:ClocklessController<_DATA_PIN, _T1, _T2, _T3, _RGB_ORDER, _XTRA0, _FLIP, _WAIT_TIME_MICROSECONDS>	typeref:typename:uint16_t[]
s_SequenceBufferInUse	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    static volatile uint32_t s_SequenceBufferInUse;$/;"	m	class:ClocklessController	typeref:typename:volatile uint32_t
s_SequenceBufferInUse	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^uint32_t volatile ClocklessController<_DATA_PIN, _T1, _T2, _T3, _RGB_ORDER, _XTRA0, _FLIP, _WAIT/;"	m	class:ClocklessController<_DATA_PIN, _T1, _T2, _T3, _RGB_ORDER, _XTRA0, _FLIP, _WAIT_TIME_MICROSECONDS>	typeref:typename:uint32_t volatile
s_SequenceBufferValidElements	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    static uint16_t s_SequenceBufferValidElements;$/;"	m	class:ClocklessController	typeref:typename:uint16_t
s_SequenceBufferValidElements	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^uint16_t ClocklessController<_DATA_PIN, _T1, _T2, _T3, _RGB_ORDER, _XTRA0, _FLIP, _WAIT_TIME_MIC/;"	m	class:ClocklessController<_DATA_PIN, _T1, _T2, _T3, _RGB_ORDER, _XTRA0, _FLIP, _WAIT_TIME_MICROSECONDS>	typeref:typename:uint16_t
s_ULPWakeISRHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^intr_handle_t      PS2Controller::s_ULPWakeISRHandle;$/;"	m	class:fabgl::PS2Controller	typeref:typename:intr_handle_t
s_ULPWakeISRHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static intr_handle_t      s_ULPWakeISRHandle;$/;"	m	class:fabgl::PS2Controller	typeref:typename:intr_handle_t
s_VSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^volatile bool         CVBSGenerator::s_VSync;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile bool
s_VSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static volatile bool          s_VSync;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile bool
s_VSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^bool                     VGADirectController::s_VSync;$/;"	m	class:fabgl::VGADirectController	typeref:typename:bool
s_VSync	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  static bool                  s_VSync;$/;"	m	class:fabgl::VGADirectController	typeref:typename:bool
s_activeLineIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^volatile int          CVBSGenerator::s_activeLineIndex;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int
s_activeLineIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static volatile int           s_activeLineIndex;              \/\/ current active line index: /;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int
s_activeTerminal	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^Terminal * Terminal::s_activeTerminal = nullptr;$/;"	m	class:fabgl::Terminal	typeref:typename:Terminal *
s_activeTerminal	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  static Terminal *  s_activeTerminal;$/;"	m	class:fabgl::Terminal	typeref:typename:Terminal *
s_blankPatternDWord	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^uint32_t            VGATextController::s_blankPatternDWord;$/;"	m	class:fabgl::VGATextController	typeref:typename:uint32_t
s_blankPatternDWord	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  static uint32_t            s_blankPatternDWord;$/;"	m	class:fabgl::VGATextController	typeref:typename:uint32_t
s_busiestCore	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int CoreUsage::s_busiestCore = FABGLIB_VIDEO_CPUINTENSIVE_TASKS_CORE;$/;"	m	class:fabgl::CoreUsage	typeref:typename:int
s_busiestCore	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^    static int s_busiestCore;  \/\/ 0 = core 0, 1 = core 1 (default is FABGLIB_VIDEO_CPUINTENSIV/;"	m	struct:fabgl::CoreUsage	typeref:typename:int
s_charHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^int16_t             VGATextController::s_charHeight;$/;"	m	class:fabgl::VGATextController	typeref:typename:int16_t
s_charHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  static int16_t             s_charHeight;$/;"	m	class:fabgl::VGATextController	typeref:typename:int16_t
s_charWidthInBytes	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^int16_t             VGATextController::s_charWidthInBytes;$/;"	m	class:fabgl::VGATextController	typeref:typename:int16_t
s_charWidthInBytes	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  static int16_t             s_charWidthInBytes;$/;"	m	class:fabgl::VGATextController	typeref:typename:int16_t
s_columns	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^int16_t             VGATextController::s_columns;$/;"	m	class:fabgl::VGATextController	typeref:typename:int16_t
s_columns	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  static int16_t             s_columns;$/;"	m	class:fabgl::VGATextController	typeref:typename:int16_t
s_context	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void *                    i8086::s_context;$/;"	m	class:fabgl::i8086	typeref:typename:void *
s_context	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static void *             s_context;$/;"	m	class:fabgl::i8086	typeref:typename:void *
s_cvbsctrlcycles	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^  volatile uint64_t s_cvbsctrlcycles = 0;$/;"	v	namespace:fabgl	typeref:typename:volatile uint64_t
s_dataIn	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^QueueHandle_t      PS2Controller::s_dataIn[2];$/;"	m	class:fabgl::PS2Controller	typeref:typename:QueueHandle_t[2]
s_dataIn	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static QueueHandle_t      s_dataIn[2];$/;"	m	class:fabgl::PS2Controller	typeref:typename:QueueHandle_t[2]
s_fgbgPattern	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^uint32_t *          VGATextController::s_fgbgPattern = nullptr;$/;"	m	class:fabgl::VGATextController	typeref:typename:uint32_t *
s_fgbgPattern	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  static uint32_t *          s_fgbgPattern;$/;"	m	class:fabgl::VGATextController	typeref:typename:uint32_t *
s_field	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^volatile int          CVBSGenerator::s_field;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int
s_field	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static volatile int           s_field;                        \/\/ current field: 0 = first fi/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int
s_firstVisibleSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^volatile int16_t      CVBSGenerator::s_firstVisibleSample;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int16_t
s_firstVisibleSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static volatile int16_t       s_firstVisibleSample;           \/\/ first visible sample (0...)$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int16_t
s_frame	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^volatile int          CVBSGenerator::s_frame;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int
s_frame	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static volatile int           s_frame;                        \/\/ current frame: 0 to m_param/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int
s_frameLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^volatile int          CVBSGenerator::s_frameLine;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int
s_frameLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static volatile int           s_frameLine;                    \/\/ current frame line: 0 to m_/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int
s_frameResetDesc	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^lldesc_t volatile *      VGADirectController::s_frameResetDesc;$/;"	m	class:fabgl::VGADirectController	typeref:typename:lldesc_t volatile *
s_frameResetDesc	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  static lldesc_t volatile *   s_frameResetDesc;$/;"	m	class:fabgl::VGADirectController	typeref:typename:lldesc_t volatile *
s_frameResetDesc	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^lldesc_t volatile *  VGAPalettedController::s_frameResetDesc;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:lldesc_t volatile *
s_frameResetDesc	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  static lldesc_t volatile *  s_frameResetDesc;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:lldesc_t volatile *
s_frameResetDesc	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^lldesc_t volatile * VGATextController::s_frameResetDesc;$/;"	m	class:fabgl::VGATextController	typeref:typename:lldesc_t volatile *
s_frameResetDesc	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  static lldesc_t volatile * s_frameResetDesc;$/;"	m	class:fabgl::VGATextController	typeref:typename:lldesc_t volatile *
s_halted	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^bool                      i8086::s_halted;$/;"	m	class:fabgl::i8086	typeref:typename:bool
s_halted	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static bool               s_halted;$/;"	m	class:fabgl::i8086	typeref:typename:bool
s_initDone	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^bool               PS2Controller::s_initDone = false;$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool
s_initDone	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static bool               s_initDone;$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^PS2Controller *    PS2Controller::s_instance = nullptr;$/;"	m	class:fabgl::PS2Controller	typeref:typename:PS2Controller *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static PS2Controller *    s_instance;$/;"	m	class:fabgl::PS2Controller	typeref:typename:PS2Controller *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^CVBS16Controller *    CVBS16Controller::s_instance = nullptr;$/;"	m	class:fabgl::CVBS16Controller	typeref:typename:CVBS16Controller *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.h	/^  static CVBS16Controller *    s_instance;$/;"	m	class:fabgl::CVBS16Controller	typeref:typename:CVBS16Controller *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^VGA16Controller * VGA16Controller::s_instance = nullptr;$/;"	m	class:fabgl::VGA16Controller	typeref:typename:VGA16Controller *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.h	/^  static VGA16Controller *    s_instance;$/;"	m	class:fabgl::VGA16Controller	typeref:typename:VGA16Controller *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^VGA2Controller * VGA2Controller::s_instance = nullptr;$/;"	m	class:fabgl::VGA2Controller	typeref:typename:VGA2Controller *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.h	/^  static VGA2Controller *     s_instance;$/;"	m	class:fabgl::VGA2Controller	typeref:typename:VGA2Controller *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^VGA4Controller * VGA4Controller::s_instance = nullptr;$/;"	m	class:fabgl::VGA4Controller	typeref:typename:VGA4Controller *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.h	/^  static VGA4Controller *     s_instance;$/;"	m	class:fabgl::VGA4Controller	typeref:typename:VGA4Controller *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^VGA8Controller * VGA8Controller::s_instance = nullptr;$/;"	m	class:fabgl::VGA8Controller	typeref:typename:VGA8Controller *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.h	/^  static VGA8Controller *     s_instance;$/;"	m	class:fabgl::VGA8Controller	typeref:typename:VGA8Controller *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^VGAController * VGAController::s_instance = nullptr;$/;"	m	class:fabgl::VGAController	typeref:typename:VGAController *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.h	/^  static VGAController * s_instance;$/;"	m	class:fabgl::VGAController	typeref:typename:VGAController *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^VGADirectController *    VGADirectController::s_instance = nullptr;$/;"	m	class:fabgl::VGADirectController	typeref:typename:VGADirectController *
s_instance	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  static VGADirectController * s_instance;$/;"	m	class:fabgl::VGADirectController	typeref:typename:VGADirectController *
s_interrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^i8086::Interrupt          i8086::s_interrupt;$/;"	m	class:fabgl::i8086	typeref:typename:i8086::Interrupt
s_interrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static Interrupt          s_interrupt;$/;"	m	class:fabgl::i8086	typeref:typename:Interrupt
s_keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^Keyboard *         PS2Controller::s_keyboard = nullptr;$/;"	m	class:fabgl::PS2Controller	typeref:typename:Keyboard *
s_keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static Keyboard *         s_keyboard;$/;"	m	class:fabgl::PS2Controller	typeref:typename:Keyboard *
s_keyboardAllocated	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^bool               PS2Controller::s_keyboardAllocated = false;$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool
s_keyboardAllocated	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static bool               s_keyboardAllocated;$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool
s_lineSampleToSubCarrierSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^volatile scPhases_t * CVBSGenerator::s_lineSampleToSubCarrierSample;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile scPhases_t *
s_lineSampleToSubCarrierSample	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static volatile scPhases_t *  s_lineSampleToSubCarrierSample; \/\/ converts a line sample (ful/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile scPhases_t *
s_lineSwitch	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^volatile bool         CVBSGenerator::s_lineSwitch;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile bool
s_lineSwitch	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static volatile bool          s_lineSwitch;                   \/\/ line switch$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile bool
s_memory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^uint8_t *         Machine::s_memory;$/;"	m	class:Machine	typeref:typename:uint8_t *
s_memory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  static uint8_t *         s_memory;$/;"	m	class:Machine	typeref:typename:uint8_t *
s_memory	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint8_t *                 i8086::s_memory;$/;"	m	class:fabgl::i8086	typeref:typename:uint8_t *
s_memory	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static uint8_t *          s_memory;$/;"	m	class:fabgl::i8086	typeref:typename:uint8_t *
s_mouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^Mouse *            PS2Controller::s_mouse    = nullptr;$/;"	m	class:fabgl::PS2Controller	typeref:typename:Mouse *
s_mouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static Mouse *            s_mouse;$/;"	m	class:fabgl::PS2Controller	typeref:typename:Mouse *
s_mouseAllocated	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^bool               PS2Controller::s_mouseAllocated    = false;$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool
s_mouseAllocated	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static bool               s_mouseAllocated;$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool
s_paletteToRawPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^volatile uint16_t * * CVBS16Controller::s_paletteToRawPixel[2];$/;"	m	class:fabgl::CVBS16Controller	typeref:typename:volatile uint16_t ** [2]
s_paletteToRawPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.h	/^  static volatile uint16_t * * s_paletteToRawPixel[2];$/;"	m	class:fabgl::CVBS16Controller	typeref:typename:volatile uint16_t ** [2]
s_parityError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^bool               PS2Controller::s_parityError[2];$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool[2]
s_parityError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static bool               s_parityError[2];$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool[2]
s_pendingIRQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^bool                      i8086::s_pendingIRQ;$/;"	m	class:fabgl::i8086	typeref:typename:bool
s_pendingIRQ	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static bool               s_pendingIRQ;$/;"	m	class:fabgl::i8086	typeref:typename:bool
s_pendingIRQIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^uint8_t                   i8086::s_pendingIRQIndex;$/;"	m	class:fabgl::i8086	typeref:typename:uint8_t
s_pendingIRQIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static uint8_t            s_pendingIRQIndex;$/;"	m	class:fabgl::i8086	typeref:typename:uint8_t
s_portEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^bool               PS2Controller::s_portEnabled[2];$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool[2]
s_portEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static bool               s_portEnabled[2];$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool[2]
s_portLock	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^SemaphoreHandle_t  PS2Controller::s_portLock[2];$/;"	m	class:fabgl::PS2Controller	typeref:typename:SemaphoreHandle_t[2]
s_portLock	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static SemaphoreHandle_t  s_portLock[2];$/;"	m	class:fabgl::PS2Controller	typeref:typename:SemaphoreHandle_t[2]
s_quickCheckHardware	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^bool Mouse::s_quickCheckHardware = false;$/;"	m	class:fabgl::Mouse	typeref:typename:bool
s_quickCheckHardware	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  static bool     s_quickCheckHardware;$/;"	m	class:fabgl::Mouse	typeref:typename:bool
s_readPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^i8086::ReadPort           i8086::s_readPort;$/;"	m	class:fabgl::i8086	typeref:typename:i8086::ReadPort
s_readPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static ReadPort           s_readPort;$/;"	m	class:fabgl::i8086	typeref:typename:ReadPort
s_readVideoMemory16	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^i8086::ReadVideoMemory16  i8086::s_readVideoMemory16;$/;"	m	class:fabgl::i8086	typeref:typename:i8086::ReadVideoMemory16
s_readVideoMemory16	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static ReadVideoMemory16  s_readVideoMemory16;$/;"	m	class:fabgl::i8086	typeref:typename:ReadVideoMemory16
s_readVideoMemory8	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^i8086::ReadVideoMemory8   i8086::s_readVideoMemory8;$/;"	m	class:fabgl::i8086	typeref:typename:i8086::ReadVideoMemory8
s_readVideoMemory8	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static ReadVideoMemory8   s_readVideoMemory8;$/;"	m	class:fabgl::i8086	typeref:typename:ReadVideoMemory8
s_rows	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^int16_t             VGATextController::s_rows;$/;"	m	class:fabgl::VGATextController	typeref:typename:int16_t
s_rows	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  static int16_t             s_rows;$/;"	m	class:fabgl::VGATextController	typeref:typename:int16_t
s_scanLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^volatile int          CVBSGenerator::s_scanLine;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int
s_scanLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static volatile int           s_scanLine;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int
s_scanLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^volatile int             VGADirectController::s_scanLine;$/;"	m	class:fabgl::VGADirectController	typeref:typename:volatile int
s_scanLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  static volatile int          s_scanLine;$/;"	m	class:fabgl::VGADirectController	typeref:typename:volatile int
s_scanLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^volatile int         VGAPalettedController::s_scanLine;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:volatile int
s_scanLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  static volatile int         s_scanLine;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:volatile int
s_scanLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^volatile int        VGATextController::s_scanLine;$/;"	m	class:fabgl::VGATextController	typeref:typename:volatile int
s_scanLine	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  static volatile int        s_scanLine;$/;"	m	class:fabgl::VGATextController	typeref:typename:volatile int
s_singleton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^Supervisor * Supervisor::s_singleton = nullptr;$/;"	m	class:Supervisor	typeref:typename:Supervisor *
s_singleton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^  static Supervisor *     s_singleton;$/;"	m	class:Supervisor	typeref:typename:Supervisor *
s_subCarrierPhase	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^volatile scPhases_t * CVBSGenerator::s_subCarrierPhase;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile scPhases_t *
s_subCarrierPhase	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static volatile scPhases_t *  s_subCarrierPhase;              \/\/ ptr to current subcarrier p/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile scPhases_t *
s_syncError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^bool               PS2Controller::s_syncError[2];$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool[2]
s_syncError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static bool               s_syncError[2];$/;"	m	class:fabgl::PS2Controller	typeref:typename:bool[2]
s_textRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^int                 VGATextController::s_textRow;$/;"	m	class:fabgl::VGATextController	typeref:typename:int
s_textRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  static int                 s_textRow;$/;"	m	class:fabgl::VGATextController	typeref:typename:int
s_upperRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^bool                VGATextController::s_upperRow;$/;"	m	class:fabgl::VGATextController	typeref:typename:bool
s_upperRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  static bool                s_upperRow;$/;"	m	class:fabgl::VGATextController	typeref:typename:bool
s_vgapalctrlcycles	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^  volatile uint64_t s_vgapalctrlcycles = 0;$/;"	v	namespace:fabgl	typeref:typename:volatile uint64_t
s_vgatxtcycles	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^  volatile uint64_t s_vgatxtcycles = 0;$/;"	v	namespace:fabgl	typeref:typename:volatile uint64_t
s_videoMemory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^uint8_t *         Machine::s_videoMemory;$/;"	m	class:Machine	typeref:typename:uint8_t *
s_videoMemory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  static uint8_t *         s_videoMemory;$/;"	m	class:Machine	typeref:typename:uint8_t *
s_videoMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^VideoMode CurrentVideoMode::s_videoMode = VideoMode::None;$/;"	m	class:fabgl::CurrentVideoMode	typeref:typename:VideoMode
s_videoMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^    static VideoMode s_videoMode;$/;"	m	struct:fabgl::CurrentVideoMode	typeref:typename:VideoMode
s_viewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^volatile uint8_t * * CVBSPalettedController::s_viewPort;$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:volatile uint8_t **
s_viewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  static volatile uint8_t * * s_viewPort;$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:volatile uint8_t **
s_viewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^volatile uint8_t * * VGAPalettedController::s_viewPort;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:volatile uint8_t **
s_viewPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  static volatile uint8_t * * s_viewPort;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:volatile uint8_t **
s_viewPortVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^volatile uint8_t * * CVBSPalettedController::s_viewPortVisible;$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:volatile uint8_t **
s_viewPortVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  static volatile uint8_t * * s_viewPortVisible;$/;"	m	class:fabgl::CVBSPalettedController	typeref:typename:volatile uint8_t **
s_viewPortVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^volatile uint8_t * * VGAPalettedController::s_viewPortVisible;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:volatile uint8_t **
s_viewPortVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  static volatile uint8_t * * s_viewPortVisible;$/;"	m	class:fabgl::VGAPalettedController	typeref:typename:volatile uint8_t **
s_visibleSamplesCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^volatile int16_t      CVBSGenerator::s_visibleSamplesCount;$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int16_t
s_visibleSamplesCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static volatile int16_t       s_visibleSamplesCount;          \/\/ visible samples in a line$/;"	m	class:fabgl::CVBSGenerator	typeref:typename:volatile int16_t
s_writePort	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^i8086::WritePort          i8086::s_writePort;$/;"	m	class:fabgl::i8086	typeref:typename:i8086::WritePort
s_writePort	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static WritePort          s_writePort;$/;"	m	class:fabgl::i8086	typeref:typename:WritePort
s_writeVideoMemory16	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^i8086::WriteVideoMemory16 i8086::s_writeVideoMemory16;$/;"	m	class:fabgl::i8086	typeref:typename:i8086::WriteVideoMemory16
s_writeVideoMemory16	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static WriteVideoMemory16 s_writeVideoMemory16;$/;"	m	class:fabgl::i8086	typeref:typename:WriteVideoMemory16
s_writeVideoMemory8	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^i8086::WriteVideoMemory8  i8086::s_writeVideoMemory8;$/;"	m	class:fabgl::i8086	typeref:typename:i8086::WriteVideoMemory8
s_writeVideoMemory8	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static WriteVideoMemory8  s_writeVideoMemory8;$/;"	m	class:fabgl::i8086	typeref:typename:WriteVideoMemory8
saccum114	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef int32_t   saccum114;  \/\/\/< no direct ANSI counterpart. 1 bit int, 14 bits fraction$/;"	t	typeref:typename:int32_t
saccum1516	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef int32_t   saccum1516; \/\/\/< ANSI: signed         _Accum. 15 bits int, 16 bits fraction$/;"	t	typeref:typename:int32_t
saccum78	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef int16_t   saccum78;   \/\/\/< ANSI: signed   short _Accum. 7 bits int, 8 bits fraction$/;"	t	typeref:typename:int16_t
saccum87	examples/test/.pio/libdeps/esp32dev/FastLED/src/colorutils.h	/^#define saccum87 /;"	d
sampleRate	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  uint16_t sampleRate() { return m_sampleRate; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:uint16_t
sampleRate_hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          sampleRate_hz;                  \/\/ sample rate (see note above)$/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
sat	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t sat;  \/\/\/< @copydoc saturation$/;"	m	union:CHSV::__anonbcc8608a010a::__anonbcc8608a0208::__anonbcc8608a040a	typeref:typename:uint8_t
saturation	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t saturation;$/;"	m	union:CHSV::__anonbcc8608a010a::__anonbcc8608a0208::__anonbcc8608a040a	typeref:typename:uint8_t
save	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  JsonString save() {$/;"	f	class:StringCopier	typeref:typename:JsonString
save	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp	/^  FORCE_INLINE JsonString save() {$/;"	f	class:StringMover	typeref:typename:FORCE_INLINE JsonString
saveAndQuit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  void saveAndQuit() {$/;"	f	struct:ConfigDialog	typeref:typename:void	file:
saveButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^  uiButton        * saveButton;$/;"	m	struct:ConfigDialog	typeref:typename:uiButton *	file:
saveCursorState	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::saveCursorState()$/;"	f	class:fabgl::Terminal	typeref:typename:void
saveData	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    struct saveData {$/;"	s	class:NRF51SPIOutput
saveIntoConsoleHistory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::saveIntoConsoleHistory(char const * str)$/;"	f	class:BDOS	typeref:typename:void
saveMachineConfiguration	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^void saveMachineConfiguration(MachineConf * mconf)$/;"	f	typeref:typename:void
saveMsg	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  void saveMsg(const uint8_t *data, const uint8_t data_len) {$/;"	f	class:JEspnowDevice	typeref:typename:void
saveProps	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  void saveProps() {$/;"	f	struct:ConfDialogApp	typeref:typename:void
saveSPIData	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    void saveSPIData() {$/;"	f	class:NRF51SPIOutput	typeref:typename:void
saveScore	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^void saveScore()$/;"	f	typeref:typename:void
saveSpimConfig	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        void saveSpimConfig() {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
saveString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  const char* saveString(TAdaptedString str) {$/;"	f	class:MemoryPool	typeref:typename:const char *
saveStringFromFreeZone	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  const char* saveStringFromFreeZone(size_t len) {$/;"	f	class:MemoryPool	typeref:typename:const char *
saveToFile	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^void MachineConf::saveToFile(FILE * file)$/;"	f	class:MachineConf	typeref:typename:void
save_spi_state	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	void inline save_spi_state() __attribute__ ((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
save_spi_state	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	void inline save_spi_state() __attribute__ ((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
savedBackground	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t *          savedBackground;$/;"	m	struct:fabgl::Sprite	typeref:typename:uint8_t *
savedBackgroundHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t            savedBackgroundHeight;$/;"	m	struct:fabgl::Sprite	typeref:typename:int16_t
savedBackgroundWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t            savedBackgroundWidth;$/;"	m	struct:fabgl::Sprite	typeref:typename:int16_t
savedX	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t            savedX;$/;"	m	struct:fabgl::Sprite	typeref:typename:int16_t
savedY	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t            savedY;$/;"	m	struct:fabgl::Sprite	typeref:typename:int16_t
saved_interrupt_status	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^static uint32_t saved_interrupt_status;$/;"	v	typeref:typename:uint32_t
savefont	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def savefont(f, file):$/;"	f
savefontFixed_h	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def savefontFixed_h(f, file, fname):$/;"	f
savefontVar_h	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def savefontVar_h(f, file, fname):$/;"	f
savefontVar_h	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^def savefontVar_h(f, file, fname, stroke, font_size, ifirst, ilast):$/;"	f
savefont_h	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/dewinfont.py	/^def savefont_h(f, file):$/;"	f
sb_	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^        uint32_t sb_   :  1;  \/\/\/< @todo Doc: what is this for?$/;"	m	struct:__anon26d1ab7c010a::__anon26d1ab7c0308	typeref:typename:uint32_t:1
sb_exphi7	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^        uint32_t sb_exphi7 : 8;  \/\/\/< @todo Doc: what is this for?$/;"	m	struct:__anon26d1ab7c010a::__anon26d1ab7c0408	typeref:typename:uint32_t:8
scPhases_t	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  typedef uint16_t scPhases_t;$/;"	t	namespace:fabgl	typeref:typename:uint16_t
scPhases_t	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  typedef uint8_t scPhases_t;$/;"	t	namespace:fabgl	typeref:typename:uint8_t
scale	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelCont/;"	f	struct:PixelController	typeref:typename:uint8_t
scale16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC uint16_t scale16( uint16_t i, fract16 scale )$/;"	f	typeref:typename:LIB8STATIC uint16_t
scale16by8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC_ALWAYS_INLINE uint16_t scale16by8( uint16_t i, fract8 scale )$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint16_t
scale8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
scale8	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB scale8 (const CRGB & scaledown ) const$/;"	f	struct:CRGB	typeref:typename:CRGB
scale8	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB scale8 (uint8_t scaledown ) const$/;"	f	struct:CRGB	typeref:typename:CRGB
scale8_LEAVING_R1_DIRTY	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
scale8_video	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
scale8_video_LEAVING_R1_DIRTY	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/scale8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
scanCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.h	/^  uint8_t       scanCount;       \/**< Scan count. 1 = single scan, 2 = double scan (allowing lo/;"	m	struct:fabgl::VGATimings	typeref:typename:uint8_t
scancode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^    uint8_t  scancode;$/;"	m	struct:BIOS::processScancode::ScanCode2SysCode	typeref:typename:uint8_t	file:
scancode	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  uint8_t      scancode;    \/**< Raw scancode received from the Keyboard device *\/$/;"	m	struct:fabgl::VirtualKeyDef	typeref:typename:uint8_t
scancode	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t    scancode[8];     \/**< Keyboard scancode. Ends with zero if length is <8, otherwise/;"	m	struct:fabgl::VirtualKeyItem	typeref:typename:uint8_t[8]
scancodeAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^int Keyboard::scancodeAvailable()$/;"	f	class:fabgl::Keyboard	typeref:typename:int
scancodeSet	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  int scancodeSet()                { return m_scancodeSet; }$/;"	f	class:fabgl::Keyboard	typeref:typename:int
scancodeToVK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  VirtualKeyDef            scancodeToVK[86];    \/**< Direct one-byte-scancode->virtualkey assoc/;"	m	struct:fabgl::KeyboardLayout	typeref:typename:VirtualKeyDef[86]
scancodeToVK	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^VirtualKey Keyboard::scancodeToVK(uint8_t scancode, bool isExtended, KeyboardLayout const * layo/;"	f	class:fabgl::Keyboard	typeref:typename:VirtualKey
scancodeToVirtualKeyTaskStackSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^int Keyboard::scancodeToVirtualKeyTaskStackSize = FABGLIB_DEFAULT_SCODETOVK_TASK_STACK_SIZE;$/;"	m	class:fabgl::Keyboard	typeref:typename:int
scancodeToVirtualKeyTaskStackSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  static int scancodeToVirtualKeyTaskStackSize;$/;"	m	class:fabgl::Keyboard	typeref:typename:int
scanlineCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^    DrawScanlineCallback scanlineCallback;$/;"	m	struct:fabgl::GraphicsAdapter::setupEmulation::__anonf67d7a610108	typeref:typename:DrawScanlineCallback	file:
scanlinesPerCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^    uint8_t              scanlinesPerCallback;$/;"	m	struct:fabgl::GraphicsAdapter::setupEmulation::__anonf67d7a610108	typeref:typename:uint8_t	file:
sck	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^        uint32_t sck;$/;"	m	struct:NRF51SPIOutput::saveData	typeref:typename:uint32_t
sck_pin	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t sck_pin;$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
score	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int score, points;$/;"	m	struct:Race::Player	typeref:typename:int
scoreFileName	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^const char *scoreFileName = "\/score.dat";$/;"	v	typeref:typename:const char *
scorecolors	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^RGB888 scorecolors[12] = {  RGB888(255, 0, 0),RGB888(255, 255, 128),RGB888(255, 0, 255),$/;"	v	typeref:typename:RGB888[12]
scorelastactivity	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  long scorelastactivity = 0;$/;"	m	struct:Score	typeref:typename:long
screenCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  int screenCol() { return m_screenCol; }$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:int
screenCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int screenCol() { return m_screenCol; }$/;"	f	class:fabgl::TFTController	typeref:typename:int
screenRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.h	/^  int screenRow() { return m_screenRow; }$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:int
screenRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.h	/^  int screenRow() { return m_screenRow; }$/;"	f	class:fabgl::TFTController	typeref:typename:int
screenToWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiWindow * uiApp::screenToWindow(Point & point)$/;"	f	class:fabgl::uiApp	typeref:typename:uiWindow *
scroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::scroll(int offsetX, int offsetY)$/;"	f	class:fabgl::Canvas	typeref:typename:void
scrollBarBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888  scrollBarBackgroundColor          = RGB888(64, 64, 64);     \/**< Background color of /;"	m	struct:fabgl::uiScrollableControlStyle	typeref:typename:RGB888
scrollBarForegroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888  scrollBarForegroundColor          = RGB888(128, 128, 128);  \/**< Foreground color of /;"	m	struct:fabgl::uiScrollableControlStyle	typeref:typename:RGB888
scrollBarSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t scrollBarSize                     = 11;                     \/**< Width of vertical sc/;"	m	struct:fabgl::uiScrollableControlStyle	typeref:typename:uint8_t
scrollDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::scrollDown()$/;"	f	class:fabgl::Terminal	typeref:typename:void
scrollDownAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::scrollDownAt(int startingRow)$/;"	f	class:fabgl::Terminal	typeref:typename:void
scrollUp	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::scrollUp()$/;"	f	class:fabgl::Terminal	typeref:typename:void
scrollUpAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::scrollUpAt(int startingRow)$/;"	f	class:fabgl::Terminal	typeref:typename:void
scroll_dn_gfx320	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_gfx320:$/;"	l
scroll_dn_gfx320_1_row	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_gfx320_1_row:$/;"	l
scroll_dn_gfx320_1_row_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_gfx320_1_row_done:$/;"	l
scroll_dn_gfx320_last_row_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_gfx320_last_row_loop:$/;"	l
scroll_dn_gfx320_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_gfx320_loop:$/;"	l
scroll_dn_gfx640	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_gfx640:$/;"	l
scroll_dn_gfx640_1_row	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_gfx640_1_row:$/;"	l
scroll_dn_gfx640_1_row_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_gfx640_1_row_done:$/;"	l
scroll_dn_gfx640_last_row_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_gfx640_last_row_loop:$/;"	l
scroll_dn_gfx640_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_gfx640_loop:$/;"	l
scroll_dn_mode11	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_mode11:$/;"	l
scroll_dn_mode11_1_row	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_mode11_1_row:$/;"	l
scroll_dn_mode11_1_row_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_mode11_1_row_done:$/;"	l
scroll_dn_mode11_last_row_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_mode11_last_row_loop:$/;"	l
scroll_dn_mode11_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_mode11_loop:$/;"	l
scroll_dn_mode13	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_mode13:$/;"	l
scroll_dn_mode13_1_row	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_mode13_1_row:$/;"	l
scroll_dn_mode13_1_row_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_mode13_1_row_done:$/;"	l
scroll_dn_mode13_last_row_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_mode13_last_row_loop:$/;"	l
scroll_dn_mode13_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_dn_mode13_loop:$/;"	l
scroll_down_1_row	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  scroll_down_1_row:$/;"	l
scroll_down_1_row_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_down_1_row_done:$/;"	l
scroll_down_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_down_done:$/;"	l
scroll_down_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_down_loop:$/;"	l
scroll_down_window	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_down_window:$/;"	l
scroll_up_1_row	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_1_row:$/;"	l
scroll_up_1_row_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_1_row_done:$/;"	l
scroll_up_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_done:$/;"	l
scroll_up_gfx320	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_gfx320:$/;"	l
scroll_up_gfx320_1_row	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_gfx320_1_row:$/;"	l
scroll_up_gfx320_1_row_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_gfx320_1_row_done:$/;"	l
scroll_up_gfx320_last_row_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_gfx320_last_row_loop:$/;"	l
scroll_up_gfx320_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_gfx320_loop:$/;"	l
scroll_up_gfx640	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_gfx640:$/;"	l
scroll_up_gfx640_1_row	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_gfx640_1_row:$/;"	l
scroll_up_gfx640_1_row_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_gfx640_1_row_done:$/;"	l
scroll_up_gfx640_last_row_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_gfx640_last_row_loop:$/;"	l
scroll_up_gfx640_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_gfx640_loop:$/;"	l
scroll_up_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_loop:$/;"	l
scroll_up_mode11	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_mode11:$/;"	l
scroll_up_mode11_1_row	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_mode11_1_row:$/;"	l
scroll_up_mode11_1_row_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_mode11_1_row_done:$/;"	l
scroll_up_mode11_last_row_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_mode11_last_row_loop:$/;"	l
scroll_up_mode11_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_mode11_loop:$/;"	l
scroll_up_mode13	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_mode13:$/;"	l
scroll_up_mode13_1_row	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_mode13_1_row:$/;"	l
scroll_up_mode13_1_row_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_mode13_1_row_done:$/;"	l
scroll_up_mode13_last_row_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_mode13_last_row_loop:$/;"	l
scroll_up_mode13_loop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_mode13_loop:$/;"	l
scroll_up_window	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^scroll_up_window:$/;"	l
scrollableControlStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiScrollableControlStyle & scrollableControlStyle() { return m_scrollableControlStyle; }$/;"	f	class:fabgl::uiScrollableControl	typeref:typename:uiScrollableControlStyle &
scrollingRegion	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Rect         scrollingRegion;$/;"	m	struct:fabgl::PaintState	typeref:typename:Rect
scrollingRegionDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int          scrollingRegionDown;$/;"	m	struct:fabgl::EmuState	typeref:typename:int
scrollingRegionTop	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  int          scrollingRegionTop;$/;"	m	struct:fabgl::EmuState	typeref:typename:int
sdl_init	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SoundGenerator::sdl_init()$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
sdm0	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t sdm0;$/;"	m	struct:fabgl::APLLParams	typeref:typename:uint8_t
sdm1	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t sdm1;$/;"	m	struct:fabgl::APLLParams	typeref:typename:uint8_t
sdm2	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t sdm2;$/;"	m	struct:fabgl::APLLParams	typeref:typename:uint8_t
searchFirst	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::searchFirst(FileSearchState * state)$/;"	f	class:BDOS	typeref:typename:void
searchNext	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::searchNext(FileSearchState * state)$/;"	f	class:BDOS	typeref:typename:void
searchNextFillDMA_DirLabel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::searchNextFillDMA_DirLabel(FileSearchState * state)$/;"	f	class:BDOS	typeref:typename:bool
searchNextFillDMA_FCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::searchNextFillDMA_FCB(FileSearchState * state, bool isFirst, char const * filename11)$/;"	f	class:BDOS	typeref:typename:void
searchNextFillDMA_SFCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::searchNextFillDMA_SFCB(FileSearchState * state)$/;"	f	class:BDOS	typeref:typename:void
seconds	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  int8_t  seconds;      \/**< 0..59             *\/$/;"	m	struct:fabgl::DateTime	typeref:typename:int8_t
seconds16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint16_t seconds16()$/;"	f	typeref:typename:LIB8STATIC uint16_t
seconds_BCD	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.h	/^  uint8_t  seconds_BCD;$/;"	m	struct:DateTime	typeref:typename:uint8_t
sectorChangeDurationDisk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static const int sectorChangeDurationDisk     = 9500;  \/\/ us$/;"	m	class:Mits88Disk	typeref:typename:const int
sectorChangeDurationMiniDisk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static const int sectorChangeDurationMiniDisk = 11000; \/\/ us$/;"	m	class:Mits88Disk	typeref:typename:const int
sectorChangeShortDuration	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static const int sectorChangeShortDuration    = 200;   \/\/ us$/;"	m	class:Mits88Disk	typeref:typename:const int
sectorTrueDuration	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static const int sectorTrueDuration           = 90;    \/\/ us$/;"	m	class:Mits88Disk	typeref:typename:const int
sectors	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^    uint8_t  sectors;$/;"	m	struct:Machine::autoDetectDriveGeometry::__anonbb37e5ab0108	typeref:typename:uint8_t	file:
sectors	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  uint16_t          sectors[DISKCOUNT];$/;"	m	struct:MachineConfItem	typeref:typename:uint16_t[]
sectorsPerTrack	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  int sectorsPerTrack()      { return m_trackSize; }$/;"	f	class:Mits88Disk	typeref:typename:int
seg_override	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint16_t   * regs16, reg_ip, seg_override;$/;"	v	namespace:fabgl	typeref:typename:uint16_t	file:
seg_override_en	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t    * regs8, i_mod_size, i_d, i_w, raw_opcode_id, xlat_opcode_id, extra, rep_mode,/;"	v	namespace:fabgl	typeref:typename:uint8_t	file:
sei	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/led_sysdefs_apollo3.h	/^#define sei(/;"	d
sei	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/led_sysdefs_arm_d21.h	/^#define sei(/;"	d
sei	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/led_sysdefs_arm_d51.h	/^#define sei(/;"	d
sei	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h	/^#define sei(/;"	d
sei	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h	/^#define sei(/;"	d
sei	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/led_sysdefs_arm_rp2040.h	/^#define sei(/;"	d
sei	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/led_sysdefs_arm_sam.h	/^#define sei(/;"	d
sei	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/led_sysdefs_arm_stm32.h	/^#define sei(/;"	d
select	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void StringList::select(int index, bool value)$/;"	f	class:fabgl::StringList	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^InputResult InputBox::select(char const * titleText, char const * messageText, StringList * item/;"	f	class:fabgl::InputBox	typeref:typename:InputResult
select	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^int InputBox::select(char const * titleText, char const * messageText, char const * itemsText, c/;"	f	class:fabgl::InputBox	typeref:typename:int
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	virtual void select() { hi(); }$/;"	f	class:Pin	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } \/\/ FastPin<SELECT_PIN>::hi()/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	void select() { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	void inline select() __attribute__((always_inline)) { if(m_pSelect != NULL) { m_pSelect->select/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	void inline select() { \/* TODO *\/ }$/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	void inline select() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	void inline select() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  void inline select() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	void inline select() __attribute__((always_inline)) {$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    void select() { saveSPIData(); init(); }$/;"	f	class:NRF51SPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        void select() {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	void inline select() __attribute__((always_inline)) { if(m_pSelect != NULL) { m_pSelect->select/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void select() {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void select() {$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void select() {$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	void select() { $/;"	f	class:ESP32SPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	void select() { $/;"	f	class:ESP8266SPIOutput	typeref:typename:void
select	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	void inline select() __attribute__((always_inline)) {$/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
selectBasedOnHashBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/noise.cpp	/^static int8_t inline __attribute__((always_inline)) selectBasedOnHashBit(uint8_t hash, uint8_t b/;"	f	typeref:typename:int8_t	file:
selectColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void selectColor(Color value) { selectItem((int)value); }$/;"	f	class:fabgl::uiColorComboBox	typeref:typename:void
selectFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::selectFont(FontInfo const * fontInfo)$/;"	f	class:fabgl::Canvas	typeref:typename:void
selectItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomComboBox::selectItem(int index)$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:void
selectItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomListBox::selectItem(int index, bool add, bool range)$/;"	f	class:fabgl::uiCustomListBox	typeref:typename:void
selectOnMouseOver	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t selectOnMouseOver : 1;   \/**< If True an item is selected when the mouse is over it */;"	m	struct:fabgl::uiListBoxProps	typeref:typename:uint8_t:1
selectWordAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiTextEdit::selectWordAt(int mouseX)$/;"	f	class:fabgl::uiTextEdit	typeref:typename:void
selected	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool StringList::selected(int index)$/;"	f	class:fabgl::StringList	typeref:typename:bool
selectedBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           selectedBackgroundColor        = RGB888(0, 0, 255);       \/**< Background co/;"	m	struct:fabgl::uiListBoxStyle	typeref:typename:RGB888
selectedColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Color selectedColor()         { return (Color) selectedItem(); }$/;"	f	class:fabgl::uiColorComboBox	typeref:typename:Color
selectedItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  int selectedItem() { return listbox()->firstSelectedItem(); }$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:int
selectedSubItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int selectedSubItem()                                { return m_buttonSubItem; }$/;"	f	class:fabgl::InputBox	typeref:typename:int
selectedTextColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           selectedTextColor              = RGB888(255, 255, 255);   \/**< Text foregrou/;"	m	struct:fabgl::uiListBoxStyle	typeref:typename:RGB888
send	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPort::send(uint8_t value)$/;"	f	class:fabgl::SerialPort	typeref:typename:void
send	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::send(char const * str)$/;"	f	class:fabgl::Terminal	typeref:typename:void
send	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::send(uint8_t c)$/;"	f	class:fabgl::Terminal	typeref:typename:void
sendBreak	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPort::sendBreak(bool value)$/;"	f	class:fabgl::SerialPort	typeref:typename:void
sendCSI	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::sendCSI()$/;"	f	class:fabgl::Terminal	typeref:typename:void
sendCommand	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::sendCommand(uint8_t cmd, uint8_t expectedReply)$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
sendCommand	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^void PS2Device::sendCommand(uint8_t cmd)$/;"	f	class:fabgl::PS2Device	typeref:typename:void
sendCursorKeyCode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::sendCursorKeyCode(uint8_t c)$/;"	f	class:fabgl::Terminal	typeref:typename:void
sendDCS	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::sendDCS()$/;"	f	class:fabgl::Terminal	typeref:typename:void
sendData	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^void PS2Controller::sendData(uint8_t data, int PS2Port)$/;"	f	class:fabgl::PS2Controller	typeref:typename:void
sendDiskImageToStream	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Mits88Disk::sendDiskImageToStream(int drive, Stream * stream)$/;"	f	class:Mits88Disk	typeref:typename:void
sendKeypadCursorKeyCode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::sendKeypadCursorKeyCode(uint8_t applicationCode, const char * numericCode)$/;"	f	class:fabgl::Terminal	typeref:typename:void
sendRefresh	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::sendRefresh()$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
sendRefresh	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::sendRefresh()$/;"	f	class:fabgl::TFTController	typeref:typename:void
sendSS3	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::sendSS3()$/;"	f	class:fabgl::Terminal	typeref:typename:void
sendScreenBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::sendScreenBuffer(Rect updateRect)$/;"	f	class:fabgl::TFTController	typeref:typename:void
sendString	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/programs.h	/^void sendString(char const * str)$/;"	f	typeref:typename:void
send_cmdDisableScanning	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdDisableScanning()$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
send_cmdEcho	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdEcho()$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
send_cmdEnableScanning	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdEnableScanning()$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
send_cmdGetScancodeSet	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdGetScancodeSet(uint8_t * result)$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
send_cmdIdentify	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdIdentify(PS2DeviceType * result)$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
send_cmdLEDs	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdLEDs(bool numLock, bool capsLock, bool scrollLock)$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
send_cmdReset	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdReset()$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
send_cmdSetDefaultParams	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdSetDefaultParams()$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
send_cmdSetResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdSetResolution(int resolution)$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
send_cmdSetSampleRate	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdSetSampleRate(int sampleRate)$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
send_cmdSetScaling	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdSetScaling(int scaling)$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
send_cmdSetScancodeSet	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdSetScancodeSet(uint8_t scancodeSet)$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
send_cmdTypematicRateAndDelay	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::send_cmdTypematicRateAndDelay(int repeatRateMS, int repeatDelayMS)$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
sentence	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.properties	/^sentence=A simple and efficient JSON library for embedded C++.$/;"	k
sentence	examples/test/.pio/libdeps/esp32dev/FabGL/library.properties	/^sentence=ESP32 VGA, PAL\/NTSC Color Composite, SSD1306 ILI9341 ST7789 Controller, PS\/2 Mouse an/;"	k
sentence	examples/test/.pio/libdeps/esp32dev/FastLED/library.properties	/^sentence=Multi-platform library for controlling dozens of different types of LEDs along with opt/;"	k
separator	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char             separator;$/;"	m	struct:fabgl::SelectForm	typeref:typename:char
ser	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transdisk.py	/^ser = serial.Serial(serialPort, baudrate=115200, timeout=None)$/;"	v
ser	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transfile.py	/^ser = serial.Serial(serialPort, baudrate=115200, timeout=None, rtscts=False, dsrdtr=False)$/;"	v
serialPort	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transdisk.py	/^serialPort = sys.argv[3]$/;"	v
serialPort	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transfile.py	/^serialPort = sys.argv[3]$/;"	v
serialPort	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^  SerialPort *                  serialPort;$/;"	m	struct:Session	typeref:typename:SerialPort *
serialPortTerminalConnector	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^  SerialPortTerminalConnector * serialPortTerminalConnector;$/;"	m	struct:Session	typeref:typename:SerialPortTerminalConnector *
serialize	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/serialize.hpp	/^serialize(ArduinoJson::JsonVariantConst source, void* buffer,$/;"	f	typeref:typename:enable_if<!TSerializer<StaticStringWriter>::producesText,size_t>::type
serialize	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/serialize.hpp	/^serialize(ArduinoJson::JsonVariantConst source, void* buffer,$/;"	f	typeref:typename:enable_if<TSerializer<StaticStringWriter>::producesText,size_t>::type
serialize	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/serialize.hpp	/^size_t serialize(ArduinoJson::JsonVariantConst source,$/;"	f	typeref:typename:size_t
serialize	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/serialize.hpp	/^typename enable_if<IsChar<TChar>::value, size_t>::type serialize($/;"	f	typeref:typename:enable_if<IsChar<TChar>::value,size_t>::type
serializeJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^inline size_t serializeJson(JsonVariantConst source, void* buffer,$/;"	f	typeref:typename:size_t
serializeJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^size_t serializeJson(JsonVariantConst source, TDestination& destination) {$/;"	f	typeref:typename:ARDUINOJSON_END_PRIVATE_NAMESPACE ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE size_t
serializeJsonPretty	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp	/^inline size_t serializeJsonPretty(JsonVariantConst source, void* buffer,$/;"	f	typeref:typename:size_t
serializeJsonPretty	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp	/^size_t serializeJsonPretty(JsonVariantConst source, TDestination& destination) {$/;"	f	typeref:typename:ARDUINOJSON_END_PRIVATE_NAMESPACE ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE size_t
serializeMsgPack	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^inline size_t serializeMsgPack(JsonVariantConst source, TDestination& output) {$/;"	f	typeref:typename:ARDUINOJSON_END_PRIVATE_NAMESPACE ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE size_t
serializeMsgPack	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^inline size_t serializeMsgPack(JsonVariantConst source, void* output,$/;"	f	typeref:typename:size_t
serialized	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^inline SerializedValue<T> serialized(T str) {$/;"	f	typeref:typename:SerializedValue<T>
serialized	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^inline SerializedValue<TChar*> serialized(TChar* p) {$/;"	f	typeref:typename:SerializedValue<TChar * >
serialized	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^inline SerializedValue<TChar*> serialized(TChar* p, size_t n) {$/;"	f	typeref:typename:SerializedValue<TChar * >
server_certificate	examples/test/lib/JFixLib/src/certificate.h	/^static const char *server_certificate = "-----BEGIN CERTIFICATE-----\\n\\$/;"	v	typeref:typename:const char *
sessionThread	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^void Supervisor::sessionThread(void * arg)$/;"	f	class:Supervisor	typeref:typename:void
set	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE bool set(JsonArrayConst src) const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE bool
set	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  bool set(const JsonDocument& src) {$/;"	f	class:JsonDocument	typeref:typename:bool
set	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  set(const T& src) {$/;"	f	class:JsonDocument	typeref:typename:detail::enable_if<!detail::is_base_of<JsonDocument,T>::value,bool>::type
set	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE bool set(JsonObjectConst src) {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE bool
set	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE bool set(T* value) const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE bool
set	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE bool set(const T& value) const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE bool
set	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void DateTime::set(int year, int month, int day, int hour, int minutes, int seconds)$/;"	f	class:DateTime	typeref:typename:void
set	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void StringList::set(int index, char const * str)$/;"	f	class:fabgl::StringList	typeref:typename:void
set	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static void set(VideoMode value) { s_videoMode = value; }$/;"	f	struct:fabgl::CurrentVideoMode	typeref:typename:void
set	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void set(FASTLED_REGISTER port_t val) __attribute__ ((always_inline)) { *sPort = /;"	f	class:FastPin	typeref:typename:void
set	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void set(FASTLED_REGISTER port_t val) __attribute__ ((always_inline)) { }$/;"	f	class:FastPin	typeref:typename:void
set	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline void set(FASTLED_REGISTER port_t val) __attribute__ ((always_inline)) { *mPort = val; }$/;"	f	class:Pin	typeref:typename:void
set	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static void set(FASTLED_REGISTER port_t val) __attribute__ ((always_inline)) { FL_NRF/;"	f	class:_ARMPIN	typeref:typename:void
set	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void set(FASTLED_REGISTER port_t     val ) { (reinterp/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
set	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static void set(FASTLED_REGISTER port_t val) __attribute__ ((always_inline)) {$/;"	f	class:_ESPPIN	typeref:typename:void
set	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static void set(FASTLED_REGISTER port_t val) __attribute__ ((always_inline)) { if(PIN/;"	f	class:_ESPPIN	typeref:typename:void
set	examples/test/lib/JFixLib/src/JLag.h	/^    void set(float v){$/;"	f	class:JLag	typeref:typename:void
set132ColumnMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::set132ColumnMode(bool value)$/;"	f	class:fabgl::Terminal	typeref:typename:void
setADCSBC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^void MOS6502::setADCSBC()$/;"	f	class:fabgl::MOS6502	typeref:typename:void
setAH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setAH(uint8_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setAL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setAL(uint8_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setAX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setAX(uint16_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setAbsolutePosFCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::setAbsolutePosFCB(uint16_t FCBaddr, size_t pos)$/;"	f	class:BDOS	typeref:typename:void
setActiveWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiWindow * uiApp::setActiveWindow(uiWindow * value)$/;"	f	class:fabgl::uiApp	typeref:typename:uiWindow *
setApp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void setApp(uiApp * value) { m_app = value; }$/;"	f	class:fabgl::uiEvtHandler	typeref:typename:void
setAutoDestroy	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  void setAutoDestroy(bool value) { m_autoDestroy = value; m_autoDetach |= value; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:void
setAutoDetach	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  void setAutoDetach(bool value) { m_autoDetach = value; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:void
setAutoOK	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  void setAutoOK(int timeout)                     { m_autoOK = timeout; }$/;"	f	class:fabgl::InputBox	typeref:typename:void
setAuxStream	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  void setAuxStream(Stream * value)           { m_auxStream = value; }$/;"	f	class:BDOS	typeref:typename:void
setBH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setBH(uint8_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setBL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setBL(uint8_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setBX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setBX(uint16_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  void setBackgroundColor(RGB888 const & value)   { m_backgroundColor = value; }$/;"	f	class:fabgl::InputBox	typeref:typename:void
setBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::setBackgroundColor(Color color, bool setAsDefault)$/;"	f	class:fabgl::Terminal	typeref:typename:void
setBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::setBackgroundColor(Color value)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
setBaseDirectory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  void setBaseDirectory(char const * value)    { m_baseDir = value; }$/;"	f	class:Machine	typeref:typename:void
setBaud	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPort::setBaud(int value)$/;"	f	class:fabgl::SerialPort	typeref:typename:void
setBaud	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::setBaud()$/;"	f	class:fabgl::PC8250	typeref:typename:void
setBit7Blink	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  void setBit7Blink(bool value)                            { m_bit7blink = value; }$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
setBitPA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.cpp	/^void VIA6522::setBitPA(int bit, bool value)$/;"	f	class:fabgl::VIA6522	typeref:typename:void
setBitPB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.cpp	/^void VIA6522::setBitPB(int bit, bool value)$/;"	f	class:fabgl::VIA6522	typeref:typename:void
setBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiImage::setBitmap(Bitmap const * bitmap)$/;"	f	class:fabgl::uiImage	typeref:typename:void
setBoolean	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  void setBoolean(bool value) {$/;"	f	class:VariantData	typeref:typename:void
setBootDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  void setBootDrive(int drive)                 { m_bootDrive = drive; }$/;"	f	class:Machine	typeref:typename:void
setBootDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  void setBootDrive(char const * value)         {$/;"	f	struct:MachineConfItem	typeref:typename:void
setBrightness	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	void setBrightness(uint8_t scale) { m_Scale = scale; }$/;"	f	class:CFastLED	typeref:typename:void
setBrightness	examples/test/lib/JFixLib/src/JFixture.h	/^  virtual void setBrightness(float b){$/;"	f	class:JFixture	typeref:typename:void
setBrowserAtDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::setBrowserAtDrive(int drive)$/;"	f	class:BDOS	typeref:typename:void
setBrushColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setBrushColor(Color color)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setBrushColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setBrushColor(RGB888 const & color)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setBrushColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setBrushColor(uint8_t red, uint8_t green, uint8_t blue)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setBusiestCore	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static void setBusiestCore(int core)     { s_busiestCore = core; }$/;"	f	struct:fabgl::CoreUsage	typeref:typename:void
setCA1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  void setCA1(int value)             { m_CA1_prev = m_CA1; m_CA1 = value; }$/;"	f	class:fabgl::VIA6522	typeref:typename:void
setCA2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  void setCA2(int value)             { m_CA2_prev = m_CA2; m_CA2 = value; }$/;"	f	class:fabgl::VIA6522	typeref:typename:void
setCB1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  void setCB1(int value)             { m_CB1_prev = m_CB1; m_CB1 = value; }$/;"	f	class:fabgl::VIA6522	typeref:typename:void
setCB2	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  void setCB2(int value)             { m_CB2_prev = m_CB2; m_CB2 = value; }$/;"	f	class:fabgl::VIA6522	typeref:typename:void
setCGA6845Register	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::setCGA6845Register(uint8_t value)$/;"	f	class:Machine	typeref:typename:void
setCGAMode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::setCGAMode()$/;"	f	class:Machine	typeref:typename:void
setCH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setCH(uint8_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setCHS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  void setCHS(int index, char const * value)    { sscanf(value, "%hu,%hu,%hu", &cylinders[index]/;"	f	struct:MachineConfItem	typeref:typename:void
setCL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setCL(uint8_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setCLK	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::setCLK(bool value)$/;"	f	class:IECDrive	typeref:typename:void
setCOM1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::setCOM1(SerialPort * serialPort)$/;"	f	class:Machine	typeref:typename:void
setCOM2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::setCOM2(SerialPort * serialPort)$/;"	f	class:Machine	typeref:typename:void
setCPUSpeed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  void setCPUSpeed(uint32_t valueHz)              { m_CPUSpeed = valueHz; }$/;"	f	class:HAL	typeref:typename:void
setCS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setCS(uint16_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setCTSStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  void setCTSStatus(bool status) {$/;"	f	struct:ConfDialogApp	typeref:typename:void
setCX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setCX(uint16_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setCallbacks	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPort::setCallbacks(void * args, RXReadyCallback rxReadyCallback, RXCallback rxCallbac/;"	f	class:fabgl::SerialPort	typeref:typename:void
setCallbacks	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.h	/^  void setCallbacks(void * context, InterruptCallback interruptCallback) {$/;"	f	class:fabgl::MC146818	typeref:typename:void
setCallbacks	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  void setCallbacks(void * context, ReadByteCallback readByte, WriteByteCallback writeByte, Page/;"	f	class:fabgl::MOS6502	typeref:typename:void
setCallbacks	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.h	/^  void setCallbacks(void * context, InterruptCallback interruptCallback) {$/;"	f	class:fabgl::PC8250	typeref:typename:void
setCallbacks	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^  void setCallbacks(void * context, ChangeOut changeOut) {$/;"	f	class:fabgl::PIT8253	typeref:typename:void
setCallbacks	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  void setCallbacks(void * context, PortInputCallback portIn, PortOutputCallback portOut) {$/;"	f	class:fabgl::VIA6522	typeref:typename:void
setCallbacks	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  void setCallbacks(void * context, ReadByteCallback readByte, WriteByteCallback writeByte, Read/;"	f	class:fabgl::Z80	typeref:typename:void
setCallbacks	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.h	/^  void setCallbacks(void * context, InterruptCallback keyboardInterrupt, InterruptCallback mouse/;"	f	class:fabgl::i8042	typeref:typename:void
setCallbacks	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  void setCallbacks(void * context, ReadByteCallback readByte, WriteByteCallback writeByte, Read/;"	f	class:fabgl::i8080	typeref:typename:void
setCallbacks	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static void setCallbacks(void * context, ReadPort readPort, WritePort writePort, WriteVideoMem/;"	f	class:fabgl::i8086	typeref:typename:void
setCarAdvanceSound	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  void setCarAdvanceSound()$/;"	f	struct:Race	typeref:typename:void
setCaret	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::setCaret(Point const & pos)$/;"	f	class:fabgl::uiApp	typeref:typename:void
setCaret	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::setCaret(Rect const & rect)$/;"	f	class:fabgl::uiApp	typeref:typename:void
setCaret	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::setCaret(bool value)$/;"	f	class:fabgl::uiApp	typeref:typename:void
setChannel	examples/test/lib/JFixLib/src/JFixture.h	/^  virtual void setChannel(char i, float v){};$/;"	f	class:JFixture	typeref:typename:void
setChannel	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  void setChannel(char i, float v) override {$/;"	f	class:JFixtureAddr	typeref:typename:void
setChannel	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  void setChannel(char i, float val) override{$/;"	f	class:JFixtureDimmer	typeref:typename:void
setChar	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool Terminal::setChar(uint8_t c)$/;"	f	class:fabgl::Terminal	typeref:typename:bool
setChar	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool TerminalController::setChar(uint8_t c)$/;"	f	class:fabgl::TerminalController	typeref:typename:bool
setCharStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::setCharStyle(CharStyle style, bool enabled)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
setChecked	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCheckBox::setChecked(bool value)$/;"	f	class:fabgl::uiCheckBox	typeref:typename:void
setClippingRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setClippingRect(Rect const & rect)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setCodePage	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  void setCodePage(CodePage const * codepage)                      { m_codepage = codepage; }$/;"	f	class:fabgl::Keyboard	typeref:typename:void
setColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiColorBox::setColor(Color value)$/;"	f	class:fabgl::uiColorBox	typeref:typename:void
setColorCode	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& setColorCode (uint32_t colorcode) __attribute__((always_inline))$/;"	f	struct:CRGB	typeref:typename:CRGB &
setColorForAttribute	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::setColorForAttribute(CharStyle attribute)$/;"	f	class:fabgl::Terminal	typeref:typename:void
setColorForAttribute	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::setColorForAttribute(CharStyle attribute, Color color, bool maintainStyle)$/;"	f	class:fabgl::Terminal	typeref:typename:void
setConstDAC	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  void setConstDAC(uint8_t value) {$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:void
setControl	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^  void setControl( int direction, int control) \/\/ direction LEFT or RIGHT$/;"	f	struct:Menu	typeref:typename:void
setCorrection	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^void CFastLED::setCorrection(const struct CRGB & correction) {$/;"	f	class:CFastLED	typeref:typename:void
setCorrection	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CLEDController & setCorrection(CRGB correction) { m_ColorCorrection = correction; return *th/;"	f	class:CLEDController	typeref:typename:CLEDController &
setCorrection	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CLEDController & setCorrection(LEDColorCorrection correction) { m_ColorCorrection = correcti/;"	f	class:CLEDController	typeref:typename:CLEDController &
setCurrentDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::setCurrentDrive(int drive)$/;"	f	class:BDOS	typeref:typename:void
setCurrentUser	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::setCurrentUser(int user)$/;"	f	class:BDOS	typeref:typename:void
setCursorBackground	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::setCursorBackground(Color value)$/;"	f	class:fabgl::VGATextController	typeref:typename:void
setCursorForeground	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::setCursorForeground(Color value)$/;"	f	class:fabgl::VGATextController	typeref:typename:void
setCursorPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  void setCursorPos(int row, int col)      { m_cursorRow = row; m_cursorCol = col; m_cursorCount/;"	f	class:fabgl::VGATextController	typeref:typename:void
setCursorPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void GraphicsAdapter::setCursorPos(int row, int column)$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
setCursorPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::setCursorPos(int X, int Y)$/;"	f	class:fabgl::Terminal	typeref:typename:void
setCursorPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::setCursorPos(int col, int row)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
setCursorShape	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void GraphicsAdapter::setCursorShape(int start, int end)$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
setCursorSpeed	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.h	/^  void setCursorSpeed(int value)           { m_cursorSpeed = value; }$/;"	f	class:fabgl::VGATextController	typeref:typename:void
setCursorVisible	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.h	/^  void setCursorVisible(bool value)                        { m_cursorVisible = value; }$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
setDATA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::setDATA(bool value)$/;"	f	class:IECDrive	typeref:typename:void
setDH	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setDH(uint8_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setDI	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setDI(uint16_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setDL	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setDL(uint8_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setDMABufferBlank	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::setDMABufferBlank(int index, void volatile * address, int length, int sc/;"	f	class:fabgl::VGABaseController	typeref:typename:void
setDMABufferView	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::setDMABufferView(int index, int row, int scan, bool isStartOfVertFrontPo/;"	f	class:fabgl::VGABaseController	typeref:typename:void
setDMABufferView	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::setDMABufferView(int index, int row, int scan, volatile uint8_t * * view/;"	f	class:fabgl::VGABaseController	typeref:typename:void
setDMABuffersCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^bool VGABaseController::setDMABuffersCount(int buffersCount)$/;"	f	class:fabgl::VGABaseController	typeref:typename:bool
setDMANode	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^volatile lldesc_t * CVBSGenerator::setDMANode(int index, volatile uint16_t * buf, int len)$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:volatile lldesc_t *
setDMANode	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SoundGenerator::setDMANode(int index, volatile uint16_t * buf, int len)$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
setDS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setDS(uint16_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setDTRStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPort::setDTRStatus(bool value)$/;"	f	class:fabgl::SerialPort	typeref:typename:void
setDX	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setDX(uint16_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setDateTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::setDateTime(int year, int month, int day, int hour, int minutes, int seconds)$/;"	f	class:HAL	typeref:typename:void
setDateTime	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^bool DS3231::setDateTime(DateTime const & value)$/;"	f	class:fabgl::DS3231	typeref:typename:bool
setDesc	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  void setDesc(char const * value)              { free(desc); desc = strdup(value); }$/;"	f	struct:MachineConfItem	typeref:typename:void
setDirectory	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFileBrowser::setDirectory(char const * path)$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:void
setDirectory	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::setDirectory(const char * path)$/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
setDisk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  void setDisk(int index, char const * value)   { free(disk[index]); disk[index] = strdup(value)/;"	f	struct:MachineConfItem	typeref:typename:void
setDither	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^void CFastLED::setDither(uint8_t ditherMode)  {$/;"	f	class:CFastLED	typeref:typename:void
setDither	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = dithe/;"	f	class:CLEDController	typeref:typename:CLEDController &
setDoubleBuffered	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void BitmappedDisplayController::setDoubleBuffered(bool value)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
setDown	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiButton::setDown(bool value)$/;"	f	class:fabgl::uiButton	typeref:typename:void
setDrawScanlineCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^void CVBSGenerator::setDrawScanlineCallback(CVBSDrawScanlineCallback drawScanlineCallback, void /;"	f	class:fabgl::CVBSGenerator	typeref:typename:void
setDrawScanlineCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  void setDrawScanlineCallback(CVBSDrawScanlineCallback drawScanlineCallback)  { m_CVBSGenerator/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
setDrawScanlineCallback	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  void setDrawScanlineCallback(DrawScanlineCallback drawScanlineCallback, void * arg = nullptr) /;"	f	class:fabgl::VGADirectController	typeref:typename:void
setDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Mits88Disk::setDrive(int value)$/;"	f	class:Mits88Disk	typeref:typename:void
setDriveImage	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::setDriveImage(int drive, char const * filename, int cylinders, int heads, int sect/;"	f	class:Machine	typeref:typename:void
setDriveMediaType	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::setDriveMediaType(int drive, MediaType media)$/;"	f	class:BIOS	typeref:typename:void
setDuration	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  void setDuration(uint32_t value) { m_duration = value; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:void
setDutyCycle	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SquareWaveformGenerator::setDutyCycle(int dutyCycle)$/;"	f	class:fabgl::SquareWaveformGenerator	typeref:typename:void
setES	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setES(uint16_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setEmulation	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void GraphicsAdapter::setEmulation(Emulation emulation)$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
setFlagCF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setFlagCF(bool value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setFlagZF	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setFlagZF(bool value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  void setFloat(JsonFloat value) {$/;"	f	class:VariantData	typeref:typename:void
setFocusIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void setFocusIndex(int value) { m_focusIndex = value; }$/;"	f	class:fabgl::uiWindow	typeref:typename:void
setFocusedWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiWindow * uiApp::setFocusedWindow(uiWindow * value)$/;"	f	class:fabgl::uiApp	typeref:typename:uiWindow *
setFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::setFont(FontInfo const * value)$/;"	f	class:fabgl::VGATextController	typeref:typename:void
setFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void GraphicsAdapter::setFont(FontInfo const * font)$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
setForegroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::setForegroundColor(Color color, bool setAsDefault)$/;"	f	class:fabgl::Terminal	typeref:typename:void
setForegroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::setForegroundColor(Color value)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
setFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPort::setFrame(int dataLength, char parity, float stopBits)$/;"	f	class:fabgl::SerialPort	typeref:typename:void
setFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  Sprite * setFrame(int frame) { currentFrame = frame; return this; }$/;"	f	struct:fabgl::Sprite	typeref:typename:Sprite *
setFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::setFrame()$/;"	f	class:fabgl::PC8250	typeref:typename:void
setFrequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void NoiseWaveformGenerator::setFrequency(int value)$/;"	f	class:fabgl::NoiseWaveformGenerator	typeref:typename:void
setFrequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SamplesGenerator::setFrequency(int value)$/;"	f	class:fabgl::SamplesGenerator	typeref:typename:void
setFrequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SawtoothWaveformGenerator::setFrequency(int value) {$/;"	f	class:fabgl::SawtoothWaveformGenerator	typeref:typename:void
setFrequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SineWaveformGenerator::setFrequency(int value) {$/;"	f	class:fabgl::SineWaveformGenerator	typeref:typename:void
setFrequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SquareWaveformGenerator::setFrequency(int value) {$/;"	f	class:fabgl::SquareWaveformGenerator	typeref:typename:void
setFrequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void TriangleWaveformGenerator::setFrequency(int value) {$/;"	f	class:fabgl::TriangleWaveformGenerator	typeref:typename:void
setFrequency	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void VICNoiseGenerator::setFrequency(int value)$/;"	f	class:fabgl::VICNoiseGenerator	typeref:typename:void
setGate	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.cpp	/^void PIT8253::setGate(int timerIndex, bool value)$/;"	f	class:fabgl::PIT8253	typeref:typename:void
setGlyphOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setGlyphOptions(GlyphOptions options)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setGroupIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void setGroupIndex(int value)     { m_groupIndex = value; }$/;"	f	class:fabgl::uiCheckBox	typeref:typename:void
setHGC6845Register	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::setHGC6845Register(uint8_t value)$/;"	f	class:Machine	typeref:typename:void
setHGCMode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::setHGCMode()$/;"	f	class:Machine	typeref:typename:void
setHSV	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CHSV& setHSV(uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))$/;"	f	struct:CHSV	typeref:typename:CHSV &
setHSV	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& setHSV (uint8_t hue, uint8_t sat, uint8_t val) __attribute__((always_inline))$/;"	f	struct:CRGB	typeref:typename:CRGB &
setHorizontalRate	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.h	/^  void setHorizontalRate(int value)               { m_horizontalRate = value; }$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
setHue	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& setHue (uint8_t hue) __attribute__((always_inline))$/;"	f	struct:CRGB	typeref:typename:CRGB &
setINTActiveHigh	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::setINTActiveHigh(bool value, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:void
setIP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setIP(uint16_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setIncludeHiddenFiles	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  void setIncludeHiddenFiles(bool value) { m_includeHiddenFiles = value; }$/;"	f	class:fabgl::FileBrowser	typeref:typename:void
setInput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void setInput() { _init(); pinMode(PIN, INPUT); }$/;"	f	class:FastPin	typeref:typename:void
setInput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void setInput() { }$/;"	f	class:FastPin	typeref:typename:void
setInput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline void setInput() { \/* TODO: Set pin input *\/ }$/;"	f	class:Pin	typeref:typename:void
setInput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline void setInput() { pinMode(mPin, INPUT); }$/;"	f	class:Pin	typeref:typename:void
setInput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static void setInput() { FL_NRF_GPIO->DIRCLR = _MASK; }$/;"	f	class:_ARMPIN	typeref:typename:void
setInput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void       setInput()  {$/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
setInput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static void setInput() { pinMode(PIN, INPUT); }$/;"	f	class:_ESPPIN	typeref:typename:void
setInput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static void setInput() { pinMode(PIN, INPUT); }$/;"	f	class:_ESPPIN	typeref:typename:void
setInputATN	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  void setInputATN(bool value)  { m_inputATN  = value; }$/;"	f	class:IECDrive	typeref:typename:void
setInputCLK	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  void setInputCLK(bool value)  { m_inputCLK  = value; }$/;"	f	class:IECDrive	typeref:typename:void
setInputDATA	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.h	/^  void setInputDATA(bool value) { m_inputDATA = value; }$/;"	f	class:IECDrive	typeref:typename:void
setInsertMode	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  void setInsertMode(bool value) { m_insertMode = value; }$/;"	f	class:fabgl::LineEditor	typeref:typename:void
setInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  typename enable_if<is_signed<T>::value>::type setInteger(T value) {$/;"	f	class:VariantData	typeref:typename:enable_if<is_signed<T>::value>::type
setInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  typename enable_if<is_unsigned<T>::value>::type setInteger(T value) {$/;"	f	class:VariantData	typeref:typename:enable_if<is_unsigned<T>::value>::type
setJoy	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::setJoy(Joy joy, bool value)$/;"	f	class:Machine	typeref:typename:void
setJoyEmu	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  void setJoyEmu(JoyEmu value) { m_joyEmu = value; }$/;"	f	class:Machine	typeref:typename:void
setKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  void setKey(JsonString k) {$/;"	f	class:VariantSlot	typeref:typename:void
setKeyboard	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::setKeyboard(VirtualKey key, bool down)$/;"	f	class:Machine	typeref:typename:void
setKeyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static void setKeyboard(Keyboard * value)   { s_keyboard = value; }$/;"	f	class:fabgl::PS2Controller	typeref:typename:void
setKeyboardTypematicAndDelay	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::setKeyboardTypematicAndDelay()$/;"	f	class:BIOS	typeref:typename:void
setLED	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  void setLED(char channel, int value) { \/\/ Receives 0 - 255$/;"	f	class:JFixtureAddr	typeref:typename:void
setLED	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  void setLED(char channel, int value){ \/\/ Receives 0 - 255$/;"	f	class:JFixtureDimmer	typeref:typename:void
setLEDs	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^bool Keyboard::setLEDs(bool numLock, bool capsLock, bool scrollLock)$/;"	f	class:fabgl::Keyboard	typeref:typename:bool
setLPT	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  void setLPT(Stream * value)                     { m_LPTStream = value; }$/;"	f	class:HAL	typeref:typename:void
setLayout	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^void Keyboard::setLayout(const KeyboardLayout * layout)$/;"	f	class:fabgl::Keyboard	typeref:typename:void
setLedBuiltin	examples/test/lib/JFixLib/src/JFixture.h	/^  void setLedBuiltin(char pin = 5){$/;"	f	class:JFixture	typeref:typename:void
setLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CLEDController & setLeds(CRGB *data, int nLeds) {$/;"	f	class:CLEDController	typeref:typename:CLEDController &
setLength	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::setLength(int newLength)$/;"	f	class:fabgl::LineEditor	typeref:typename:void
setLineDoubleWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::setLineDoubleWidth(int row, int value)$/;"	f	class:fabgl::Terminal	typeref:typename:void
setLineEnds	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setLineEnds(LineEnds value)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setLinkedRaw	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  void setLinkedRaw(SerializedValue<const char*> value) {$/;"	f	class:VariantData	typeref:typename:void
setLogStream	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  void setLogStream(Stream & stream) { m_logStream = &stream; }$/;"	f	class:fabgl::Terminal	typeref:typename:void
setMaxPowerInMilliWatts	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_bright/;"	f	class:CFastLED	typeref:typename:void
setMaxPowerInVoltsAndMilliamps	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMi/;"	f	class:CFastLED	typeref:typename:void
setMaxRefreshRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {$/;"	f	class:CFastLED	typeref:typename:void
setMemory	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.h	/^  static void setMemory(uint8_t * memory) { s_memory = memory; }$/;"	f	class:fabgl::i8086	typeref:typename:void
setMenuCallback	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  void setMenuCallback(MenuCallback value) { m_menuCallback = value; }$/;"	f	class:Machine	typeref:typename:void
setMinButtonsWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  void setMinButtonsWidth(int value)                   { m_minButtonsWidth = value; }$/;"	f	class:fabgl::InputBox	typeref:typename:void
setMonochrome	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::setMonochrome(bool value)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
setMouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static void setMouse(Mouse * value)         { s_mouse = value; }$/;"	f	class:fabgl::PS2Controller	typeref:typename:void
setMouseCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void BitmappedDisplayController::setMouseCursor(Cursor * cursor)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
setMouseCursor	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void BitmappedDisplayController::setMouseCursor(CursorName cursorName)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
setMouseCursorPos	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void BitmappedDisplayController::setMouseCursorPos(int X, int Y)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
setNext	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  void setNext(VariantSlot* slot) {$/;"	f	class:VariantSlot	typeref:typename:void
setNextNotNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp	/^  void setNextNotNull(VariantSlot* slot) {$/;"	f	class:VariantSlot	typeref:typename:void
setNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  void setNull() {$/;"	f	class:VariantData	typeref:typename:void
setOrientation	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::setOrientation(SSD1306Orientation value)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
setOrientation	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::setOrientation(TFTOrientation value, bool force)$/;"	f	class:fabgl::TFTController	typeref:typename:void
setOrigin	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setOrigin(Point const & origin)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setOrigin	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setOrigin(int X, int Y)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }$/;"	f	class:FastPin	typeref:typename:void
setOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void setOutput() { }$/;"	f	class:FastPin	typeref:typename:void
setOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline void setOutput() { \/* TODO: Set pin output *\/ }$/;"	f	class:Pin	typeref:typename:void
setOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline void setOutput() { pinMode(mPin, OUTPUT); }$/;"	f	class:Pin	typeref:typename:void
setOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static void setOutput() { FL_NRF_GPIO->DIRSET = _MASK; }$/;"	f	class:_ARMPIN	typeref:typename:void
setOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void       setOutput() {$/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
setOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static void setOutput() {$/;"	f	class:_ESPPIN	typeref:typename:void
setOutput	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static void setOutput() { pinMode(PIN, OUTPUT); }$/;"	f	class:_ESPPIN	typeref:typename:void
setPA	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.cpp	/^void VIA6522::setPA(int value)$/;"	f	class:fabgl::VIA6522	typeref:typename:void
setPB	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.cpp	/^void VIA6522::setPB(int value)$/;"	f	class:fabgl::VIA6522	typeref:typename:void
setPC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.h	/^  void setPC(uint16_t addr) { m_PC = addr; }$/;"	f	class:fabgl::MOS6502	typeref:typename:void
setPC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  void setPC(uint16_t value)                  { state.pc = value; }$/;"	f	class:fabgl::Z80	typeref:typename:void
setPC	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  void setPC(int addr)  { cpu.pc.w = addr & 0xffff; }$/;"	f	class:fabgl::i8080	typeref:typename:void
setPCGraphicsBackgroundColorIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void GraphicsAdapter::setPCGraphicsBackgroundColorIndex(int colorIndex)$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
setPCGraphicsForegroundColorIndex	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void GraphicsAdapter::setPCGraphicsForegroundColorIndex(int colorIndex)$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
setPCGraphicsPaletteInUse	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void GraphicsAdapter::setPCGraphicsPaletteInUse(int paletteIndex)$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
setPaintOptions	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setPaintOptions(PaintOptions options)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setPaletteItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::setPaletteItem(int index, RGB888 const & color)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
setPaletteItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::setPaletteItem(int index, RGB888 const & color)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
setPaletteItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::setPaletteItem(int index, RGB888 const & color)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
setPaletteItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::setPaletteItem(int index, RGB888 const & color)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
setPaletteItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::setPaletteItem(int index, RGB888 const & color)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
setParentProcessKbdEvents	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void setParentProcessKbdEvents(bool value) { m_parentProcessKbdEvents = value; }$/;"	f	class:fabgl::uiWindow	typeref:typename:void
setParity	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline void setParity( uint8_t parity)$/;"	f	struct:CRGB	typeref:typename:void
setPenColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setPenColor(Color color)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setPenColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setPenColor(RGB888 const & color)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setPenColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setPenColor(uint8_t red, uint8_t green, uint8_t blue)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setPenWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setPenWidth(int value)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setPendingInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^void PIC8259::setPendingInterrupt()$/;"	f	class:fabgl::PIC8259	typeref:typename:void
setPercentage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiProgressBar::setPercentage(int value)$/;"	f	class:fabgl::uiProgressBar	typeref:typename:void
setPeriod	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    void setPeriod( TIMETYPE period) { mPeriod = period; };$/;"	f	class:CEveryNTime	typeref:typename:void
setPeriod	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    void setPeriod( timeType period) { mPeriod = period; };$/;"	f	class:CEveryNTimePeriods	typeref:typename:void
setPin	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	void setPin(int pin) { mPin = pin; _init(); }$/;"	f	class:Pin	typeref:typename:void
setPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setPixel(Point const & pos, RGB888 const & color)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setPixel(int X, int Y)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setPixel(int X, int Y, RGB888 const & color)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void Bitmap::setPixel(int x, int y, RGBA2222 value)$/;"	f	class:fabgl::Bitmap	typeref:typename:void
setPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void Bitmap::setPixel(int x, int y, RGBA8888 value)$/;"	f	class:fabgl::Bitmap	typeref:typename:void
setPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void Bitmap::setPixel(int x, int y, int value)$/;"	f	class:fabgl::Bitmap	typeref:typename:void
setPixelAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::setPixelAt(PixelDesc const & pixelDesc, Rect & updateRect)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
setPixelAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::setPixelAt(PixelDesc const & pixelDesc, Rect & updateRect)$/;"	f	class:fabgl::TFTController	typeref:typename:void
setPixelAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::setPixelAt(PixelDesc const & pixelDesc, Rect & updateRect)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
setPixelAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::setPixelAt(PixelDesc const & pixelDesc, Rect & updateRect)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
setPixelAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::setPixelAt(PixelDesc const & pixelDesc, Rect & updateRect)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
setPixelAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::setPixelAt(PixelDesc const & pixelDesc, Rect & updateRect)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
setPixelAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::setPixelAt(PixelDesc const & pixelDesc, Rect & updateRect)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
setPixelAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::setPixelAt(PixelDesc const & pixelDesc, Rect & updateRect)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
setPixelAt	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::setPixelAt(PixelDesc const & pixelDesc, Rect & updateRect)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
setPortDir	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  void setPortDir(int port, uint8_t value, uint8_t hwAddr = 0)           { writeReg(MCP_IODIR + /;"	f	class:fabgl::MCP23S17	typeref:typename:void
setPortInputPolarity	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  void setPortInputPolarity(int port, uint8_t value, uint8_t hwAddr = 0) { writeReg(MCP_IPOL + p/;"	f	class:fabgl::MCP23S17	typeref:typename:void
setPosFCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::setPosFCB(uint16_t FCBaddr, size_t pos)$/;"	f	class:BDOS	typeref:typename:void
setPosition	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiSlider::setPosition(int value)$/;"	f	class:fabgl::uiSlider	typeref:typename:void
setProcessPrimitivesOnBlank	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  void setProcessPrimitivesOnBlank(bool value)          { m_processPrimitivesOnBlank = value; }$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:void
setProcessPrimitivesOnBlank	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  void setProcessPrimitivesOnBlank(bool value)          { m_processPrimitivesOnBlank = value; }$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
setRAMExpansion	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::setRAMExpansion(RAMExpansionOption value)$/;"	f	class:Machine	typeref:typename:void
setRGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& setRGB (uint8_t nr, uint8_t ng, uint8_t nb) __attribute__((always_inline))$/;"	f	struct:CRGB	typeref:typename:CRGB &
setRTSStatus	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  void setRTSStatus(bool status) {$/;"	f	struct:ConfDialogApp	typeref:typename:void
setRTSStatus	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPort::setRTSStatus(bool value)$/;"	f	class:fabgl::SerialPort	typeref:typename:void
setRawPixel	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.h	/^  void setRawPixel(int x, int y, uint8_t rgb)    { VGA_PIXEL(x, y) = rgb; }$/;"	f	class:fabgl::VGAController	typeref:typename:void
setRealSpeed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  void setRealSpeed(bool value) { m_realSpeed = value; }$/;"	f	class:Machine	typeref:typename:void
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  bool setResolution(int value) { return send_cmdSetResolution(value); }$/;"	f	class:fabgl::Mouse	typeref:typename:bool
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::setResolution(char const * modeline, int viewPortWidth, int viewPortHeig/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::setResolution(char const * modeline, int viewPortWidth, int viewPortHeight, /;"	f	class:fabgl::TFTController	typeref:typename:void
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^void CVBSBaseController::setResolution(CVBSParams const * params, int viewPortWidth, int viewPor/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^void CVBSBaseController::setResolution(char const * modeline, int viewPortWidth, int viewPortHei/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^void CVBSPalettedController::setResolution(CVBSParams const * params, int viewPortWidth, int vie/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:void
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::setResolution(VGATimings const& timings, int viewPortWidth, int viewPort/;"	f	class:fabgl::VGABaseController	typeref:typename:void
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::setResolution(char const * modeline, int viewPortWidth, int viewPortHeig/;"	f	class:fabgl::VGABaseController	typeref:typename:void
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void VGAController::setResolution(VGATimings const& timings, int viewPortWidth, int viewPortHeig/;"	f	class:fabgl::VGAController	typeref:typename:void
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::setResolution(VGATimings const& timings, int viewPortWidth, int viewPo/;"	f	class:fabgl::VGADirectController	typeref:typename:void
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^void VGAPalettedController::setResolution(VGATimings const& timings, int viewPortWidth, int view/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::setResolution(VGATimings const& timings)$/;"	f	class:fabgl::VGATextController	typeref:typename:void
setResolution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::setResolution(char const * modeline, int viewPortWidth, int viewPortHeig/;"	f	class:fabgl::VGATextController	typeref:typename:void
setReverseHorizontal	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::setReverseHorizontal(bool value)$/;"	f	class:fabgl::TFTController	typeref:typename:void
setSDCardMaxFreqKHz	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  static void setSDCardMaxFreqKHz(int value) { s_SDCardMaxFreqKHz = value; }$/;"	f	class:fabgl::FileBrowser	typeref:typename:void
setSP	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setSP(uint16_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setSPIRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	void setSPIRate() {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
setSPIRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	void setSPIRate() {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
setSPIRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  void setSPIRate() {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
setSPIRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void setSPIRate() {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
setSPIRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void setSPIRate() {$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
setSPIRate	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void setSPIRate() {$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
setSS	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::setSS(uint16_t value)$/;"	f	class:fabgl::i8086	typeref:typename:void
setSampleRate	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  bool setSampleRate(int value) { return send_cmdSetSampleRate(value); }$/;"	f	class:fabgl::Mouse	typeref:typename:bool
setSampleRate	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  void setSampleRate(int value) { m_sampleRate = value; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:void
setScaling	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  bool setScaling(int value) { return send_cmdSetScaling(value); }$/;"	f	class:fabgl::Mouse	typeref:typename:bool
setScancodeSet	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^bool Keyboard::setScancodeSet(int value)$/;"	f	class:fabgl::Keyboard	typeref:typename:bool
setScanlineBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::setScanlineBuffer(int scanline, uint8_t volatile * lineBuffer)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
setScanlinesPerCallBack	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.h	/^  void setScanlinesPerCallBack(int value)    { m_linesCount = value * 2; }$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
setScreenCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::setScreenCol(int value)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
setScreenCol	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::setScreenCol(int value)$/;"	f	class:fabgl::TFTController	typeref:typename:void
setScreenRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::setScreenRow(int value)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
setScreenRow	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::setScreenRow(int value)$/;"	f	class:fabgl::TFTController	typeref:typename:void
setScreenSize	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void setScreenSize(int width, int height)    { m_screenWidth = width; m_screenHeight = height;/;"	f	class:fabgl::BaseDisplayController	typeref:typename:void
setScrollBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomListBox::setScrollBar(uiOrientation orientation, int position, int visible, int ran/;"	f	class:fabgl::uiCustomListBox	typeref:typename:void
setScrollBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiScrollableControl::setScrollBar(uiOrientation orientation, int position, int visible, int/;"	f	class:fabgl::uiScrollableControl	typeref:typename:void
setScrollingRegion	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::setScrollingRegion(int X1, int Y1, int X2, int Y2)$/;"	f	class:fabgl::Canvas	typeref:typename:void
setScrollingRegion	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::setScrollingRegion(int top, int down, bool resetCursorPos)$/;"	f	class:fabgl::Terminal	typeref:typename:void
setSearchPath	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::setSearchPath(char const * path)$/;"	f	class:BDOS	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect;  }$/;"	f	class:NOPSPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	void setSelect(Selectable *pSelect) { \/* TODO *\/ }$/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	void setSelect(Selectable *pSelect) { \/* TODO *\/ }$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    void setSelect(Selectable *pSelect) { \/* TODO *\/ }$/;"	f	class:NRF51SPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	void setSelect(Selectable *pSelect) { \/* TODO *\/ }$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ESP32SPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }$/;"	f	class:ESP8266SPIOutput	typeref:typename:void
setSelect	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	void setSelect(Selectable *pSelect) { \/* TODO *\/ }$/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
setSerial	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  void setSerial(int index, Stream * value)       { m_serialStream[index] = value; }$/;"	f	class:HAL	typeref:typename:void
setSerialPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::setSerialPort(SerialPort * value)$/;"	f	class:fabgl::PC8250	typeref:typename:void
setSignals	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPort::setSignals(int rxPin, int txPin, int rtsPin, int ctsPin, int dtrPin, int dsrPin/;"	f	class:fabgl::SerialPort	typeref:typename:void
setSprites	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void BitmappedDisplayController::setSprites(Sprite * sprites, int count, int spriteSize)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
setSprites	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  void setSprites(T * sprites, int count) {$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
setStepCallback	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  void setStepCallback(StepCallback value)  { m_stepCallback = value; }$/;"	f	class:Machine	typeref:typename:void
setString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  inline bool setString(TAdaptedString value, MemoryPool* pool) {$/;"	f	class:VariantData	typeref:typename:bool
setString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  void setString(JsonString s) {$/;"	f	class:VariantData	typeref:typename:void
setStyle	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/uistyle.h	/^  void setStyle(uiObject * object, uint32_t styleClassID) {$/;"	f	struct:DialogStyle	typeref:typename:void
setStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void setStyle(uiStyle * value)                   { m_style = value; }$/;"	f	class:fabgl::uiApp	typeref:typename:void
setStyleClassID	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void setStyleClassID(uint16_t value)   { m_styleClassID = value; }$/;"	f	class:fabgl::uiWindow	typeref:typename:void
setSysReqCallback	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  void setSysReqCallback(SysReqCallback value) { m_sysReqCallback = value; }$/;"	f	class:Machine	typeref:typename:void
setTabStop	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::setTabStop(int column, bool set)$/;"	f	class:fabgl::Terminal	typeref:typename:void
setTemperature	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^void CFastLED::setTemperature(const struct CRGB & temp) {$/;"	f	class:CFastLED	typeref:typename:void
setTemperature	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CLEDController & setTemperature(CRGB temperature) { m_ColorTemperature = temperature; return/;"	f	class:CLEDController	typeref:typename:CLEDController &
setTemperature	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    CLEDController & setTemperature(ColorTemperature temperature) { m_ColorTemperature = tempera/;"	f	class:CLEDController	typeref:typename:CLEDController &
setTerminal	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  void setTerminal(Terminal * value)              { m_terminal = value; m_termCtrl.setTerminal(m/;"	f	class:HAL	typeref:typename:void
setTerminal	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::setTerminal(Terminal * terminal)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
setTerminalType	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  void setTerminalType(TermType value)            { m_termCtrl.setTerminalType(value); }$/;"	f	class:HAL	typeref:typename:void
setTerminalType	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::setTerminalType(TermType value)$/;"	f	class:fabgl::Terminal	typeref:typename:void
setTerminalType	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::setTerminalType(TermType value)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
setText	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiButton::setText(char const * value)$/;"	f	class:fabgl::uiButton	typeref:typename:void
setText	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiLabel::setText(char const * value)$/;"	f	class:fabgl::uiLabel	typeref:typename:void
setText	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiStaticLabel::setText(char const * value)$/;"	f	class:fabgl::uiStaticLabel	typeref:typename:void
setText	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiTextEdit::setText(char const * value)$/;"	f	class:fabgl::uiTextEdit	typeref:typename:void
setText	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  void setText(char const * value) { m_textEdit->setText(value); }$/;"	f	class:fabgl::uiComboBox	typeref:typename:void
setText	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::setText(char const * text, bool moveCursor)$/;"	f	class:fabgl::LineEditor	typeref:typename:void
setText	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::setText(char const * text, int length, bool moveCursor)$/;"	f	class:fabgl::LineEditor	typeref:typename:void
setTextFmt	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiLabel::setTextFmt(const char *format, ...)$/;"	f	class:fabgl::uiLabel	typeref:typename:void
setTextFmt	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiTextEdit::setTextFmt(const char *format, ...)$/;"	f	class:fabgl::uiTextEdit	typeref:typename:void
setTextMap	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::setTextMap(uint32_t const * map, int rows)$/;"	f	class:fabgl::VGATextController	typeref:typename:void
setTimer	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiTimerHandle uiApp::setTimer(uiEvtHandler * dest, int periodMS)$/;"	f	class:fabgl::uiApp	typeref:typename:uiTimerHandle
setTitle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFrame::setTitle(char const * value)$/;"	f	class:fabgl::uiFrame	typeref:typename:void
setTitleFmt	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFrame::setTitleFmt(const char *format, ...)$/;"	f	class:fabgl::uiFrame	typeref:typename:void
setType	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  void setType(uint8_t t) {$/;"	f	class:VariantData	typeref:typename:void
setTypematicRateAndDelay	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  bool setTypematicRateAndDelay(int repeatRateMS, int repeatDelayMS) { return send_cmdTypematicR/;"	f	class:fabgl::Keyboard	typeref:typename:bool
setUIApp	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.h	/^  void setUIApp(uiApp * app) { m_uiApp = app; }$/;"	f	class:fabgl::Keyboard	typeref:typename:void
setUIApp	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  void setUIApp(uiApp * app) { m_uiApp = app; }$/;"	f	class:fabgl::Mouse	typeref:typename:void
setVal	examples/test/lib/JFixLib/src/Event/Event.cpp	/^void Event::setVal(char type, float value) {$/;"	f	class:Event	typeref:typename:void
setVal	examples/test/lib/JFixLib/src/Event/JOsc.cpp	/^void JOsc::setVal(char type, float value) {$/;"	f	class:JOsc	typeref:typename:void
setVal	examples/test/lib/JFixLib/src/Event/JRect.cpp	/^void JRect::setVal(char type, float value) {$/;"	f	class:JRect	typeref:typename:void
setVal	examples/test/lib/JFixLib/src/JFixture.h	/^  virtual void setVal(const uint8_t *data, int data_len){};$/;"	f	class:JFixture	typeref:typename:void
setVal	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  void setVal(const uint8_t *data, int data_len) override {$/;"	f	class:JFixtureGraphics	typeref:typename:void
setValN	examples/test/lib/JFixLib/src/JFixture.h	/^  virtual void setValN(const uint8_t *data, int data_len){};$/;"	f	class:JFixture	typeref:typename:void
setValN	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  void setValN(const uint8_t *data, int data_len) override {$/;"	f	class:JFixtureGraphics	typeref:typename:void
setVideoBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void GraphicsAdapter::setVideoBuffer(void const * videoBuffer)$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
setVideoGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^void CVBSGenerator::setVideoGPIO(gpio_num_t gpio)$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:void
setVolume	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  void setVolume(int value) { m_volume = value; }$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
setVolume	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  void setVolume(int value) { m_volume = value; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:void
setWavetable	examples/test/lib/JFixLib/src/Event/JOsc.cpp	/^void JOsc::setWavetable(JWavetable *w) { this->w = w; }$/;"	f	class:JOsc	typeref:typename:void
set_AF_OF_arith	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void set_AF_OF_arith(int32_t op_result)$/;"	f	namespace:fabgl	typeref:typename:void
set_crtc_cursor_pos	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^set_crtc_cursor_pos:$/;"	l
set_cshape_done	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^set_cshape_done:$/;"	l
set_flags	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::set_flags(int new_flags)$/;"	f	class:fabgl::i8086	typeref:typename:void
set_flags_type	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint32_t   op_source, op_dest, set_flags_type;$/;"	v	namespace:fabgl	typeref:typename:uint32_t	file:
set_max_power_in_milliwatts	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^void set_max_power_in_milliwatts( uint32_t powerInmW)$/;"	f	typeref:typename:void
set_max_power_in_volts_and_milliamps	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^void set_max_power_in_volts_and_milliamps( uint8_t volts, uint32_t milliamps)$/;"	f	typeref:typename:void
set_max_power_indicator_LED	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^void set_max_power_indicator_LED( uint8_t pinNumber)$/;"	f	typeref:typename:void
set_opcode	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void set_opcode(uint8_t opcode)$/;"	f	namespace:fabgl	typeref:typename:void
setup	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPort::setup(int uartIndex, uint32_t baud, int dataLength, char parity, float stopBits/;"	f	class:fabgl::SerialPort	typeref:typename:void
setup	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^void CVBSGenerator::setup(CVBSParams const * params)$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:void
setup	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^void CVBSGenerator::setup(char const * desc)$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:void
setup	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiSlider::setup(int min, int max, int ticksFrequency)$/;"	f	class:fabgl::uiSlider	typeref:typename:void
setup	examples/test/lib/JFixLib/src/JEspnowDevice.h	/^  virtual void setup(String networkName) override {$/;"	f	class:JEspnowDevice	typeref:typename:void
setup	examples/test/lib/JFixLib/src/JFixture.h	/^  virtual void setup(String networkName = "___"){$/;"	f	class:JFixture	typeref:typename:void
setup	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  void setup(char numColorChannels = 6, const uint8_t *pins = nullptr,$/;"	f	class:JFixtureAddr	typeref:typename:void
setup	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  void setup(char numChannels = 4, uint8_t* pins = nullptr){$/;"	f	class:JFixtureDimmer	typeref:typename:void
setup	examples/test/lib/JFixLib/src/JJonisk.h	/^    void setup(JJoniskSettings settings){$/;"	f	class:JJonisk	typeref:typename:void
setup	examples/test/lib/JFixLib/src/JTlFix.h	/^    void setup(JTlFixSettings settings){$/;"	f	class:JTlFix	typeref:typename:void
setup	examples/test/src/main.cpp	/^void setup(){$/;"	f	typeref:typename:void
setupAbsolutePositioner	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^void Mouse::setupAbsolutePositioner(int width, int height, bool createAbsolutePositionsQueue, Bi/;"	f	class:fabgl::Mouse	typeref:typename:void
setupButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void InputBox::setupButton(int index, char const * text, char const * subItems, int subItemsHeig/;"	f	class:fabgl::InputBox	typeref:typename:void
setupClock	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.cpp	/^void GPIOStream::setupClock(int freq)$/;"	f	class:fabgl::GPIOStream	typeref:typename:void
setupDefaultPalette	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::setupDefaultPalette()$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
setupDefaultPalette	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::setupDefaultPalette()$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
setupDefaultPalette	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::setupDefaultPalette()$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
setupDefaultPalette	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::setupDefaultPalette()$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
setupDefaultPalette	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::setupDefaultPalette()$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
setupDisplay	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  static void setupDisplay() {$/;"	f	struct:ConfDialogApp	typeref:typename:void
setupEmulation	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void GraphicsAdapter::setupEmulation(Emulation emulation)$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
setupGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.cpp	/^void GPIOStream::setupGPIO(gpio_num_t gpio, int bit, gpio_mode_t mode)$/;"	f	class:fabgl::GPIOStream	typeref:typename:void
setupGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::setupGPIO()$/;"	f	class:fabgl::TFTController	typeref:typename:void
setupGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::setupGPIO(gpio_num_t gpio, int bit, gpio_mode_t mode)$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
setupGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^void VGATextController::setupGPIO(gpio_num_t gpio, int bit, gpio_mode_t mode)$/;"	f	class:fabgl::VGATextController	typeref:typename:void
setupLUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^void GraphicsAdapter::setupLUT()$/;"	f	class:fabgl::GraphicsAdapter	typeref:typename:void
setupOrientation	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::setupOrientation()$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
setupOrientation	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::setupOrientation()$/;"	f	class:fabgl::TFTController	typeref:typename:void
sfract15	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef int16_t   sfract15;$/;"	t	typeref:typename:int16_t
sfract15ToFloat	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC float sfract15ToFloat( sfract15 y)$/;"	f	typeref:typename:LIB8STATIC float
sfract7	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^typedef int8_t    sfract7;$/;"	t	typeref:typename:int8_t
sgetScanline	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.h	/^  static uint8_t * sgetScanline(int y)                  { return (uint8_t*) s_viewPort[y]; }$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:uint8_t *
sgetScanline	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.h	/^  static uint8_t * sgetScanline(int y)                  { return (uint8_t*) s_viewPort[y]; }$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:uint8_t *
shallowCopy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE void shallowCopy(ArduinoJson::JsonVariantConst target) {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE void
shield_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sprites.h	/^const uint8_t shield_data[] = {$/;"	v	typeref:typename:const uint8_t[]
shift	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^    uint8_t shift    : 1;   \/**< SHIFT needs to be down (OR-ed with capslock). *\/$/;"	m	struct:fabgl::AltVirtualKeyDef::__anon7ddb64db0108	typeref:typename:uint8_t:1
shl	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  shl  dx, 1$/;"	d
shootSoundSamples	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sounds.h	/^const int8_t shootSoundSamples[] = {$/;"	v	typeref:typename:const int8_t[]
shortNames	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  static char const * * shortNames() {$/;"	f	struct:fabgl::SupportedLayouts	typeref:typename:char const **
shortPulse_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          shortPulse_us;                  \/\/ vertical sync, short pulse duration (equa/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
shorts	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^		uint16_t shorts[6];$/;"	m	union:InlineBlockClocklessController::__anona800f11d010a	typeref:typename:uint16_t[6]
shorts	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^		uint16_t shorts[8];$/;"	m	union:SixteenWayInlineBlockClocklessController::__anona800f11d020a	typeref:typename:uint16_t[8]
shorts	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^		uint16_t shorts[6];$/;"	m	union:InlineBlockClocklessController::__anon2749c531010a	typeref:typename:uint16_t[6]
shorts	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^		uint16_t shorts[8];$/;"	m	union:SixteenWayInlineBlockClocklessController::__anon2749c531020a	typeref:typename:uint16_t[8]
shorts	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint16_t shorts[16];$/;"	m	union:FlexibleInlineBlockClocklessController::__anon2152c22b010a	typeref:typename:uint16_t[16]
shorts	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^            uint32_t shorts;$/;"	m	struct:NRF52SPIOutput::spim_config	typeref:typename:uint32_t
shorts	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^	uint16_t shorts[4];$/;"	m	union:InlineBlockClocklessController::__anonedf8fd7e010a	typeref:typename:uint16_t[4]
shorts	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^		uint16_t shorts[4];$/;"	m	union:InlineBlockClocklessController::__anon110b7520010a	typeref:typename:uint16_t[4]
shouldWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    static bool shouldWait(bool wait = false) __attribute__((always_inline)) __attribute__((alwa/;"	f	class:NRF51SPIOutput	typeref:typename:bool
shouldWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static bool shouldWait(bool wait = false) __attribute__((always_inline)) {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:bool
shouldWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static bool shouldWait(bool wait = false) __attribute__((always_inline)) {$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:bool
shouldWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static bool shouldWait(bool wait = false) __attribute__((always_inline)) {$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:bool
show	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^void ProgressForm::show()$/;"	f	class:fabgl::ProgressForm	typeref:typename:void
show	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  virtual void show()             { }$/;"	f	struct:fabgl::InputForm	typeref:typename:void
show	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^void CFastLED::show(uint8_t scale) {$/;"	f	class:CFastLED	typeref:typename:void
show	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	void show() { show(m_Scale); }$/;"	f	class:CFastLED	typeref:typename:void
show	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {$/;"	f	class:CPixelLEDController	typeref:typename:void
show	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    void show(const struct CRGB *data, int nLeds, uint8_t brightness) {$/;"	f	class:CLEDController	typeref:typename:void
show	examples/test/lib/JFixLib/src/JFixture.h	/^  virtual void show(){};$/;"	f	class:JFixture	typeref:typename:void
show	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  void show() override{$/;"	f	class:JFixtureAddr	typeref:typename:void
show	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  void show() override{$/;"	f	class:JFixtureDimmer	typeref:typename:void
showCaret	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::showCaret(uiWindow * window)$/;"	f	class:fabgl::uiApp	typeref:typename:void
showColor	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {$/;"	f	class:CFastLED	typeref:typename:void
showColor	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	void showColor(const struct CRGB & color) { showColor(color, m_Scale); }$/;"	f	class:CFastLED	typeref:typename:void
showColor	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {$/;"	f	class:CPixelLEDController	typeref:typename:void
showColor	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    void showColor(const struct CRGB & data, uint8_t brightness=255) {$/;"	f	class:CLEDController	typeref:typename:void
showColor	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {$/;"	f	class:CLEDController	typeref:typename:void
showFreeMemory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  void showFreeMemory() {$/;"	f	class:MyApp	typeref:typename:void
showLedData	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/common/m0clockless.h	/^showLedData(volatile uint32_t *_port, uint32_t _bitmask, const uint8_t *_leds, uint32_t num_leds/;"	f	typeref:typename:int
showLeds	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    void showLeds(uint8_t brightness=255) {$/;"	f	class:CLEDController	typeref:typename:void
showModalWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiApp::showModalWindow(uiWindow * window)$/;"	f	class:fabgl::uiApp	typeref:typename:int
showPercentage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t showPercentage : 1;   \/**< If True percentage value is shown *\/$/;"	m	struct:fabgl::uiProgressBarProps	typeref:typename:uint8_t:1
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:APA102Controller	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:LPD6803Controller	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:LPD8806Controller	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:P9813Controller	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:PixieController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:SK9822Controller	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:SM16716Controller	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:WS2801Controller	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/dmx.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:DMXSerialController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/dmx.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:DMXSimpleController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/clockless_apollo3.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/clockless_arm_d21.h	/^    virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	virtual void showPixels(PixelController<RGB_ORDER, LANES, PMASK> & pixels) { $/;"	f	class:SixteenWayInlineBlockClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	virtual void showPixels(PixelController<RGB_ORDER, LANES, PORT_MASK> & pixels) { $/;"	f	class:InlineBlockClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {$/;"	f	class:COctoWS2811Controller	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/smartmatrix_t3.h	/^    virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:CSmartMatrixController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/ws2812serial_controller.h	/^    virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {$/;"	f	class:CWS2812SerialController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	virtual void showPixels(PixelController<RGB_ORDER, LANES, LANE_MASK> & pixels) { $/;"	f	class:InlineBlockClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	virtual void showPixels(PixelController<RGB_ORDER, LANES, PMASK> & pixels) { $/;"	f	class:SixteenWayInlineBlockClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/clockless_arm_kl26.h	/^  virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    virtual void showPixels(PixelController<RGB_ORDER, LANES, __FL_T4_MASK> & pixels) {$/;"	f	class:FlexibleInlineBlockClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/octows2811_controller.h	/^  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> &pixels) {$/;"	f	class:COctoWS2811Controller	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^    virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    virtual void showPixels(PixelController<_RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^    virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^    virtual void showPixels(PixelController<RGB_ORDER, LANES, PORT_MASK> & pixels) {$/;"	f	class:InlineBlockClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^    virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    virtual void showPixels(PixelController<RGB_ORDER, LANES, PORT_MASK> & pixels) {$/;"	f	class:InlineBlockClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    virtual void showPixels(PixelController<RGB_ORDER> & pixels)$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^void IRAM_ATTR ESP32RMTController::showPixels()$/;"	f	class:ESP32RMTController	typeref:typename:void IRAM_ATTR
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.h	/^    virtual void showPixels(PixelController<RGB_ORDER> & pixels)$/;"	f	class:ClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^	virtual void showPixels(PixelController<RGB_ORDER, LANES, PORT_MASK> & pixels) {$/;"	f	class:InlineBlockClocklessController	typeref:typename:void
showPixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showRGBBlocking	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    void showRGBBlocking(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/clockless_apollo3.h	/^	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d21/clockless_arm_d21.h	/^    static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^		static uint32_t showRGBInternal(PixelController<RGB_ORDER, LANES, PORT_MASK> &allpixels) {$/;"	f	class:InlineBlockClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^		static uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, PMASK> &allpixels) {$/;"	f	class:SixteenWayInlineBlockClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	static uint32_t showRGBInternal(PixelController<RGB_ORDER, LANES, LANE_MASK> &allpixels) {$/;"	f	class:InlineBlockClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	static uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, PMASK> &allpixels) {$/;"	f	class:SixteenWayInlineBlockClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/clockless_arm_kl26.h	/^  static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {$/;"	f	class:FlexibleInlineBlockClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/clockless_arm_nrf51.h	/^    static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    void showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:void
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^    static uint32_t showRGBInternal(PixelController<RGB_ORDER, LANES, PORT_MASK> &allpixels) {$/;"	f	class:InlineBlockClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^    static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/clockless_trinket.h	/^	static void \/*__attribute__((optimize("O0")))*\/  \/*__attribute__ ((always_inline))*\/  showR/;"	f	class:ClocklessController	typeref:typename:void
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    static uint32_t showRGBInternal(PixelController<RGB_ORDER, LANES, PORT_MASK> &allpixels) {$/;"	f	class:InlineBlockClocklessController	typeref:typename:uint32_t
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^	static uint32_t IRAM_ATTR showRGBInternal(PixelController<RGB_ORDER, LANES, PORT_MASK> &allpixe/;"	f	class:InlineBlockClocklessController	typeref:typename:uint32_t IRAM_ATTR
showRGBInternal	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^	static uint32_t IRAM_ATTR showRGBInternal(PixelController<RGB_ORDER> pixels) {$/;"	f	class:ClocklessController	typeref:typename:uint32_t IRAM_ATTR
showSpeed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    void showSpeed( )$/;"	f	struct:Race::Player	typeref:typename:void
showSprites	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::showSprites(Rect & updateRect)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
showSucces	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  void showSucces() override {}$/;"	f	class:JFixtureAddr	typeref:typename:void
showSucces	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  void showSucces() override{$/;"	f	class:JFixtureDimmer	typeref:typename:void
showSucces	examples/test/lib/JFixLib/src/JOtaServer.h	/^  virtual void showSucces(){$/;"	f	class:JOtaServer	typeref:typename:void
showWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::showWindow(uiWindow * window, bool value)$/;"	f	class:fabgl::uiApp	typeref:typename:void
show_at_max_brightness_for_power	examples/test/.pio/libdeps/esp32dev/FastLED/src/power_mgt.cpp	/^void show_at_max_brightness_for_power()$/;"	f	typeref:typename:void
shrink	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Rect shrink(int value) const                   { return Rect(X1 + value, Y1 + value, X2 - valu/;"	f	struct:fabgl::Rect	typeref:typename:Rect
shrinkScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::shrinkScreen(int shrinkX, int shrinkY)$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
shrinkToFit	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  void shrinkToFit() {$/;"	f	class:BasicJsonDocument	typeref:typename:void
sigmadelta_init	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SoundGenerator::sigmadelta_init()$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
sign_flag	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    uint8_t sign_flag;$/;"	m	struct:fabgl::i8080::__anon81886eed0308	typeref:typename:uint8_t
signalInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^bool PIC8259::signalInterrupt(int intnum)$/;"	f	class:fabgl::PIC8259	typeref:typename:bool
signbit	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^        uint32_t signbit:   1;  \/\/\/< sign bit$/;"	m	struct:__anon26d1ab7c010a::__anon26d1ab7c0208	typeref:typename:uint32_t:1
simplex	examples/test/lib/JFixLib/src/ofNoise.h	/^  unsigned char simplex[64][4] = {$/;"	v	namespace:__anon8cc37bff0211	typeref:typename:unsigned char[64][4]
sin16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^#define sin16 /;"	d
sin16_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^LIB8STATIC int16_t sin16_C( uint16_t theta )$/;"	f	typeref:typename:LIB8STATIC int16_t
sin16_avr	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^LIB8STATIC int16_t sin16_avr( uint16_t theta )$/;"	f	typeref:typename:LIB8STATIC int16_t
sin8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^#define sin8 /;"	d
sin8_C	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^LIB8STATIC uint8_t sin8_C( uint8_t theta)$/;"	f	typeref:typename:LIB8STATIC uint8_t
sin8_avr	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/trig8.h	/^LIB8STATIC uint8_t  sin8_avr( uint8_t theta)$/;"	f	typeref:typename:LIB8STATIC uint8_t
sinTable	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^static const int8_t sinTable[257] = {$/;"	v	namespace:fabgl	typeref:typename:const int8_t[257]	file:
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  FORCE_INLINE size_t size() const {$/;"	f	class:JsonArray	typeref:typename:FORCE_INLINE size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  FORCE_INLINE size_t size() const {$/;"	f	class:JsonArrayConst	typeref:typename:FORCE_INLINE size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp	/^inline size_t CollectionData::size() const {$/;"	f	class:CollectionData	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  size_t size() const {$/;"	f	class:JsonDocument	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  size_t size() const {$/;"	f	class:MemoryPool	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^  size_t size() const {$/;"	f	class:SerializedValue	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  FORCE_INLINE size_t size() const {$/;"	f	class:JsonObject	typeref:typename:FORCE_INLINE size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  FORCE_INLINE size_t size() const {$/;"	f	class:JsonObjectConst	typeref:typename:FORCE_INLINE size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  size_t size() const {$/;"	f	class:StringCopier	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp	/^  size_t size() const {$/;"	f	class:StringMover	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  size_t size() const {$/;"	f	class:FlashString	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  size_t size() const {$/;"	f	class:SizedRamString	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  size_t size() const {$/;"	f	class:ZeroTerminatedRamString	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  size_t size() const {$/;"	f	class:JsonString	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariantConst.hpp	/^  size_t size() const {$/;"	f	class:JsonVariantConst	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^    size_t size;$/;"	m	struct:VariantContent::__anon9bd8dbab0208	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp	/^  size_t size;$/;"	m	struct:RawData	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  size_t size() const {$/;"	f	class:VariantData	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantRefBase.hpp	/^  FORCE_INLINE size_t size() const {$/;"	f	class:VariantRefBase	typeref:typename:FORCE_INLINE size_t
size	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^    int    size;$/;"	m	struct:BallsTest::Ball	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^    int    size;$/;"	m	struct:BallsTest::Ball	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^    int    size;$/;"	m	struct:BallsTest::Ball	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  int32_t   size;$/;"	m	struct:FileSearchState	typeref:typename:int32_t
size	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/programs.h	/^  size_t          size;$/;"	m	struct:Program	typeref:typename:size_t
size	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  uint16_t  size;$/;"	m	struct:fabgl::I2CJobInfo	typeref:typename:uint16_t
size	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    Size                   size;$/;"	m	union:fabgl::Primitive::__anon3dd53dc6030a	typeref:typename:Size
size	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^    Size size;$/;"	m	union:fabgl::uiEvent::uiEventParams	typeref:typename:Size
size	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  Size size() { return m_size; }$/;"	f	class:fabgl::uiWindow	typeref:typename:Size
size	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Size size() const                              { return Size(X2 - X1 + 1, Y2 - Y1 + 1); }$/;"	f	struct:fabgl::Rect	typeref:typename:Size
size	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.h	/^	int size() { return (*this)[0].size(); }$/;"	f	class:CFastLED	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline int size() { return mLen; }$/;"	f	struct:PixelController	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^    virtual int size() { return m_nLeds; }$/;"	f	class:CLEDController	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    int size() { return abs(len); }$/;"	f	class:CPixelView	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	virtual int size() { return CLEDController::size() * LANES; }$/;"	f	class:InlineBlockClocklessController	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/octows2811_controller.h	/^  virtual int size() { return CLEDController::size() * 8; }$/;"	f	class:COctoWS2811Controller	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	virtual int size() { return CLEDController::size() * LANES; }$/;"	f	class:InlineBlockClocklessController	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^    virtual int size() { return CLEDController::size() * m_nActualLanes; }$/;"	f	class:FlexibleInlineBlockClocklessController	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/octows2811_controller.h	/^  virtual int size() { return CLEDController::size() * 8; }$/;"	f	class:COctoWS2811Controller	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^	virtual int size() { return CLEDController::size() * LANES; }$/;"	f	class:InlineBlockClocklessController	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    virtual int size() { return CLEDController::size() * LANES; }$/;"	f	class:InlineBlockClocklessController	typeref:typename:int
size	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^	virtual int size() { return CLEDController::size() * LANES; }$/;"	f	class:InlineBlockClocklessController	typeref:typename:int
size	examples/test/lib/JFixLib/src/Event/Event.h	/^  float size[2] = {255, 255};$/;"	m	class:Event	typeref:typename:float[2]
sizeRange	examples/test/lib/JFixLib/src/Event/expRandLines.h	/^    unsigned char sizeRange = 0;$/;"	m	class:expRandLines	typeref:typename:unsigned char
size_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^  size_t size_;$/;"	m	class:SerializedValue	typeref:typename:size_t
size_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp	/^  size_t size_;$/;"	m	class:Writer	typeref:typename:size_t
size_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  size_t size_, capacity_;$/;"	m	class:StringCopier	typeref:typename:size_t
size_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  size_t size_;$/;"	m	class:FlashString	typeref:typename:size_t
size_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  size_t size_;$/;"	m	class:SizedRamString	typeref:typename:size_t
size_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/JsonString.hpp	/^  size_t size_;$/;"	m	class:JsonString	typeref:typename:size_t
size_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  size_t size_;$/;"	m	class:detail::MemoryPoolPrint	typeref:typename:size_t
skipArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code skipArray($/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
skipBytes	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code skipBytes(size_t n) {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
skipExt	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code skipExt() {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
skipKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code skipKey() {$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
skipKeyword	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code skipKeyword(const char* s) {$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
skipNonQuotedString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code skipNonQuotedString() {$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
skipNumericValue	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code skipNumericValue() {$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
skipObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code skipObject($/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
skipQuotedString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code skipQuotedString() {$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
skipSpacesAndComments	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code skipSpacesAndComments() {$/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
skipString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  DeserializationError::Code skipString() {$/;"	f	class:MsgPackDeserializer	typeref:typename:DeserializationError::Code
skipVariant	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  DeserializationError::Code skipVariant($/;"	f	class:JsonDeserializer	typeref:typename:DeserializationError::Code
slideColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888 slideColor         = RGB888(0, 128, 128);      \/**< Color of internal slide *\/$/;"	m	struct:fabgl::uiSliderStyle	typeref:typename:RGB888
slider1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiSlider * slider1, * slider2;$/;"	m	struct:TestControlsFrame	typeref:typename:uiSlider *
slider2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiSlider * slider1, * slider2;$/;"	m	struct:TestControlsFrame	typeref:typename:uiSlider *
sliderLabel1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiLabel * sliderLabel1, * sliderLabel2;$/;"	m	struct:TestControlsFrame	typeref:typename:uiLabel *
sliderLabel2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiLabel * sliderLabel1, * sliderLabel2;$/;"	m	struct:TestControlsFrame	typeref:typename:uiLabel *
sliderStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiSliderStyle & sliderStyle() { return m_sliderStyle; }$/;"	f	class:fabgl::uiSlider	typeref:typename:uiSliderStyle &
slotData	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/SlotFunctions.hpp	/^inline VariantData* slotData(VariantSlot* slot) {$/;"	f	typeref:typename:VariantData *
slotSetKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/SlotFunctions.hpp	/^inline bool slotSetKey(VariantSlot* var, TAdaptedString key, MemoryPool* pool) {$/;"	f	typeref:typename:bool
slotSize	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/SlotFunctions.hpp	/^inline size_t slotSize(const VariantSlot* var) {$/;"	f	typeref:typename:size_t
slot_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  const detail::VariantSlot* slot_;$/;"	m	class:JsonArrayConstIterator	typeref:typename:const detail::VariantSlot *
slot_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  detail::VariantSlot* slot_;$/;"	m	class:JsonArrayIterator	typeref:typename:detail::VariantSlot *
slot_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  const detail::VariantSlot* slot_;$/;"	m	class:JsonObjectConstIterator	typeref:typename:const detail::VariantSlot *
slot_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectIterator.hpp	/^  detail::VariantSlot* slot_;$/;"	m	class:JsonObjectIterator	typeref:typename:detail::VariantSlot *
slowDrawText	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  void slowDrawText(int x, int y, const char *text, int dx = 8 )$/;"	f	struct:Race	typeref:typename:void
slowDrawText	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  void slowDrawText(int x, int y, const char *text, int dx=8 )$/;"	f	struct:Score	typeref:typename:void
slowRefresh	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  void slowRefresh( int cariconx=-1, int caricony = -1) $/;"	f	struct:Score	typeref:typename:void
slowswap	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^__attribute__((always_inline)) inline void slowswap(unsigned char *A, unsigned char *B) {$/;"	f	typeref:typename:void
smoothScroll	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         smoothScroll;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
softReset	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^void ILI9341Controller::softReset()$/;"	f	class:fabgl::ILI9341Controller	typeref:typename:void
softReset	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^void ST7789Controller::softReset()$/;"	f	class:fabgl::ST7789Controller	typeref:typename:void
soft_rst_flg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^soft_rst_flg     dw  0x1234$/;"	d
sound	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::sound(int waveform, int frequency, int duration, int volume)$/;"	f	class:fabgl::Terminal	typeref:typename:void
soundGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^SoundGenerator * Terminal::soundGenerator()$/;"	f	class:fabgl::Terminal	typeref:typename:SoundGenerator *
source	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^  int             source;$/;"	m	struct:fabgl::esp_intr_alloc_args	typeref:typename:int	file:
source_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Reader.hpp	/^  TSource* source_;$/;"	m	struct:Reader	typeref:typename:TSource *
sp	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    reg_pair sp, pc;$/;"	m	struct:fabgl::i8080::Regs	typeref:typename:reg_pair
spaceship	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^Bitmap spaceship = Bitmap(16, 16, &spaceship_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
spaceship	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^Bitmap spaceship = Bitmap(16, 16, &spaceship_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
spaceship	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^Bitmap spaceship = Bitmap(16, 16, &spaceship_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
spaceship	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^Bitmap spaceship = Bitmap(16, 16, &spaceship_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
spaceship	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^Bitmap spaceship = Bitmap(16, 16, &spaceship_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
spaceship	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^Bitmap spaceship = Bitmap(16, 16, &spaceship_data[0], PixelFormat::RGBA2222);$/;"	v	typeref:typename:Bitmap
spaceship_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^const uint8_t spaceship_data[] = {$/;"	v	typeref:typename:const uint8_t[]
spaceship_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x32/CollisionDetection/bitmaps.h	/^const uint8_t spaceship_data[] = {$/;"	v	typeref:typename:const uint8_t[]
spaceship_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/SSD1306_OLED/128x64/CollisionDetection/bitmaps.h	/^const uint8_t spaceship_data[] = {$/;"	v	typeref:typename:const uint8_t[]
spaceship_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^const uint8_t spaceship_data[] = {$/;"	v	typeref:typename:const uint8_t[]
spaceship_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/CollisionDetection/bitmaps.h	/^const uint8_t spaceship_data[] = {$/;"	v	typeref:typename:const uint8_t[]
spaceship_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^const uint8_t spaceship_data[] = {$/;"	v	typeref:typename:const uint8_t[]
speakerEnableDisable	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::speakerEnableDisable()$/;"	f	class:Machine	typeref:typename:void
speakerSetFreq	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::speakerSetFreq()$/;"	f	class:Machine	typeref:typename:void
speechSamples	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Audio/speech.h	/^const int8_t speechSamples[] = {$/;"	v	typeref:typename:const int8_t[]
speed	examples/test/lib/JFixLib/src/Event/Event.h	/^  float speed[2] = {1, 0};$/;"	m	class:Event	typeref:typename:float[2]
spiClk	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    #define spiClk /;"	d
spiClk	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    static uint8_t spiClk = 14;$/;"	v	typeref:typename:uint8_t
spiClk	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    static uint8_t spiClk = 18;$/;"	v	typeref:typename:uint8_t
spiCs	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    #define spiCs /;"	d
spiCs	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    static uint8_t spiCs = 15;$/;"	v	typeref:typename:uint8_t
spiCs	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    static uint8_t spiCs = 5;$/;"	v	typeref:typename:uint8_t
spiMiso	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    #define spiMiso /;"	d
spiMiso	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    static uint8_t spiMiso = 12;$/;"	v	typeref:typename:uint8_t
spiMiso	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    static uint8_t spiMiso = 19;$/;"	v	typeref:typename:uint8_t
spiMosi	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    #define spiMosi /;"	d
spiMosi	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    static uint8_t spiMosi = 13;$/;"	v	typeref:typename:uint8_t
spiMosi	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^    static uint8_t spiMosi = 23;$/;"	v	typeref:typename:uint8_t
spikes_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/spikes.h	/^char const * spikes_filename = "Spikes 16K.PRG";$/;"	v	typeref:typename:char const *
spikes_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/spikes.h	/^const uint8_t spikes_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
spim_config	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        struct spim_config {$/;"	s	class:NRF52SPIOutput
spinAcquireSequenceBuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void spinAcquireSequenceBuffer() {$/;"	f	class:ClocklessController	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
splatform_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/splatform.h	/^char const * splatform_filename = "Splatform 8K.PRG";$/;"	v	typeref:typename:char const *
splatform_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/splatform.h	/^const uint8_t splatform_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
splitButton1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiSplitButton * splitButton1;$/;"	m	struct:TestControlsFrame	typeref:typename:uiSplitButton *
sport	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static port_ptr_t sport()     { return &((reinterpret_cast<NR/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE port_ptr_t
sport	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static port_ptr_t sport() __attribute__ ((always_inline)) {$/;"	f	class:_ESPPIN	typeref:typename:port_ptr_t
sport	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static port_ptr_t sport() __attribute__ ((always_inline)) { return &_GPB._GPOS; } \/\//;"	f	class:_ESPPIN	typeref:typename:port_ptr_t
sprite	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    Sprite *sprite;$/;"	m	struct:Race::Player	typeref:typename:Sprite *
sprite	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.h	/^  Sprite *         sprite;$/;"	m	struct:fabgl::QuadTreeObject	typeref:typename:Sprite *
sprites	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  Sprite sprites[8];$/;"	m	struct:Race	typeref:typename:Sprite[8]
sprites	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  Sprite sprites[1];$/;"	m	struct:Score	typeref:typename:Sprite[1]
spritesCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int spritesCount() { return m_spritesCount; }$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:int
spritesCount_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  int spritesCount_ = 0;$/;"	m	class:SpritesTest	typeref:typename:int
spritesCount_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  int spritesCount_ = 0;$/;"	m	class:SpritesTest	typeref:typename:int
spritesCount_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  int spritesCount_ = 0;$/;"	m	class:SpritesTest	typeref:typename:int
sprites_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  MySprite * sprites_ = nullptr;$/;"	m	class:SpritesTest	typeref:typename:MySprite *
sprites_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  MySprite * sprites_ = nullptr;$/;"	m	class:SpritesTest	typeref:typename:MySprite *
sprites_	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  MySprite * sprites_ = nullptr;$/;"	m	class:SpritesTest	typeref:typename:MySprite *
spt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/defs.h	/^  uint16_t  spt;  \/\/ Number of 128-byte records per track$/;"	m	struct:DiscParameterBlock	typeref:typename:uint16_t
sqrt16	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC uint8_t sqrt16(uint16_t x)$/;"	f	typeref:typename:LIB8STATIC uint8_t
squarewave8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint8_t squarewave8( uint8_t in, uint8_t pulsewidth=128)$/;"	f	typeref:typename:LIB8STATIC uint8_t
squash	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^  ptrdiff_t squash() {$/;"	f	class:MemoryPool	typeref:typename:ptrdiff_t
srcDirectory	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char *          srcDirectory = nullptr;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:char *
srcFilename	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char *          srcFilename  = nullptr;$/;"	m	struct:fabgl::FileBrowserForm	typeref:typename:char *
srcFilter	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^        "srcFilter": [$/;"	a	object:build
ssid	examples/test/lib/JFixLib/src/JOtaServer.h	/^  char* ssid;$/;"	m	class:JOtaServer	typeref:typename:char *
start	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.cpp	/^void Scene::start(bool suspendTask)$/;"	f	class:fabgl::Scene	typeref:typename:void
start	examples/test/lib/JFixLib/src/Event/JOsc.cpp	/^void JOsc::start() {$/;"	f	class:JOsc	typeref:typename:void
startBoundary	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	void startBoundary() { mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(/;"	f	class:LPD6803Controller	typeref:typename:void
startBoundary	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }$/;"	f	class:APA102Controller	typeref:typename:void
startBoundary	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }$/;"	f	class:SK9822Controller	typeref:typename:void
startGPIOStream	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::startGPIOStream()$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
startNext	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^void IRAM_ATTR ESP32RMTController::startNext(int channel)$/;"	f	class:ESP32RMTController	typeref:typename:void IRAM_ATTR
startOnChannel	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^void IRAM_ATTR ESP32RMTController::startOnChannel(int channel)$/;"	f	class:ESP32RMTController	typeref:typename:void IRAM_ATTR
startOtaServer	examples/test/lib/JFixLib/src/JOtaServer.h	/^  bool startOtaServer(){$/;"	f	class:JOtaServer	typeref:typename:bool
startPtr_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp	/^  char* startPtr_;$/;"	m	class:StringMover	typeref:typename:char *
startPwmPlayback	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void startPwmPlayback(uint16_t bytesToSend) {$/;"	f	class:ClocklessController	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
startPwmPlayback_ConfigurePwmSequence	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void startPwmPlayback_ConfigurePwmSequence(NRF_PWM_Typ/;"	f	class:ClocklessController	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
startPwmPlayback_EnableInterruptsAndShortcuts	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void startPwmPlayback_EnableInterruptsAndShortcuts(NRF/;"	f	class:ClocklessController	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
startPwmPlayback_InitializePinState	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void startPwmPlayback_InitializePinState() {$/;"	f	class:ClocklessController	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
startPwmPlayback_InitializePwmInstance	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void startPwmPlayback_InitializePwmInstance(NRF_PWM_Ty/;"	f	class:ClocklessController	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
startPwmPlayback_StartTask	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void startPwmPlayback_StartTask(NRF_PWM_Type * pwm) {$/;"	f	class:ClocklessController	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
startRaceTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  long startRaceTime = 0;$/;"	m	struct:Race	typeref:typename:long
startString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  void startString() {$/;"	f	class:StringCopier	typeref:typename:void
startString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp	/^  void startString() {$/;"	f	class:StringMover	typeref:typename:void
startTime	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    unsigned long startTime = 0;$/;"	m	class:JEnv	typeref:typename:unsigned long
startTime	examples/test/lib/JFixLib/src/Event/JOsc.h	/^  double startTime = 0;$/;"	m	class:JOsc	typeref:typename:double
startVal	examples/test/lib/JFixLib/src/JLag.h	/^    float startVal = 0;$/;"	m	class:JLag	typeref:typename:float
state	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  Z80_STATE         state;$/;"	m	class:fabgl::Z80	typeref:typename:Z80_STATE
state	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindowState state() { return m_state; }$/;"	f	class:fabgl::uiWindow	typeref:typename:uiWindowState
state	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    JEnvState state = IDLE;$/;"	m	class:JEnv	typeref:typename:JEnvState
stateRandom	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    bool stateRandom = false;$/;"	m	class:JEnv	typeref:typename:bool
static_assert	examples/test/.pio/libdeps/esp32dev/FastLED/src/cpp_compat.h	/^#define static_assert(/;"	d
status	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  MouseStatus & status() { return m_status; }$/;"	f	class:fabgl::Mouse	typeref:typename:MouseStatus &
status	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  int               status;$/;"	m	struct:fabgl::Z80_STATE	typeref:typename:int
status	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  MouseStatus status;         \/**< Mouse position, wheel delta and buttons status *\/$/;"	m	struct:fabgl::uiMouseEventInfo	typeref:typename:MouseStatus
statusLed	examples/test/lib/JFixLib/src/JWS2812B_status.h	/^CRGB statusLed[1];$/;"	v	typeref:typename:CRGB[1]
std_flags	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t std_flags[] = {  3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0,$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
step	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MOS6502.cpp	/^int MOS6502::step()$/;"	f	class:fabgl::MOS6502	typeref:typename:int
step	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.cpp	/^int Z80::step()$/;"	f	class:fabgl::Z80	typeref:typename:int
step	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^int i8080::step()$/;"	f	class:fabgl::i8080	typeref:typename:int
step	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::step()$/;"	f	class:fabgl::i8086	typeref:typename:void
stepAdvanceAndLoadAndScale0	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t stepAdvanceAndLoadAndScale0() { stepDither/;"	f	struct:PixelController	typeref:typename:uint8_t
stepAdvanceAndLoadAndScale0	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t stepAdvanceAndLoadAndScale0(int lane) { st/;"	f	struct:PixelController	typeref:typename:uint8_t
stepAdvanceAndLoadAndScale0	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^        __attribute__((always_inline)) inline uint8_t stepAdvanceAndLoadAndScale0(int lane, uint/;"	f	struct:PixelController	typeref:typename:uint8_t
stepDithering	examples/test/.pio/libdeps/esp32dev/FastLED/src/controller.h	/^         __attribute__((always_inline)) inline void stepDithering() {$/;"	f	struct:PixelController	typeref:typename:void
stepEx	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^void i8086::stepEx(uint8_t const * opcode_stream)$/;"	f	class:fabgl::i8086	typeref:typename:void
stop	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    void stop(void)$/;"	f	struct:Race::Player	typeref:typename:void
stop	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.cpp	/^void CVBSGenerator::stop()$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:void
stop	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/swgenerator.cpp	/^void GPIOStream::stop()$/;"	f	class:fabgl::GPIOStream	typeref:typename:void
stop	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.cpp	/^void Scene::stop()$/;"	f	class:fabgl::Scene	typeref:typename:void
stop	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	static void stop() { }$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
stop	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void stop() {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
stop	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void stop() {$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
stop	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void stop() {$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
stop	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	static void stop() { }$/;"	f	class:ESP32SPIOutput	typeref:typename:void
stop	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	static void stop() { }$/;"	f	class:ESP8266SPIOutput	typeref:typename:void
stopBitsComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiComboBox *      stopBitsComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiComboBox *
stopEndUpdateTimer	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^void MC146818::stopEndUpdateTimer()$/;"	f	class:fabgl::MC146818	typeref:typename:void
stopPeriodicTimer	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^void MC146818::stopPeriodicTimer()$/;"	f	class:fabgl::MC146818	typeref:typename:void
stopTime	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    unsigned long stopTime = 0;$/;"	m	class:JEnv	typeref:typename:unsigned long
storagePolicy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  StringStoragePolicy::Copy storagePolicy() const {$/;"	f	class:FlashString	typeref:typename:StringStoragePolicy::Copy
storagePolicy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/JsonString.hpp	/^  StringStoragePolicy::LinkOrCopy storagePolicy() const {$/;"	f	class:JsonStringAdapter	typeref:typename:StringStoragePolicy::LinkOrCopy
storagePolicy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  StringStoragePolicy::Copy storagePolicy() const {$/;"	f	class:SizedRamString	typeref:typename:StringStoragePolicy::Copy
storagePolicy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  StringStoragePolicy::Copy storagePolicy() const {$/;"	f	class:ZeroTerminatedRamString	typeref:typename:StringStoragePolicy::Copy
storagePolicy	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  StringStoragePolicy::Link storagePolicy() const {$/;"	f	class:StaticStringAdapter	typeref:typename:StringStoragePolicy::Link
storeKeyInKbdBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^bool BIOS::storeKeyInKbdBuffer(uint16_t syscode)$/;"	f	class:BIOS	typeref:typename:bool
storeKeyboardKeyData	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::storeKeyboardKeyData()$/;"	f	class:BIOS	typeref:typename:void
storeOwnedRaw	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  bool storeOwnedRaw(SerializedValue<T> value, MemoryPool* pool) {$/;"	f	class:VariantData	typeref:typename:bool
storeString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^bool storeString(MemoryPool* pool, TAdaptedString str, TCallback callback) {$/;"	f	typeref:typename:bool
storeString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^bool storeString(MemoryPool* pool, TAdaptedString str,$/;"	f	typeref:typename:bool
storeString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp	/^bool storeString(MemoryPool*, TAdaptedString str, StringStoragePolicy::Link,$/;"	f	typeref:typename:bool
store_flags	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^void i8080::store_flags()$/;"	f	class:fabgl::i8080	typeref:typename:void
str	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp	/^  JsonString str() const {$/;"	f	class:StringCopier	typeref:typename:JsonString
str	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp	/^  JsonString str() const {$/;"	f	class:StringMover	typeref:typename:JsonString
str	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  JsonString str() {$/;"	f	class:detail::MemoryPoolPrint	typeref:typename:JsonString
strLen	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^size_t HAL::strLen(uint16_t addr)$/;"	f	class:HAL	typeref:typename:size_t
strToDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::strToDrive(char const * str, int * drive)$/;"	f	class:BDOS	typeref:typename:bool
strToDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^bool BDOS::strToDrive(uint16_t str, int * drive)$/;"	f	class:BDOS	typeref:typename:bool
strToUpper	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::strToUpper(char * str)$/;"	f	class:BDOS	typeref:typename:void
str_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp	/^  T str_;$/;"	m	class:SerializedValue	typeref:typename:T
str_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStringWriter.hpp	/^  TDestination* str_;$/;"	m	class:Writer	typeref:typename:TDestination *
str_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  const char* str_;$/;"	m	class:FlashString	typeref:typename:const char *
str_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  const char* str_;$/;"	m	class:SizedRamString	typeref:typename:const char *
str_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  const char* str_;$/;"	m	class:ZeroTerminatedRamString	typeref:typename:const char *
strcmp_P	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp	/^inline int strcmp_P(const char* a, ArduinoJson::detail::pgm_p b) {$/;"	f	typeref:typename:int
stream	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transdisk.py	/^  stream = open(filename, 'rb')$/;"	v
stream	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transdisk.py	/^  stream = open(filename, 'wb')$/;"	v
stream	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transfile.py	/^  stream = open(filename, 'rb')$/;"	v
stream	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/tools/transfile.py	/^  stream = open(filename, 'wb')$/;"	v
stream_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStreamReader.hpp	/^  Stream* stream_;$/;"	m	struct:Reader	typeref:typename:Stream *
stream_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/StdStreamReader.hpp	/^  std::istream* stream_;$/;"	m	struct:Reader	typeref:typename:std::istream *
stringCompare	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  friend int stringCompare(FlashString a, SizedRamString b) {$/;"	f	typeref:typename:int
stringCompare	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  friend int stringCompare(ZeroTerminatedRamString a,$/;"	f	typeref:typename:int
stringCompare	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringAdapters.hpp	/^stringCompare(TAdaptedString1 s1, TAdaptedString2 s2) {$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE typename enable_if<TAdaptedString1::typeSortKey<=TAdaptedString2::typeSortKey,int>::type
stringCompare	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringAdapters.hpp	/^stringCompare(TAdaptedString1 s1, TAdaptedString2 s2) {$/;"	f	typeref:typename:enable_if<(TAdaptedString1::typeSortKey> TAdaptedString2::typeSortKey),int>::type
stringEquals	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  friend bool stringEquals(FlashString a, SizedRamString b) {$/;"	f	typeref:typename:bool
stringEquals	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  friend bool stringEquals(ZeroTerminatedRamString a,$/;"	f	typeref:typename:bool
stringEquals	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringAdapters.hpp	/^stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {$/;"	f	typeref:typename:enable_if<(TAdaptedString1::typeSortKey> TAdaptedString2::typeSortKey),bool>::type
stringEquals	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringAdapters.hpp	/^stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {$/;"	f	typeref:typename:enable_if<TAdaptedString1::typeSortKey<=TAdaptedString2::typeSortKey,bool>::type
stringGetChars	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  friend void stringGetChars(FlashString s, char* p, size_t n) {$/;"	f	typeref:typename:void
stringGetChars	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringAdapters.hpp	/^static void stringGetChars(TAdaptedString s, char* p, size_t n) {$/;"	f	typeref:typename:void
stringStorage_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp	/^  TStringStorage stringStorage_;$/;"	m	class:JsonDeserializer	typeref:typename:TStringStorage
stringStorage_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp	/^  TStringStorage stringStorage_;$/;"	m	class:MsgPackDeserializer	typeref:typename:TStringStorage
string_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  char* string_;$/;"	m	class:detail::MemoryPoolPrint	typeref:typename:char *
string_traits	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^struct string_traits {$/;"	s
string_traits_impl	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/StringTraits.hpp	/^namespace string_traits_impl {$/;"	n
strlen_P	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp	/^inline size_t strlen_P(ArduinoJson::detail::pgm_p s) {$/;"	f	typeref:typename:ARDUINOJSON_END_PRIVATE_NAMESPACE size_t
strncmp_P	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp	/^inline int strncmp_P(const char* a, ArduinoJson::detail::pgm_p b, size_t n) {$/;"	f	typeref:typename:int
strobe	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }$/;"	f	class:FastPin	typeref:typename:void
strobe	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void strobe() __attribute__ ((always_inline)) { }$/;"	f	class:FastPin	typeref:typename:void
strobe	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }$/;"	f	class:Pin	typeref:typename:void
strobe	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }$/;"	f	class:_ARMPIN	typeref:typename:void
strobe	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void       strobe()    { toggle();     toggle();      /;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
strobe	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }$/;"	f	class:_ESPPIN	typeref:typename:void
strobe	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }$/;"	f	class:_ESPPIN	typeref:typename:void
stroke	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^    stroke = int(args[pidx + 1])$/;"	v
stroke	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^stroke   = 0$/;"	v
style	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiStyle * style()                                { return m_style; }$/;"	f	class:fabgl::uiApp	typeref:typename:uiStyle *
styleClassID	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint16_t styleClassID()                { return m_styleClassID; }$/;"	f	class:fabgl::uiWindow	typeref:typename:uint16_t
sub	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  sub   di, 80$/;"	d
sub	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  sub   dx, 2    ; MSB of divisor latch$/;"	d
sub	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  sub  di, 320$/;"	d
sub	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  sub  di, 80$/;"	d
sub	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  sub  dx, 3    ; Set Interrupt Control Register$/;"	d
sub	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^  sub  dx, 5$/;"	d
sub	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Point sub(Point const & p) const { return Point(X - p.X, Y - p.Y); }$/;"	f	struct:fabgl::Point	typeref:typename:Point
sub4	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^} sub4;$/;"	t	typeref:struct:__anonad8cb3ed0308
sub8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC_ALWAYS_INLINE uint8_t sub8( uint8_t i, uint8_t j)$/;"	f	typeref:typename:LIB8STATIC_ALWAYS_INLINE uint8_t
subCarrierPhase	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  static int subCarrierPhase()                                { return *s_subCarrierPhase; }$/;"	f	class:fabgl::CVBSGenerator	typeref:typename:int
subFromRGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixelset.h	/^    inline CPixelView & subFromRGB(uint8_t inc) { for(iterator pixel = begin(), _end = end(); pi/;"	f	class:CPixelView	typeref:typename:CPixelView &
sub_half_carry_table	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.cpp	/^static const int sub_half_carry_table[] = { 0, 1, 1, 1, 0, 0, 0, 1 };$/;"	v	namespace:fabgl	typeref:typename:const int[]	file:
subcarrierFreq_hz	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          subcarrierFreq_hz;$/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
submod8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion/math8.h	/^LIB8STATIC uint8_t submod8( uint8_t a, uint8_t b, uint8_t m)$/;"	f	typeref:typename:LIB8STATIC uint8_t
subtractFromRGB	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^    inline CRGB& subtractFromRGB(uint8_t d )$/;"	f	struct:CRGB	typeref:typename:CRGB &
suspendBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::suspendBackgroundPrimitiveExecution()$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
suspendBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::suspendBackgroundPrimitiveExecution()$/;"	f	class:fabgl::TFTController	typeref:typename:void
suspendBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^void CVBSBaseController::suspendBackgroundPrimitiveExecution()$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void
suspendBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^void CVBSPalettedController::suspendBackgroundPrimitiveExecution()$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:void
suspendBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void VGABaseController::suspendBackgroundPrimitiveExecution()$/;"	f	class:fabgl::VGABaseController	typeref:typename:void
suspendBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void VGAController::suspendBackgroundPrimitiveExecution()$/;"	f	class:fabgl::VGAController	typeref:typename:void
suspendBackgroundPrimitiveExecution	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^void VGAPalettedController::suspendBackgroundPrimitiveExecution()$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
suspendCaret	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::suspendCaret(bool value)$/;"	f	class:fabgl::uiApp	typeref:typename:void
suspendDoubleBuffering	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^bool SSD1306Controller::suspendDoubleBuffering(bool value)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:bool
suspendDoubleBuffering	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^bool TFTController::suspendDoubleBuffering(bool value)$/;"	f	class:fabgl::TFTController	typeref:typename:bool
suspendDoubleBuffering	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^bool CVBSBaseController::suspendDoubleBuffering(bool value)$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:bool
suspendDoubleBuffering	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^bool CVBSPalettedController::suspendDoubleBuffering(bool value)$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:bool
suspendDoubleBuffering	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^bool VGABaseController::suspendDoubleBuffering(bool value)$/;"	f	class:fabgl::VGABaseController	typeref:typename:bool
suspendDoubleBuffering	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^bool VGAPalettedController::suspendDoubleBuffering(bool value)$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:bool
suspendDoubleBuffering	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^bool BitmappedDisplayController::suspendDoubleBuffering(bool value)$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:bool
suspendPort	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^void PS2Device::suspendPort()$/;"	f	class:fabgl::PS2Device	typeref:typename:void
sustain	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^  int sustain; \/\/ 0-127 range (over sound volume)$/;"	m	struct:playsounddata	typeref:typename:int
sustain	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^  int sustain; \/\/ 0-127 range (over sound volume)$/;"	m	struct:playsounddata	typeref:typename:int
swapBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::swapBuffers()$/;"	f	class:fabgl::Canvas	typeref:typename:void
swapBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::swapBuffers()$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
swapBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::swapBuffers()$/;"	f	class:fabgl::TFTController	typeref:typename:void
swapBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbsbasecontroller.cpp	/^void IRAM_ATTR CVBSBaseController::swapBuffers()$/;"	f	class:fabgl::CVBSBaseController	typeref:typename:void IRAM_ATTR
swapBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^void CVBSPalettedController::swapBuffers()$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:void
swapBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgabasecontroller.cpp	/^void IRAM_ATTR VGABaseController::swapBuffers()$/;"	f	class:fabgl::VGABaseController	typeref:typename:void IRAM_ATTR
swapBuffers	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^void VGAPalettedController::swapBuffers()$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
swapBytes	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/endianess.hpp	/^inline void swapBytes(uint8_t& a, uint8_t& b) {$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE void
swapFGBG	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::swapFGBG(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
swapFGBG	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::swapFGBG(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::TFTController	typeref:typename:void
swapFGBG	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::swapFGBG(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
swapFGBG	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::swapFGBG(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
swapFGBG	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::swapFGBG(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
swapFGBG	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::swapFGBG(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
swapFGBG	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::swapFGBG(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
swapFGBG	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::swapFGBG(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
swapFGBG	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::swapFGBG(Rect const & rect, Rect & updateRect)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
swapFGBG	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t swapFGBG : 1;  \/**< If enabled swaps foreground and background colors *\/$/;"	m	struct:fabgl::PaintOptions	typeref:typename:uint8_t:1
swapRectangle	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::swapRectangle(int X1, int Y1, int X2, int Y2)$/;"	f	class:fabgl::Canvas	typeref:typename:void
swapRows	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::swapRows(int yA, int yB, int x1, int x2)$/;"	f	class:fabgl::TFTController	typeref:typename:void
swapRows	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbs16controller.cpp	/^void CVBS16Controller::swapRows(int yA, int yB, int x1, int x2)$/;"	f	class:fabgl::CVBS16Controller	typeref:typename:void
swapRows	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga16controller.cpp	/^void VGA16Controller::swapRows(int yA, int yB, int x1, int x2)$/;"	f	class:fabgl::VGA16Controller	typeref:typename:void
swapRows	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^void VGA2Controller::swapRows(int yA, int yB, int x1, int x2)$/;"	f	class:fabgl::VGA2Controller	typeref:typename:void
swapRows	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^void VGA4Controller::swapRows(int yA, int yB, int x1, int x2)$/;"	f	class:fabgl::VGA4Controller	typeref:typename:void
swapRows	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^void VGA8Controller::swapRows(int yA, int yB, int x1, int x2)$/;"	f	class:fabgl::VGA8Controller	typeref:typename:void
swapRows	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void IRAM_ATTR VGAController::swapRows(int yA, int yB, int x1, int x2)$/;"	f	class:fabgl::VGAController	typeref:typename:void IRAM_ATTR
swapRows	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgadirectcontroller.cpp	/^void VGADirectController::swapRows(int yA, int yB, int x1, int x2)$/;"	f	class:fabgl::VGADirectController	typeref:typename:void
swapbits8	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^__attribute__((always_inline)) inline void swapbits8(bitswap_type in, bitswap_type & out) {$/;"	f	typeref:typename:void
switchButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiButton * normalButton, * switchButton;$/;"	m	struct:TestControlsFrame	typeref:typename:uiButton *
switchListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCustomComboBox::switchListBox()$/;"	f	class:fabgl::uiCustomComboBox	typeref:typename:void
switchPrinterEchoEnabled	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  void switchPrinterEchoEnabled() { m_printerEchoEnabled = !m_printerEchoEnabled; }$/;"	f	class:BDOS	typeref:typename:void
syncDisplayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::syncDisplayController()$/;"	f	class:fabgl::Terminal	typeref:typename:void
syncError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  static bool syncError(int PS2Port)          { return s_syncError[PS2Port]; }$/;"	f	class:fabgl::PS2Controller	typeref:typename:bool
syncError	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^bool PS2Device::syncError()$/;"	f	class:fabgl::PS2Device	typeref:typename:bool
syncLevel	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  uint8_t         syncLevel;                      \/\/ DAC level of sync pulses$/;"	m	struct:fabgl::CVBSParams	typeref:typename:uint8_t
syncPlaySound	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^void  syncPlaySound( playsounddata psd)$/;"	f	typeref:typename:void
syncTicksWithRTC	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::syncTicksWithRTC()$/;"	f	class:BIOS	typeref:typename:void
syncTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^void Machine::syncTime()$/;"	f	class:Machine	typeref:typename:void
sysReq	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^bool Machine::sysReq(void * context)$/;"	f	class:Machine	typeref:typename:bool
syscode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^    uint16_t syscode[4];    \/\/ 0 = normal, 1 = shifted, 2 = control, 3 = alt$/;"	m	struct:BIOS::processScancode::ScanCode2SysCode	typeref:typename:uint16_t[4]	file:
systemFree	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  static int systemFree() { return heap_caps_get_free_size(MALLOC_CAP_32BIT); }$/;"	f	class:HAL	typeref:typename:int
tabStop	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  uint8_t *               tabStop;$/;"	m	struct:fabgl::TerminalCursorState	typeref:typename:uint8_t *
tabStop	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  uint8_t *    tabStop;$/;"	m	struct:fabgl::EmuState	typeref:typename:uint8_t *
tag	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.h	/^  uint8_t tag()                      { return m_tag; }$/;"	f	class:fabgl::VIA6522	typeref:typename:uint8_t
tail_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Collection/CollectionData.hpp	/^  VariantSlot* tail_;$/;"	m	class:CollectionData	typeref:typename:VariantSlot *
takeStrings	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void StringList::takeStrings()$/;"	f	class:fabgl::StringList	typeref:typename:void
tammerfors_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/tammerfors.h	/^char const * tammerfors_filename = "Tammerfors.PRG";$/;"	v	typeref:typename:char const *
tammerfors_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/tammerfors.h	/^const uint8_t tammerfors_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
tank_battalion_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/tank_battalion.h	/^char const * tank_battalion_filename = "Tank Battalion 16K.PRG";$/;"	v	typeref:typename:char const *
tank_battalion_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/tank_battalion.h	/^const uint8_t tank_battalion_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
taskExit	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^inline void taskExit()$/;"	f	namespace:fabgl	typeref:typename:void
tclamp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^const T & tclamp(const T & v, const T & lo, const T & hi)$/;"	f	namespace:fabgl	typeref:typename:const T &
temperature	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^double DS3231::temperature()$/;"	f	class:fabgl::DS3231	typeref:typename:double
termComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiComboBox *      termComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiComboBox *
termSeq	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  const char * termSeq;        \/\/ input terminal control code to match. 0xFF matches any char$/;"	m	struct:fabgl::TermInfoVideoConv	typeref:typename:const char *
termSeqLen	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  int          termSeqLen;     \/\/ length of termSeq string$/;"	m	struct:fabgl::TermInfoVideoConv	typeref:typename:int
term_ADM31	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfo term_ADM31 = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfo
term_ADM3A	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfo term_ADM3A = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfo
term_ANSILegacy	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfo term_ANSILegacy = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfo
term_Hazeltine1500	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfo term_Hazeltine1500 = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfo
term_Kaypro	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfo term_Kaypro = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfo
term_Osborne	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfo term_Osborne = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfo
term_VT52	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfo term_VT52 = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfo
terminal	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  Terminal * terminal()                           { return m_terminal; }$/;"	f	class:HAL	typeref:typename:Terminal *
terminal	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^  Terminal *                    terminal;$/;"	m	struct:Session	typeref:typename:Terminal *
terminalType	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  TermInfo const & terminalType() { return *m_termInfo; }$/;"	f	class:fabgl::Terminal	typeref:typename:TermInfo const &
terminateAbsolutePositioner	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^void Mouse::terminateAbsolutePositioner()$/;"	f	class:fabgl::Mouse	typeref:typename:void
testControlsButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  uiButton * testPaintBoxButton, * testTimerButton, * testControlsButton, * testInputBoxButton;$/;"	m	class:MyApp	typeref:typename:uiButton *
testControlsFrame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  TestControlsFrame * testControlsFrame;$/;"	m	class:MyApp	typeref:typename:TestControlsFrame *
testFunc	examples/test/lib/JFixLib/src/Event/Event.cpp	/^void Event::testFunc(){$/;"	f	class:Event	typeref:typename:void
testInputBoxButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  uiButton * testPaintBoxButton, * testTimerButton, * testControlsButton, * testInputBoxButton;$/;"	m	class:MyApp	typeref:typename:uiButton *
testLED	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  void testLED(){$/;"	f	class:JFixtureAddr	typeref:typename:void
testLED	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  void testLED(){$/;"	f	class:JFixtureDimmer	typeref:typename:void
testModalDialogButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  uiButton * createFrameButton, * destroyFrameButton, * testModalDialogButton, * msgBoxButton;$/;"	m	class:MyApp	typeref:typename:uiButton *
testPaintBoxButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  uiButton * testPaintBoxButton, * testTimerButton, * testControlsButton, * testInputBoxButton;$/;"	m	class:MyApp	typeref:typename:uiButton *
testState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^  int testState()$/;"	f	class:BallsTest	typeref:typename:int
testState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  int testState()$/;"	f	class:PolygonsTest	typeref:typename:int
testState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  int testState()$/;"	f	class:SpritesTest	typeref:typename:int
testState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^  int testState()$/;"	f	class:BallsTest	typeref:typename:int
testState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  int testState()$/;"	f	class:PolygonsTest	typeref:typename:int
testState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  int testState()$/;"	f	class:SpritesTest	typeref:typename:int
testState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^  int testState()$/;"	f	class:BallsTest	typeref:typename:int
testState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  int testState()$/;"	f	class:PolygonsTest	typeref:typename:int
testState	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  int testState()$/;"	f	class:SpritesTest	typeref:typename:int
testTimerButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  uiButton * testPaintBoxButton, * testTimerButton, * testControlsButton, * testInputBoxButton;$/;"	m	class:MyApp	typeref:typename:uiButton *
testTimerFrame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  TestTimerFrame * testTimerFrame;$/;"	m	class:MyApp	typeref:typename:TestTimerFrame *
testTiming	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^int testTiming = 0;$/;"	v	typeref:typename:int
testsFrame	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/App.h	/^  uiFrame * testsFrame;$/;"	m	class:MyApp	typeref:typename:uiFrame *
tetris_plus_filename	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/tetris_plus.h	/^char const * tetris_plus_filename = "Tetris+ 3K.PRG";$/;"	v	typeref:typename:char const *
tetris_plus_prg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/progs/embedded/tetris_plus.h	/^const uint8_t tetris_plus_prg[] = {$/;"	v	typeref:typename:const uint8_t[]
text	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^    bool                 text;$/;"	m	struct:fabgl::GraphicsAdapter::setupEmulation::__anonf67d7a610108	typeref:typename:bool	file:
text	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  char const * text() { return m_text; }$/;"	f	class:fabgl::uiButton	typeref:typename:char const *
text	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  char const * text() { return m_text; }$/;"	f	class:fabgl::uiLabel	typeref:typename:char const *
text	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  char const * text() { return m_text; }$/;"	f	class:fabgl::uiStaticLabel	typeref:typename:char const *
text	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  char const * text() { return m_text; }$/;"	f	class:fabgl::uiTextEdit	typeref:typename:char const *
text	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  char const * text() { return m_textEdit->text(); }$/;"	f	class:fabgl::uiComboBox	typeref:typename:char const *
textAlign	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiHAlign         textAlign                = uiHAlign::Left;            \/**< Text horizontal a/;"	m	struct:fabgl::uiLabelStyle	typeref:typename:uiHAlign
textColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           textColor                      = RGB888(0, 0, 0);         \/**< Text foregrou/;"	m	struct:fabgl::uiListBoxStyle	typeref:typename:RGB888
textColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           textColor                  = RGB888(0, 0, 0);           \/**< Text color *\/$/;"	m	struct:fabgl::uiTextEditStyle	typeref:typename:RGB888
textColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           textColor                = RGB888(0, 0, 0);           \/**< Text color *\/$/;"	m	struct:fabgl::uiLabelStyle	typeref:typename:RGB888
textColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           textColor                = RGB888(0, 0, 0);           \/**< Text color *\/$/;"	m	struct:fabgl::uiStaticLabelStyle	typeref:typename:RGB888
textColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           textColor                = RGB888(0, 0, 0);       \/**< Text color *\/$/;"	m	struct:fabgl::uiButtonStyle	typeref:typename:RGB888
textColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888           textColor       = RGB888(255, 255, 255);   \/**< Text color *\/$/;"	m	struct:fabgl::uiProgressBarStyle	typeref:typename:RGB888
textControls	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^  char const *textControls[6] = { ".......", " MOUSE ", "JOYSTICK", " ARROWS ", "A S T F ", "Q A/;"	m	struct:Menu	typeref:typename:char const * [6]
textEdit	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestControlsFrame.h	/^  uiTextEdit * textEdit;$/;"	m	struct:TestControlsFrame	typeref:typename:uiTextEdit *
textEdit1	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestModalDialog.h	/^  uiTextEdit * textEdit1, * textEdit2, * textEdit3, * textEdit4;$/;"	m	struct:TestModalDialog	typeref:typename:uiTextEdit *
textEdit2	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestModalDialog.h	/^  uiTextEdit * textEdit1, * textEdit2, * textEdit3, * textEdit4;$/;"	m	struct:TestModalDialog	typeref:typename:uiTextEdit *
textEdit3	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestModalDialog.h	/^  uiTextEdit * textEdit1, * textEdit2, * textEdit3, * textEdit4;$/;"	m	struct:TestModalDialog	typeref:typename:uiTextEdit *
textEdit4	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestModalDialog.h	/^  uiTextEdit * textEdit1, * textEdit2, * textEdit3, * textEdit4;$/;"	m	struct:TestModalDialog	typeref:typename:uiTextEdit *
textEditProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiTextEditProps & textEditProps() { return m_textEdit->textEditProps(); }$/;"	f	class:fabgl::uiComboBox	typeref:typename:uiTextEditProps &
textEditProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiTextEditProps & textEditProps() { return m_textEditProps; }$/;"	f	class:fabgl::uiTextEdit	typeref:typename:uiTextEditProps &
textEditStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiTextEditStyle & textEditStyle() { return m_textEdit->textEditStyle(); }$/;"	f	class:fabgl::uiComboBox	typeref:typename:uiTextEditStyle &
textEditStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiTextEditStyle & textEditStyle() { return m_textEditStyle; }$/;"	f	class:fabgl::uiTextEdit	typeref:typename:uiTextEditStyle &
textExtent	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^int Canvas::textExtent(FontInfo const * fontInfo, char const * text)$/;"	f	class:fabgl::Canvas	typeref:typename:int
textExtent	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^int Canvas::textExtent(char const * text)$/;"	f	class:fabgl::Canvas	typeref:typename:int
textFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  FontInfo const * textFont                       = &FONT_std_14;            \/**< Text font *\/$/;"	m	struct:fabgl::uiListBoxStyle	typeref:typename:FontInfo const *
textFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  FontInfo const * textFont                   = &FONT_std_14;              \/**< Text font *\/$/;"	m	struct:fabgl::uiTextEditStyle	typeref:typename:FontInfo const *
textFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  FontInfo const * textFont                 = &FONT_std_14;              \/**< Text font *\/$/;"	m	struct:fabgl::uiLabelStyle	typeref:typename:FontInfo const *
textFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  FontInfo const * textFont                 = &FONT_std_14;              \/**< Text font *\/$/;"	m	struct:fabgl::uiStaticLabelStyle	typeref:typename:FontInfo const *
textFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  FontInfo const * textFont                 = &FONT_std_14;          \/**< Text font *\/$/;"	m	struct:fabgl::uiButtonStyle	typeref:typename:FontInfo const *
textFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  FontInfo const * textFont        = &FONT_std_14;            \/**< Text font *\/$/;"	m	struct:fabgl::uiProgressBarStyle	typeref:typename:FontInfo const *
textInput	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^InputResult InputBox::textInput(char const * titleText, char const * labelText, char * inOutStri/;"	f	class:fabgl::InputBox	typeref:typename:InputResult
textinput_7x13	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t textinput_7x13[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
themeSoundSamples	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SpaceInvaders/sounds.h	/^const int8_t themeSoundSamples[] = {$/;"	v	typeref:typename:const int8_t[]
thread	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.h	/^  TaskHandle_t                  thread;$/;"	m	struct:Session	typeref:typename:TaskHandle_t
tick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Mits88Disk::tick(int ticks)$/;"	f	class:Mits88Disk	typeref:typename:void
tick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  void tick(int ticks) { }$/;"	f	class:SIO	typeref:typename:void
tick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::tick()$/;"	f	class:Machine	typeref:typename:void
tick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^void IECDrive::tick(int cycles)$/;"	f	class:IECDrive	typeref:typename:void
tick	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.cpp	/^void MOS6561::tick(int cycles)$/;"	f	class:MOS6561	typeref:typename:void
tick	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::tick()$/;"	f	class:fabgl::PC8250	typeref:typename:void
tick	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.cpp	/^void PIT8253::tick()$/;"	f	class:fabgl::PIT8253	typeref:typename:void
tick	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.cpp	/^bool VIA6522::tick(int cycles)$/;"	f	class:fabgl::VIA6522	typeref:typename:bool
tick	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^void i8042::tick()$/;"	f	class:fabgl::i8042	typeref:typename:void
ticksColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888 ticksColor         = RGB888(255, 255, 255);    \/**> Ticks color *\/$/;"	m	struct:fabgl::uiSliderStyle	typeref:typename:RGB888
ticksCounter	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint32_t ticksCounter()              { return m_ticksCounter; }$/;"	f	class:Machine	typeref:typename:uint32_t
time_new	examples/test/.pio/libdeps/esp32dev/FabGL/tools/wav2header/wav2header.py	/^time_new  = np.linspace(0, duration, int(float(old_audio.shape[0]) * new_samplerate \/ old_sampl/;"	v
time_old	examples/test/.pio/libdeps/esp32dev/FabGL/tools/wav2header/wav2header.py	/^time_old  = np.linspace(0, duration, old_audio.shape[0])$/;"	v
timeout	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.h	/^  uint16_t  timeout;$/;"	m	struct:fabgl::I2CJobInfo	typeref:typename:uint16_t
timer	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestTimerFrame.h	/^  uiTimerHandle timer;$/;"	m	struct:TestTimerFrame	typeref:typename:uiTimerHandle
timerFunc	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiApp::timerFunc(TimerHandle_t xTimer)$/;"	f	class:fabgl::uiApp	typeref:typename:void
timerHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^    uiTimerHandle timerHandle;$/;"	m	union:fabgl::uiEvent::uiEventParams	typeref:typename:uiTimerHandle
timerHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^void SoundGenerator::timerHandler(void * args)$/;"	f	class:fabgl::SoundGenerator	typeref:typename:void
timerInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.h	/^  TimerInfo const & timerInfo(int timerIndex) { return m_timer[timerIndex]; }$/;"	f	class:fabgl::PIT8253	typeref:typename:TimerInfo const &
times	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^times (0xff-($-com1addr)) db  0$/;"	l
times	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^times 32         db  'X'$/;"	l
times	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^times 7          db  0$/;"	l
times	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^times 7          dw  0 ; cursor pos for pages$/;"	l
timesec	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  int timesec;$/;"	m	struct:ScoreCard	typeref:typename:int
timestamp	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^time_t DateTime::timestamp(int timezone)$/;"	f	class:fabgl::DateTime	typeref:typename:time_t
title	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  char const * title() { return m_title; }$/;"	f	class:fabgl::uiFrame	typeref:typename:char const *
titleBackgroundColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              titleBackgroundColor           = RGB888(128, 128, 128);  \/**< Title backg/;"	m	struct:fabgl::uiFrameStyle	typeref:typename:RGB888
titleBarHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^int uiFrame::titleBarHeight()$/;"	f	class:fabgl::uiFrame	typeref:typename:int
titleBarRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Rect uiFrame::titleBarRect()$/;"	f	class:fabgl::uiFrame	typeref:typename:Rect
titleColor	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  RGB888              titleColor                     = RGB888(0, 0, 0);        \/**< Title color/;"	m	struct:fabgl::uiFrameStyle	typeref:typename:RGB888
titleFont	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  FontInfo const *    titleFont                      = &FONT_std_12;           \/**< Title font /;"	m	struct:fabgl::uiFrameStyle	typeref:typename:FontInfo const *
titleText	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  char const *     titleText;$/;"	m	struct:fabgl::InputForm	typeref:typename:char const *
tmax	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^const T & tmax(const T & a, const T & b)$/;"	f	namespace:fabgl	typeref:typename:const T &
tmin	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^const T & tmin(const T & a, const T & b)$/;"	f	namespace:fabgl	typeref:typename:const T &
to	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  typename detail::VariantTo<T>::type to() {$/;"	f	class:JsonDocument	typeref:typename:detail::VariantTo<T>::type
to	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp	/^VariantRefBase<TDerived>::to() const {$/;"	f	class:VariantRefBase	typeref:typename:enable_if<is_same<T,JsonArray>::value,JsonArray>::type
to	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp	/^VariantRefBase<TDerived>::to() const {$/;"	f	class:VariantRefBase	typeref:typename:enable_if<is_same<T,JsonObject>::value,JsonObject>::type
to	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp	/^VariantRefBase<TDerived>::to() const {$/;"	f	class:VariantRefBase	typeref:typename:enable_if<is_same<T,JsonVariant>::value,JsonVariant>::type
toArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  CollectionData& toArray() {$/;"	f	class:VariantData	typeref:typename:CollectionData &
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArray.hpp	/^  static void toJson(JsonVariantConst src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayConst.hpp	/^  static void toJson(JsonVariantConst src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObject.hpp	/^  static void toJson(JsonVariantConst src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonObjectConst.hpp	/^  static void toJson(JsonVariantConst src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static void toJson(JsonString src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static void toJson(SerializedValue<T> src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static void toJson(SerializedValue<const char*> src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static void toJson(T src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static void toJson(bool src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static void toJson(const T& src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static void toJson(const char* src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static void toJson(decltype(nullptr), JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  static void toJson(JsonVariant src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/JsonVariant.hpp	/^  static void toJson(JsonVariantConst src, JsonVariant dst) {$/;"	f	struct:Converter	typeref:typename:void
toObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  CollectionData& toObject() {$/;"	f	class:VariantData	typeref:typename:CollectionData &
toggle	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void toggle() __attribute__ ((always_inline)) { *sInPort = sPinMask; }$/;"	f	class:FastPin	typeref:typename:void
toggle	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline static void toggle() __attribute__ ((always_inline)) { }$/;"	f	class:FastPin	typeref:typename:void
toggle	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	inline void toggle() __attribute__ ((always_inline)) { *mInPort = mPinMask; }$/;"	f	class:Pin	typeref:typename:void
toggle	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastpin_arm_nrf51.h	/^    inline static void toggle() __attribute__ ((always_inline)) { FL_NRF_GPIO->OUT ^= _MASK; }$/;"	f	class:_ARMPIN	typeref:typename:void
toggle	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastpin_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static void       toggle()    { (reinterpret_cast<NRF_GPIO_Ty/;"	f	class:_ARMPIN	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE void
toggle	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  inline static void toggle() __attribute__ ((always_inline)) {$/;"	f	class:_ESPPIN	typeref:typename:void
toggle	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastpin_esp8266.h	/^    inline static void toggle() __attribute__ ((always_inline)) { if(PIN < 16) { _GPB._GPO ^= MA/;"	f	class:_ESPPIN	typeref:typename:void
top	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^ScoreCard top[HIGHSCORE_ITEMS] = { $/;"	v	typeref:typename:ScoreCard[]
top	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t top    : 1;     \/**< Top anchor enable\/disable switch *\/$/;"	m	struct:fabgl::uiAnchors	typeref:typename:uint8_t:1
totAllocated	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int LightMemoryPool::totAllocated()$/;"	f	class:fabgl::LightMemoryPool	typeref:typename:int
totFree	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^int LightMemoryPool::totFree()$/;"	f	class:fabgl::LightMemoryPool	typeref:typename:int
tracks	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^    uint16_t tracks;$/;"	m	struct:Machine::autoDetectDriveGeometry::__anonbb37e5ab0108	typeref:typename:uint16_t	file:
tracksCount	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  int tracksCount()          { return m_tracksCount; }$/;"	f	class:Mits88Disk	typeref:typename:int
traits	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatParts.hpp	/^    typedef FloatTraits<TFloat> traits;$/;"	t	function:FloatParts::normalize	typeref:typename:FloatTraits<TFloat>
traits	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp	/^  using traits = FloatTraits<TFloat>;$/;"	t	function:make_float	typeref:typename:FloatTraits<TFloat>
traits	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Numbers/parseNumber.hpp	/^  typedef FloatTraits<JsonFloat> traits;$/;"	t	function:parseNumber	typeref:typename:FloatTraits<JsonFloat>
transformRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^Rect uiWindow::transformRect(Rect const & rect, uiWindow * baseWindow)$/;"	f	class:fabgl::uiWindow	typeref:typename:Rect
translate	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Rect translate(Point const & offset) const     { return Rect(X1 + offset.X, Y1 + offset.Y, X2 /;"	f	struct:fabgl::Rect	typeref:typename:Rect
translate	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Rect translate(int offsetX, int offsetY) const { return Rect(X1 + offsetX, Y1 + offsetY, X2 + /;"	f	struct:fabgl::Rect	typeref:typename:Rect
transpColor	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^  transpColor = pix[transpColorPos[0], transpColorPos[1]]$/;"	v
transpColor	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^transpColor = None$/;"	v
transpColorPos	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^    transpColorPos = (int(sys.argv[i + 1]), int(sys.argv[i + 2]))$/;"	v
transpColorPos	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^transpColorPos = None$/;"	v
transpose32	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static void transpose32(uint8_t * pixels, uint8_t * bits)$/;"	f	class:ClocklessController	typeref:typename:void
transpose8	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^__attribute__((always_inline)) inline void transpose8(unsigned char *A, unsigned char *B) {$/;"	f	typeref:typename:void
transpose8rS32	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_i2s_esp32.h	/^    static void transpose8rS32(uint8_t * A, int m, int n, uint8_t * B)$/;"	f	class:ClocklessController	typeref:typename:void
transpose8x1	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {$/;"	f	typeref:typename:void
transpose8x1_MSB	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^__attribute__((always_inline)) inline void transpose8x1_MSB(unsigned char *A, unsigned char *B) /;"	f	typeref:typename:void
transpose8x1_noinline	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.cpp	/^void transpose8x1_noinline(unsigned char *A, unsigned char *B) {$/;"	f	typeref:typename:void
trigKeyboardInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^bool i8042::trigKeyboardInterrupt()$/;"	f	class:fabgl::i8042	typeref:typename:bool
trigMouseInterrupt	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^bool i8042::trigMouseInterrupt()$/;"	f	class:fabgl::i8042	typeref:typename:bool
trigReset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  void trigReset()                     { m_reset = true; }$/;"	f	class:Machine	typeref:typename:void
trigger	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiButton::trigger()$/;"	f	class:fabgl::uiButton	typeref:typename:void
trigger	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCheckBox::trigger()$/;"	f	class:fabgl::uiCheckBox	typeref:typename:void
trigger	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    void trigger() { mPrevTrigger = getTime() - mPeriod; };$/;"	f	class:CEveryNTime	typeref:typename:void
trigger	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^    void trigger() { mPrevTrigger = getTime() - mPeriod; };$/;"	f	class:CEveryNTimePeriods	typeref:typename:void
trigger	examples/test/lib/JFixLib/src/Event/JEnv.cpp	/^void JEnv::trigger(float *ptr, unsigned short a, unsigned short s,$/;"	f	class:JEnv	typeref:typename:void
trigger	examples/test/lib/JFixLib/src/Event/JEnv.cpp	/^void JEnv::trigger(unsigned short a, unsigned short s, unsigned short r,$/;"	f	class:JEnv	typeref:typename:void
triggerBrightnessEnv	examples/test/lib/JFixLib/src/Event/Event.cpp	/^void Event::triggerBrightnessEnv(unsigned short a, unsigned short s,$/;"	f	class:Event	typeref:typename:void
triwave8	examples/test/.pio/libdeps/esp32dev/FastLED/src/lib8tion.h	/^LIB8STATIC uint8_t triwave8(uint8_t in)$/;"	f	typeref:typename:LIB8STATIC uint8_t
true_type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/integral_constant.hpp	/^typedef integral_constant<bool, true> true_type;$/;"	t	typeref:typename:integral_constant<bool,true>
truncate	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^bool FileBrowser::truncate(char const * name, size_t size)$/;"	f	class:fabgl::FileBrowser	typeref:typename:bool
tryAcquire	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/arbiter_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static bool            tryAcquire(FASTLED_NRF52_PWM_INTERRUPT/;"	f	class:PWM_Arbiter	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE bool
tryAcquireSequenceBuffer	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/clockless_arm_nrf52.h	/^    FASTLED_NRF52_INLINE_ATTRIBUTE static bool tryAcquireSequenceBuffer() {$/;"	f	class:ClocklessController	typeref:typename:FASTLED_NRF52_INLINE_ATTRIBUTE bool
tswap	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^void tswap(T & v1, T & v2)$/;"	f	namespace:fabgl	typeref:typename:void
turbopascal3_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/turbopascal3_dsk.h	/^const uint8_t turbopascal3_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
turbopascal3_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/turbopascal3_dsk.h	/^unsigned int turbopascal3_dsk_len = 337568;$/;"	v	typeref:typename:unsigned int
twrap	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^const T & twrap(const T & v, const T & lo, const T & hi)$/;"	f	namespace:fabgl	typeref:typename:const T &
tx_start	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_rmt_esp32.cpp	/^void IRAM_ATTR ESP32RMTController::tx_start()$/;"	f	class:ESP32RMTController	typeref:typename:void IRAM_ATTR
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^    "type": "git",$/;"	s	object:repository
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp	/^  typedef void type;$/;"	t	struct:void_	typeref:typename:void
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/deserialize.hpp	/^  using type = T;$/;"	t	struct:first_or_void	typeref:typename:T
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/deserialize.hpp	/^  using type = void;$/;"	t	struct:first_or_void	typeref:typename:void
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/integer.hpp	/^  typedef int16_t type;$/;"	t	struct:int_t	typeref:typename:int16_t
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/integer.hpp	/^  typedef int32_t type;$/;"	t	struct:int_t	typeref:typename:int32_t
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/integer.hpp	/^  typedef int8_t type;$/;"	t	struct:int_t	typeref:typename:int8_t
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/conditional.hpp	/^  typedef FalseType type;$/;"	t	struct:conditional	typeref:typename:FalseType
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/conditional.hpp	/^  typedef TrueType type;$/;"	t	struct:conditional	typeref:typename:TrueType
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/enable_if.hpp	/^  typedef T type;$/;"	t	struct:enable_if	typeref:typename:T
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_void.hpp	/^  typedef void type;$/;"	t	struct:make_void	typeref:typename:void
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_const.hpp	/^  typedef T type;$/;"	t	struct:remove_const	typeref:typename:T
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_cv.hpp	/^  typedef T type;$/;"	t	struct:remove_cv	typeref:typename:T
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_reference.hpp	/^  typedef T type;$/;"	t	struct:remove_reference	typeref:typename:T
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/type_identity.hpp	/^  typedef T type;$/;"	t	struct:type_identity	typeref:typename:T
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantAttorney.hpp	/^                                 const VariantData*, VariantData*>::type type;$/;"	t	struct:VariantAttorney::ResultOfGetData
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp	/^  uint8_t type() const {$/;"	f	class:VariantData	typeref:typename:uint8_t
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantTo.hpp	/^  typedef JsonArray type;$/;"	t	struct:VariantTo	typeref:typename:JsonArray
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantTo.hpp	/^  typedef JsonObject type;$/;"	t	struct:VariantTo	typeref:typename:JsonObject
type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantTo.hpp	/^  typedef JsonVariant type;$/;"	t	struct:VariantTo	typeref:typename:JsonVariant
type	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.h	/^  void type(char const * str) { m_typingString = str; }   \/\/ TODO: multiple type() calls not p/;"	f	class:Machine	typeref:typename:void
type	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^    "type": "git",$/;"	s	object:repository
type	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^    uint32_t type : 4;$/;"	m	struct:__anonb43f0d850108	typeref:typename:uint32_t:4	file:
type	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^        "type": "git",$/;"	s	object:repository
typeSortKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/FlashString.hpp	/^  static const size_t typeSortKey = 1;$/;"	m	class:FlashString	typeref:typename:const size_t
typeSortKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  static const size_t typeSortKey = 2;$/;"	m	class:SizedRamString	typeref:typename:const size_t
typeSortKey	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Strings/Adapters/RamString.hpp	/^  static const size_t typeSortKey = 3;$/;"	m	class:ZeroTerminatedRamString	typeref:typename:const size_t
typeText	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::typeText(char const * text)$/;"	f	class:fabgl::LineEditor	typeref:typename:void
type_identity	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/type_identity.hpp	/^struct type_identity {$/;"	s
types	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  static TermType * types() {$/;"	f	struct:fabgl::SupportedTerminals	typeref:typename:TermType *
uartFlushRXFIFO	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPort::uartFlushRXFIFO()$/;"	f	class:fabgl::SerialPort	typeref:typename:void
uartFlushTXFIFO	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void SerialPort::uartFlushTXFIFO()$/;"	f	class:fabgl::SerialPort	typeref:typename:void
uartGetRXFIFOCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^int SerialPort::uartGetRXFIFOCount()$/;"	f	class:fabgl::SerialPort	typeref:typename:int
uartPortComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  uiComboBox *      uartPortComboBox;$/;"	m	struct:ConfDialogApp	typeref:typename:uiComboBox *
uart_isr	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/serialport.cpp	/^void IRAM_ATTR SerialPort::uart_isr(void * arg)$/;"	f	class:fabgl::SerialPort	typeref:typename:void IRAM_ATTR
uiAnchors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiAnchors() : left(true), top(true), right(false), bottom(false) { }$/;"	f	struct:fabgl::uiAnchors
uiAnchors	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiAnchors {$/;"	s	namespace:fabgl
uiApp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiApp::uiApp()$/;"	f	class:fabgl::uiApp
uiApp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiApp               : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiApp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiApp : public uiEvtHandler {$/;"	c	namespace:fabgl
uiAppProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiAppProps {$/;"	s	namespace:fabgl
uiButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiButton::uiButton(uiWindow * parent, char const * text, const Point & pos, const Size & size, u/;"	f	class:fabgl::uiButton
uiButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiButton            : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiButton : public uiControl {$/;"	c	namespace:fabgl
uiButtonKind	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^enum class uiButtonKind {$/;"	g	namespace:fabgl
uiButtonStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiButtonStyle {$/;"	s	namespace:fabgl
uiCheckBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiCheckBox::uiCheckBox(uiWindow * parent, const Point & pos, const Size & size, uiCheckBoxKind k/;"	f	class:fabgl::uiCheckBox
uiCheckBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiCheckBox          : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiCheckBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiCheckBox : public uiControl {$/;"	c	namespace:fabgl
uiCheckBoxKind	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^enum class uiCheckBoxKind : int8_t {$/;"	g	namespace:fabgl	typeref:typename:int8_t
uiCheckBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiCheckBoxStyle {$/;"	s	namespace:fabgl
uiColorBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiColorBox::uiColorBox(uiWindow * parent, const Point & pos, const Size & size, Color color, boo/;"	f	class:fabgl::uiColorBox
uiColorBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiColorBox          : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiColorBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiColorBox : public uiControl {$/;"	c	namespace:fabgl
uiColorComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiColorComboBox::uiColorComboBox(uiWindow * parent, const Point & pos, const Size & size, int li/;"	f	class:fabgl::uiColorComboBox
uiColorComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiColorComboBox     : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiColorComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiColorComboBox : public uiCustomComboBox$/;"	c	namespace:fabgl
uiColorListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiColorListBox::uiColorListBox(uiWindow * parent, const Point & pos, const Size & size, bool vis/;"	f	class:fabgl::uiColorListBox
uiColorListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiColorListBox      : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiColorListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiColorListBox : public uiCustomListBox {$/;"	c	namespace:fabgl
uiComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiComboBox::uiComboBox(uiWindow * parent, const Point & pos, const Size & size, int listHeight, /;"	f	class:fabgl::uiComboBox
uiComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiComboBox          : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiComboBox : public uiCustomComboBox$/;"	c	namespace:fabgl
uiComboBoxProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiComboBoxProps()$/;"	f	struct:fabgl::uiComboBoxProps
uiComboBoxProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiComboBoxProps {$/;"	s	namespace:fabgl
uiComboBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiComboBoxStyle {$/;"	s	namespace:fabgl
uiControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiControl::uiControl(uiWindow * parent, const Point & pos, const Size & size, bool visible, uint/;"	f	class:fabgl::uiControl
uiControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiControl           : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiControl : public uiWindow {$/;"	c	namespace:fabgl
uiCustomComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiCustomComboBox::uiCustomComboBox(uiWindow * parent, const Point & pos, const Size & size, int /;"	f	class:fabgl::uiCustomComboBox
uiCustomComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiCustomComboBox    : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiCustomComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiCustomComboBox : public uiControl$/;"	c	namespace:fabgl
uiCustomListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiCustomListBox::uiCustomListBox(uiWindow * parent, const Point & pos, const Size & size, bool v/;"	f	class:fabgl::uiCustomListBox
uiCustomListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiCustomListBox     : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiCustomListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiCustomListBox : public uiScrollableControl {$/;"	c	namespace:fabgl
uiEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiEvent() : dest(nullptr), id(UIEVT_NULL) { }$/;"	f	struct:fabgl::uiEvent
uiEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiEvent(uiEvent const & e) { dest = e.dest; id = e.id; params = e.params; }$/;"	f	struct:fabgl::uiEvent
uiEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiEvent(uiEvtHandler * dest_, uiEventID id_) : dest(dest_), id(id_) { }$/;"	f	struct:fabgl::uiEvent
uiEvent	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiEvent {$/;"	s	namespace:fabgl
uiEventID	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^enum uiEventID {$/;"	g	namespace:fabgl
uiEventParams	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^    uiEventParams() { }$/;"	f	union:fabgl::uiEvent::uiEventParams
uiEventParams	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  union uiEventParams {$/;"	u	struct:fabgl::uiEvent
uiEvtHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiEvtHandler::uiEvtHandler(uiApp * app)$/;"	f	class:fabgl::uiEvtHandler
uiEvtHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiEvtHandler        : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiEvtHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiEvtHandler : public uiObject {$/;"	c	namespace:fabgl
uiFileBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiFileBrowser::uiFileBrowser(uiWindow * parent, const Point & pos, const Size & size, bool visib/;"	f	class:fabgl::uiFileBrowser
uiFileBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiFileBrowser       : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiFileBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiFileBrowser : public uiCustomListBox {$/;"	c	namespace:fabgl
uiFocusInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiFocusInfo {$/;"	s	namespace:fabgl
uiFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiFrame::uiFrame(uiWindow * parent, char const * title, const Point & pos, const Size & size, bo/;"	f	class:fabgl::uiFrame
uiFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiFrame             : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiFrame : public uiWindow {$/;"	c	namespace:fabgl
uiFrameItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^enum class uiFrameItem : uint8_t {$/;"	g	namespace:fabgl	typeref:typename:uint8_t
uiFrameProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiFrameProps() :$/;"	f	struct:fabgl::uiFrameProps
uiFrameProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiFrameProps {$/;"	s	namespace:fabgl
uiFrameState	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiFrameState {$/;"	s	namespace:fabgl
uiFrameStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiFrameStyle {$/;"	s	namespace:fabgl
uiHAlign	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^enum class uiHAlign {$/;"	g	namespace:fabgl
uiImage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiImage::uiImage(uiWindow * parent, Bitmap const * bitmap, const Point & pos, const Size & size,/;"	f	class:fabgl::uiImage
uiImage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiImage             : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiImage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiImage : public uiControl {$/;"	c	namespace:fabgl
uiImageStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiImageStyle {$/;"	s	namespace:fabgl
uiKeyEventInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiKeyEventInfo {$/;"	s	namespace:fabgl
uiLabel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiLabel::uiLabel(uiWindow * parent, char const * text, const Point & pos, const Size & size, boo/;"	f	class:fabgl::uiLabel
uiLabel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiLabel             : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiLabel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiLabel : public uiControl {$/;"	c	namespace:fabgl
uiLabelStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiLabelStyle {$/;"	s	namespace:fabgl
uiListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiListBox::uiListBox(uiWindow * parent, const Point & pos, const Size & size, bool visible, uint/;"	f	class:fabgl::uiListBox
uiListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiListBox           : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiListBox : public uiCustomListBox {$/;"	c	namespace:fabgl
uiListBoxProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiListBoxProps()$/;"	f	struct:fabgl::uiListBoxProps
uiListBoxProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiListBoxProps {$/;"	s	namespace:fabgl
uiListBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiListBoxStyle {$/;"	s	namespace:fabgl
uiMessageBoxIcon	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^enum class uiMessageBoxIcon {$/;"	g	namespace:fabgl
uiMessageBoxResult	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^enum class uiMessageBoxResult {$/;"	g	namespace:fabgl
uiMouseEventInfo	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiMouseEventInfo {$/;"	s	namespace:fabgl
uiObject	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiObject::uiObject()$/;"	f	class:fabgl::uiObject
uiObject	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiObject {$/;"	c	namespace:fabgl
uiObjectType	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiObjectType() : uiApp(0), uiEvtHandler(0), uiWindow(0), uiFrame(0), uiControl(0), uiScrollabl/;"	f	struct:fabgl::uiObjectType
uiObjectType	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiObjectType {$/;"	s	namespace:fabgl
uiOrientation	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^enum class uiOrientation {$/;"	g	namespace:fabgl
uiOrigin	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^enum class uiOrigin {$/;"	g	namespace:fabgl
uiPaintBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiPaintBox::uiPaintBox(uiWindow * parent, const Point & pos, const Size & size, bool visible, ui/;"	f	class:fabgl::uiPaintBox
uiPaintBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiPaintBox          : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiPaintBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiPaintBox : public uiScrollableControl {$/;"	c	namespace:fabgl
uiPaintBoxStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiPaintBoxStyle {$/;"	s	namespace:fabgl
uiPanel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiPanel::uiPanel(uiWindow * parent, const Point & pos, const Size & size, bool visible, uint32_t/;"	f	class:fabgl::uiPanel
uiPanel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiPanel             : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiPanel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiPanel : public uiControl {$/;"	c	namespace:fabgl
uiPanelStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiPanelStyle {$/;"	s	namespace:fabgl
uiProgressBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiProgressBar::uiProgressBar(uiWindow * parent, const Point & pos, const Size & size, bool visib/;"	f	class:fabgl::uiProgressBar
uiProgressBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiProgressBar       : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiProgressBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiProgressBar : public uiControl {$/;"	c	namespace:fabgl
uiProgressBarProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiProgressBarProps()$/;"	f	struct:fabgl::uiProgressBarProps
uiProgressBarProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiProgressBarProps {$/;"	s	namespace:fabgl
uiProgressBarStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiProgressBarStyle {$/;"	s	namespace:fabgl
uiScrollBarItem	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^enum class uiScrollBarItem {$/;"	g	namespace:fabgl
uiScrollableControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiScrollableControl::uiScrollableControl(uiWindow * parent, const Point & pos, const Size & size/;"	f	class:fabgl::uiScrollableControl
uiScrollableControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiScrollableControl : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiScrollableControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiScrollableControl : public uiControl {$/;"	c	namespace:fabgl
uiScrollableControlStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiScrollableControlStyle {$/;"	s	namespace:fabgl
uiSimpleMenu	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiSimpleMenu::uiSimpleMenu(uiWindow * parent, const Point & pos, const Size & size, bool visible/;"	f	class:fabgl::uiSimpleMenu
uiSimpleMenu	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiSimpleMenu        : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiSimpleMenu	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiSimpleMenu : public uiCustomListBox {$/;"	c	namespace:fabgl
uiSlider	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiSlider::uiSlider(uiWindow * parent, const Point & pos, const Size & size, uiOrientation orient/;"	f	class:fabgl::uiSlider
uiSlider	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiSlider            : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiSlider	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiSlider : public uiControl {$/;"	c	namespace:fabgl
uiSliderStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiSliderStyle {$/;"	s	namespace:fabgl
uiSplitButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiSplitButton::uiSplitButton(uiWindow * parent, char const * text, const Point & pos, const Size/;"	f	class:fabgl::uiSplitButton
uiSplitButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiSplitButton       : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiSplitButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiSplitButton : public uiCustomComboBox$/;"	c	namespace:fabgl
uiStaticLabel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiStaticLabel::uiStaticLabel(uiWindow * parent, char const * text, const Point & pos, bool visib/;"	f	class:fabgl::uiStaticLabel
uiStaticLabel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiStaticLabel       : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiStaticLabel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiStaticLabel : public uiControl {$/;"	c	namespace:fabgl
uiStaticLabelStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiStaticLabelStyle {$/;"	s	namespace:fabgl
uiStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiStyle {$/;"	s	namespace:fabgl
uiTextEdit	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiTextEdit::uiTextEdit(uiWindow * parent, char const * text, const Point & pos, const Size & siz/;"	f	class:fabgl::uiTextEdit
uiTextEdit	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiTextEdit          : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiTextEdit	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiTextEdit : public uiControl {$/;"	c	namespace:fabgl
uiTextEditProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiTextEditProps()$/;"	f	struct:fabgl::uiTextEditProps
uiTextEditProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiTextEditProps {$/;"	s	namespace:fabgl
uiTextEditStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiTextEditStyle {$/;"	s	namespace:fabgl
uiTimerAssoc	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^typedef pair<uiEvtHandler *, TimerHandle_t> uiTimerAssoc;$/;"	t	namespace:fabgl	typeref:typename:pair<uiEvtHandler *,TimerHandle_t>
uiTimerHandle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^typedef void * uiTimerHandle;$/;"	t	namespace:fabgl	typeref:typename:void *
uiWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiWindow::uiWindow(uiWindow * parent, const Point & pos, const Size & size, bool visible, uint32/;"	f	class:fabgl::uiWindow
uiWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint32_t uiWindow            : 1;$/;"	m	struct:fabgl::uiObjectType	typeref:typename:uint32_t:1
uiWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^class uiWindow : public uiEvtHandler {$/;"	c	namespace:fabgl
uiWindowProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindowProps() :$/;"	f	struct:fabgl::uiWindowProps
uiWindowProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiWindowProps {$/;"	s	namespace:fabgl
uiWindowState	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiWindowState {$/;"	s	namespace:fabgl
uiWindowStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^struct uiWindowStyle {$/;"	s	namespace:fabgl
ulp_process_macros_and_load_ex	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^esp_err_t ulp_process_macros_and_load_ex(uint32_t load_addr, const ulp_insn_t* program, size_t* /;"	f	typeref:typename:esp_err_t
unCheckGroup	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiCheckBox::unCheckGroup()$/;"	f	class:fabgl::uiCheckBox	typeref:typename:void
unRead	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  void unRead(uint8_t c) { localInsert(c); }$/;"	f	class:fabgl::Terminal	typeref:typename:void
underline	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint16_t underline        : 1;  \/**< If enabled the glyph is underlined. To implement chara/;"	m	struct:fabgl::GlyphOptions::__anon3dd53dc60108	typeref:typename:uint16_t:1
unescapeChar	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/EscapeSequence.hpp	/^  static char unescapeChar(char c) {$/;"	f	class:EscapeSequence	typeref:typename:char
unlock	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^void PS2Controller::unlock(int PS2Port)$/;"	f	class:fabgl::PS2Controller	typeref:typename:void
unlock	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^void PS2Device::unlock()$/;"	f	class:fabgl::PS2Device	typeref:typename:void
unmountSDCard	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void FileBrowser::unmountSDCard()$/;"	f	class:fabgl::FileBrowser	typeref:typename:void
unmountSPIFFS	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^void FileBrowser::unmountSPIFFS()$/;"	f	class:fabgl::FileBrowser	typeref:typename:void
unsigned_type	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^    typedef typename make_unsigned<T>::type unsigned_type;$/;"	t	function:TextFormatter::writeInteger	typeref:typename:make_unsigned<T>::type
unused	examples/test/.pio/libdeps/esp32dev/FabGL/src/ulp_macro_ex.cpp	/^    uint32_t unused : 1;$/;"	m	struct:__anonb43f0d850108	typeref:typename:uint32_t:1	file:
unused1	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    uint8_t unused1;$/;"	m	struct:fabgl::i8080::__anon81886eed0308	typeref:typename:uint8_t
unused3	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    uint8_t unused3;$/;"	m	struct:fabgl::i8080::__anon81886eed0308	typeref:typename:uint8_t
unused5	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    uint8_t unused5;$/;"	m	struct:fabgl::i8080::__anon81886eed0308	typeref:typename:uint8_t
up	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  VirtualKey up, down, left, right, buttonA, buttonB;$/;"	m	struct:GameControllerKeys	typeref:typename:VirtualKey
up	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  VirtualKey up, down, left, right, buttonA, buttonB;$/;"	m	struct:GameControllerKeys	typeref:typename:VirtualKey
uparrow_9x11	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/cursors.h	/^static const uint8_t uparrow_9x11[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^  void update()$/;"	f	class:BallsTest	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  void update()$/;"	f	class:PolygonsTest	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  void update()$/;"	f	class:SpritesTest	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^  void update()$/;"	f	class:BallsTest	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  void update()$/;"	f	class:PolygonsTest	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  void update()$/;"	f	class:SpritesTest	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual void update()     { };$/;"	f	struct:GameController	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/controllers.h	/^  virtual void update()$/;"	f	struct:GameControllerMouse	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/menu.h	/^  void update( int updateCount )$/;"	f	struct:Menu	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    void update()$/;"	f	struct:Race::Player	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  void update(int updateCount)$/;"	f	struct:Race	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/score.h	/^  void update( int updateCount )$/;"	f	struct:Score	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual void update()     { };$/;"	f	struct:GameController	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/controllers.h	/^  virtual void update()$/;"	f	struct:GameControllerMouse	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^  void update()$/;"	f	class:BallsTest	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  void update()$/;"	f	class:PolygonsTest	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  void update()$/;"	f	class:SpritesTest	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^void CollisionDetector::update(Sprite * sprite)$/;"	f	class:fabgl::CollisionDetector	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^void QuadTree::update(QuadTreeObject * object)$/;"	f	class:fabgl::QuadTree	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiFileBrowser::update()$/;"	f	class:fabgl::uiFileBrowser	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiLabel::update()$/;"	f	class:fabgl::uiLabel	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiStaticLabel::update()$/;"	f	class:fabgl::uiStaticLabel	typeref:typename:void
update	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^bool ProgressForm::update(int percentage, char const * format, ...)$/;"	f	class:fabgl::ProgressForm	typeref:typename:bool
update	examples/test/lib/JFixLib/src/Event/Event.h	/^  virtual void update() { checkLifeTime(); };$/;"	f	class:Event	typeref:typename:void
update	examples/test/lib/JFixLib/src/Event/JEnv.cpp	/^float JEnv::update() {$/;"	f	class:JEnv	typeref:typename:float
update	examples/test/lib/JFixLib/src/Event/JEvent_Perlin.h	/^    void update(){$/;"	f	class:JEvent_Perlin	typeref:typename:void
update	examples/test/lib/JFixLib/src/Event/JOsc.cpp	/^void JOsc::update() {$/;"	f	class:JOsc	typeref:typename:void
update	examples/test/lib/JFixLib/src/Event/JRect.cpp	/^void JRect::update() {$/;"	f	class:JRect	typeref:typename:void
update	examples/test/lib/JFixLib/src/Event/expRandLines.cpp	/^void expRandLines::update(){$/;"	f	class:expRandLines	typeref:typename:void
update	examples/test/lib/JFixLib/src/JFixture.h	/^  virtual void update(){$/;"	f	class:JFixture	typeref:typename:void
update	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  void update() override {$/;"	f	class:JFixtureAddr	typeref:typename:void
update	examples/test/lib/JFixLib/src/JFixtureDimmer.h	/^  virtual void update() override{$/;"	f	class:JFixtureDimmer	typeref:typename:void
update	examples/test/lib/JFixLib/src/JJonisk.h	/^    void update() override{$/;"	f	class:JJonisk	typeref:typename:void
update	examples/test/lib/JFixLib/src/JLag.h	/^    void update(){$/;"	f	class:JLag	typeref:typename:void
update	examples/test/lib/JFixLib/src/JTlFix.h	/^    void update() override{$/;"	f	class:JTlFix	typeref:typename:void
updateAbsoluteClippingRect	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void IRAM_ATTR BitmappedDisplayController::updateAbsoluteClippingRect()$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void IRAM_ATTR
updateAbsolutePosition	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^void Mouse::updateAbsolutePosition(MouseDelta * delta)$/;"	f	class:fabgl::Mouse	typeref:typename:void
updateAndDetectCollision	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^Sprite * CollisionDetector::updateAndDetectCollision(Sprite * sprite, bool removeCollidingSprite/;"	f	class:fabgl::CollisionDetector	typeref:typename:Sprite *
updateAndDetectCollision	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^void CollisionDetector::updateAndDetectCollision(Sprite * sprite, CollisionDetectionCallback cal/;"	f	class:fabgl::CollisionDetector	typeref:typename:void
updateCanvasScrollingRegion	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::updateCanvasScrollingRegion()$/;"	f	class:fabgl::Terminal	typeref:typename:void
updateCaret	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiTextEdit::updateCaret()$/;"	f	class:fabgl::uiTextEdit	typeref:typename:void
updateCommandByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^void i8042::updateCommandByte(uint8_t newValue)$/;"	f	class:fabgl::i8042	typeref:typename:void
updateDate	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.h	/^  DateTime  updateDate;$/;"	m	struct:FileSearchState	typeref:typename:DateTime
updateEditControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiColorComboBox::updateEditControl()$/;"	f	class:fabgl::uiColorComboBox	typeref:typename:void
updateEditControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiComboBox::updateEditControl()$/;"	f	class:fabgl::uiComboBox	typeref:typename:void
updateEditControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^void uiSplitButton::updateEditControl()$/;"	f	class:fabgl::uiSplitButton	typeref:typename:void
updateEnvelopes	examples/test/lib/JFixLib/src/Event/Event.cpp	/^void Event::updateEnvelopes() {$/;"	f	class:Event	typeref:typename:void
updateFrameBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void VGAController::updateFrameBuffer(uint32_t * frameBuffer)$/;"	f	class:fabgl::VGAController	typeref:typename:void
updateHALDateTimeFromSCB	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::updateHALDateTimeFromSCB()$/;"	f	class:BIOS	typeref:typename:void
updateLEDs	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^void Keyboard::updateLEDs()$/;"	f	class:fabgl::Keyboard	typeref:typename:void
updateLaggers	examples/test/lib/JFixLib/src/JFixture.h	/^  void updateLaggers(){$/;"	f	class:JFixture	typeref:typename:void
updateOrientationOffsets	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::updateOrientationOffsets()$/;"	f	class:fabgl::TFTController	typeref:typename:void
updateOrientationOffsets	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerSpecif.cpp	/^void TTGOTDisplayV11Controller::updateOrientationOffsets()$/;"	f	class:fabgl::TTGOTDisplayV11Controller	typeref:typename:void
updateRGB2PaletteLUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^void CVBSPalettedController::updateRGB2PaletteLUT()$/;"	f	class:fabgl::CVBSPalettedController	typeref:typename:void
updateRGB2PaletteLUT	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^void VGAPalettedController::updateRGB2PaletteLUT()$/;"	f	class:fabgl::VGAPalettedController	typeref:typename:void
updateSCBFromHALDateTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^void BIOS::updateSCBFromHALDateTime()$/;"	f	class:BIOS	typeref:typename:void
updateSprite	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.h	/^  void updateSprite(Sprite * sprite) { m_collisionDetector.update(sprite); }$/;"	f	class:fabgl::Scene	typeref:typename:void
updateSpriteAndDetectCollisions	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.cpp	/^void Scene::updateSpriteAndDetectCollisions(Sprite * sprite)$/;"	f	class:fabgl::Scene	typeref:typename:void
updateTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.cpp	/^void Scene::updateTask(void * pvParameters)$/;"	f	class:fabgl::Scene	typeref:typename:void
updateTaskFunc	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^void SSD1306Controller::updateTaskFunc(void * pvParameters)$/;"	f	class:fabgl::SSD1306Controller	typeref:typename:void
updateTaskFunc	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::updateTaskFunc(void * pvParameters)$/;"	f	class:fabgl::TFTController	typeref:typename:void
updateTime	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^void MC146818::updateTime()$/;"	f	class:fabgl::MC146818	typeref:typename:void
update_ctar0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static inline void update_ctar0(uint32_t ctar) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
update_ctar0	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static inline void update_ctar0(uint32_t ctar) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
update_ctar1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static inline void update_ctar1(uint32_t ctar) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
update_ctar1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static inline void update_ctar1(uint32_t ctar) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
update_ctars	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) /;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
update_ctars	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) /;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
upload_port	examples/test/platformio.ini	/^upload_port = "\/dev\/ttyUSB1"$/;"	k	section:env:esp32dev
upstream_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp	/^  TUpstream upstream_;$/;"	m	class:ElementProxy	typeref:typename:TUpstream
upstream_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp	/^  TUpstream upstream_;$/;"	m	class:MemberProxy	typeref:typename:TUpstream
url	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^    "url": "https:\/\/blog.benoitblanchon.fr"$/;"	s	object:authors
url	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^    "url": "https:\/\/github.com\/bblanchon\/ArduinoJson.git"$/;"	s	object:repository
url	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.properties	/^url=https:\/\/arduinojson.org\/?utm_source=meta&utm_medium=library.properties$/;"	k
url	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^      "url": "https:\/\/github.com\/fdivitto",$/;"	s	object:authors.0
url	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^    "url": "https:\/\/github.com\/fdivitto\/FabGL.git"$/;"	s	object:repository
url	examples/test/.pio/libdeps/esp32dev/FabGL/library.properties	/^url=https:\/\/github.com\/fdivitto\/fabgl$/;"	k
url	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "url": "https:\/\/github.com\/focalintent",$/;"	s	object:authors.0
url	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "url": "https:\/\/github.com\/jasoncoon",$/;"	s	object:authors.3
url	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "url": "https:\/\/github.com\/kriegsman",$/;"	s	object:authors.1
url	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "url": "https:\/\/github.com\/samguyer",$/;"	s	object:authors.2
url	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^            "url": "https:\/\/github.com\/uberjay",$/;"	s	object:authors.4
url	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^        "url": "https:\/\/github.com\/FastLED\/FastLED.git"$/;"	s	object:repository
url	examples/test/.pio/libdeps/esp32dev/FastLED/library.properties	/^url=https:\/\/github.com\/FastLED\/FastLED$/;"	k
url	examples/test/lib/JFixLib/src/JOtaServer.h	/^  char* url; \/\/ Set from MSG$/;"	m	class:JOtaServer	typeref:typename:char *
useAlternateScreenBuffer	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::useAlternateScreenBuffer(bool value)$/;"	f	class:fabgl::Terminal	typeref:typename:void
userOpt1	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint16_t userOpt1         : 1;  \/**< User defined option *\/$/;"	m	struct:fabgl::GlyphOptions::__anon3dd53dc60108	typeref:typename:uint16_t:1
userOpt2	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint16_t userOpt2         : 1;  \/**< User defined option *\/$/;"	m	struct:fabgl::GlyphOptions::__anon3dd53dc60108	typeref:typename:uint16_t:1
usr_waitfalg_seg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^usr_waitfalg_seg dw  0       ; 40:9a$/;"	d
usr_waitflag_off	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^usr_waitflag_off dw  0       ; 40:98$/;"	d
v	examples/test/.pio/libdeps/esp32dev/FabGL/tools/img2bitmap/img2bitmap.py	/^      v  = math.ceil(pix[x, y][0] * 3 \/ 255)        # R$/;"	v
v	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t v;    \/\/\/< @copydoc value$/;"	m	union:CHSV::__anonbcc8608a010a::__anonbcc8608a0208::__anonbcc8608a050a	typeref:typename:uint8_t
v6.0.0-beta (2018-06-07)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.0.0-beta (2018-06-07)$/;"	s	chapter:ArduinoJson: change log
v6.0.1-beta (2018-06-11)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.0.1-beta (2018-06-11)$/;"	s	chapter:ArduinoJson: change log
v6.1.0-beta (2018-07-02)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.1.0-beta (2018-07-02)$/;"	s	chapter:ArduinoJson: change log
v6.10.0 (2019-03-22)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.10.0 (2019-03-22)$/;"	s	chapter:ArduinoJson: change log
v6.10.1 (2019-04-23)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.10.1 (2019-04-23)$/;"	s	chapter:ArduinoJson: change log
v6.11.0 (2019-05-26)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.11.0 (2019-05-26)$/;"	s	chapter:ArduinoJson: change log
v6.11.1 (2019-06-21)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.11.1 (2019-06-21)$/;"	s	chapter:ArduinoJson: change log
v6.11.2 (2019-07-08)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.11.2 (2019-07-08)$/;"	s	chapter:ArduinoJson: change log
v6.11.3 (2019-07-22)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.11.3 (2019-07-22)$/;"	s	chapter:ArduinoJson: change log
v6.11.4 (2019-08-12)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.11.4 (2019-08-12)$/;"	s	chapter:ArduinoJson: change log
v6.11.5 (2019-08-23)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.11.5 (2019-08-23)$/;"	s	chapter:ArduinoJson: change log
v6.12.0 (2019-09-05)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.12.0 (2019-09-05)$/;"	s	chapter:ArduinoJson: change log
v6.13.0 (2019-11-01)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.13.0 (2019-11-01)$/;"	s	chapter:ArduinoJson: change log
v6.14.0 (2020-01-16)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.14.0 (2020-01-16)$/;"	s	chapter:ArduinoJson: change log
v6.14.1 (2020-01-27)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.14.1 (2020-01-27)$/;"	s	chapter:ArduinoJson: change log
v6.15.0 (2020-03-22)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.15.0 (2020-03-22)$/;"	s	chapter:ArduinoJson: change log
v6.15.1 (2020-04-08)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.15.1 (2020-04-08)$/;"	s	chapter:ArduinoJson: change log
v6.15.2 (2020-05-15)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.15.2 (2020-05-15)$/;"	s	chapter:ArduinoJson: change log
v6.16.0 (2020-08-01)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.16.0 (2020-08-01)$/;"	s	chapter:ArduinoJson: change log
v6.16.1 (2020-08-04)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.16.1 (2020-08-04)$/;"	s	chapter:ArduinoJson: change log
v6.17.0 (2020-10-19)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.17.0 (2020-10-19)$/;"	s	chapter:ArduinoJson: change log
v6.17.1 (2020-11-07)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.17.1 (2020-11-07)$/;"	s	chapter:ArduinoJson: change log
v6.17.2 (2020-11-14)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.17.2 (2020-11-14)$/;"	s	chapter:ArduinoJson: change log
v6.17.3 (2021-02-15)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.17.3 (2021-02-15)$/;"	s	chapter:ArduinoJson: change log
v6.18.0 (2021-05-05)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.18.0 (2021-05-05)$/;"	s	chapter:ArduinoJson: change log
v6.18.1 (2021-07-03)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.18.1 (2021-07-03)$/;"	s	chapter:ArduinoJson: change log
v6.18.2 (2021-07-19)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.18.2 (2021-07-19)$/;"	s	chapter:ArduinoJson: change log
v6.18.3 (2021-07-27)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.18.3 (2021-07-27)$/;"	s	chapter:ArduinoJson: change log
v6.18.4 (2021-09-06)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.18.4 (2021-09-06)$/;"	s	chapter:ArduinoJson: change log
v6.18.5 (2021-09-28)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.18.5 (2021-09-28)$/;"	s	chapter:ArduinoJson: change log
v6.19.0 (2022-01-08)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.19.0 (2022-01-08)$/;"	s	chapter:ArduinoJson: change log
v6.19.1 (2022-01-14)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.19.1 (2022-01-14)$/;"	s	chapter:ArduinoJson: change log
v6.19.2 (2022-02-14)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.19.2 (2022-02-14)$/;"	s	chapter:ArduinoJson: change log
v6.19.3 (2022-03-08)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.19.3 (2022-03-08)$/;"	s	chapter:ArduinoJson: change log
v6.19.4 (2022-04-05)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.19.4 (2022-04-05)$/;"	s	chapter:ArduinoJson: change log
v6.2.0-beta (2018-07-12)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.2.0-beta (2018-07-12)$/;"	s	chapter:ArduinoJson: change log
v6.2.1-beta (2018-07-17)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.2.1-beta (2018-07-17)$/;"	s	chapter:ArduinoJson: change log
v6.2.2-beta (2018-07-18)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.2.2-beta (2018-07-18)$/;"	s	chapter:ArduinoJson: change log
v6.2.3-beta (2018-07-19)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.2.3-beta (2018-07-19)$/;"	s	chapter:ArduinoJson: change log
v6.20.0 (2022-12-26)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.20.0 (2022-12-26)$/;"	s	chapter:ArduinoJson: change log
v6.20.1 (2023-02-08)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.20.1 (2023-02-08)$/;"	s	chapter:ArduinoJson: change log
v6.21.0 (2023-03-14)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.21.0 (2023-03-14)$/;"	s	chapter:ArduinoJson: change log
v6.21.1 (2023-03-27)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.21.1 (2023-03-27)$/;"	s	chapter:ArduinoJson: change log
v6.21.2 (2023-04-12)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.21.2 (2023-04-12)$/;"	s	chapter:ArduinoJson: change log
v6.21.3 (2023-07-23)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.21.3 (2023-07-23)$/;"	s	chapter:ArduinoJson: change log
v6.3.0-beta (2018-08-31)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.3.0-beta (2018-08-31)$/;"	s	chapter:ArduinoJson: change log
v6.4.0-beta (2018-09-11)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.4.0-beta (2018-09-11)$/;"	s	chapter:ArduinoJson: change log
v6.5.0-beta (2018-10-13)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.5.0-beta (2018-10-13)$/;"	s	chapter:ArduinoJson: change log
v6.6.0-beta (2018-11-13)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.6.0-beta (2018-11-13)$/;"	s	chapter:ArduinoJson: change log
v6.7.0-beta (2018-12-07)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.7.0-beta (2018-12-07)$/;"	s	chapter:ArduinoJson: change log
v6.8.0-beta (2019-01-30)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.8.0-beta (2019-01-30)$/;"	s	chapter:ArduinoJson: change log
v6.9.0 (2019-02-26)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.9.0 (2019-02-26)$/;"	s	chapter:ArduinoJson: change log
v6.9.1 (2019-03-01)	examples/test/.pio/libdeps/esp32dev/ArduinoJson/CHANGELOG.md	/^v6.9.1 (2019-03-01)$/;"	s	chapter:ArduinoJson: change log
vShrink	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  Rect vShrink(int value) const                  { return Rect(X1, Y1 + value, X2, Y2 - value); /;"	f	struct:fabgl::Rect	typeref:typename:Rect
val	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t val;  \/\/\/< @copydoc value$/;"	m	union:CHSV::__anonbcc8608a010a::__anonbcc8608a0208::__anonbcc8608a050a	typeref:typename:uint8_t
validpin	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastpin.h	/^	constexpr static bool validpin() { return false; }$/;"	f	class:FastPin	typeref:typename:bool
validpin	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastpin_esp32.h	/^  static constexpr bool validpin() { return VALIDPIN; }$/;"	f	class:_ESPPIN	typeref:typename:bool
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp	/^  static const bool value =$/;"	m	struct:IsCharOrVoid	typeref:typename:const bool
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp	/^  uint32_t value() const {$/;"	f	class:Utf16::Codepoint	typeref:typename:uint32_t
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Memory/Alignment.hpp	/^  static const size_t value = (bytes + mask) & ~mask;$/;"	m	struct:AddPadding	typeref:typename:const size_t
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonPair.hpp	/^  JsonVariant value() const {$/;"	f	class:JsonPair	typeref:typename:JsonVariant
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonPair.hpp	/^  JsonVariantConst value() const {$/;"	f	class:JsonPairConst	typeref:typename:JsonVariantConst
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/mpl/max.hpp	/^  static const size_t value = X;$/;"	m	struct:Max	typeref:typename:const size_t
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/mpl/max.hpp	/^  static const size_t value = Y;$/;"	m	struct:Max	typeref:typename:const size_t
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/integral_constant.hpp	/^  static const T value = v;$/;"	m	struct:integral_constant	typeref:typename:const T
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_base_of.hpp	/^  static const bool value =$/;"	m	class:is_base_of	typeref:typename:const bool
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_class.hpp	/^  static const bool value = sizeof(probe<T>(0)) == sizeof(int);$/;"	m	struct:is_class	typeref:typename:const bool
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_convertible.hpp	/^  static const bool value = sizeof(probe(from_)) == sizeof(int);$/;"	m	struct:is_convertible	typeref:typename:const bool
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_enum.hpp	/^  static const bool value = is_convertible<T, int>::value &&$/;"	m	struct:is_enum	typeref:typename:const bool
value	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  static const bool value =$/;"	m	struct:detail::ConverterNeedsWriteableRef	typeref:typename:const bool
value	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint16_t value;$/;"	m	union:fabgl::GlyphOptions	typeref:typename:uint16_t
value	examples/test/.pio/libdeps/esp32dev/FastLED/src/pixeltypes.h	/^                uint8_t value;$/;"	m	union:CHSV::__anonbcc8608a010a::__anonbcc8608a0208::__anonbcc8608a050a	typeref:typename:uint8_t
value	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    float value = 0;$/;"	m	class:JEnv	typeref:typename:float
value	examples/test/lib/JFixLib/src/JLag.h	/^    float* value;$/;"	m	class:JLag	typeref:typename:float *
value_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/NestingLimit.hpp	/^  uint8_t value_;$/;"	m	class:DeserializationOption::NestingLimit	typeref:typename:uint8_t
value_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonPair.hpp	/^  JsonVariant value_;$/;"	m	class:JsonPair	typeref:typename:JsonVariant
value_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Object/JsonPair.hpp	/^  JsonVariantConst value_;$/;"	m	class:JsonPairConst	typeref:typename:JsonVariantConst
values	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/GraphicalUserInterface/TestPaintBoxFrame.h	/^  int8_t * values = nullptr;$/;"	m	struct:TestPaintBoxFrame	typeref:typename:int8_t *
varName	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    char varName = '0';$/;"	m	class:JEnv	typeref:typename:char
variantAccept	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^inline typename TVisitor::result_type variantAccept(const VariantData* var,$/;"	f	typeref:typename:ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE typename TVisitor::result_type
variantAddElement	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^inline NO_INLINE VariantData* variantAddElement(VariantData* var,$/;"	f	typeref:typename:NO_INLINE VariantData *
variantCopyFrom	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^inline bool variantCopyFrom(VariantData* dst, const VariantData* src,$/;"	f	typeref:typename:bool
variantGetElement	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^inline VariantData* variantGetElement(const VariantData* var, size_t index) {$/;"	f	typeref:typename:VariantData *
variantGetMember	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^VariantData* variantGetMember(const VariantData* var, TAdaptedString key) {$/;"	f	typeref:typename:VariantData *
variantGetOrAddElement	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^inline NO_INLINE VariantData* variantGetOrAddElement(VariantData* var,$/;"	f	typeref:typename:NO_INLINE VariantData *
variantGetOrAddMember	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^VariantData* variantGetOrAddMember(VariantData* var, TAdaptedString key,$/;"	f	typeref:typename:VariantData *
variantIsNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^inline bool variantIsNull(const VariantData* var) {$/;"	f	typeref:typename:bool
variantNesting	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^inline size_t variantNesting(const VariantData* var) {$/;"	f	typeref:typename:size_t
variantSetNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^inline void variantSetNull(VariantData* var) {$/;"	f	typeref:typename:void
variantSetString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^inline bool variantSetString(VariantData* var, TAdaptedString value,$/;"	f	typeref:typename:bool
variantSize	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^inline size_t variantSize(const VariantData* var) {$/;"	f	typeref:typename:size_t
variantToArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^inline CollectionData* variantToArray(VariantData* var) {$/;"	f	typeref:typename:CollectionData *
variantToObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp	/^inline CollectionData* variantToObject(VariantData* var) {$/;"	f	typeref:typename:CollectionData *
variant_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonVariant variant_;$/;"	m	class:VariantPtr	typeref:typename:JsonVariant
variant_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Array/JsonArrayIterator.hpp	/^  JsonVariantConst variant_;$/;"	m	class:VariantConstPtr	typeref:typename:JsonVariantConst
variant_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp	/^  JsonVariantConst variant_;$/;"	m	class:DeserializationOption::Filter	typeref:typename:JsonVariantConst
vel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^    double vel;$/;"	m	struct:BallsTest::Ball	typeref:typename:double
vel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^    double vel;$/;"	m	struct:BallsTest::Ball	typeref:typename:double
vel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^    double vel;$/;"	m	struct:BallsTest::Ball	typeref:typename:double
version	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.json	/^  "version": "6.21.3",$/;"	s
version	examples/test/.pio/libdeps/esp32dev/ArduinoJson/library.properties	/^version=6.21.3$/;"	k
version	examples/test/.pio/libdeps/esp32dev/FabGL/library.json	/^  "version": "1.0.9",$/;"	s
version	examples/test/.pio/libdeps/esp32dev/FabGL/library.properties	/^version=1.0.9$/;"	k
version	examples/test/.pio/libdeps/esp32dev/FastLED/library.json	/^    "version": "3.6.0",$/;"	s
version	examples/test/.pio/libdeps/esp32dev/FastLED/library.properties	/^version=3.6.0$/;"	k
vga_glyphs	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^vga_glyphs:$/;"	l
vid_3x8	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^vid_3x8          db  0x09$/;"	d
vid_3x9	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^vid_3x9          db  0$/;"	d
vid_cols	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^vid_cols         dw  80$/;"	d
vid_mode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^vid_mode         db  0x03$/;"	d
vid_page_offset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^vid_page_offset  dw  0$/;"	d
vid_page_size	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^vid_page_size    dw  0x1000$/;"	d
vid_rom_offset	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^vid_rom_offset   dw  0$/;"	d
vid_rom_segaddr	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^vid_rom_segaddr  dw  0$/;"	d
vid_rows	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^vid_rows         db  24         ; 40:84$/;"	d
vid_static_table	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^vid_static_table:$/;"	l
videoConv_ADM31	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfoVideoConv videoConv_ADM31[] = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfoVideoConv[]
videoConv_ADM3A	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfoVideoConv videoConv_ADM3A[] = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfoVideoConv[]
videoConv_ANSILegacy	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfoVideoConv videoConv_ANSILegacy[] = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfoVideoConv[]
videoConv_Hazeltine1500	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfoVideoConv videoConv_Hazeltine1500[] = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfoVideoConv[]
videoConv_Kaypro	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfoVideoConv videoConv_Kaypro[] = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfoVideoConv[]
videoConv_Osborne	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfoVideoConv videoConv_Osborne[] = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfoVideoConv[]
videoConv_VT52	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.cpp	/^const TermInfoVideoConv videoConv_VT52[] = {$/;"	v	namespace:fabgl	typeref:typename:const TermInfoVideoConv[]
videoCtrlSet	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  TermInfoVideoConv const * videoCtrlSet;$/;"	m	struct:fabgl::TermInfo	typeref:typename:TermInfoVideoConv const *
videoHandlerEntry	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^void BIOS::videoHandlerEntry()$/;"	f	class:BIOS	typeref:typename:void
videoMemory	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.h	/^  uint8_t * videoMemory()              { return s_videoMemory; }$/;"	f	class:Machine	typeref:typename:uint8_t *
video_card	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^video_card       db  0x0c       ; 40:8a    0x0c$/;"	d
video_init_table	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^video_init_table:$/;"	l
vidmode_opt	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^vidmode_opt      db  0x96       ; 40:87    0x70$/;"	d
viewport	examples/test/lib/JFixLib/src/Event/Event.h	/^  float *viewport;$/;"	m	class:Event	typeref:typename:float *
viewport	examples/test/lib/JFixLib/src/JFixture.h	/^  float viewport[2] = {20, 144};$/;"	m	class:JFixture	typeref:typename:float[2]
viewportHeight	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^    int16_t              viewportHeight;$/;"	m	struct:fabgl::GraphicsAdapter::setupEmulation::__anonf67d7a610108	typeref:typename:int16_t	file:
viewportOffset	examples/test/lib/JFixLib/src/Event/Event.h	/^  float *viewportOffset;$/;"	m	class:Event	typeref:typename:float *
viewportOffset	examples/test/lib/JFixLib/src/JFixture.h	/^  float viewportOffset[2] = {0,0}; \/\/ This is a scaling factor$/;"	m	class:JFixture	typeref:typename:float[2]
viewportWidth	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^    int16_t              viewportWidth;$/;"	m	struct:fabgl::GraphicsAdapter::setupEmulation::__anonf67d7a610108	typeref:typename:int16_t	file:
virtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  VirtualKey   virtualKey;      \/**< Virtual key result *\/$/;"	m	struct:fabgl::DeadKeyVirtualKeyDef	typeref:typename:VirtualKey
virtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  VirtualKey   virtualKey;  \/**< Real virtualkey (non shifted) associated to the scancode *\/$/;"	m	struct:fabgl::VirtualKeyDef	typeref:typename:VirtualKey
virtualKey	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/kbdlayouts.h	/^  VirtualKey virtualKey;    \/**< Generated virtualkey. *\/$/;"	m	struct:fabgl::AltVirtualKeyDef	typeref:typename:VirtualKey
virtualKeyAvailable	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^int Keyboard::virtualKeyAvailable()$/;"	f	class:fabgl::Keyboard	typeref:typename:int
virtualKeyToASCII	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.cpp	/^int virtualKeyToASCII(VirtualKeyItem const & item, CodePage const * codepage)$/;"	f	namespace:fabgl	typeref:typename:int
virtualKeyToASCII	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^int Keyboard::virtualKeyToASCII(VirtualKey virtualKey)$/;"	f	class:fabgl::Keyboard	typeref:typename:int
virtualKeyToString	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^char const * Keyboard::virtualKeyToString(VirtualKey virtualKey)$/;"	f	class:fabgl::Keyboard	typeref:typename:char const *
visible	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^    uint8_t visible:  1;$/;"	m	struct:fabgl::Sprite::__anon3dd53dc60208	typeref:typename:uint8_t:1
visible	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uint8_t visible   : 1;  \/**< 0 = hidden,   1 = visible   *\/$/;"	m	struct:fabgl::uiWindowState	typeref:typename:uint8_t:1
visibleLines	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  int visibleLines()                                          { return m_visibleLines; }        /;"	f	class:fabgl::CVBSGenerator	typeref:typename:int
visibleSamples	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  int visibleSamples()                                        { return s_visibleSamplesCount; } /;"	f	class:fabgl::CVBSGenerator	typeref:typename:int
visitArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  FORCE_INLINE size_t visitArray(const CollectionData& array) {$/;"	f	class:JsonSerializer	typeref:typename:FORCE_INLINE size_t
visitArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp	/^  size_t visitArray(const CollectionData& array) {$/;"	f	class:PrettyJsonSerializer	typeref:typename:size_t
visitArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  size_t visitArray(const CollectionData& array) {$/;"	f	class:MsgPackSerializer	typeref:typename:size_t
visitArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitArray(const CollectionData& lhs) {$/;"	f	struct:ArrayComparer	typeref:typename:CompareResult
visitArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitArray(const CollectionData& lhs) {$/;"	f	struct:VariantComparer	typeref:typename:CompareResult
visitArray	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/Visitor.hpp	/^  TResult visitArray(const CollectionData&) {$/;"	f	struct:Visitor	typeref:typename:TResult
visitBoolean	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  size_t visitBoolean(bool value) {$/;"	f	class:JsonSerializer	typeref:typename:size_t
visitBoolean	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  size_t visitBoolean(bool value) {$/;"	f	class:MsgPackSerializer	typeref:typename:size_t
visitBoolean	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitBoolean(bool lhs) {$/;"	f	struct:Comparer	typeref:typename:CompareResult
visitBoolean	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitBoolean(bool lhs) {$/;"	f	struct:VariantComparer	typeref:typename:CompareResult
visitBoolean	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/Visitor.hpp	/^  TResult visitBoolean(bool) {$/;"	f	struct:Visitor	typeref:typename:TResult
visitFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  size_t visitFloat(JsonFloat value) {$/;"	f	class:JsonSerializer	typeref:typename:size_t
visitFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  typename enable_if<sizeof(T) == 4, size_t>::type visitFloat(T value32) {$/;"	f	class:MsgPackSerializer	typeref:typename:enable_if<sizeof (T)==4,size_t>::type
visitFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  typename enable_if<sizeof(T) == 8, size_t>::type visitFloat(T value64) {$/;"	f	class:MsgPackSerializer	typeref:typename:ARDUINOJSON_NO_SANITIZE ("float-cast-overflow")typename enable_if<sizeof (T)==8,size_t>::type
visitFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitFloat(JsonFloat lhs) {$/;"	f	struct:Comparer	typeref:typename:CompareResult
visitFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitFloat(JsonFloat lhs) {$/;"	f	struct:VariantComparer	typeref:typename:CompareResult
visitFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/Visitor.hpp	/^  TResult visitFloat(JsonFloat) {$/;"	f	struct:Visitor	typeref:typename:TResult
visitNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  size_t visitNull() {$/;"	f	class:JsonSerializer	typeref:typename:size_t
visitNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  size_t visitNull() {$/;"	f	class:MsgPackSerializer	typeref:typename:size_t
visitNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitNull() {$/;"	f	struct:Comparer	typeref:typename:CompareResult
visitNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitNull() {$/;"	f	struct:NullComparer	typeref:typename:CompareResult
visitNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitNull() {$/;"	f	struct:VariantComparer	typeref:typename:CompareResult
visitNull	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/Visitor.hpp	/^  TResult visitNull() {$/;"	f	struct:Visitor	typeref:typename:TResult
visitObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  size_t visitObject(const CollectionData& object) {$/;"	f	class:JsonSerializer	typeref:typename:size_t
visitObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp	/^  size_t visitObject(const CollectionData& object) {$/;"	f	class:PrettyJsonSerializer	typeref:typename:size_t
visitObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  size_t visitObject(const CollectionData& object) {$/;"	f	class:MsgPackSerializer	typeref:typename:size_t
visitObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitObject(const CollectionData& lhs) {$/;"	f	struct:ObjectComparer	typeref:typename:CompareResult
visitObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitObject(const CollectionData& lhs) {$/;"	f	struct:VariantComparer	typeref:typename:CompareResult
visitObject	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/Visitor.hpp	/^  TResult visitObject(const CollectionData&) {$/;"	f	struct:Visitor	typeref:typename:TResult
visitRawJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  size_t visitRawJson(const char* data, size_t n) {$/;"	f	class:JsonSerializer	typeref:typename:size_t
visitRawJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  size_t visitRawJson(const char* data, size_t size) {$/;"	f	class:MsgPackSerializer	typeref:typename:size_t
visitRawJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitRawJson(const char* lhsData, size_t lhsSize) {$/;"	f	struct:RawComparer	typeref:typename:CompareResult
visitRawJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitRawJson(const char* lhsData, size_t lhsSize) {$/;"	f	struct:VariantComparer	typeref:typename:CompareResult
visitRawJson	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/Visitor.hpp	/^  TResult visitRawJson(const char*, size_t) {$/;"	f	struct:Visitor	typeref:typename:TResult
visitSignedInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  size_t visitSignedInteger(JsonInteger value) {$/;"	f	class:JsonSerializer	typeref:typename:size_t
visitSignedInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  size_t visitSignedInteger(JsonInteger value) {$/;"	f	class:MsgPackSerializer	typeref:typename:size_t
visitSignedInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitSignedInteger(JsonInteger lhs) {$/;"	f	struct:Comparer	typeref:typename:CompareResult
visitSignedInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitSignedInteger(JsonInteger lhs) {$/;"	f	struct:VariantComparer	typeref:typename:CompareResult
visitSignedInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/Visitor.hpp	/^  TResult visitSignedInteger(JsonInteger) {$/;"	f	struct:Visitor	typeref:typename:TResult
visitString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  size_t visitString(const char* value) {$/;"	f	class:JsonSerializer	typeref:typename:size_t
visitString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  size_t visitString(const char* value, size_t n) {$/;"	f	class:JsonSerializer	typeref:typename:size_t
visitString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  size_t visitString(const char* value) {$/;"	f	class:MsgPackSerializer	typeref:typename:size_t
visitString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  size_t visitString(const char* value, size_t n) {$/;"	f	class:MsgPackSerializer	typeref:typename:size_t
visitString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitString(const char* lhs, size_t n) {$/;"	f	struct:Comparer	typeref:typename:CompareResult
visitString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitString(const char* lhs, size_t) {$/;"	f	struct:VariantComparer	typeref:typename:CompareResult
visitString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/Visitor.hpp	/^  TResult visitString(const char*, size_t) {$/;"	f	struct:Visitor	typeref:typename:TResult
visitUnsignedInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  size_t visitUnsignedInteger(JsonUInt value) {$/;"	f	class:JsonSerializer	typeref:typename:size_t
visitUnsignedInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  size_t visitUnsignedInteger(JsonUInt value) {$/;"	f	class:MsgPackSerializer	typeref:typename:size_t
visitUnsignedInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitUnsignedInteger(JsonUInt lhs) {$/;"	f	struct:Comparer	typeref:typename:CompareResult
visitUnsignedInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/VariantCompare.hpp	/^  CompareResult visitUnsignedInteger(JsonUInt lhs) {$/;"	f	struct:VariantComparer	typeref:typename:CompareResult
visitUnsignedInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/Visitor.hpp	/^  TResult visitUnsignedInteger(JsonUInt) {$/;"	f	struct:Visitor	typeref:typename:TResult
vk	examples/test/.pio/libdeps/esp32dev/FabGL/src/codepages.h	/^  VirtualKey vk;$/;"	m	struct:fabgl::VirtualKeyToASCII	typeref:typename:VirtualKey
vk	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  VirtualKey vk;              \/**< Virtual key *\/$/;"	m	struct:fabgl::VirtualKeyItem	typeref:typename:VirtualKey
vk	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminfo.h	/^  VirtualKey   vk;             \/\/ input virtual key$/;"	m	struct:fabgl::TermInfoKbdConv	typeref:typename:VirtualKey
void_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp	/^struct void_ {$/;"	s
void_t	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStringWriter.hpp	/^using void_t = void;$/;"	t	typeref:typename:void
volume	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^  int volume;$/;"	m	struct:playsounddata	typeref:typename:int
volume	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^  int volume;$/;"	m	struct:playsounddata	typeref:typename:int
volume	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  int volume() { return m_volume; }$/;"	f	class:fabgl::SoundGenerator	typeref:typename:int
volume	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  int volume() { return m_volume; }$/;"	f	class:fabgl::WaveformGenerator	typeref:typename:int
vsyncEdge_us	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  double          vsyncEdge_us;                   \/\/ short and long syncs falling and rising e/;"	m	struct:fabgl::CVBSParams	typeref:typename:double
vsyncPulseCount	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  int8_t          vsyncPulseCount;                \/\/ vertical sync, number of long pulses (mus/;"	m	struct:fabgl::CVBSParams	typeref:typename:int8_t
vt_animation	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/SimpleTerminalOut/vtanimations.h	/^static const unsigned char vt_animation[] = {$/;"	v	typeref:typename:const unsigned char[]
vt_animation	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SimpleTerminalOut/vtanimations.h	/^static const unsigned char vt_animation[] = {$/;"	v	typeref:typename:const unsigned char[]
vt_animation	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SimpleTextTerminalOut/vtanimations.h	/^static const unsigned char vt_animation[] = {$/;"	v	typeref:typename:const unsigned char[]
vtanimations_h	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/SimpleTerminalOut/vtanimations.h	/^#define vtanimations_h$/;"	d
vtanimations_h	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SimpleTerminalOut/vtanimations.h	/^#define vtanimations_h$/;"	d
vtanimations_h	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/SimpleTextTerminalOut/vtanimations.h	/^#define vtanimations_h$/;"	d
w	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    uint16_t w;$/;"	m	union:fabgl::i8080::__anon81886eed010a	typeref:typename:uint16_t
w	examples/test/lib/JFixLib/src/Event/JOsc.h	/^  JWavetable *w;$/;"	m	class:JOsc	typeref:typename:JWavetable *
w	examples/test/lib/JFixLib/src/Event/expRandLines.h	/^    unsigned short w = 320;$/;"	m	class:expRandLines	typeref:typename:unsigned short
w	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  JWavetable *w;$/;"	m	class:JFixtureGraphics	typeref:typename:JWavetable *
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastled_delay.h	/^	void wait() {$/;"	f	class:CMinWait	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	static void wait() __attribute__((always_inline)) { }$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  static void wait() __attribute__((always_inline)) { while(!(SPIX.S & SPI_S_SPTEF));  }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    static void wait() __attribute__((always_inline)){ if(shouldWait()) { while(NRF_SPI0->EVENTS/;"	f	class:NRF51SPIOutput	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        static void wait() {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void wait() __attribute__((always_inline)) { if(shouldWait()) { while(!(SPSR & (1<<SPIF)/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void wait() __attribute__((always_inline)) { if(shouldWait()) { while(!(SPSR0 & (1<<SPIF/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void wait() __attribute__((always_inline)) {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void wait() __attribute__((always_inline)) {$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void wait() __attribute__((always_inline)) {$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	static void wait() __attribute__((always_inline)) { }$/;"	f	class:ESP32SPIOutput	typeref:typename:void
wait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	static void wait() __attribute__((always_inline)) { }$/;"	f	class:ESP8266SPIOutput	typeref:typename:void
wait1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void wait1() __attribute__((always_inline)) { while( (SPIX.SR & 0xF000) >= 0x2000);  }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
wait1	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void wait1() __attribute__((always_inline)) { while( (SPIX.SR & 0xF000) >= 0x2000);  }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
waitButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^void waitButton(void)$/;"	f	typeref:typename:void
waitCompletion	examples/test/.pio/libdeps/esp32dev/FabGL/src/canvas.cpp	/^void Canvas::waitCompletion(bool waitVSync)$/;"	f	class:fabgl::Canvas	typeref:typename:void
waitFor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^bool Terminal::waitFor(int value, int timeOutMS)$/;"	f	class:fabgl::Terminal	typeref:typename:bool
waitFor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::waitFor(int value)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
waitForEmpty	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	static inline void waitForEmpty() { while ((m_SPI->SPI_SR & SPI_SR_TDRE) == 0); }$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
waitForKey	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^#define waitForKey(/;"	d
waitForKeyRelease	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^#define waitForKeyRelease(/;"	d
waitForPrimitives	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^void BitmappedDisplayController::waitForPrimitives()$/;"	f	class:fabgl::BitmappedDisplayController	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	static void waitFully() __attribute__((always_inline)) { wait(); }$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	static void waitFully() { \/* TODO *\/ }$/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	static void waitFully() { \/* TODO *\/ }$/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void waitFully() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void waitFully() __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  void waitFully() { wait(); }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	static void waitFully() { \/* TODO *\/ }$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    static void waitFully() __attribute__((always_inline)){ if(shouldWait()) { while(NRF_SPI0->E/;"	f	class:NRF51SPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        static void waitFully() {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	void waitFully() { while((m_SPI->SPI_SR & SPI_SR_TXEMPTY) == 0); }$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void waitFully() __attribute__((always_inline)) { wait(); }$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void waitFully() __attribute__((always_inline)) { wait(); }$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void waitFully() __attribute__((always_inline)) { wait(); }$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	static void waitFully() __attribute__((always_inline)) { wait(); }$/;"	f	class:ESP32SPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	static void waitFully() __attribute__((always_inline)) { wait(); }$/;"	f	class:ESP8266SPIOutput	typeref:typename:void
waitFully	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	static void waitFully() { \/* TODO *\/ }$/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
waitNoButton	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/support.h	/^void waitNoButton(long timeout = 0)$/;"	f	typeref:typename:void
waitTermination	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^void Supervisor::waitTermination()$/;"	f	class:Supervisor	typeref:typename:void
wait_active_flag	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^wait_active_flag db  0       ; 40:a0$/;"	d
wait_count_hi	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^wait_count_hi    dw  0       ; 40:9e$/;"	d
wait_count_lo	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.asm	/^wait_count_lo    dw  0       ; 40:9c$/;"	d
waitingTask	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^  TaskHandle_t    waitingTask;$/;"	m	struct:fabgl::esp_intr_alloc_args	typeref:typename:TaskHandle_t	file:
warnBitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/bitmaps.h	/^const Bitmap warnBitmap = Bitmap(16, 16, &warnBitmap_data[0], PixelFormat::RGBA2222);$/;"	v	namespace:fabgl	typeref:typename:const Bitmap
warnBitmap_data	examples/test/.pio/libdeps/esp32dev/FabGL/src/images/bitmaps.h	/^const uint8_t warnBitmap_data[] = {$/;"	v	namespace:fabgl	typeref:typename:const uint8_t[]
wave	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^  wavetype wave; \/\/ square, sine, triangle, saw, noise$/;"	m	struct:playsounddata	typeref:typename:wavetype
wave	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^  wavetype wave; \/\/ square, sine, triangle, saw, noise$/;"	m	struct:playsounddata	typeref:typename:wavetype
wavetype	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/soundchip.h	/^enum wavetype { WAVE_SQUARE, WAVE_SINE, WAVE_TRIANGLE, WAVE_SAW, WAVE_NOISE };$/;"	g
wavetype	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DirectVGA_ElMuro/soundchip.h	/^enum wavetype { WAVE_SQUARE, WAVE_SINE, WAVE_TRIANGLE, WAVE_SAW, WAVE_NOISE };$/;"	g
weight	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint16_t weight;$/;"	m	struct:fabgl::FontInfo	typeref:typename:uint16_t
wheelAcceleration	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.h	/^  int & wheelAcceleration()    { return m_wheelAcceleration; }$/;"	f	class:fabgl::Mouse	typeref:typename:int &
wheelDelta	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int8_t       wheelDelta;  \/**< Scroll wheel delta. *\/$/;"	m	struct:fabgl::MouseStatus	typeref:typename:int8_t
wheel_sound_mult	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int wheel_sound_mult = 1;$/;"	m	struct:Race::Player	typeref:typename:int
whiteLevel	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/cvbsgenerator.h	/^  uint8_t         whiteLevel;                     \/\/ DAC level of white$/;"	m	struct:fabgl::CVBSParams	typeref:typename:uint8_t
width	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  int16_t         width;           \/**< Bitmap horizontal size *\/$/;"	m	struct:fabgl::Bitmap	typeref:typename:int16_t
width	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  uint8_t         width;  \/**< Glyph horizontal size *\/$/;"	m	struct:fabgl::Glyph	typeref:typename:uint8_t
width	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int width() const                              { return X2 - X1 + 1; }$/;"	f	struct:fabgl::Rect	typeref:typename:int
width	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  int16_t width;   \/**< Horizontal size *\/$/;"	m	struct:fabgl::Size	typeref:typename:int16_t
width	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  uint8_t  width;   \/\/ used only for fixed width fonts (FONTINFOFLAGS_VARWIDTH = 0)$/;"	m	struct:fabgl::FontInfo	typeref:typename:uint8_t
width	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  int                     width;$/;"	m	struct:fabgl::ProgressForm	typeref:typename:int
wifiConnected	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^bool HAL::wifiConnected()$/;"	f	class:HAL	typeref:typename:bool
wifiErrorMsg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^bool CCP::wifiErrorMsg()$/;"	f	class:CCP	typeref:typename:bool
winAnimation	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  void winAnimation( int player)$/;"	f	struct:Race	typeref:typename:void
window	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindow * window;$/;"	m	struct:fabgl::ModalWindowState	typeref:typename:uiWindow *
windowProps	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindowProps & windowProps() { return m_windowProps; }$/;"	f	class:fabgl::uiWindow	typeref:typename:uiWindowProps &
windowStyle	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.h	/^  uiWindowStyle & windowStyle() { return m_windowStyle; }$/;"	f	class:fabgl::uiWindow	typeref:typename:uiWindowStyle &
winner	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  int winner = 0;$/;"	m	struct:Race	typeref:typename:int
winnerTime	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^  long winnerTime = 0L;$/;"	m	struct:Race	typeref:typename:long
won_data	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/gameimages.h	/^const  uint8_t won_data[] =$/;"	v	typeref:typename:const uint8_t[]
word	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^    unsigned short  word[7];$/;"	m	union:fabgl::Z80_STATE::__anon8d47e636030a	typeref:typename:unsigned short[7]
word	examples/test/.pio/libdeps/esp32dev/FastLED/src/bitswap.h	/^  uint32_t word[2];  \/\/\/< two 32-bit values to load for swapping$/;"	m	union:__anonad8cb3ed040a	typeref:typename:uint32_t[2]
wordstar33_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/wordstar3_dsk.h	/^unsigned int wordstar33_dsk_len = 337568;$/;"	v	typeref:typename:unsigned int
wordstar3_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/wordstar3_dsk.h	/^const uint8_t wordstar3_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
wordstar4_dsk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/wordstar4_dsk.h	/^const uint8_t wordstar4_dsk[] = {$/;"	v	typeref:typename:const uint8_t[]
wordstar4_dsk_len	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/disks/CPM22/wordstar4_dsk.h	/^unsigned int wordstar4_dsk_len = 337568;$/;"	v	typeref:typename:unsigned int
work16	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  uint16_t work16;$/;"	m	class:fabgl::i8080	typeref:typename:uint16_t
work32	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  uint32_t work32;$/;"	m	class:fabgl::i8080	typeref:typename:uint32_t
work8	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^  uint8_t  work8;$/;"	m	class:fabgl::i8080	typeref:typename:uint8_t
wraparound	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.h	/^  bool         wraparound;$/;"	m	struct:fabgl::EmuState	typeref:typename:bool
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  void write(char c) {$/;"	f	class:JsonSerializer	typeref:typename:void
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp	/^  void write(const char* s) {$/;"	f	class:JsonSerializer	typeref:typename:void
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/CountingDecorator.hpp	/^  void write(const uint8_t* s, size_t n) {$/;"	f	class:CountingDecorator	typeref:typename:void
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/CountingDecorator.hpp	/^  void write(uint8_t c) {$/;"	f	class:CountingDecorator	typeref:typename:void
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writer.hpp	/^  size_t write(const uint8_t* s, size_t n) {$/;"	f	class:Writer	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writer.hpp	/^  size_t write(uint8_t c) {$/;"	f	class:Writer	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp	/^  size_t write(const uint8_t* s, size_t n) {$/;"	f	class:Writer	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp	/^  size_t write(uint8_t c) {$/;"	f	class:Writer	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/DummyWriter.hpp	/^  size_t write(const uint8_t*, size_t n) {$/;"	f	class:DummyWriter	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/DummyWriter.hpp	/^  size_t write(uint8_t) {$/;"	f	class:DummyWriter	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/PrintWriter.hpp	/^  size_t write(const uint8_t* s, size_t n) {$/;"	f	class:Writer	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/PrintWriter.hpp	/^  size_t write(uint8_t c) {$/;"	f	class:Writer	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StaticStringWriter.hpp	/^  size_t write(const uint8_t* s, size_t n) {$/;"	f	class:StaticStringWriter	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StaticStringWriter.hpp	/^  size_t write(uint8_t c) {$/;"	f	class:StaticStringWriter	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStreamWriter.hpp	/^  size_t write(const uint8_t* s, size_t n) {$/;"	f	class:Writer	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStreamWriter.hpp	/^  size_t write(uint8_t c) {$/;"	f	class:Writer	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStringWriter.hpp	/^  size_t write(const uint8_t* s, size_t n) {$/;"	f	class:Writer	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStringWriter.hpp	/^  size_t write(uint8_t c) {$/;"	f	class:Writer	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  size_t write(const uint8_t* buffer, size_t size) {$/;"	f	class:detail::MemoryPoolPrint	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Variant/ConverterImpl.hpp	/^  size_t write(uint8_t c) {$/;"	f	class:detail::MemoryPoolPrint	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^bool Mits88Disk::write(int address, int value)$/;"	f	class:Mits88Disk	typeref:typename:bool
write	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^bool SIO::write(int address, int value)$/;"	f	class:SIO	typeref:typename:bool
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^bool I2C::write(int address, uint8_t * buffer, int size, int frequency, int timeOutMS)$/;"	f	class:fabgl::I2C	typeref:typename:bool
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^void MC146818::write(int address, uint8_t value)$/;"	f	class:fabgl::MC146818	typeref:typename:void
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^void PC8250::write(int reg, uint8_t value)$/;"	f	class:fabgl::PC8250	typeref:typename:void
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIC8259.cpp	/^void PIC8259::write(int addr, uint8_t value)$/;"	f	class:fabgl::PIC8259	typeref:typename:void
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.cpp	/^void PIT8253::write(int reg, uint8_t value)$/;"	f	class:fabgl::PIT8253	typeref:typename:void
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^void i8042::write(int address, uint8_t value)$/;"	f	class:fabgl::i8042	typeref:typename:void
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  size_t write(const char *str) {$/;"	f	struct:fabgl::Print	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^size_t Terminal::write(const uint8_t * buffer, size_t size)$/;"	f	class:fabgl::Terminal	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^size_t Terminal::write(uint8_t c)$/;"	f	class:fabgl::Terminal	typeref:typename:size_t
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void LineEditor::write(uint8_t c)$/;"	f	class:fabgl::LineEditor	typeref:typename:void
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void Terminal::write(uint8_t c, bool fromISR)$/;"	f	class:fabgl::Terminal	typeref:typename:void
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::write(char const * str)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
write	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^void TerminalController::write(uint8_t c)$/;"	f	class:fabgl::TerminalController	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	template <uint8_t BIT> __attribute__((always_inline)) inline static void writeBit(uint8_t b, cl/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	template <uint8_t BIT> __attribute__((always_inline)) inline static void writeBit(uint8_t b, da/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t /;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) { \/* TODO *\/ }$/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  template <uint8_t BIT> inline static void writeBit(uint8_t b) { \/* TODO *\/ }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	template <uint8_t BIT> inline void writeBit(uint8_t b) {$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:NRF51SPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	template <uint8_t BIT> inline void writeBit(uint8_t b) {$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	template <uint8_t BIT> inline static void writeBit(uint8_t b) {$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	template <uint8_t BIT> inline void writeBit(uint8_t b) {$/;"	f	class:ESP32SPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	template <uint8_t BIT> inline void writeBit(uint8_t b) {$/;"	f	class:ESP8266SPIOutput	typeref:typename:void
writeBit	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	template <uint8_t BIT> inline void writeBit(uint8_t b) {$/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/clockless_apollo3.h	/^	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(FASTLED_REGISTE/;"	f	class:ClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/d51/clockless_arm_d51.h	/^	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(FASTLED_REGISTE/;"	f	class:ClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_arm_k20.h	/^	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(FASTLED_REGISTE/;"	f	class:ClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(FASTLED_/;"	f	class:InlineBlockClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/clockless_block_arm_k20.h	/^	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(FASTLED_/;"	f	class:SixteenWayInlineBlockClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_arm_k66.h	/^	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(FASTLED_REGISTE/;"	f	class:ClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(FASTLED_/;"	f	class:InlineBlockClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/clockless_block_arm_k66.h	/^	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(FASTLED_/;"	f	class:SixteenWayInlineBlockClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h	/^  template<int BITS,int PX> __attribute__ ((always_inline)) inline void writeBits(FASTLED_REGIST/;"	f	class:FlexibleInlineBlockClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h	/^	template<int BITS> __attribute__ ((always_inline)) inline void writeBits(FASTLED_REGISTER uint3/;"	f	class:ClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_arm_sam.h	/^	template<int BITS>  __attribute__ ((always_inline)) inline static void writeBits(FASTLED_REGIST/;"	f	class:ClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/clockless_block_arm_sam.h	/^    template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(FASTL/;"	f	class:InlineBlockClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	template<int BITS> static inline void writeBits(uint16_t w) {$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/stm32/clockless_arm_stm32.h	/^    template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(FASTLED_REGI/;"	f	class:ClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/clockless_block_esp32.h	/^    template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(FASTL/;"	f	class:InlineBlockClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_block_esp8266.h	/^  	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(FASTLE/;"	f	class:InlineBlockClocklessController	typeref:typename:void
writeBits	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^	template<int BITS> __attribute__ ((always_inline)) inline static bool writeBits(FASTLED_REGISTE/;"	f	class:ClocklessController	typeref:typename:bool
writeBitsToBuf	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/rp2040/clockless_arm_rp2040.h	/^    template<int BITS> __attribute__ ((always_inline)) inline static int writeBitsToBuf(int32_t /;"	f	class:ClocklessController	typeref:typename:int
writeBoolean	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  void writeBoolean(bool value) {$/;"	f	class:TextFormatter	typeref:typename:void
writeBoundary	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }$/;"	f	class:P9813Controller	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  void writeByte(uint8_t c) {$/;"	f	class:MsgPackSerializer	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Machine::writeByte(void * context, int address, int value)$/;"	f	class:Machine	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::writeByte(uint16_t addr, uint8_t value)$/;"	f	class:HAL	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  static void writeByte(void * context, int address, int value)   { ((HAL*)context)->writeByte(a/;"	f	class:HAL	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::writeByte(uint8_t data)$/;"	f	class:fabgl::TFTController	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	static void writeByte(uint8_t b) {$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	static void writeByte(uint8_t b, clock_ptr_t clockpin, data_ptr_t datapin)  {$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	static void writeByte(uint8_t b, clock_ptr_t clockpin, data_ptr_t datapin,$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	static void writeByte(uint8_t b, data_ptr_t datapin,$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	void writeByte(uint8_t b) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	static void writeByte(uint8_t b) { \/* TODO *\/ }$/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	static void writeByte(uint8_t b) {$/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^		static void writeByte(uint8_t b) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput::Write	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = S/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^		static void writeByte(uint8_t b) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput::Write	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); SPIX.PUSHR = SPI_PUSH/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); SPIX.DL = b; }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	void inline writeByte(uint8_t b) __attribute__((always_inline)) {$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); NRF_SPI0->TXD = b;/;"	f	class:NRF51SPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        static void writeByte(uint8_t b) {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	static void writeByte(uint8_t b) {$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); SPDR0=b;  shouldWait(/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); SPDR=b;  shouldWait(t/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); SPI0_DATA=b;  shouldW/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); UDR0=b;  shouldWait(t/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); UDR1=b;  shouldWait(t/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	static void writeByte(uint8_t b) {$/;"	f	class:ESP32SPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	static void writeByte(uint8_t b) {$/;"	f	class:ESP8266SPIOutput	typeref:typename:void
writeByte	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	void inline writeByte(uint8_t b) __attribute__((always_inline)) {$/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
writeByteCont	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void writeByteCont(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeByteCont	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void writeByteCont(uint8_t b) __attribute__((always_inline)) { wait(); SPIX.PUSHR = SPI_/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeByteContNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void writeByteContNoWait(uint8_t b) __attribute__((always_inline)) { cli(); SPIX.PUSHR =/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeByteContNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void writeByteContNoWait(uint8_t b) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PU/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeByteContPostWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void writeByteContPostWait(uint8_t b) __attribute__((always_inline)) { cli(); SPIX.PUSHR/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeByteContPostWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void writeByteContPostWait(uint8_t b) __attribute__((always_inline)) { SPIX.PUSHR = SPI_/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeByteNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeByteNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeByteNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeByteNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { SPDR0=b; shouldWait(tru/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeByteNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { SPDR=b; shouldWait(true/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeByteNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { SPI0_DATA=b; shouldWait/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeByteNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { UDR0=b; shouldWait(true/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
writeByteNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { UDR1=b; shouldWait(true/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
writeByteNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }$/;"	f	class:ESP32SPIOutput	typeref:typename:void
writeByteNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }$/;"	f	class:ESP8266SPIOutput	typeref:typename:void
writeBytePostWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait();/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeBytePostWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { cli(); SPIX.PUSHR = S/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytePostWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSH/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytePostWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { SPDR0=b; shouldWait(t/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeBytePostWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { SPDR=b; shouldWait(tr/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeBytePostWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { SPI0_DATA=b; shouldWa/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeBytePostWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { UDR0=b; shouldWait(tr/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
writeBytePostWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { UDR1=b; shouldWait(tr/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
writeBytePostWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait();/;"	f	class:ESP32SPIOutput	typeref:typename:void
writeBytePostWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait();/;"	f	class:ESP8266SPIOutput	typeref:typename:void
writeByteToDisk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Mits88Disk::writeByteToDisk(int value)$/;"	f	class:Mits88Disk	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  void writeBytes(const uint8_t* p, size_t n) {$/;"	f	class:MsgPackSerializer	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	void writeBytes(uint8_t *data, int len) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    template<class D> void writeBytes(uint8_t *data, int len) {$/;"	f	class:NRF51SPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    void writeBytes(uint8_t *data, int len) {$/;"	f	class:NRF51SPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        template<class D> void writeBytes(uint8_t *data, int len) {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        void writeBytes(uint8_t *data, int len) {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:ESP32SPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:ESP32SPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:ESP8266SPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:ESP8266SPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	template <class D> void writeBytes(FASTLED_REGISTER uint8_t *data, int len) {$/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
writeBytes	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	void writeBytes(FASTLED_REGISTER uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }$/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	void writeBytesValue(uint8_t value, int len) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  void writeBytesValue(uint8_t value, int len) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    void writeBytesValue(uint8_t value, int len) {$/;"	f	class:NRF51SPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        void writeBytesValue(uint8_t value, int len) {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:ESP32SPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:ESP8266SPIOutput	typeref:typename:void
writeBytesValue	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	void writeBytesValue(uint8_t value, int len) {$/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	static void writeBytesValueRaw(uint8_t value, int len) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    static void writeBytesValueRaw(uint8_t value, int len) { while(len--) { writeByte(value);  }/;"	f	class:NRF51SPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:ESP32SPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:ESP8266SPIOutput	typeref:typename:void
writeBytesValueRaw	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	static void writeBytesValueRaw(uint8_t value, int len) {$/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
writeChar	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  void writeChar(char c) {$/;"	f	class:TextFormatter	typeref:typename:void
writeCommand	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::writeCommand(uint8_t cmd)$/;"	f	class:fabgl::TFTController	typeref:typename:void
writeData	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::writeData(void * data, size_t size)$/;"	f	class:fabgl::TFTController	typeref:typename:void
writeDecimals	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  void writeDecimals(uint32_t value, int8_t width) {$/;"	f	class:TextFormatter	typeref:typename:void
writeDirectoryLabel	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^void BDOS::writeDirectoryLabel(int drive, uint16_t FCBaddr, int errfunc)$/;"	f	class:BDOS	typeref:typename:void
writeFloat	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  void writeFloat(T value) {$/;"	f	class:TextFormatter	typeref:typename:void
writeGPIO	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::writeGPIO(int gpio, bool value, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:void
writeHeader	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	void writeHeader() {$/;"	f	class:SM16716Controller	typeref:typename:void
writeIO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^void Machine::writeIO(void * context, int address, int value)$/;"	f	class:Machine	typeref:typename:void
writeIO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::writeIO(uint16_t addr, uint8_t value)$/;"	f	class:HAL	typeref:typename:void
writeIO	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  static void writeIO(void * context, int address, int value)     { ((HAL*)context)->writeIO(add/;"	f	class:HAL	typeref:typename:void
writeInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {$/;"	f	class:TextFormatter	typeref:typename:enable_if<is_signed<T>::value>::type
writeInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {$/;"	f	class:TextFormatter	typeref:typename:enable_if<is_unsigned<T>::value>::type
writeInteger	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  void writeInteger(T value) {$/;"	f	class:MsgPackSerializer	typeref:typename:void
writeLed	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	inline void writeLed(uint8_t brightness, uint8_t b0, uint8_t b1, uint8_t b2) __attribute__((alw/;"	f	class:APA102Controller	typeref:typename:void
writeLed	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	inline void writeLed(uint8_t brightness, uint8_t b0, uint8_t b1, uint8_t b2) __attribute__((alw/;"	f	class:SK9822Controller	typeref:typename:void
writeLed	examples/test/.pio/libdeps/esp32dev/FastLED/src/chipsets.h	/^	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {$/;"	f	class:P9813Controller	typeref:typename:void
writeLeds	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  void writeLeds() {$/;"	f	class:JFixtureAddr	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER>  __attribute__((noinline)) void writePixels/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER>/;"	f	class:NOPSPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER>/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER>/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER>/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER>/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER>/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORD/;"	f	class:NRF51SPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB/;"	f	class:NRF52SPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER>/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER>/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER>/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER>/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER>  __attribute__((noinline)) void writePixels/;"	f	class:ESP32SPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER>  __attribute__((noinline)) void writePixels/;"	f	class:ESP8266SPIOutput	typeref:typename:void
writePixels	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER>/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
writePort	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::writePort(void * context, int address, uint8_t value)$/;"	f	class:Machine	typeref:typename:void
writePort	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::writePort(int port, void const * buffer, size_t length, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:void
writePort	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  void writePort(int port, uint8_t value, uint8_t hwAddr = 0)            { writeReg(MCP_OLAT + p/;"	f	class:fabgl::MCP23S17	typeref:typename:void
writePort16	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.h	/^  void writePort16(uint16_t value, uint8_t hwAddr = 0)                   { writeReg16(MCP_OLAT, /;"	f	class:fabgl::MCP23S17	typeref:typename:void
writePtr	examples/test/lib/JFixLib/src/Event/JEnv.h	/^    float* writePtr = nullptr;$/;"	m	class:JEnv	typeref:typename:float *
writePtr_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp	/^  char* writePtr_;$/;"	m	class:StringMover	typeref:typename:char *
writeRGB	examples/test/lib/JFixLib/src/Event/Event.h	/^  void (*writeRGB)(int, float, float, float, char, CRGB **) = nullptr;$/;"	m	class:Event	typeref:typename:void (*)(int,float,float,float,char,CRGB **)
writeRGB	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  static void writeRGB(int id, float r, float g, float b, char channel,$/;"	f	class:JFixtureAddr	typeref:typename:void
writeRGBHard	examples/test/lib/JFixLib/src/JFixtureAddr.h	/^  void writeRGBHard(int id, float r, float g, float b, char channel,$/;"	f	class:JFixtureAddr	typeref:typename:void
writeRGBPtr	examples/test/lib/JFixLib/src/JFixtureGraphics.h	/^  void (*writeRGBPtr)(int, float, float, float, char, CRGB **) =$/;"	m	class:JFixtureGraphics	typeref:typename:void (*)(int,float,float,float,char,CRGB **)
writeRaw	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  void writeRaw(char c) {$/;"	f	class:TextFormatter	typeref:typename:void
writeRaw	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  void writeRaw(const char (&s)[N]) {$/;"	f	class:TextFormatter	typeref:typename:void
writeRaw	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  void writeRaw(const char* begin, const char* end) {$/;"	f	class:TextFormatter	typeref:typename:void
writeRaw	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  void writeRaw(const char* s) {$/;"	f	class:TextFormatter	typeref:typename:void
writeRaw	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  void writeRaw(const char* s, size_t n) {$/;"	f	class:TextFormatter	typeref:typename:void
writeReg	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/MOS6561.cpp	/^void MOS6561::writeReg(int reg, int value)$/;"	f	class:MOS6561	typeref:typename:void
writeReg	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.cpp	/^bool DS3231::writeReg(int reg, int value)$/;"	f	class:fabgl::DS3231	typeref:typename:bool
writeReg	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::writeReg(uint8_t addr, uint8_t value, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:void
writeReg	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/VIA6522.cpp	/^void VIA6522::writeReg(int reg, int value)$/;"	f	class:fabgl::VIA6522	typeref:typename:void
writeReg16	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^void MCP23S17::writeReg16(uint8_t addr, uint16_t value, uint8_t hwAddr)$/;"	f	class:fabgl::MCP23S17	typeref:typename:void
writeRegByte	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  void writeRegByte(int reg, uint8_t value)   { state.registers.byte[reg] = value; }$/;"	f	class:fabgl::Z80	typeref:typename:void
writeRegWord	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/Z80.h	/^  void writeRegWord(int reg, uint16_t value)  { state.registers.word[reg] = value; }$/;"	f	class:fabgl::Z80	typeref:typename:void
writeRow	examples/test/.pio/libdeps/esp32dev/FabGL/tools/fonttool/ttf2header.py	/^def writeRow(file, width, y, data):$/;"	f
writeScreen	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgacontroller.cpp	/^void VGAController::writeScreen(Rect const & rect, RGB222 * srcBuf)$/;"	f	class:fabgl::VGAController	typeref:typename:void
writeStatusLedPtr	examples/test/lib/JFixLib/src/JFixture.h	/^  void (*writeStatusLedPtr)(char, char);$/;"	m	class:JFixture	typeref:typename:void (*)(char,char)
writeString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  void writeString(const char* value) {$/;"	f	class:TextFormatter	typeref:typename:void
writeString	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  void writeString(const char* value, size_t n) {$/;"	f	class:TextFormatter	typeref:typename:void
writeVideoMemory16	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::writeVideoMemory16(void * context, int address, uint16_t value)$/;"	f	class:Machine	typeref:typename:void
writeVideoMemory8	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^void Machine::writeVideoMemory8(void * context, int address, uint8_t value)$/;"	f	class:Machine	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.h	/^  static void writeWord(void * context, int addr, int value) { writeByte(context, addr, value & /;"	f	class:Machine	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^void HAL::writeWord(uint16_t addr, uint16_t value)$/;"	f	class:HAL	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.h	/^  static void writeWord(void * context, int addr, int value)      { ((HAL*)context)->writeWord(a/;"	f	class:HAL	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^void TFTController::writeWord(uint16_t data)$/;"	f	class:fabgl::TFTController	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_bitbang.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w/;"	f	class:AVRSoftwareSPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_nop.h	/^	void writeWord(uint16_t w) { \/* TODO *\/ }$/;"	f	class:NOPSPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/fastspi_ref.h	/^	static void writeWord(uint16_t w) { \/* TODO *\/ }$/;"	f	class:REFHardwareSPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/apollo3/fastspi_apollo3.h	/^	static void writeWord(uint16_t w) {$/;"	f	class:APOLLO3HardwareSPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^		static void writeWord(uint16_t w) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput::Write	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = /;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^		static void writeWord(uint16_t w) __attribute__((always_inline)) {$/;"	f	class:ARMHardwareSPIOutput::Write	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); SPIX.PUSHR = SPI_PUS/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/kl26/fastspi_arm_kl26.h	/^  static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h	/^	void inline writeWord(uint16_t w) __attribute__((always_inline)) {$/;"	f	class:Teensy4HardwareSPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf51/fastspi_arm_nrf51.h	/^    static void writeWord(uint16_t w) __attribute__((always_inline)){ writeByte(w>>8); writeByte/;"	f	class:NRF51SPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/nrf52/fastspi_arm_nrf52.h	/^        static void writeWord(uint16_t w) {$/;"	f	class:NRF52SPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/sam/fastspi_arm_sam.h	/^	static void writeWord(uint16_t w) {$/;"	f	class:SAMHardwareSPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w/;"	f	class:AVRHardwareSPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w/;"	f	class:AVRUSART0SPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/avr/fastspi_avr.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w/;"	f	class:AVRUSART1SPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/32/fastspi_esp32.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w/;"	f	class:ESP32SPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/fastspi_esp8266.h	/^	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w/;"	f	class:ESP8266SPIOutput	typeref:typename:void
writeWord	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/fastspi_ardunio_core.h	/^	void inline writeWord(uint16_t w) __attribute__((always_inline)) {$/;"	f	class:ArdunioCoreSPIOutput	typeref:typename:void
writeWordCont	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void writeWordCont(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSH/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeWordCont	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void writeWordCont(uint16_t w) __attribute__((always_inline)) { wait(); SPIX.PUSHR = SPI/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeWordContNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void writeWordContNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR /;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeWordContNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void writeWordContNoWait(uint16_t w) __attribute__((always_inline)) { SPIX.PUSHR = SPI_P/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeWordNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k20/fastspi_arm_k20.h	/^	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SP/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writeWordNoWait	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/arm/k66/fastspi_arm_k66.h	/^	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR/;"	f	class:ARMHardwareSPIOutput	typeref:typename:void
writer_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp	/^  CountingDecorator<TWriter> writer_;$/;"	m	class:TextFormatter	typeref:typename:CountingDecorator<TWriter>
writer_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp	/^  CountingDecorator<TWriter> writer_;$/;"	m	class:MsgPackSerializer	typeref:typename:CountingDecorator<TWriter>
writer_	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/CountingDecorator.hpp	/^  TWriter writer_;$/;"	m	class:CountingDecorator	typeref:typename:TWriter
x	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^    double x;$/;"	m	struct:BallsTest::Ball	typeref:typename:double
x	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^    double x;$/;"	m	struct:BallsTest::Ball	typeref:typename:double
x	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^    double x;$/;"	m	struct:BallsTest::Ball	typeref:typename:double
x	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  volatile int16_t   x;$/;"	m	struct:fabgl::Sprite	typeref:typename:volatile int16_t
xlat_ids	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t xlat_ids[] = {   9,  9,  9,  9,  7,  7, 25, 26,  9,  9,  9,  9,  7,  7, 25, 50,$/;"	v	namespace:fabgl	typeref:typename:uint8_t[]	file:
xlat_opcode_id	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8086.cpp	/^static uint8_t    * regs8, i_mod_size, i_d, i_w, raw_opcode_id, xlat_opcode_id, extra, rep_mode,/;"	v	namespace:fabgl	typeref:typename:uint8_t	file:
xspeed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int xspeed;$/;"	m	struct:Race::Player	typeref:typename:int
xsyscode	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/bios.cpp	/^    uint16_t xsyscode;  \/\/ 0xffff = don't return$/;"	m	struct:BIOS::getKeyFromBuffer::Ext2XT	typeref:typename:uint16_t	file:
y	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^    double y;$/;"	m	struct:BallsTest::Ball	typeref:typename:double
y	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^    double y;$/;"	m	struct:BallsTest::Ball	typeref:typename:double
y	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^    double y;$/;"	m	struct:BallsTest::Ball	typeref:typename:double
y	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.h	/^  volatile int16_t   y;$/;"	m	struct:fabgl::Sprite	typeref:typename:volatile int16_t
year	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/DS3231.h	/^  int16_t year;         \/**< 1900..9999 (2000..2099 for DS3231, and 1900..2038 using timestamp(/;"	m	struct:fabgl::DateTime	typeref:typename:int16_t
yield	examples/test/.pio/libdeps/esp32dev/FastLED/src/FastLED.cpp	/^extern "C" void yield(void) { }$/;"	f	typeref:typename:void
yspeed	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/ClassicRacer/race.h	/^    int yspeed;$/;"	m	struct:Race::Player	typeref:typename:int
zero_flag	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8080.h	/^    uint8_t zero_flag;$/;"	m	struct:fabgl::i8080::__anon81886eed0308	typeref:typename:uint8_t
~AutoSemaphore	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  ~AutoSemaphore()                                        { xSemaphoreGive(m_mutex); }$/;"	f	struct:fabgl::AutoSemaphore
~BDOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BDOS.cpp	/^BDOS::~BDOS()$/;"	f	class:BDOS
~BIOS	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/BIOS.cpp	/^BIOS::~BIOS()$/;"	f	class:BIOS
~BallsTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/ballstest.h	/^  virtual ~BallsTest()$/;"	f	class:BallsTest
~BallsTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/ballstest.h	/^  virtual ~BallsTest()$/;"	f	class:BallsTest
~BallsTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/ballstest.h	/^  virtual ~BallsTest()$/;"	f	class:BallsTest
~BasicJsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp	/^  ~BasicJsonDocument() {$/;"	f	class:BasicJsonDocument
~Bitmap	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^Bitmap::~Bitmap()$/;"	f	class:fabgl::Bitmap
~BitmappedDisplayController	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^BitmappedDisplayController::~BitmappedDisplayController()$/;"	f	class:fabgl::BitmappedDisplayController
~CCP	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/CCP.cpp	/^CCP::~CCP()$/;"	f	class:CCP
~CVBSPalettedController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/cvbspalettedcontroller.cpp	/^CVBSPalettedController::~CVBSPalettedController()$/;"	f	class:fabgl::CVBSPalettedController
~CollisionDetector	examples/test/.pio/libdeps/esp32dev/FabGL/src/collisiondetector.cpp	/^CollisionDetector::~CollisionDetector()$/;"	f	class:fabgl::CollisionDetector
~ConfDialogApp	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/AnsiTerminal/confdialog.h	/^  ~ConfDialogApp() {$/;"	f	struct:ConfDialogApp
~Delegate	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.h	/^  ~Delegate() {$/;"	f	struct:fabgl::Delegate
~Event	examples/test/lib/JFixLib/src/Event/Event.cpp	/^Event::~Event() {$/;"	f	class:Event
~FileBrowser	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^FileBrowser::~FileBrowser()$/;"	f	class:fabgl::FileBrowser
~FileBrowserForm	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.h	/^  ~FileBrowserForm() {$/;"	f	struct:fabgl::FileBrowserForm
~GraphicsAdapter	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/graphicsadapter.cpp	/^GraphicsAdapter::~GraphicsAdapter()$/;"	f	class:fabgl::GraphicsAdapter
~HAL	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/HAL.cpp	/^HAL::~HAL()$/;"	f	class:HAL
~I2C	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/tsi2c.cpp	/^I2C::~I2C()$/;"	f	class:fabgl::I2C
~ICMP	examples/test/.pio/libdeps/esp32dev/FabGL/src/network/ICMP.cpp	/^ICMP::~ICMP()$/;"	f	class:fabgl::ICMP
~IECDrive	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/IECDrive.cpp	/^IECDrive::~IECDrive()$/;"	f	class:IECDrive
~InputBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/inputbox.cpp	/^InputBox::~InputBox()$/;"	f	class:fabgl::InputBox
~InterruptLock	examples/test/.pio/libdeps/esp32dev/FastLED/src/platforms/esp/8266/clockless_esp8266.h	/^			~InterruptLock() {$/;"	f	struct:ClocklessController::showRGBInternal::InterruptLock
~JEnv	examples/test/lib/JFixLib/src/Event/JEnv.cpp	/^JEnv::~JEnv() {}$/;"	f	class:JEnv
~JWavetable	examples/test/lib/JFixLib/src/Event/JWavetable.cpp	/^JWavetable::~JWavetable(){$/;"	f	class:JWavetable
~JsonDocument	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp	/^  ~JsonDocument() {}$/;"	f	class:JsonDocument
~Keyboard	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/keyboard.cpp	/^Keyboard::~Keyboard()$/;"	f	class:fabgl::Keyboard
~LightMemoryPool	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^LightMemoryPool::~LightMemoryPool()$/;"	f	class:fabgl::LightMemoryPool
~LineEditor	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^LineEditor::~LineEditor()$/;"	f	class:fabgl::LineEditor
~MC146818	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/MC146818.cpp	/^MC146818::~MC146818()$/;"	f	class:fabgl::MC146818
~MCP23S17	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/MCP23S17.cpp	/^MCP23S17::~MCP23S17()$/;"	f	class:fabgl::MCP23S17
~Machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^Machine::~Machine()$/;"	f	class:Machine
~Machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/machine.cpp	/^Machine::~Machine()$/;"	f	class:Machine
~Machine	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^Machine::~Machine()$/;"	f	class:Machine
~MachineConf	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.cpp	/^MachineConf::~MachineConf()$/;"	f	class:MachineConf
~MachineConfItem	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/PCEmulator/mconf.h	/^  ~MachineConfItem()$/;"	f	struct:MachineConfItem
~Mits88Disk	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/Altair8800/src/machine.cpp	/^Mits88Disk::~Mits88Disk()$/;"	f	class:Mits88Disk
~Mouse	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/mouse.cpp	/^Mouse::~Mouse()$/;"	f	class:fabgl::Mouse
~PC8250	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PC8250.cpp	/^PC8250::~PC8250()$/;"	f	class:fabgl::PC8250
~PIT8253	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/PIT8253.cpp	/^PIT8253::~PIT8253()$/;"	f	class:fabgl::PIT8253
~PRGCreator	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/VIC20/src/machine.cpp	/^PRGCreator::~PRGCreator()$/;"	f	class:PRGCreator
~PS2Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.cpp	/^PS2Controller::~PS2Controller()$/;"	f	class:fabgl::PS2Controller
~PS2Device	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.cpp	/^PS2Device::~PS2Device()$/;"	f	class:fabgl::PS2Device
~PS2DeviceLock	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2device.h	/^  ~PS2DeviceLock() { m_PS2Device->unlock(); }$/;"	f	struct:fabgl::PS2DeviceLock
~PS2PortAutoDisableRX	examples/test/.pio/libdeps/esp32dev/FabGL/src/comdrivers/ps2controller.h	/^  ~PS2PortAutoDisableRX() {$/;"	f	struct:fabgl::PS2PortAutoDisableRX
~PolygonsTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/polygonstest.h	/^  virtual ~PolygonsTest()$/;"	f	class:PolygonsTest
~PolygonsTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/polygonstest.h	/^  virtual ~PolygonsTest()$/;"	f	class:PolygonsTest
~PolygonsTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/polygonstest.h	/^  virtual ~PolygonsTest()$/;"	f	class:PolygonsTest
~SSD1306Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/SSD1306Controller.cpp	/^SSD1306Controller::~SSD1306Controller()$/;"	f	class:fabgl::SSD1306Controller
~Scene	examples/test/.pio/libdeps/esp32dev/FabGL/src/scene.cpp	/^Scene::~Scene()$/;"	f	class:fabgl::Scene
~SoundGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.cpp	/^SoundGenerator::~SoundGenerator()$/;"	f	class:fabgl::SoundGenerator
~Sprite	examples/test/.pio/libdeps/esp32dev/FabGL/src/displaycontroller.cpp	/^Sprite::~Sprite()$/;"	f	class:fabgl::Sprite
~SpritesTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ILI9341_TFT/240x320/DoubleBuffer/spritestest.h	/^  virtual ~SpritesTest()$/;"	f	class:SpritesTest
~SpritesTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/ST7789_TFT/240x240/DoubleBuffer/spritestest.h	/^  virtual ~SpritesTest()$/;"	f	class:SpritesTest
~SpritesTest	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/DoubleBuffer/spritestest.h	/^  virtual ~SpritesTest()$/;"	f	class:SpritesTest
~StringList	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabutils.cpp	/^StringList::~StringList()$/;"	f	class:fabgl::StringList
~Supervisor	examples/test/.pio/libdeps/esp32dev/FabGL/examples/VGA/MultitaskingCPM/src/supervisor.cpp	/^Supervisor::~Supervisor()$/;"	f	class:Supervisor
~TFTController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/TFTControllerGeneric.cpp	/^TFTController::~TFTController()$/;"	f	class:fabgl::TFTController
~Terminal	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^Terminal::~Terminal()$/;"	f	class:fabgl::Terminal
~TerminalController	examples/test/.pio/libdeps/esp32dev/FabGL/src/terminal.cpp	/^TerminalController::~TerminalController()$/;"	f	class:fabgl::TerminalController
~VGA2Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga2controller.cpp	/^VGA2Controller::~VGA2Controller()$/;"	f	class:fabgl::VGA2Controller
~VGA4Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga4controller.cpp	/^VGA4Controller::~VGA4Controller()$/;"	f	class:fabgl::VGA4Controller
~VGA8Controller	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vga8controller.cpp	/^VGA8Controller::~VGA8Controller()$/;"	f	class:fabgl::VGA8Controller
~VGAPalettedController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgapalettedcontroller.cpp	/^VGAPalettedController::~VGAPalettedController()$/;"	f	class:fabgl::VGAPalettedController
~VGATextController	examples/test/.pio/libdeps/esp32dev/FabGL/src/dispdrivers/vgatextcontroller.cpp	/^VGATextController::~VGATextController()$/;"	f	class:fabgl::VGATextController
~WaveformGenerator	examples/test/.pio/libdeps/esp32dev/FabGL/src/devdrivers/soundgen.h	/^  virtual ~WaveformGenerator() { }$/;"	f	class:fabgl::WaveformGenerator
~Writer	examples/test/.pio/libdeps/esp32dev/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp	/^  ~Writer() {$/;"	f	class:Writer
~i8042	examples/test/.pio/libdeps/esp32dev/FabGL/src/emudevs/i8042.cpp	/^i8042::~i8042()$/;"	f	class:fabgl::i8042
~uiApp	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiApp::~uiApp()$/;"	f	class:fabgl::uiApp
~uiButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiButton::~uiButton()$/;"	f	class:fabgl::uiButton
~uiCheckBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiCheckBox::~uiCheckBox()$/;"	f	class:fabgl::uiCheckBox
~uiColorBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiColorBox::~uiColorBox()$/;"	f	class:fabgl::uiColorBox
~uiColorComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiColorComboBox::~uiColorComboBox()$/;"	f	class:fabgl::uiColorComboBox
~uiComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiComboBox::~uiComboBox()$/;"	f	class:fabgl::uiComboBox
~uiControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiControl::~uiControl()$/;"	f	class:fabgl::uiControl
~uiCustomComboBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiCustomComboBox::~uiCustomComboBox()$/;"	f	class:fabgl::uiCustomComboBox
~uiCustomListBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiCustomListBox::~uiCustomListBox()$/;"	f	class:fabgl::uiCustomListBox
~uiEvtHandler	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiEvtHandler::~uiEvtHandler()$/;"	f	class:fabgl::uiEvtHandler
~uiFrame	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiFrame::~uiFrame()$/;"	f	class:fabgl::uiFrame
~uiImage	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiImage::~uiImage()$/;"	f	class:fabgl::uiImage
~uiLabel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiLabel::~uiLabel()$/;"	f	class:fabgl::uiLabel
~uiObject	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiObject::~uiObject()$/;"	f	class:fabgl::uiObject
~uiPaintBox	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiPaintBox::~uiPaintBox()$/;"	f	class:fabgl::uiPaintBox
~uiPanel	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiPanel::~uiPanel()$/;"	f	class:fabgl::uiPanel
~uiProgressBar	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiProgressBar::~uiProgressBar()$/;"	f	class:fabgl::uiProgressBar
~uiScrollableControl	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiScrollableControl::~uiScrollableControl()$/;"	f	class:fabgl::uiScrollableControl
~uiSlider	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiSlider::~uiSlider()$/;"	f	class:fabgl::uiSlider
~uiSplitButton	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiSplitButton::~uiSplitButton()$/;"	f	class:fabgl::uiSplitButton
~uiTextEdit	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiTextEdit::~uiTextEdit()$/;"	f	class:fabgl::uiTextEdit
~uiWindow	examples/test/.pio/libdeps/esp32dev/FabGL/src/fabui.cpp	/^uiWindow::~uiWindow()$/;"	f	class:fabgl::uiWindow
